/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:45:54 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      char[] charArray0 = new char[5];
      StringUtils.join(charArray0, 'W');
      StringUtils.removeEnd("+r}#,&eG^", "+r}#,&eG^");
      StringUtils.leftPad("", 8210, '\u0017');
      StringUtils.isAlphanumericSpace("hashCode");
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.repeat("m", 9996);
      StringUtils.trimToNull("m");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      StringUtils.join(charArray0, '|');
      charSequenceArray0[0] = (CharSequence) "|";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)76;
      StringUtils.toString(byteArray0, (String) null);
      charSequenceArray0[3] = (CharSequence) "\uFFFD/L";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) string0;
      StringUtils.indexOfAny((CharSequence) "m", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.repeat(" M}oant91cVb", "Locale must not be nullq*[?c6&5HpUH{", 528);
      // Undeclared exception!
      StringUtils.isAsciiPrintable(string1);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.repeat("D[z\"a1nU", 1866);
      // Undeclared exception!
      StringUtils.normalizeSpace(string0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.repeat("D[z\"a1nU", 1866);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)68;
      StringUtils.join(byteArray0, 'G', (int) (byte)68, (int) (byte)68);
      StringUtils.isNumeric("");
      // Undeclared exception!
      StringUtils.containsWhitespace(string0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 1);
      assertEquals(0, int0);
      
      StringUtils.isAlpha("");
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      StringUtils.join(longArray0, '9', 0, 1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.substringBefore(" ", "eKNV10dx%gC'Ig");
      StringUtils.joinWith(" ", charSequenceArray0);
      StringUtils.substringBetween("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", " ", " ");
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.repeat(" ", 8192);
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) null;
      StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      StringUtils.repeat('N', (int) 'N');
      StringUtils.countMatches((CharSequence) "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", (CharSequence) "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
      StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      StringUtils.defaultString("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
      StringUtils.trimToNull(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      char[] charArray0 = new char[23];
      charArray0[3] = 'N';
      charArray0[14] = 'N';
      charArray0[6] = 'N';
      StringUtils.join(charArray0, '\u0000', 1, 8);
      StringUtils.defaultIfEmpty("|7* Ug:onF", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
      StringUtils.substringsBetween("?!FrDSj", (String) null, "Hf(~__0G'Z");
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      StringUtils.remove("!]L]L]W", '2');
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "!]L]L]W";
      stringArray0[2] = "!]L]L]W";
      stringArray0[3] = "!]L]L]W";
      stringArray0[4] = "!]L]L]W";
      stringArray0[5] = "!]L]L]W";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.chomp(" ");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "!]L]L]W");
      StringUtils.chomp(" ");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "!]L]L]W", 4298);
      StringUtils.lastIndexOf((CharSequence) "!]L]L]W", (-143));
      StringUtils.capitalize("!]L]L]W");
      StringUtils.lastIndexOf((CharSequence) "!]L]L]W", 4298);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '2';
      StringUtils.containsNone((CharSequence) "!]L]L]W", charArray0);
      StringUtils.getCommonPrefix(stringArray1);
      StringUtils.substringBefore("Enq7VlGu[:/GEnq7VlGu[:/G", 4310);
      StringUtils.indexOf((CharSequence) "!]L]L]W", (-143), (-143));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot clone Cloneable type ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      StringUtils.remove("!]L]L]W", '2');
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "!]L]L]W";
      stringArray0[2] = "!]L]L]W";
      stringArray0[3] = "!]L]L]W";
      stringArray0[4] = "!]L]L]W";
      stringArray0[5] = "!]L]L]W";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.chomp(" ");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "!]L]L]W");
      StringUtils.chomp(" ");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "!]L]L]W", 4298);
      StringUtils.lastIndexOf((CharSequence) "!]L]L]W", (-143));
      StringUtils.capitalize("!]L]L]W");
      StringUtils.lastIndexOf((CharSequence) "!]L]L]W", 4298);
      StringUtils.getCommonPrefix(stringArray1);
      StringUtils.substringBefore("Enq7VlGu[:/GEnq7VlGu[:/G", 4310);
      StringUtils.indexOf((CharSequence) "!]L]L]W", (-143), (-143));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot clone Cloneable type ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are";
      String string2 = StringUtils.repeat("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 129);
      StringUtils.ordinalIndexOf(string2, string2, 12);
      // Undeclared exception!
      StringUtils.countMatches((CharSequence) string2, 'w');
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.remove("GX7}OjlfE|L_#f;F~", 'w');
      StringUtils.containsAny((CharSequence) "GX7}OjlfE|L_#f;F~", (CharSequence[]) stringArray0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4758);
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)314;
      shortArray0[3] = (short) (-228);
      shortArray0[4] = (short) (-700);
      StringUtils.join(shortArray0, '=', Integer.MAX_VALUE, (-30));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '~', (int) (short) (-228), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -228
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      String string0 = StringUtils.rightPad("", 8192, "");
      String string1 = StringUtils.substringBefore(string0, 8192);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) string0;
      // Undeclared exception!
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "-9z\u0002", (CharSequence) "", 959);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      StringUtils.getIfEmpty("", supplier0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Search and Replace array lengths don't match: Search and Replace array lengths don't match: #";
      stringArray0[1] = "f%XIIr*RZ(^{0z^";
      stringArray0[2] = "N0";
      stringArray0[3] = "j4L7gfyS !m7d3MY,<s";
      stringArray0[4] = "u:y yutf 1[";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.repeat('7', (-2023));
      StringUtils.isAsciiPrintable("");
      StringUtils.indexOfIgnoreCase((CharSequence) "f%XIIr*RZ(^{0z^", (CharSequence) "N0", (-2023));
      StringUtils.isMixedCase("");
      StringUtils.stripStart("u:y yutf 1[", "Search and Replace array lengths don't match: Search and Replace array lengths don't match: #");
      StringUtils.defaultIfBlank("}}org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound au=(Quo7)`B+'}#%O6IsM~;F0j", "");
      StringUtils.indexOfAny((CharSequence) "u:y yutf 1[", (CharSequence[]) stringArray0);
      StringUtils.normalizeSpace("N0");
      StringUtils.indexOf((CharSequence) "}}org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound au=(Quo7)`B+'}#%O6IsM~;F0j", 59);
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '<';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      StringUtils.indexOfAnyBut((CharSequence) "u:y yutf 1[", charArray0);
      StringUtils.removeEnd("$Q!KW+8XG'g", "StdIo_System_In");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: #", (CharSequence) "$Q!KW+8XG'g", 59);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "-9z\u0002");
      StringUtils.getLevenshteinDistance((CharSequence) "-9z\u0002", (CharSequence) "", 5);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '8';
      StringUtils.indexOfAny((CharSequence) "", charArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.repeat('L', 2587);
      StringUtils.isAllUpperCase(string0);
      StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      // Undeclared exception!
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'd';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      StringUtils.join(charArray0, 'Z');
      charSequenceArray0[0] = (CharSequence) "ZZZZdZZZZZZZZ";
      StringUtils.leftPad((String) null, 2147483645, 'd');
      charSequenceArray0[1] = (CharSequence) null;
      StringUtils.substring((String) null, 2147483645, (-814));
      charSequenceArray0[2] = (CharSequence) null;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      StringUtils.join(booleanArray0, 'o', 2147483645, (-814));
      charSequenceArray0[3] = (CharSequence) "";
      String string0 = StringUtils.repeat('<', 2238);
      StringUtils.appendIfMissingIgnoreCase("", string0, charSequenceArray0);
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.isAllEmpty(charSequenceArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '<';
      doubleArray0[1] = 0.3524743230625584;
      doubleArray0[2] = (double) 2238;
      doubleArray0[3] = (double) (-814);
      doubleArray0[4] = (double) 'd';
      StringUtils.join(doubleArray0, 'Q', 1641, (-942));
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)1;
      StringUtils.join(byteArray0, 'G', (int) (byte)0, (int) (byte)1);
      StringUtils.isNumeric("0");
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-109);
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)44;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (-2572L);
      longArray0[5] = (long) (byte) (-109);
      longArray0[6] = (long) (byte)80;
      StringUtils.join(longArray0, '/', (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)1;
      StringUtils.join(byteArray0, 'G', (int) (byte)0, (int) (byte)1);
      StringUtils.isNumeric("0");
      StringUtils.containsWhitespace("0");
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      StringUtils.getJaroWinklerDistance("tdO}QVV,", "tdO}QVV,");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("tdO}QVV,", "}", 114);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      StringUtils.ordinalIndexOf("oY{:", "oY{:", 1);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      StringUtils.chomp("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      StringUtils.contains((CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", (CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      StringUtils.wrapIfMissing("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", '\'');
      StringUtils.ordinalIndexOf("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", 4);
      StringUtils.remove("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", '\'');
      StringUtils.countMatches((CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", (CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      String string0 = StringUtils.CR;
      StringUtils.indexOf((CharSequence) "'org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender'", (CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      StringUtils.join(booleanArray0, 'I');
      StringUtils.isAllUpperCase("'org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender'");
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      StringUtils.deleteWhitespace("?");
      StringUtils.wrapIfMissing("?", "?");
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'x', 40, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'L';
      charArray0[2] = '*';
      charArray0[3] = '5';
      charArray0[4] = 's';
      charArray0[5] = '6';
      StringUtils.join(charArray0, 'j');
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "MjLj*j5jsj6";
      charSequenceArray0[2] = (CharSequence) "MjLj*j5jsj6";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "MjLj*j5jsj6";
      StringUtils.rightPad("MjLj*j5jsj6", 65, ">");
      charSequenceArray0[5] = (CharSequence) "MjLj*j5jsj6>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.removeEnd("", "&f=qrUvQ");
      String string0 = StringUtils.leftPad("Minimum abbreviation width with offset is %d9A8 h4z+d_DB|)qbz+q", 8192, 's');
      StringUtils.getLevenshteinDistance(charSequenceArray0[3], (CharSequence) "");
      StringUtils.indexOfAny(charSequenceArray0[4], charArray0);
      StringUtils.rightPad(string0, 8192, "[S");
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      StringUtils.removeFirst("maxWih cannot Je negative", "maxWih cannot Je negative");
      StringUtils.strip("");
      StringUtils.lastIndexOf((CharSequence) "maxWih cannot Je negative", 97, 603);
      StringUtils.substringBetween("", "", "Display name '%s' %s");
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      StringUtils.substringBeforeLast("Strings must not be null", (String) null);
      String string0 = StringUtils.rightPad("Strings must not be null", 1216, "Strings must not be null");
      StringUtils.indexOf((CharSequence) "Strings must not be null", 27, 1216);
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Display name '%s' %s", "Display name '%s' %s", 2445);
      StringUtils.isAllBlank(stringArray0);
      StringUtils.indexOfDifference((CharSequence) "value must not be empty", (CharSequence) "Display name '%s' %s");
      String[] stringArray1 = StringUtils.split("Display name '%s' %s");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      StringUtils.join(charArray0, 'L');
      StringUtils.isAnyBlank(stringArray1);
      StringUtils.removeEnd("offset cannot be negative", "LLL");
      StringUtils.leftPad("", 8192, 'L');
      StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      StringUtils.stripStart("offset cannot be negative", "");
      StringUtils.unwrap("LLL", 'L');
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = "*9u$q@o4N)}SBhg";
      int int0 = 2147483615;
      // Undeclared exception!
      StringUtils.repeat("*9u$q@o4N)}SBhg", 2147483615);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.isAlpha("Qn");
      StringUtils.chomp("#!;KZ&sZ`U}S=t\u0000");
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      StringUtils.remove("-0]?5,<R#' k=|#r~In", 'k');
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '-';
      StringUtils.indexOfAnyBut((CharSequence) "-0]?5,<R#' k=|#r~In", charArray0);
      StringUtils.containsAny((CharSequence) "-0]?5,<R#' =|#r~In", charArray0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      StringUtils.stripToNull("?");
      StringUtils.remove("?", ']');
      StringUtils.wrapIfMissing("?", "?");
      StringUtils.trimToNull("~ccbpeo9h%,-Pds3T");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) ']';
      floatArray0[1] = (float) ']';
      floatArray0[2] = (float) ']';
      floatArray0[3] = (float) ']';
      StringUtils.join(floatArray0, 'a', Integer.MAX_VALUE, (-1918));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      stringArray0[2] = "~ccbpeo9h%,-Pds3T";
      stringArray0[3] = "";
      stringArray0[4] = "~ccbpeo9h%,-Pds3T";
      stringArray0[5] = "~ccbpeo9h%,-Pds3T";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.join((Object[]) stringArray0, 'a', (-1918), (-1918));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("nk- ");
      assertEquals("nk- ", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "nk- ";
      objectArray0[1] = (Object) "nk- ";
      objectArray0[2] = (Object) "nk- ";
      objectArray0[3] = (Object) "nk- ";
      objectArray0[4] = (Object) "nk- ";
      objectArray0[5] = (Object) "nk- ";
      objectArray0[6] = (Object) "nk- ";
      objectArray0[7] = (Object) "nk- ";
      objectArray0[8] = (Object) "nk- ";
      StringUtils.join(objectArray0, '$');
      StringUtils.indexOfDifference((CharSequence) "nk- ", (CharSequence) "nk- ");
      String string1 = StringUtils.repeat('$', 2179);
      StringUtils.isAllUpperCase("nk- ");
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
      StringUtils.stripToEmpty("nk- $nk- $nk- $nk- $nk- $nk- $nk- $nk- $nk- ");
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      StringUtils.substringAfter("Tier[iL2FiZuKFb5C$K", 76);
      StringUtils.isNumericSpace("2FiZuKFb5C$K");
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = "GX7}OjlfE|L_#f;F~";
      String string1 = StringUtils.repeat("GX7}OjlfE|L_#f;F~", "GX7}OjlfE|L_#f;F~", 881);
      // Undeclared exception!
      StringUtils.split(string1, '|');
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      StringUtils.replace("?vv=L%SGJf", "?vv=L%SGJf", "?vv=L%SGJf");
      StringUtils.normalizeSpace("?vv=L%SGJf");
      StringUtils.removePattern("?vv=L%SGJf", "...");
      StringUtils.isNumeric("f");
      StringUtils.indexOfAnyBut((CharSequence) "?vv=L%SGJf", (CharSequence) "?vv=L%SGJf");
      StringUtils.isMixedCase("?vv=L%SGJf");
      StringUtils.substringBetween("Aborting to protect against StnckOverflowError`- output of one loop is $he input of anxther...", "f");
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      StringUtils.stripToNull("?");
      StringUtils.getJaroWinklerDistance("?", "?");
      StringUtils.strip("?", "?");
      StringUtils.replaceIgnoreCase("?", "?", "bindingMechanic");
      float[] floatArray0 = new float[9];
      floatArray0[0] = 88.8216F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1185.5411F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 1185.5411F;
      floatArray0[7] = 1185.5411F;
      floatArray0[8] = 0.0F;
      StringUtils.join(floatArray0, ']', 0, 6);
      Locale locale0 = Locale.ENGLISH;
      StringUtils.lowerCase("bindingMechanic", locale0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      StringUtils.replaceIgnoreCase("}", "}", (String) null);
      StringUtils.difference("}", "}");
      StringUtils.deleteWhitespace("");
      StringUtils.substringAfter((String) null, "");
      byte[] byteArray0 = new byte[0];
      StringUtils.toString(byteArray0, (String) null);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      StringUtils.stripAccents("]gKF1O");
      Object[] objectArray0 = new Object[14];
      StringUtils.join(objectArray0, 'U');
      StringUtils.indexOfDifference((CharSequence) "UUUUUUUUUUUUU", (CharSequence) "]gKF1O");
      String[] stringArray0 = StringUtils.split("]gKF1O");
      StringUtils.isAllBlank(stringArray0);
      StringUtils.join((Object[]) stringArray0, 'I', 0, 1);
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 2036);
      StringUtils.wrapIfMissing("Threshold must not be negative", (String) null);
      StringUtils.repeat(">_7z0$*Y1fTr", (-1411));
      StringUtils.join((Object[]) stringArray0, "/zx", 33, 36);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      StringUtils.substringBefore("/zx/zx", "org.apache.commons.lang3.StringUtils");
      StringUtils.endsWithAny("/zx/zx", stringArray0);
      StringUtils.containsAny((CharSequence) "Threshold must not be negative", (char[]) null);
      StringUtils.defaultIfBlank("skipOn", (String) null);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = "r4}t1(6D";
      String[] stringArray0 = null;
      StringUtils.stripAll((String[]) null, "r4}t1(6D");
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'K', Integer.MAX_VALUE, (-1721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-1721)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      char char0 = 't';
      StringUtils.join((Object[]) stringArray0, 't');
      StringUtils.indexOfDifference((CharSequence) "?vv=L%SGJf", (CharSequence) "?vv=L%SGJf");
      String[] stringArray1 = StringUtils.split("offset cannot be negative");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.join((Object[]) stringArray0, 'n', 8192, 2377);
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("AMDG/u71whL!", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.repeat(">", 3473);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'n';
      charArray0[2] = '@';
      charArray0[3] = 'P';
      charArray0[4] = 'E';
      charArray0[5] = '\'';
      charArray0[6] = 'H';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      StringUtils.replace("&:Rd@] does not existcp", "", "&:Rd@] does not existcp");
      StringUtils.remove("&:Rd@] does not existcp", 'W');
      StringUtils.wrapIfMissing("|YA.7r[S#", "&:Rd@] does not existcp");
      StringUtils.containsOnly((CharSequence) "&:Rd@] does not existcp", "pL[?{0");
      StringUtils.getLevenshteinDistance((CharSequence) "|YA.7r[S#", (CharSequence) "&:Rd@] does not existcp", 16);
      StringUtils.center("hP`U}>>n5/bz1rm%", 16, "3VwI");
      StringUtils.rightPad(">g[\"X~", (-1112), "");
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      StringUtils.overlay("ALWAYS", "7D:V@9 m1]T:;Pm.", 6420, 938);
      StringUtils.wrapIfMissing("ALWAYS7D:V@9 m1]T:;Pm.", "TO$Cn=");
      StringUtils.getLevenshteinDistance((CharSequence) "G5s~", (CharSequence) "ALWAYS", 4645);
      StringUtils.repeat('`', 6);
      StringUtils.stripAccents("7D:V@9 m1]T:;Pm.");
      StringUtils.leftPad("7D:V@9 m1]T:;Pm.", 6420, "7D:V@9 m1]T:;Pm.");
      // Undeclared exception!
      StringUtils.leftPad("7D:V@9 m1]T:;Pm.", 4645, "ALWAYS7D:V@9 m1]T:;Pm.");
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int int0 = 365;
      StringUtils.leftPad("nk-", 365, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "nk-";
      StringUtils.joinWith("nk-", objectArray0);
      char char0 = 't';
      StringUtils.wrapIfMissing("test-template-invocation", 't');
      String string0 = StringUtils.SPACE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 't';
      doubleArray0[1] = (double) 't';
      doubleArray0[2] = (double) 365;
      doubleArray0[3] = (double) 't';
      doubleArray0[4] = (double) 365;
      int int1 = 32767;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '\"', 365, 32767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 365
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      StringUtils.wrapIfMissing("&vB", '\u0003');
      StringUtils.deleteWhitespace("\u0003&vB\u0003");
      StringUtils.chomp("\u0003&vB\u0003");
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '\u0003';
      charArray0[2] = '\u0003';
      charArray0[3] = '\u0003';
      charArray0[4] = '\u0003';
      charArray0[5] = '\u0003';
      charArray0[6] = '\u0003';
      StringUtils.indexOfAny((CharSequence) "&vB", charArray0);
      StringUtils.isWhitespace("\u0003&vB\u0003");
      StringUtils.wrapIfMissing("`]gKF1O", '`');
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils");
      StringUtils.isAllBlank(stringArray0);
      StringUtils.splitByCharacterTypeCamelCase("~IEr8w#5Vr6");
      StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", 101);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 101;
      doubleArray0[3] = (double) 9;
      StringUtils.join(doubleArray0, 'd', 101, 9);
      StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", 101, 9);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      StringUtils.mid("]gKF1O", 0, 0);
      Object[] objectArray0 = new Object[14];
      StringUtils.join(objectArray0, 'U');
      StringUtils.indexOfDifference((CharSequence) "UUUUUUUUUUUUU", (CharSequence) "]gKF1O");
      String[] stringArray0 = StringUtils.split("");
      StringUtils.isAllBlank(stringArray0);
      char[] charArray0 = new char[12];
      charArray0[4] = '\u0087';
      charArray0[2] = 'U';
      charArray0[4] = '\u0087';
      StringUtils.join(charArray0, 'L');
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.removeEnd("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", "offset cannot be negative");
      StringUtils.leftPad("", 8192, 'v');
      StringUtils.lastIndexOf((CharSequence) "UUUUUUUUUUUUU", (-1292), (-326));
      StringUtils.equalsAnyIgnoreCase("offset cannot be negative", stringArray0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      StringUtils.overlay("]gKF1O", "]gKF1O", 3030, (-308));
      StringUtils.abbreviate("org.easymock.bytebuddy.asm.Advice$AssignReturned", (-308), 3030);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.easymock.bytebuddy.asm.Advice$AssignReturned", "s", (-308));
      StringUtils.isAnyEmpty(stringArray0);
      StringUtils.isBlank("]gKF1O");
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      StringUtils.splitByWholeSeparator("Illegal range. There's no way to get from %s to %s with a step of %s.", "org.apache.commons.lang3.StringUtils throws undeclared checked exception ", (-3));
      StringUtils.isAllLowerCase("Illegal range. There's no way to get from %s to %s with a step of %s.");
      String[] stringArray0 = StringUtils.split("Display name '%s' %s");
      StringUtils.isAllBlank(stringArray0);
      StringUtils.splitByCharacterTypeCamelCase("\n");
      StringUtils.stripStart("\n", (String) null);
      Stack<String> stack0 = new Stack<String>();
      StringUtils.join((List<?>) stack0, 'r', 1688, 1688);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      StringUtils.isAlphanumeric("]gKF1O");
      StringUtils.getLevenshteinDistance((CharSequence) "]gKF1O", (CharSequence) "]gKF1O", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      StringUtils.replacePattern("]gKF1O", "]gKF1O", "]gKF1O");
      String string0 = StringUtils.repeat("]gKF1O", 2056);
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, 2056);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      StringUtils.chomp("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      StringUtils.contains((CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", (CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      StringUtils.wrapIfMissing("OznyzgF+>0|?", '\'');
      StringUtils.ordinalIndexOf("OznyzgF+>0|?", "OznyzgF+>0|?", 4);
      StringUtils.unwrap("j3}_,D%g1!!d'%tn from static ", "OznyzgF+>0|?");
      StringUtils.countMatches((CharSequence) "j3}_,D%g1!!d'%tn from static ", (CharSequence) "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      StringUtils.abbreviate("OznyzgF+>0|?", 4);
      StringUtils.split((String) null, (String) null, 1073);
      StringUtils.indexOfDifference((CharSequence) "O...", (CharSequence) "j3}_,D%g1!!d'%tn from static ");
      StringUtils.abbreviate("j3}_,D%g1!!d'%tn from static ", 3, 9);
      StringUtils.swapCase("%!bp=U3k=`j1");
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      StringUtils.splitByCharacterTypeCamelCase("tz");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)16;
      StringUtils.join(byteArray0, '=', Integer.MAX_VALUE, (-861));
      StringUtils.contains((CharSequence) "Cannot resolve Byte Buddy lookup via dispatcher", (CharSequence) "tz");
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[4] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      StringUtils.indexOfAny((CharSequence) "", charArray0);
      StringUtils.deleteWhitespace("`4XCm/GU8ebrS");
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      StringUtils.isAllUpperCase("U");
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", (String) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.deleteWhitespace("Object varargs must not be null");
      StringUtils.abbreviateMiddle("org.apache.commons.l", "Object varargs must not be null", 13);
      StringUtils.replaceIgnoreCase((String) null, "LR", "HCDY3c28~&", 13);
      StringUtils.countMatches((CharSequence) null, '9');
      StringUtils.left("re,`^#)y[Vgv.54QG==$=zdCv{8P /", 3117);
      StringUtils.appendIfMissing((String) null, "Object varargs must not be null", (CharSequence[]) null);
      StringUtils.chomp("fZBX&q3FgKSB;q_JEW.h");
      StringUtils.isAllUpperCase("LR");
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      StringUtils.wrap("O", '\u0010');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.abbreviateMiddle("dPq", "O", 32);
      StringUtils.rotate("\u0010O\u0010", 256);
      StringUtils.getJaroWinklerDistance("O", "\u0010O\u0010");
      StringUtils.getLevenshteinDistance((CharSequence) "tdO}QVV,", (CharSequence) "tdO}QVV,", 2654);
      StringUtils.equals((CharSequence) "dPq", (CharSequence) "\u0010O\u0010");
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.repeat("D[z\"a1nU", 1866);
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, "D[z\"a1nU");
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String[] stringArray0 = new String[4];
      StringUtils.appendIfMissingIgnoreCase("@", "@", stringArray0);
      StringUtils.isAllUpperCase("@");
      StringUtils.split("@", "@");
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}";
      stringArray0[1] = "}";
      stringArray0[2] = "}";
      stringArray0[3] = "}";
      stringArray0[4] = "}";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "}";
      stringArray1[1] = "}";
      stringArray1[2] = "}";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("}", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("F!E.rZJ;L/", "F!E.rZJ;L/", 38);
      StringUtils.wrapIfMissing("F!E.rZJ;L/", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      StringUtils.repeat("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", 38);
      StringUtils.lastIndexOfAny("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", stringArray0);
      String[] stringArray1 = StringUtils.splitByWholeSeparator("<.c!A", "<.c!A", 252);
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, '7', (int) '7', (int) '7');
      StringUtils.deleteWhitespace("");
      StringUtils.isWhitespace("");
      StringUtils.indexOf((CharSequence) "", (CharSequence) "-", 21);
      StringUtils.unwrap("|JjYt*1fvi#F+NYM9T+*J\"6", '|');
      StringUtils.containsWhitespace("|JjYt*1fvi#F+NYM9T+*J\"6");
      String string0 = StringUtils.SPACE;
      StringUtils.compareIgnoreCase("|JjYt*1fvi#F+NYM9T+*J\"6", "|JjYt*1fvi#F+NYM9T+*J\"6", false);
      StringUtils.removeEnd((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      StringUtils.splitByWholeSeparator("&:Rd@] does not exist", "7a?sSO])K");
      StringUtils.overlay((String) null, "&:Rd@] does not exist", (-669), (-669));
      StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-20));
      StringUtils.unwrap("7a?sSO])K", '7');
      StringUtils.containsWhitespace("7a?sSO])K");
      StringUtils.unwrap((String) null, '7');
      StringUtils.compareIgnoreCase((String) null, "[&TiOY@-=tYz+PBKw", false);
      StringUtils.removeEnd((String) null, "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider");
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      StringUtils.remove("?vv=L%SGJf", 'A');
      StringUtils.wrapIfMissing("i#F+NYM9T+*J\"6", "|JjYt*1fv");
      StringUtils.containsOnly((CharSequence) "|JjYt*1fv", "}Eb");
      StringUtils.getLevenshteinDistance((CharSequence) "|JjYt*1fv", (CharSequence) "?vv=L%SGJf", 8192);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.repeat('5', 8192);
      StringUtils.substring("fFAxZ|pyyLHL4", 23);
      StringUtils.abbreviate("[S", 43);
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "|JjYt*1fv");
      StringUtils.unwrap("w><^bZ3[J.aJY", "H(:ezF*");
      StringUtils.isNotEmpty("}Eb");
      StringUtils.upperCase("|JjYt*1fvi#F+NYM9T+*J\"6|JjYt*1fv");
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      StringUtils.wrap("$resource factory key>", '\u0004');
      StringUtils.unwrap("\u0004$resource factory key>\u0004", '\u0004');
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      StringUtils.splitByWholeSeparator("&:Rd@] does not exist", "7a?sSO])K");
      StringUtils.unwrap("7a?sSO])K", '7');
      StringUtils.removeStart("&:Rd@] does not exist", "7a?sSO])K");
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      StringUtils.isWhitespace("");
      StringUtils.stripAccents("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.wrapIfMissing("", "org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler");
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      priorityQueue1.add("DTu>");
      PriorityQueue<String> priorityQueue2 = new PriorityQueue<String>();
      StringUtils.center("j3}_,D%g1!!d'%tn", (-1), "B>eDN5l0$=i");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push((String) null);
      linkedList0.add("j3}_,D%g1!!d'%tn");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "[V.Tfi+{;f:");
      StringUtils.wrapIfMissing("Fvalue must not be em", 'y');
      try { 
        StringUtils.getBytes("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", "Exception cloning Cloneable type ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils.splitByWholeSeparator("z", "\r");
      StringUtils.indexOf((CharSequence) "z", (-350));
      StringUtils.capitalize((String) null);
      StringUtils.unwrap((String) null, ':');
      Object object0 = new Object();
      StringUtils.equals((CharSequence) null, (CharSequence) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-350);
      StringUtils.join(doubleArray0, 'G', 14, (-723));
      StringUtils.indexOf((CharSequence) "z", (CharSequence) "", 14);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("p<q");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("p<q", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      StringUtils.contains((CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.d:}puSf:]K.iB@~pvgrvfDhnw>", (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.d:}puSf:]K.iB@~pvgrvfDhnw>");
      StringUtils.abbreviate("CartesianProductTest can only take exactly one type of arguments source.", " ", 1229, 5);
      StringUtils.trimToEmpty("2%,Y)cy^i{z;C]dW$");
      StringUtils.substringAfterLast("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.d:}puSf:]K.iB@~pvgrvfDhnw>", (-208));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("tdO}QVV,", "}");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      StringUtils.abbreviateMiddle("Illegal range. There's no way to get from %s to %s with a step of %s.", "RG/{Km\"tQ(%jjy", 102);
      StringUtils.rotate("tdO}QVV,", 102);
      StringUtils.getJaroWinklerDistance("tdO}QVV,", "O}QVV,td");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("Illegal range. There's no way to get from %s to %s with a step of %s.", " ", (-780));
      StringUtils.right("_", 1);
      StringUtils.ordinalIndexOf("O}QVV,td", "Illegal range. There's no way to get from %s to %s with a step of %s.", 1542);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      StringUtils.trim("Search and Replace array lengths don't match: ");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:", 7);
      StringUtils.difference("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      StringUtils.deleteWhitespace(" ");
      StringUtils.truncate("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/", 1235);
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray0[1] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray0[2] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      charSequenceArray1[0] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[1] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray1[2] = (CharSequence) " ";
      charSequenceArray1[3] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray1[4] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray1[5] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray1[6] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[7] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray1[8] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      StringUtils.firstNonEmpty(charSequenceArray1);
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) " ";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) " ", 7);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      StringUtils.repeat("No advice defined y ", 1);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      StringUtils.mid("]gKF1O", 0, 0);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      StringUtils.lowerCase("=4");
      StringUtils.indexOfAnyBut((CharSequence) "=4", (CharSequence) "");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "]gKF1O");
      StringUtils.substringAfter("-pSxd\"]Z~bb|", (-3109));
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Vector<String> vector0 = new Vector<String>(treeSet0);
      StringUtils.join((Iterable<?>) vector0, "2!h0U>");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) vector0;
      objectArray0[3] = (Object) charSequenceArray0[1];
      objectArray0[4] = (Object) "-pSxd\"]Z~bb|";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) vector0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      StringUtils.joinWith("=4", objectArray0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      StringUtils.indexOf((CharSequence) "]gKF1O", (-2378));
      StringUtils.capitalize("yCqJ;");
      StringUtils.unwrap("yCqJ;", '&');
      StringUtils.right("YCqJ;", (-144));
      StringUtils.abbreviate("]gKF1O", (-2378), 6);
      StringUtils.wrap((String) null, '$');
      StringUtils.mid("", 0, 1114111);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      StringUtils.overlay("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 931, 931);
      StringUtils.remove(" was expected to be virtual: ", 'W');
      StringUtils.wrapIfMissing("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "#");
      StringUtils.containsOnly((CharSequence) " was expected to be virtual: ", " was expected to be virtual: ");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.repeat('Z', 931);
      StringUtils.stripAccents("#");
      StringUtils.leftPad("L4iYwQa vT\"", (-1630), "d,nuUt^ARV;");
      StringUtils.strip("L4iYwQa vT\"");
      StringUtils.difference((String) null, "T+-UPA{$");
      StringUtils.substringBetween("^(`>0UqMzShvwx$BZX", "$  ~lk", "#");
      StringUtils.indexOfAnyBut((CharSequence) "L4iYwQa vT\"", (CharSequence) "T+-UPA{$");
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      StringUtils.normalizeSpace("z");
      // Undeclared exception!
      try { 
        StringUtils.repeat("The Array must not be null", 2086126972);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      StringUtils.stripStart("V]~r8$G*;~51k.y", "V]~r8$G*;~51k.y");
      StringUtils.isWhitespace("");
      StringUtils.stripAccents("");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.wrapIfMissing("", "o6f");
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      priorityQueue1.add("?");
      PriorityQueue<String> priorityQueue2 = new PriorityQueue<String>();
      StringUtils.center("?C0Y,", (-1), "V]~r8$G*;~51k.y");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("6ARn7#EEO3>RU");
      linkedList0.add("Locale must not be null");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "?C0Y,");
      StringUtils.wrapIfMissing("$", 'h');
      try { 
        StringUtils.getBytes("h$h", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      StringUtils.replacePattern("]gKF1O", "]gKF1O", "]gKF1O");
      StringUtils.substringAfterLast(" is not an interface typ", "s");
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      StringUtils.chop("maxWith cannot be negative");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negativ";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.chop("maxWith cannot be negative");
      StringUtils.substringBefore("maxWith cannot be negativ", 52);
      StringUtils.capitalize("Classes related to Java security cannot be proxied: ");
      StringUtils.indexOf((CharSequence) "Classes related to Java security cannot be proxied: ", 52);
      StringUtils.substringAfterLast("offset cannot be negative", " ");
      StringUtils.mid("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound$DefaultArgument", (-1), 76);
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.trimToEmpty("maxWith cannot be negativ");
      StringUtils.isAlphanumeric(charSequenceArray0[1]);
      StringUtils.replaceChars(" ", "onThrowable", " vs ");
      StringUtils.isWhitespace(" ");
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.isMixedCase("XU>");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 764.5895900708;
      doubleArray0[2] = (-1807.728103331);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 433.9705457266;
      doubleArray0[5] = 33.743353243;
      doubleArray0[6] = 263.93406251788;
      doubleArray0[7] = 34.0;
      StringUtils.join(doubleArray0, '\\', (-1879), (-1879));
      StringUtils.wrapIfMissing("Q", 'Q');
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.wrapIfMissing("Q", 'Q');
      String string0 = StringUtils.SPACE;
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      StringUtils.splitByCharacterTypeCamelCase("tz");
      StringUtils.abbreviate("Cannot resolve Byte Buddy lookup via dispatcher", (-4364), 39);
      StringUtils.removePattern("Cannot resolve Byte Buddy lookup via dispatcher", "Cannot resolve Byte Buddy lookup via dispatcher");
      StringUtils.stripEnd("n<raIZR=h", "\"/KI@H7#gPP>=");
      Locale locale0 = Locale.CHINESE;
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'r';
      charArray0[2] = 'a';
      StringUtils.indexOfAny((CharSequence) "Cannot resolve Byte Buddy lookup via dispatcher", charArray0);
      StringUtils.indexOfAny((CharSequence) "\"/KI@H7#gPP>=", charArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.substringBeforeLast("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "", 10);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      StringUtils.removeIgnoreCase("j3}_,D%g1!!d'%tn", "3R\"Xwf@Pu?mUi0:U");
      StringUtils.stripEnd("j3}_,D%g1!!d'%tn", "6bPSSZ ");
      StringUtils.getJaroWinklerDistance("j3}_,D%g1!!d'%tn", "j3}_,D%g1!!d'%tn");
      StringUtils.isWhitespace("j3}_,D%g1!!d'%tn");
      StringUtils.strip("n~3I1P)>Lu", "Eb,IQfzRgoA7");
      StringUtils.replaceIgnoreCase("n~3I1P)>Lu", "2s<s1Xi|e;snO", "v*TZda{");
      StringUtils.isAlphanumericSpace("n~3I1P)>Lu");
      StringUtils.rightPad("n~3I1P)>Lu", (-1936), '5');
      StringUtils.indexOfIgnoreCase((CharSequence) "n~3I1P)>Lu", (CharSequence) "n~3I1P)>Lu", (-2378));
      StringUtils.rightPad("", 1293);
      StringUtils.leftPad("G5`~", 8192, "Eb,IQfzRgoA7");
      StringUtils.isAlphanumeric("n~3I1P)>Lu");
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      StringUtils.removeAll("", "");
      StringUtils.leftPad("", 3523);
      StringUtils.rotate("=p9`", 6);
      StringUtils.containsOnly((CharSequence) "9`=p", "");
      StringUtils.abbreviateMiddle("", "$U_PGeT+yW", 16);
      StringUtils.countMatches((CharSequence) "", 'd');
      StringUtils.left("[", 2048);
      StringUtils.appendIfMissing("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", "E9va\u0001e.g*z@h3>", charSequenceArray0);
      StringUtils.chomp("[");
      StringUtils.stripEnd("9`=p", "u*a}h");
      StringUtils.substringAfterLast("-?vv=L%SGJft", 1072);
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'Z';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      StringUtils.containsNone((CharSequence) "=p9`", charArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      StringUtils.rightPad("", 8213, "");
      StringUtils.containsOnly((CharSequence) "", "");
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.repeat("bY4d@&R.", 2741);
      // Undeclared exception!
      StringUtils.toCodePoints(string0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      StringUtils.strip("Jxx'2E,=");
      StringUtils.stripEnd("\n", (String) null);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      StringUtils.replace("\"c.!<el@9 <wfsf|)u(bindingMechanic=", (String) null, "\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      StringUtils.stripEnd("`}V03wE", "metafactory");
      String[] stringArray0 = StringUtils.splitByCharacterType("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      StringUtils.wrapIfMissing("`}V03wE", (String) null);
      StringUtils.isAlphanumeric((CharSequence) null);
      StringUtils.isAlpha("metafactory");
      StringUtils.compare("fsc$k?{&_}", "\n");
      StringUtils.abbreviateMiddle("dN3~", "Nl", (-603));
      StringUtils.getLevenshteinDistance((CharSequence) "\"c.!<el@9 <wfsf|)u(bindingMechanic=", (CharSequence) "dN3~", 8192);
      StringUtils.removeEndIgnoreCase((String) null, " \"lZ~,U");
      StringUtils.join((Object[]) stringArray0, '?', 8192, (-433));
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.clear();
      arrayDeque0.add("Search and Replace array lengths don't match: vIbus9#S?%dv[U?qsh4");
      StringUtils.join((Iterable<?>) arrayDeque0, (String) null);
      StringUtils.equals((CharSequence) "`}V03wE", (CharSequence) "`}V03wE");
      StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: vIbus9#S?%dv[U?qsh4", (CharSequence[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      StringUtils.join((List<?>) null, '<', (int) '<', (int) '<');
      String string0 = StringUtils.CR;
      StringUtils.replace("~V^?I9", "...", "...", (int) '<');
      StringUtils.equalsIgnoreCase("~V^?I9", "~V^?I9");
      StringUtils.abbreviateMiddle("\r", "~V^?I9", 108);
      StringUtils.substringAfter("#", 108);
      StringUtils.lowerCase("\r");
      StringUtils.isNumericSpace("\r");
      StringUtils.substringAfter("Threshold m", "tZ-:1$c");
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.CR;
      StringUtils.indexOfAny((CharSequence) "\r", "\r");
      Vector<String> vector0 = new Vector<String>();
      Object object0 = new Object();
      StringUtils.isMixedCase("\r");
      StringUtils.isAlphaSpace("\r");
      StringUtils.stripStart("\r", "\r");
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      StringUtils.leftPad("nk-", 365, "nk-");
      StringUtils.difference("nk-", "nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nnk-");
      StringUtils.unwrap("nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nk-nnk-", "nk-");
      StringUtils.uncapitalize("nk-");
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.prependIfMissing("", "", charSequenceArray0);
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.replace("", "R", "", 32);
      Charset.defaultCharset();
      StringUtils.rightPad("", (-99));
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      char[] charArray0 = new char[0];
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.stripAccents("");
      StringUtils.containsAny((CharSequence) "j3}_,D%g1!!d'", charArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      StringUtils.trim("Search and Replace array lengths don't match: ");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:", 8);
      StringUtils.difference("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      StringUtils.stripToNull("?");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "?", (CharSequence) " ", 8);
      StringUtils.getJaroWinklerDistance("?", "?");
      StringUtils.isWhitespace("Search and Replace array lengths don't match:");
      StringUtils.strip("A\"mN", "A\"mN");
      StringUtils.replaceIgnoreCase("?", "?", "bindingMechanic");
      StringUtils.isAlphanumericSpace("bindingMechanic");
      StringUtils.indexOfIgnoreCase((CharSequence) "bindingMechanic", (CharSequence) "HgT}H4rY", 0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      StringUtils.join((List<?>) linkedList0, '2', (-1), (-260));
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      StringUtils.toRootLowerCase("5!");
      StringUtils.isEmpty("5!");
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("5!");
      StringUtils.substringBefore("QU +[MXdff(", "^");
      StringUtils.stripToNull("U");
      StringUtils.contains((CharSequence) "5!", 53);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      StringUtils.replacePattern("]gKF1O", "]gKF1O", "]gKF1O");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "]gKF1O";
      StringUtils.join(objectArray0, 'U');
      StringUtils.join(objectArray0, "g\"Mk V2_ldLAbhK$t.", 32, 32);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(", value=");
      StringUtils.substringBefore("4egl;M)R*T={", "=X1W<+pD1");
      StringUtils.stripToNull("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]gKF1O";
      StringUtils.replaceEach("4egl;M)R*T={", stringArray0, stringArray0);
      StringUtils.contains((CharSequence) ", value=", 32);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.left("nk- ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      StringUtils.lowerCase("");
      StringUtils.startsWith("", "nk- ");
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add("-");
      priorityQueue0.add("-");
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      StringUtils.join(iterator0, 'A');
      StringUtils.center("-A-", 256, 'A');
      StringUtils.isAsciiPrintable("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-A-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
      Object object0 = new Object();
      StringUtils.replaceChars("-", "Locale must not be null", (String) null);
      StringUtils.difference("-A-", "Locale must not be null");
      StringUtils.compare((String) null, "-", true);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      StringUtils.substringAfter("3", "3");
      int[] intArray0 = new int[16];
      StringUtils.join(intArray0, 'S', 0, 1);
      StringUtils.unwrap("QF", '>');
      StringUtils.swapCase("id#K9VYf.t,@qBa:S@");
      StringUtils.chomp("B1]BZ!;h&oaBM5G}C");
      char[] charArray0 = new char[8];
      charArray0[1] = 'S';
      charArray0[4] = 'S';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.chomp((String) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '>';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (-214.0094F);
      floatArray0[3] = (float) 'S';
      floatArray0[4] = (float) 'S';
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) '>';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 't', 1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      StringUtils.prependIfMissing("", "", charSequenceArray0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[3] = "";
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.replaceChars((String) null, "", (String) null);
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.compareIgnoreCase((String) null, "");
      StringUtils.rightPaduxEbmvuxEbmv");
      StringUtils.splitPreserveAllTokens((String) null, "+D4p4Kz");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'M', (-617), 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -617
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      StringUtils.join((short[]) null, '=', 4, 86);
      StringUtils.splitPreserveAllTokens("nN[iSsv#+E!/w", "nN[iSsv#+E!/w", 9);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) 'S';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) 'S';
      StringUtils.join(intArray0, 'S', 83, 83);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("jG");
      StringUtils.startsWithAny("jG", stringArray0);
      StringUtils.join((Iterator<?>) null, "");
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      StringUtils.containsNone((CharSequence) "A;m2R7@r;W0la.", (char[]) null);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("F!E.rZJ;L/", "F!E.rZJ;L/");
      StringUtils.wrapIfMissing("F!E.rZJ;L/", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      String string0 = StringUtils.SPACE;
      StringUtils.ordinalIndexOf("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", " ", 104);
      StringUtils.unwrap("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", (String) null);
      StringUtils.join((Object[]) stringArray0, '_');
      StringUtils.countMatches((CharSequence) "_", (CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      StringUtils.join((Object[]) stringArray0, "F!E.rZJ;L/", 1227, 4);
      Locale locale0 = new Locale("\"l@B");
      StringUtils.lowerCase("doesn't contain any substring.", locale0);
      StringUtils.isAllLowerCase("doesn't contain any substring.");
      Locale locale1 = new Locale("=_830j.");
      locale1.hasExtensions();
      locale1.stripExtensions();
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = ')';
      charArray0[2] = '_';
      charArray0[3] = '_';
      StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils.contains((CharSequence) "", (CharSequence) "");
      StringUtils.wrapIfMissing("Oznyz1gF+>0|?", '\'');
      StringUtils.ordinalIndexOf("Oznyz1gF+>0|?", "Oznyz1gF+>0|?", 4);
      StringUtils.unwrap("j3}_,D%g1!!d'%tn from static ", "Oznyz1gF+>0|?");
      StringUtils.countMatches((CharSequence) "j3}_,D%g1!!d'%tn from static ", (CharSequence) "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Oznyz1gF+>0|?";
      objectArray0[1] = (Object) "";
      StringUtils.compare("j3}_,D%g1!!d'%tn from static ", "JK#oSO-m*", true);
      StringUtils.unwrap((String) null, "j3}_,D%g1!!d'%tn from static ");
      StringUtils.equals((CharSequence) null, (CharSequence) "j3}_,D%g1!!d'%tn from static ");
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("HNtp$v\"f#oF+j+f", (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      StringUtils.rightPad("", 8192, "");
      StringUtils.compare("", (String) null, false);
      StringUtils.unwrap((String) null, "");
      StringUtils.equals((CharSequence) null, (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      StringUtils.overlay("", "P3SN7f+a?.L", 938, 938);
      StringUtils.overlay("ejcE", "", 6418, 4645);
      StringUtils.remove("ejcE", 'W');
      StringUtils.removeEndIgnoreCase("Ngq5EMiQ", "");
      StringUtils.removeStart("Ngq5EMiQ", "d6L}['k1oaOJr+");
      StringUtils.wrapIfMissing("", "Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "ejcE", (CharSequence) "", 2120);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("F!E.rZJ;L/", "F!E.rZJ;L/", 38);
      StringUtils.mid("F!E.rZJ;L/", 38, 1051);
      StringUtils.replaceOnce("Pxn#?%5B|zDN@VE;k2V", " is not a throwable type", "qNAg'w!sbu'P+");
      StringUtils.wrapIfMissing("Pxn#?%5B|zDN@VE;k2V", "");
      StringUtils.trimToNull("F!E.rZJ;L/");
      StringUtils.isAsciiPrintable("");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      Object object0 = new Object();
      StringUtils.join((Object[]) stringArray0, 'a');
      StringUtils.rightPad("Search and ReplXce array length9 don't match: ", 1, 'a');
      StringUtils.unwrap("PCe>>npIy", "metafactory");
      StringUtils.isNumericSpace("PCe>>npIy");
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      StringUtils.join(booleanArray0, 'E', (-780), (-780));
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.mid("", (-780), (-510));
      char[] charArray0 = new char[8];
      charArray0[1] = 'E';
      charArray0[2] = 'L';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      charArray0[7] = 'L';
      StringUtils.join(charArray0, 'L');
      StringUtils.startsWithAny("", charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, 'E', 1231, 1231);
      StringUtils.center("", 1, (String) null);
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.equals((CharSequence) "", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      StringUtils.uncapitalize("Cannot cache the value of an abstract method: ");
      StringUtils.replacePattern("cannot cache the value of an abstract method: ", "bSMPgE", "Cannot cache the value of an abstract method: ");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Cannot cache the value of an abstract method: ";
      objectArray0[1] = (Object) "cannot cache the value of an abstract method: ";
      objectArray0[2] = (Object) "cannot cache the value of an abstract method: ";
      StringUtils.join(objectArray0, '0', 51, (-3976));
      StringUtils.center((String) null, 51, "Cannot cache the value of an abstract method: ");
      StringUtils.stripStart((String) null, "gtxf!H5~##h|1!=");
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      
      StringUtils.difference((String) null, (String) null);
      StringUtils.replaceChars((String) null, "Q/&5~$rpVAyO iY", "");
      StringUtils.abbreviate((String) null, "k:~xUJLo30>.xL?gtN", 1672, 1672);
      StringUtils.substringsBetween((String) null, "<OgJ'JNp?+w:", "cdKG5`~");
      StringUtils.chop((String) null);
      StringUtils.isEmpty("k:~xUJLo30>.xL?gtN");
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      StringUtils.repeat("matches '%s'.", "AO<U2)@720x=n,;9", (-1338));
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "}", (CharSequence) "AO<U2)@720x=n,;9", (-3405));
      StringUtils.difference("?vv=L%SGJf", "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
      StringUtils.stripToNull("AO<U2)@720x=n,;9");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "matches '%s'.", (CharSequence) "AO<U2)@720x=n,;9", 322);
      StringUtils.countMatches((CharSequence) "]gKF1O", '@');
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '@';
      charArray0[8] = '@';
      StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      StringUtils.isAlphaSpace("}");
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("a^ykoTHP97kb29FmG1f");
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      priorityQueue0.add("]gKF1O");
      StringUtils.join((Iterable<?>) priorityQueue0, "a^ykoTHP97kb29FmG1f");
      StringUtils.isBlank(" ");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.repeat("L", 967);
      assertNotNull(string0);
      assertEqualsstring0);
      
      StringUtils.containsOnly((CharSequence
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'A';
      longArray0[0] = (long) 'A';
      longArray0[2] = (long) 'A';
      String string2 = StringUtils.join(longArray0, 'S');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {65L, 0L, 65L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("65S0S65S0", string2);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "65S0S65S0", (CharSequence) "65S0S65S0");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.stripStart("-", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("-", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "-", 12, 54);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], "");
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.substringAfter("-", "-");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate("", "", 2345, (-1704));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.trimToEmpty("...");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("...", string6);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.isEmpty("");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string7 = StringUtils.strip("!+V}-6uT#j");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("!+V}-6uT#j", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("!+V}-6uT#j", "!+V}-6uT#j", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.chop("L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("L", "L", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.deleteWhitespace(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", " resource lock", 1235, 1235);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.rotate("sI$jCSB?oo\"", 8);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("jCSB?oo\"sI$", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/", "Search and Replace array lengths don't match:");
      assertEquals(0.52, double0, 0.01);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" resource lock"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(" resource lock"));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "K8'hVY>");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(" resource lock"));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.endsWith("Search and Replace array lengths don't match:", "sI$jCSB?oo\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, '<');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeFirst((String) null, "S}b<?\"");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      String string0 = StringUtils.prependIfMissing("g", "g", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("g", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g", (CharSequence) "g");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      String string1 = StringUtils.replaceChars("g", "", "g");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("g", string1);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string2 = StringUtils.join(objectArray0, "contains '%s'.", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2113406563);
      boolean boolean0 = StringUtils.startsWithAny("contains '%s'.", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'U', 0, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("g", 1981, "U");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      linkedList0.push("?P$H=*0CVZ'");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("?P$H=*0CVZ'"));
      assertFalse(linkedList0.contains(string0));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("?P$H=*0CVZ'"));
      assertFalse(linkedList0.contains(string0));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "g");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList0.contains("?P$H=*0CVZ'"));
      assertFalse(linkedList0.contains(string0));
      assertEquals("?P$H=*0CVZ'", string5);
      
      String string6 = StringUtils.LF;
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("\n", string6);
      
      boolean boolean1 = StringUtils.endsWith("\n", "contains '%s'.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", 96, 11);
      assertNotNull(string0);
      assertEquals("... match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.chop(";z=|4X");
      assertNotNull(string0);
      assertEquals(";z=|4", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ";z=|4";
      charSequenceArray0[1] = (CharSequence) ";z=|4X";
      charSequenceArray0[2] = (CharSequence) ";z=|4";
      charSequenceArray0[3] = (CharSequence) ";z=|4";
      charSequenceArray0[4] = (CharSequence) ";z=|4";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: ", 64);
      assertNotNull(string0);
      assertEquals(", Length:                                                       ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length:                                                       ", (CharSequence) ", Length: ", 14);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty(", Length:                                                       ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length:                                                       ";
      charSequenceArray0[2] = (CharSequence) ", Length: ";
      charSequenceArray0[3] = (CharSequence) ", Length: ";
      charSequenceArray0[4] = (CharSequence) ", Length:                                                       ";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(10, int1);
      
      String string1 = StringUtils.removeEnd("SGJf", ", Length:                                                       ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("SGJf", string1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ", Length:                                                       ", charSequenceArray0[3]);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(10, int2);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("SGJf", "8sM#y9", ", Length:                                                       ");
      assertNull(stringArray0);
      
      String string2 = StringUtils.getDigits(", Length:                                                       ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("Timeout for vintage @Test must be positive.", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Timeout for vintage @Test must be positive.", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'm';
      charArray0[4] = '7';
      charArray0[5] = 'H';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new char[] {'&', 'd', 'S', 'm', '7', 'H'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("&dSm7H", string4);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = " ?6b!)sx x}{8(5";
      String[] stringArray0 = StringUtils.split(" ?6b!)sx x}{8(5");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      // Undeclared exception!
      StringUtils.center("VM(ON9MGgygPZ", 32767, "VM(ON9MGgygPZ");
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.strip("w:rb!?(W]QIJ^*|]", "w:rb!?(W]QIJ^*|]");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      StringUtils.center("", 32767, 'A');
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '<', 21, 21);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      int int0 = StringUtils.compare("}kCvli^r_\"F;<xc", "}kCvli^r_\"F;<xc");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfter("}kCvli^r_\"F;<xc", "fsc$k?{&_[1}");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter((String) null, "Minimum abbreviation width is %d");
      assertNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'<', '<', '<', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "fsc$k?{&_[1}", (CharSequence) null, 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String string0 = StringUtils.replacePattern("jSEio#!HdXSBu", "jSEio#!HdXSBu", "jSEio#!HdXSBu");
      assertNotNull(string0);
      assertEquals("jSEio#!HdXSBu", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "jSEio#!HdXSBu", (CharSequence) null, (-4813));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("a]?i[Bji/AtP7.?>", '7');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a]?i[Bji/AtP7.?>", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("a]?i[Bji/AtP7.?>");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('N', 3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NNN", string2);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", (-669), (-669));
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("}", string1);
      
      String string2 = StringUtils.replaceChars("", "%O%nk", "83QUyP?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("9J6v]*j?1&G$Z1].", "\r", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("9J6v]*j?1&G$Z1].", string3);
      
      int int0 = StringUtils.compareIgnoreCase("?NX>wZlU", "]");
      assertEquals((-30), int0);
      
      String string4 = StringUtils.rightPad("", (int) (byte)7, "83QUyP?");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("83QUyP?", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("9J6v]*j?1&G$Z1].");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.wrap("iR'", '_');
      assertNotNull(string0);
      assertEquals("_iR'_", string0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)5;
      shortArray0[3] = (short)10;
      shortArray0[3] = (short)352;
      shortArray0[4] = (short)352;
      String string1 = StringUtils.join(shortArray0, 'A', 2, (int) (short)5);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)13, (short)5, (short)0, (short)352, (short)352}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals("0A352A352", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "0A352A352", (CharSequence) "iR'");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "_iR'_", (CharSequence) "_iR'_", (int) (short)10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("!", 108);
      assertNotNull(string0);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      
      charSequenceArray0[0] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      String string1 = StringUtils.removeAll("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.leftPad("!", 6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("     !", string2);
      
      charSequenceArray0[1] = (CharSequence) "     !";
      String string3 = StringUtils.replaceAll("!", "!", "     !");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("     !", string3);
      
      charSequenceArray0[3] = (CharSequence) "     !";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", charSequence0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "     !", 6);
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviateMiddle("$U_PGeT+yW", "E9va\u0001e.g*z@h3>", 1072);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("$U_PGeT+yW", string4);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", (CharSequence) "");
      assertFalse(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string4));
      assertTrue(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string3));
      assertNotNull(charSequence1);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", charSequence1);
      
      int int0 = StringUtils.countMatches((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", '9');
      assertEquals(0, int0);
      
      String string5 = StringUtils.left((String) null, 1067);
      assertNull(string5);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1067;
      doubleArray0[1] = (double) 108;
      doubleArray0[2] = (double) 1072;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 1067;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 1067;
      String string6 = StringUtils.join(doubleArray0, '%', 0, 1);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertArrayEquals(new double[] {1067.0, 108.0, 1072.0, (-1.0), 1067.0, 6.0, 1067.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("1067.0", string6);
      
      String string7 = StringUtils.swapCase((String) null);
      assertNull(string7);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("y44mcWsfA", charset0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)52, (byte)52, (byte)109, (byte)99, (byte)87, (byte)115, (byte)102, (byte)65}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2113406563);
      doubleArray0[1] = (double) 'M';
      doubleArray0[4] = (double) 'M';
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[1] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[6] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[7] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      charSequenceArray0[8] = (CharSequence) "eQ^8Hzh2OPfDd2X";
      String string0 = StringUtils.appendIfMissing("eQ^8Hzh2OPfDd2X", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("eQ^8Hzh2OPfDd2X", string0);
      
      String string1 = StringUtils.replaceAll("zrSK!pI]5jH[}", "`#QOd;Xs=N\"U BR/", ",C_]$dpTVx '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zrSK!pI]5jH[}", string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.rotate("i s~aIk_$T}@r4", (-2113406563));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("T}@r4i s~aIk_$", string3);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      String string1 = StringUtils.join(charArray0, '5');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("Y5Y", string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray1[3] = (CharSequence) "Y5Y";
      charSequenceArray1[4] = (CharSequence) "Y5Y";
      String string2 = StringUtils.appendIfMissing((String) null, charSequenceArray1[4], charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNull(string2);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      
      charSequenceArray1[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("Search and Replace array lengths don't match: ", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray1, 'Y', (int) 'Y', (-1496));
      assertFalse(string3.equals((Object)string1));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotNull(string3);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("ZJ8<Nm]fjcJq", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("ZJ8<Nm]fjcJq", string4);
      
      try { 
        StringUtils.getBytes("S>3`KAkf7", "PCe>>npIy");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.overlay((String) null, "T1PT^iT+[?hYZ>d", 115, (-669));
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("present");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("present", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'S');
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("present", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "}", (CharSequence) "present");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("#QcU~@SgY._n=}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("XZ54jXPK?uH^nC+O");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("T1PT^iT+[?hYZ>d"));
      
      boolean boolean4 = linkedList0.removeLastOccurrence("present");
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("T1PT^iT+[?hYZ>d"));
      assertFalse(boolean4);
      
      String string2 = StringUtils.join((List<?>) linkedList0, '9', (-669), (-669));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("T1PT^iT+[?hYZ>d"));
      assertEquals("", string2);
      
      boolean boolean5 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "@,$q_SA%Q=row7", 177, 51);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("L", (-3074), 177);
      assertNotNull(string1);
      assertEquals("L", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@,$q_SA%Q=row7", "L", 51);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.overlay("}Jh_>O", "UHJa", 3144, (-810));
      assertNotNull(string0);
      assertEquals("UHJa", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("qQ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "qQ";
      charSequenceArray0[1] = (CharSequence) "}Jh_>O";
      charSequenceArray0[2] = (CharSequence) "}Jh_>O";
      charSequenceArray0[3] = (CharSequence) "qQ";
      charSequenceArray0[4] = (CharSequence) "UHJa";
      boolean boolean0 = StringUtils.equalsAny("UHJa", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertEquals("q", string1);
      
      String string2 = StringUtils.replaceChars("StdIo_System_OutMinimum abbreviation width with offset is %d", "}Jh_>O", "}Jh_>O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("StdIo_System_OutMinimum abbreviation width with offset is %d", string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("83QUyP?", '\'');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isNotEmpty("qQ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.upperCase("UHJa");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("UHJA", string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "UHJa";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "UHJA";
      boolean boolean2 = StringUtils.startsWithAny("", charSequenceArray1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((short[]) null, '\'', (-2788), (-1589));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("yt", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat("", 4553);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("", 'r');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)111;
      String string4 = StringUtils.join(shortArray0, 'r', 160, (int) (short) (-2495));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new short[] {(short)13, (short)111}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-4161));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)17;
      String string4 = StringUtils.join(byteArray0, '+');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)84, (byte)17}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("-95+0+84+17", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("-95+0+84+17");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.replacePattern("]gKF1O", "]gKF1O", "]gKF1O");
      assertNotNull(string0);
      assertEquals("]gKF1O", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "]gKF1O";
      String string1 = StringUtils.join(objectArray0, 'U');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertEquals("]gKF1O", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "]gKF1O", (CharSequence) "]gKF1O");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("]gKF1O");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("]gKF1O");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[8];
      int int1 = StringUtils.indexOfDifference((CharSequence) "]gKF1O", (CharSequence) "]gKF1O");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "]gKF1O", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "]gKF1O", 11);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.abbreviate("GHVas0+L", "=~`_-WY+T1+NHe}_)", 3065);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GHVas0+L", string2);
      
      String string3 = StringUtils.remove("LI", '{');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("LI", string3);
      
      String string4 = StringUtils.chomp("GHVas0+L", "}L }9kurceArgumentsProvider");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("GHVas0+L", string4);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, 'U');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize("J_pQ `");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("j_pQ `", string3);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string4 = StringUtils.replaceIgnoreCase("UHJa", "Threshold must not be negative", "<init>");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("UHJa", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) locale_Category0);
      assertNotNull(predicate0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "UHJa");
      assertNotNull(charBuffer0);
      assertEquals(4, charBuffer0.limit());
      assertEquals("UHJa", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean0 = StringUtils.isMixedCase(charBuffer0);
      assertEquals(4, charBuffer0.limit());
      assertEquals("UHJa", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "%Hgg^oLQ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "UHJa";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "<init>";
      charSequenceArray0[5] = (CharSequence) "";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.upperCase("jKDEzYTk", locale0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("JKDEZYTK", string5);
      
      charSequenceArray0[6] = (CharSequence) "JKDEZYTK";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("%Hgg^oLQ", charSequence0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("\r", string6);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) ";z=|4X", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase(";z=|4X");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.overlay("", "G", (-669), (-669));
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String string1 = StringUtils.remove("", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("G");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'B';
      String string2 = StringUtils.join(longArray0, 'g');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {66L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("66g0g0", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "66g0g0", (CharSequence) "G");
      assertFalse(boolean0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.abbreviateMiddle("Ge@]vO7", "G", (-669));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Ge@]vO7", string4);
      
      String string5 = StringUtils.wrapIfMissing("Ljava/lang/annotation/Repeatable;", 'g');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("gLjava/lang/annotation/Repeatable;g", string5);
      
      String string6 = StringUtils.rightPad("G", 107, 'i');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("Giiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string6);
      
      String string7 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("P{InCombiningDiacriticalMarks}+", string7);
      
      String string8 = StringUtils.normalizeSpace("\r");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "Ljava/lang/annotation/Repeatable;", (CharSequence) "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = StringUtils.capitalize("gLjava/lang/annotation/Repeatable;g");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("GLjava/lang/annotation/Repeatable;g", string9);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.normalizeSpace(" ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int int0 = 5;
      String string0 = StringUtils.mid("?vv=L%SGJf", 5, 5);
      assertNotNull(string0);
      assertEquals("%SGJf", string0);
      
      String string1 = "t";
      String string2 = StringUtils.wrapIfMissing("t", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("t", string2);
      
      String string3 = StringUtils.chop("t");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("?vv=L%SGJf");
      assertTrue(boolean0);
      
      char char0 = '3';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'w', 10, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-47));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "O)qZ@_UiDb)4.P~}sy", 1157);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" is not in the range '0' - '9'");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("O)qZ@_UiDb)4.P~}sy", 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("O)qZ@_UiDb)4.P~}sy", string1);
      
      String string2 = StringUtils.rightPad("", 128, 'k');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "O)qZ@_UiDb)4.P~}sy", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "O)qZ@_UiDb)4.P~}sy";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      charSequenceArray0[4] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[5] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[6] = (CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      String string3 = StringUtils.unwrap("O)qZ@_UiDb)4.P~}sy", " is not in the range '0' - '9'");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("O)qZ@_UiDb)4.P~}sy", string3);
      
      charSequenceArray0[7] = (CharSequence) "O)qZ@_UiDb)4.P~}sy";
      int int0 = StringUtils.indexOfAny((CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "O)qZ@_UiDb)4.P~}sy", charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(18, int1);
      
      String string4 = StringUtils.swapCase("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string4);
      
      String string5 = StringUtils.join((boolean[]) null, 'k', (-47), 0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '>', (-258), (-258));
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-258));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "9");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("B;dK:@");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("m5}*5~SJ_pQ `", "6AAYRa");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)59;
      shortArray0[2] = (short)59;
      String string5 = StringUtils.join(shortArray0, 'o', 233, 64);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)15, (short)59, (short)59}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "6AAYRa", (CharSequence) "\"c.!<el@9 <wfsf|)u", (-21));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.wrap("B;dK:@", 'k');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("kB;dK:@k", string6);
      
      String string7 = StringUtils.abbreviateMiddle("83QUyP?", "n7k6,Q", 403);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("83QUyP?", string7);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("F!E.rZJ;L/", "F!E.rZJ;L/", 38);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("F!E.rZJ;L/", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      assertNotNull(string0);
      assertEquals("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", 1395);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("F!E.rZJ;L/", 1395);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "F!E.rZJ;L/", (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", (-669), (-669));
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'o');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("}", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'v', (-1), (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)21;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)19, (byte)5, (byte)30, (byte) (-127), (byte)59, (byte)0, (byte)108, (byte)21}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("\u0013\u0005\u001E\uFFFD;\u0000l\u0015", string3);
      
      String string4 = StringUtils.substringAfter("pGm", "Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.substringAfterLast("}", 130);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("4^a#%4pf$6YlD&", "J", 3);
      assertNotNull(string0);
      assertEquals("4J&", string0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.stripAccents("v6@4mNEiA2%3UKT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", "Locale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Locale must not be nullF!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.Locale must not be null", string2);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[1], "v6@4mNEiA2%3UKT");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", "ORG.APACHE.COMMONS.LANG3.STRINGUTILS", '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("F!E.rZJ;L/TORG.APACHE.COMMONS.LANG3.STRINGUTILSthat date.", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be nullF!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.Locale must not be null", charSequenceArray0[3], 16);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "F!E.rZJ;L/TORG.APACHE.COMMONS.LANG3.STRINGUTILSthat date.", '8');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.left("Z\"aSja1oZ:\"HmF", 16);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Z\"aSja1oZ:\"HmF", string4);
      
      String string5 = StringUtils.appendIfMissing("82:A7h4s2?s9", charSequenceArray0[2], charSequenceArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("82:A7h4s2?s9", string5);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#3;,r[/[le", (CharSequence) "#3;,r[/[le", 321);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("#3;,r[/[le", 0);
      assertNotNull(string0);
      assertEquals("#3;,r[/[le", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#3;,r[/[le");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("%O%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("nk", "%O%");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%O%nk%O%", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("O");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "%O%", 'w');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.repeat('u', 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("qeG2Fvx$oV'c#|c", "XGi5&d$Ih&qO{z", "qeG2Fvx$oV'c#|c");
      assertNull(stringArray0);
      
      String string3 = StringUtils.rotate("%O%", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("%O%", string3);
      
      String string4 = StringUtils.substringBeforeLast("", "/JweA2lox|+vP}7NM@");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.deleteWhitespace("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.rightPad("Threshold must not be negative", 56, ':');
      assertNotNull(string0);
      assertEquals("Threshold must not be negative::::::::::::::::::::::::::", string0);
      
      String string1 = StringUtils.trimToEmpty("\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = StringUtils.substringBetween("Rf7|P9oIwT?!qXaqhVV", (String) null, "+\"x'R_wRx;0gm");
      assertNull(string3);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string4 = StringUtils.join((char[]) null, ':', (-2369), 56);
      assertNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must not be negative::::::::::::::::::::::::::", 12, 12);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBefore("+\"x'R_wRx;0gm", 1694);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("+\"x'R_wRx;0gm", string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "+\"x'R_wRx;0gm", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = "Y2dW%*n";
      // Undeclared exception!
      try { 
        StringUtils.abbreviateuxEbmv", "Y2dW%*n", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "[oiO,i[='k", (char[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((char[]) null, '3', 24, 24);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.mid("aborting to protect against StackOverflowError - output of one loop is the input of another", 5, 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ing to protect ag", string1);
      
      String string2 = StringUtils.replaceOnce("PCe>>npIy", "qNAg'w!sbu'P+", " for ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("PCe>>npIy", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "PCe>>npIy";
      charSequenceArray0[3] = (CharSequence) "aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string3 = StringUtils.wrapIfMissing("PCe>>npIy", "ing to protect ag");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ing to protect agPCe>>npIying to protect ag", string3);
      
      String string4 = StringUtils.trimToNull("qNAg'w!sbu'P+");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("qNAg'w!sbu'P+", string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "qNAg'w!sbu'P+";
      objectArray0[1] = (Object) "PCe>>npIy";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charSequenceArray0[1];
      objectArray0[4] = (Object) charSequenceArray0[0];
      objectArray0[5] = (Object) charSequenceArray0[0];
      objectArray0[6] = (Object) "qNAg'w!sbu'P+";
      objectArray0[7] = (Object) "qNAg'w!sbu'P+";
      String string5 = StringUtils.join(objectArray0, 'a');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(8, objectArray0.length);
      
      String string6 = StringUtils.rightPad("PCe>>npIy", 1720, 'e');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap(" for ", "ing to protect ag");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(" for ", string7);
      
      boolean boolean1 = StringUtils.isNumericSpace(" for ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "9");
      assertEquals(0, int0);
      
      String string4 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.chop("'z");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("'", string5);
      
      String string6 = StringUtils.deleteWhitespace("\"c.!<el@9 <wfsf|)u");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "useTypeHashConstant";
      stringArray0[1] = null;
      stringArray0[2] = "9";
      stringArray0[3] = null;
      stringArray0[4] = "9";
      stringArray0[5] = "...";
      stringArray0[6] = "liX|sgu-1|Q6Z";
      stringArray0[7] = null;
      stringArray0[8] = "\"c.!<el@9<wfsf|)u";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(9, stringArray0.length);
      assertEquals("", string7);
      
      String[] stringArray1 = StringUtils.split("maxWith cannot be negative", ' ');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      
      String string8 = StringUtils.substringAfterLast(" declares less then ", "useTypeHashConstant");
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
      
      charSequenceArray0[0] = (CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!";
      String string1 = StringUtils.removeAll("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.leftPad("S!", 6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("    S!", string2);
      
      charSequenceArray0[2] = (CharSequence) "    S!";
      String string3 = StringUtils.rotate("", 108);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", charSequence0);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[2], "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviateMiddle("$U_PGeT+yW", "E9va\u0001e.g*z@h3>", 1072);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("$U_PGeT+yW", string4);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", (CharSequence) "");
      assertFalse(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)string2));
      assertTrue(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string3));
      assertFalse(charSequence1.equals((Object)string4));
      assertNotNull(charSequence1);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", charSequence1);
      
      int int0 = StringUtils.countMatches((CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", '9');
      assertEquals(0, int0);
      
      String string5 = StringUtils.left((String) null, 1067);
      assertNull(string5);
      
      String string6 = StringUtils.appendIfMissing((String) null, "E9va\u0001e.g*z@h3>", charSequenceArray0);
      assertNull(string6);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = StringUtils.chomp("\n");
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.abbreviate((String) null, (String) null, 4);
      assertNull(string8);
      
      String string9 = StringUtils.rightPad("", 0, "$U_PGeT+yW");
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)charSequence1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)charSequence0));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.stripToNull("?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("?", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "?", (CharSequence) " ", 8);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBeforeLast("Failed to create proxy for ", " &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Failed to create proxy for ", string3);
      
      String string4 = StringUtils.replaceChars("&:Rd@] does not exist-", "E-FBE= Wc!?^~@(DpOv", "E-FBE= Wc!?^~@(DpOv");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&:Rd@] does not exist-", string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "Failed to create proxy for ", 4536, 8);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      double double0 = StringUtils.getJaroWinklerDistance(" &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1", "&:Rd@] does not exist-");
      assertEquals(0.48, double0, 0.01);
      
      String string5 = StringUtils.substringAfter("?", "Search and Replace array lengths don't match:");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'n');
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("Failed to create proxy for ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("B>m(gWV>", "B>m(gWV>", "B>m(gWV>");
      assertNotNull(string0);
      assertEquals("B>m(gWV>", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "B>m(gWV>", (CharSequence) "B>m(gWV>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, 'U');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "]gKF1O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "]gKF1O", charArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "", 11);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.abbreviate("GHVas0+L", "=~`_-WY+T1+NHe}_)", 3065);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GHVas0+L", string2);
      
      String string3 = StringUtils.remove("LI", '{');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("LI", string3);
      
      String string4 = StringUtils.chomp("Strings must not be null", "}L }9kurceArgumentsProvider");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      
      boolean boolean2 = StringUtils.startsWithAny("]gKF1O", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.replace("\"c.!<el@9 <wfsf|)u(bindingMechanic=", (String) null, "jefEZcw");
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("`}V03wE", "metafactory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`}V03wE", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("`}V03wE", "jefEZcw");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("jefEZcw`}V03wEjefEZcw", string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("metafactory");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compare("fsc$k?{&_}", "\n");
      assertEquals(92, int0);
      
      String string3 = StringUtils.abbreviateMiddle("dN3~", "Nl", (-603));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("dN3~", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\"c.!<el@9 <wfsf|)u(bindingMechanic=", (CharSequence) "dN3~", 8192);
      assertFalse(int1 == int0);
      assertEquals(34, int1);
      
      String string4 = StringUtils.removeEndIgnoreCase((String) null, " \"lZ~,U");
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "-";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("-", charSequence0);
      
      String string2 = StringUtils.center("", 138, 'A');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'A');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("AA-AAA", string3);
      
      String string4 = StringUtils.center("", (-859));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\"{`2", (CharSequence) "\"{`2");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "_]$``h7>M|lx:Ii", "XU>");
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      String string0 = StringUtils.right(" from static `}V03wE", 3);
      assertNotNull(string0);
      assertEquals("3wE", string0);
      
      String string1 = StringUtils.leftPad("XU>", 7, "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ObjeXU>", string1);
      
      String string2 = StringUtils.rightPad("q:P", 3, "NAsR#.`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("q:P", string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "q:P");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(3));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(3));
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'Q');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(3));
      assertEquals("", string4);
      
      String string5 = StringUtils.getDigits("NAsR#.`");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2113406563);
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'M';
      intArray0[1] = (-2113406563);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2113406563);
      String string0 = StringUtils.join(intArray0, 'M', 77, (-151));
      assertNotNull(string0);
      assertArrayEquals(new int[] {77, (-2113406563), 0, 0, 0, (-2113406563)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("fsc$k?{&_}", 17, 'M');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fsc$k?{&_}MMMMMMM", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("...");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'M', 'M'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("MM", string2);
      
      int int0 = StringUtils.ordinalIndexOf("MM", "fsc$k?{&_}", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("3");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("3", string3);
      
      String string4 = StringUtils.substringBefore("MM", "MM");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {107.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("107.0", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, (String) null, (int) 'k', (int) 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ive", "contains '%s'.", (int) 'k');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.replaceIgnoreCase("yT", "D", "__H");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yT", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "D", (CharSequence) "yT");
      assertEquals(2, int0);
      
      String string3 = StringUtils.substringAfter("", 178);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("", 'k');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.substringAfter("", "");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'A', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Akkkkkk", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charArray0.length);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new char[] {'A', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.limit());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(7, charArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.abbreviateMiddle("", "Cannot cache the value of an abstract method: ", 1072);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '`');
      assertEquals(0, int0);
      
      String string2 = StringUtils.left("])jBXA$&e,", 1067);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("])jBXA$&e,", string2);
      
      String string3 = StringUtils.appendIfMissing("Isz+9", (CharSequence) null, charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Isz+9", string3);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.overlay("No proxy target found for ", "No proxy target found for ", 0, 0);
      assertNotNull(string0);
      assertEquals("No proxy target found for No proxy target found for ", string0);
      
      String string1 = StringUtils.difference("offset cannot be negative", "Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX";
      charSequenceArray0[1] = (CharSequence) "No proxy target found for ";
      String string2 = StringUtils.join((char[]) null, 'R');
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '(', 5008, 5008);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("M|^f$SKyffMp_", "S8x/]B");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("M|^f$SKyffMp_", string4);
      
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((char[]) null, '(');
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, 'y');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop,is the input of anotheXyNo proxy target found for yy", string6);
      
      String string7 = StringUtils.truncate((String) null, 59, 91);
      assertNull(string7);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.IssueExtension", (CharSequence) null, charSequenceArray0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string8);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "M|^f$SKyffMp_", (char[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "LsM['=3|ZPaUboC2V+");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)2036;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short)2036;
      shortArray0[4] = (short)59;
      String string1 = StringUtils.join(shortArray0, 'B', (-21), (-352));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)59, (short)2036, (short)59, (short)2036, (short)59}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "...", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "...", 51);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "LsM['=3|ZPaUboC2V+", (int) (short)59, (-1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "G";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Object varargs must not be null", "p?%]Vy9WUQ`?F3P", 1206);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("$k?{&_[1}fsc", "");
      assertNotNull(string0);
      assertEquals("$k?{&_[1}fsc", string0);
      
      String string1 = StringUtils.abbreviate("", Integer.MAX_VALUE, 47);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.strip("I>r=#ZrP}3Gk:H", "*<-f1zP[v`z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("I>r=#ZrP}3Gk:H", string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("p?%]Vy9WUQ`?F3P", 0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isBlank("$k?{&_[1}fsc");
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultString("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "A;m2R7@r;W0la.", ';');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.repeat("?", "Search and Replace array lengths don't match: ", 8);
      assertNotNull(string0);
      assertEquals("?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?", (CharSequence) "?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.stripToNull("?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "?", (CharSequence) "Search and Replace array lengths don't match: ", 8);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?", '@');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBeforeLast("Failed to create proxy for ", " &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Failed to create proxy for ", string3);
      
      String string4 = StringUtils.replaceChars("&:Rd@] does not exist-", "E-FBE= Wc!?^~@(DpOv", "-@c>,v(gzg");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("&:Rd](does(not(exist@", string4);
      
      int int4 = StringUtils.indexOf((CharSequence) "Failed to create proxy for ", 4536, 8);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      double double0 = StringUtils.getJaroWinklerDistance(" &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1", "&:Rd](does(not(exist@");
      assertEquals(0.46, double0, 0.01);
      
      String string5 = StringUtils.substringAfter("?", "?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'n');
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("Failed to create proxy for ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int5 = StringUtils.countMatches((CharSequence) "&:Rd](does(not(exist@", ':');
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(1, int5);
      
      String string6 = StringUtils.wrapIfMissing("?", '<');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("<?<", string6);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.repeat("=~", 2186);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]gKF1O", "]gKF1O");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "]gKF1O", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("yCBJ;");
      assertNotNull(string0);
      assertEquals("YCBJ;", string0);
      
      String string1 = StringUtils.unwrap("yCBJ;", '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yCBJ;", string1);
      
      String string2 = StringUtils.wrapIfMissing("...", "]gKF1O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("]gKF1O...]gKF1O", string2);
      
      String string3 = StringUtils.difference("]gKF1O", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars("]gKF1O", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", "k:~xUJLo30>.xL?gtN");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("]~K1", string4);
      
      String string5 = StringUtils.abbreviate("yCBJ;", "]gKF1O", 100, 1672);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("yCBJ;", string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("cdKG5`~", "H9rICEtP-A[,4P", "");
      assertNull(stringArray1);
      
      String string6 = StringUtils.chop("$wxrU:~7dg)!g");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("$wxrU:~7dg)!", string6);
      
      boolean boolean0 = StringUtils.isEmpty("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.removeFirst("p<q", "p<q");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "p<q", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.removeFirst("p<q", "p<q");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "p<q", "p<q");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.removeFirst("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-510));
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", (-510));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", 17);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("", (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("maxWith cannot be negative", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.abbreviate("", "Fso.{yZZ=%Ef", (-1), 1914);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Display name '%s' %s", "maxWith cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.chop("");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (-510), 17);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("?vv=L%SGJf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?vv=L%SGJf", string1);
      
      String string2 = StringUtils.removePattern("?vv=L%SGJf", "...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("f", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "?vv=L%SGJf";
      charSequenceArray0[1] = (CharSequence) "?vv=L%SGJf";
      String string3 = StringUtils.repeat("?vv=L%SGJf", (String) null, (-2585));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.substringBefore("4<hr:~;_QYYF{z3", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.overlay("", "P3SN7f+a?.L", 938, 938);
      assertNotNull(string0);
      assertEquals("P3SN7f+a?.L", string0);
      
      String string1 = StringUtils.difference("Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX", "ejcE");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ejcE", string1);
      
      String string2 = StringUtils.overlay("ejcE", "", 6418, 4645);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ejcE", string2);
      
      String string3 = StringUtils.remove("ejcE", 'W');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ejcE", string3);
      
      String string4 = StringUtils.getIfBlank("ejcE", (Supplier<String>) null);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("ejcE", string4);
      
      String string5 = StringUtils.normalizeSpace("15=wIi+Z~");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("15=wIi+Z~", string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "P3SN7f+a?.L", (CharSequence) "");
      assertTrue(boolean0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("\r", string6);
      
      String string7 = StringUtils.right("ejcE", (-3269));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.substringBefore("ejcE", "");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.defaultIfEmpty("", "Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop,is the input of anotheX", string9);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("", 76);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "...");
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-77);
      String string1 = StringUtils.join(byteArray0, '/');
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)63, (byte) (-21), (byte)10, (byte) (-65), (byte)108, (byte)56, (byte) (-77)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("-49/63/-21/10/-65/108/56/-77", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("...");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {46, 46, 46}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1605));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.right("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", 1188);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string2);
      
      String string3 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 91, "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String string4 = StringUtils.removeEnd((String) null, "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2302);
      assertNotNull(stringArray0);
      assertEquals(40, stringArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("", "ORG.APACHE.COMMONS.LANG3.STRINGUTILS", 66);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("...", "}+");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.lowerCase("WKo}yp", locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("wko}yp", string2);
      
      String string3 = StringUtils.replaceAll("wko}yp", "...", (String) null);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("wko}yp", string3);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4006;
      shortArray0[1] = (short)357;
      shortArray0[2] = (short)961;
      shortArray0[3] = (short) (-1574);
      shortArray0[4] = (short)16;
      shortArray0[5] = (short)88;
      shortArray0[6] = (short)8192;
      String string4 = StringUtils.join(shortArray0, 'y', 128, 65);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new short[] {(short)4006, (short)357, (short)961, (short) (-1574), (short)16, (short)88, (short)8192}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.replaceChars("O", '%', '%');
      assertNotNull(string0);
      assertEquals("O", string0);
      
      String string1 = StringUtils.stripToNull("O");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("O", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "O", (CharSequence) "O", 5);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "O", 'P');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'P';
      charArray0[2] = '@';
      charArray0[3] = 'P';
      charArray0[4] = '@';
      charArray0[5] = 'B';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "O", charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'@', 'P', '@', 'P', '@', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("O");
      assertTrue(boolean0);
      
      String string2 = StringUtils.getDigits(" &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("06186781", string2);
      
      String string3 = StringUtils.replaceChars("r=,=mee3)\"vh", "O", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("r=,=mee3)\"vh", string3);
      
      int int3 = StringUtils.indexOf((CharSequence) "O", 5, 11);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      double double0 = StringUtils.getJaroWinklerDistance("O", "Search and Replace array lengths don't match: ");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.substringAfter("K5'HnR7y(Q;\"", "$;");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.split("Failed to create proxy for ", 'Y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isBlank(" &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "Display name '%s' %s", 64, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("%O%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("%O%", "O");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%O%", string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.getIfBlank("#!;KZ&sZ`U}S=t\u0000%O%", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#!;KZ&sZ`U}S=t\u0000%O%", string2);
      
      String string3 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "#!;KZ&sZ`U}S=t\u0000%O%", (CharSequence) "%O%");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\r", string4);
      
      String string5 = StringUtils.right("}+", 67);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("}+", string5);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?v=SL%GJf", "?v=SL%GJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?v=SL%GJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("yCBJ;");
      assertNotNull(string0);
      assertEquals("YCBJ;", string0);
      
      String string1 = StringUtils.unwrap("yCBJ;", '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yCBJ;", string1);
      
      String string2 = StringUtils.difference("?v=SL%GJf", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((int[]) null, '2', 1672, (-1102));
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("|`W~=!([m[9", "yCBJ;");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("|`W~=!([m[9", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "|`W~=!([m[9");
      assertFalse(boolean0);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      String string6 = StringUtils.abbreviateMiddle(" o ", "", 38);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(" o ", string6);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = '&';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "|`W~=!([m[9", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'2', '2', '&', 'b', '&'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "?v=SL%GJf", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("wNmMomm|4+", charset0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)78, (byte)109, (byte)77, (byte)111, (byte)109, (byte)109, (byte)124, (byte)52, (byte)43}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("maxWith cannot be negative", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(26, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%O%#!;KZ&sZ`U}S=t\u0000";
      charSequenceArray0[1] = (CharSequence) "%O%#!;KZ&sZ`U}S=t\u0000";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween("BOrX(", "wu55;SsA V$}06<A");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap("There should be a `%s` method on class `%s`", '>');
      assertNotNull(string1);
      assertEquals("There should be a `%s` method on class `%s`", string1);
      
      String string2 = StringUtils.swapCase("There should be a `%s` method on class `%s`");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("tHERE SHOULD BE A `%S` METHOD ON CLASS `%S`", string2);
      
      String string3 = StringUtils.chomp("[ZN0'7{xJ,.s?\"7");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("[ZN0'7{xJ,.s?\"7", string3);
      
      String string4 = StringUtils.abbreviate("\r", (String) null, 172);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\r", string4);
      
      String string5 = StringUtils.rotate("tHERE SHOULD BE A `%S` METHOD ON CLASS `%S`", (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("HERE SHOULD BE A `%S` METHOD ON CLASS `%S`t", string5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '@';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = 'e';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "HERE SHOULD BE A `%S` METHOD ON CLASS `%S`t", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'e', '@', '>', '>', '>', '>', 'e'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "HERE SHOULD BE A `%S` METHOD ON CLASS `%S`t", (CharSequence) null, 172);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '>', 3, 172);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 172
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "RObjfQ", (CharSequence) "RObjfQ", Integer.MIN_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.overlay("HCDY3c28~&", "HCDY3c28~&", 'r', 6418);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("HCDY3c28~&HCDY3c28~&", string1);
      
      String string2 = StringUtils.remove("HCDY3c28~&", 'r');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "HCDY3c28~&", '|');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.left("'@f.hh&:x^*j", 2625);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("'@f.hh&:x^*j", string3);
      
      String string4 = StringUtils.stripEnd("bindingMechanic", "X7DS.Fld");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("bindingMechanic", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "'@f.hh&:x^*j";
      charSequenceArray0[1] = (CharSequence) "X7DS.Fld";
      charSequenceArray0[2] = (CharSequence) "HCDY3c28~&";
      charSequenceArray0[3] = (CharSequence) "HCDY3c28~&";
      charSequenceArray0[4] = (CharSequence) "HCDY3c28~&";
      charSequenceArray0[5] = (CharSequence) "bindingMechanic";
      int int2 = StringUtils.lastIndexOfAny("bindingMechanic", charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'@f.hh&:x^*j", "\n|\"<pS}&xU(SN");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.substringAfterLast("zE", " e");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "HCDY3c28~&HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.difference("f'Rvk?o=G,N97&%zL", "n]\f");
      assertNotNull(string0);
      assertEquals("n]\f", string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("n]\f", "n]\f", locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "n]\f", (-1303));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(" from static `}V03wE", "org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" from static `}V03wE", string1);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.left("nk- ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.startsWith("", "nk- ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.wrapIfMissing("nk- ", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("nk- ", string3);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("!", "Object varargs must not be null", "!");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '<';
      String string1 = StringUtils.join(longArray0, 'E');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {60L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("60E0E0E0", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "?vv=L%SGJf");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) null);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertSame(locale1, locale0);
      
      String string3 = locale0.getDisplayName(locale1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("\u65E5\u672C\u8A9E (\u65E5\u672C)", string3);
      
      int int0 = StringUtils.getFuzzyDistance("Object varargs must not be null", "Object varargs must not be null", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertSame(locale0, locale1);
      assertEquals(91, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "Object varargs must not be null");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)118;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1093);
      String string4 = StringUtils.join(shortArray0, 'V', (int) (short)118, (int) (short)118);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new short[] {(short)3, (short)118, (short)5, (short) (-1093)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceChars("ch", (String) null, (String) null);
      assertNotNull(string2);
      assertEquals("ch", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 16, 16);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "X+@MT ?wrR9c:39n", (CharSequence) "X+@MT ?wrR9c:39n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.right("", (-3269));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "vSZ7", (-439), 12);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.junivSZ7", string3);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.center("([;Or&PhX9Wb!]N_maxWith cannot be negative", 38, "([;Or&PhX9Wb!]N_maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("([;Or&PhX9Wb!]N_maxWith cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.substringBetween("}", (String) null, ")]hd");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("yu>goUu#fk");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yu>gouu#fk", string2);
      
      charSequenceArray0[2] = (CharSequence) "yu>gouu#fk";
      String string3 = StringUtils.leftPad(")]hd", 565, 'i');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", string3);
      
      String string4 = StringUtils.abbreviate((String) null, (-25), 3);
      assertNull(string4);
      
      String string5 = StringUtils.strip("@HR9KLu^OFG;Ku5", "}");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("@HR9KLu^OFG;Ku5", string5);
      
      String string6 = StringUtils.capitalize("yu>goUu#fk");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Yu>goUu#fk", string6);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "4WM)%QoKd`hh-");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "@HR9KLu^OFG;Ku5", 435, 565);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.reverseDelimited("+u.)}dFcz^mV]W", 'i');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("+u.)}dFcz^mV]W", string7);
      
      String string8 = StringUtils.chomp("+u.)}dFcz^mV]W", (String) null);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("+u.)}dFcz^mV]W", string8);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "@HR9KLu^OFG;Ku5", 3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.center("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", 435, (String) null);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", string9);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[1] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[3] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[4] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[6] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[7] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[8] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = StringUtils.joinWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-21));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 4027);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.rotate((String) null, 119);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap(" from static j3}_,D%g1!!d'%tn", "Ib:");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" from static j3}_,D%g1!!d'%tn", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " from static j3}_,D%g1!!d'%tn", 1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join(objectArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      assertEquals("", string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "simpleComparisonsFirst", "...");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("simpleComparisonsFirst");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.right("Strings must not be null", 24);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1), "D?sm+9Ox3s");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      String string3 = StringUtils.rightPad("maxWith cannot be negative", (-1038), "*");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      
      String string4 = StringUtils.wrapIfMissing("Strings must not be null", ':');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(":Strings must not be null:", string4);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("HCDY3c28~&", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", "HCDY3c28~&", (int) 'r');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      String string3 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Objectvarargsmustnotbenull", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Objectvarargsmustnotbenull";
      String string4 = StringUtils.replaceFirst("$k?{&_[1}fsc", "HCDY3c28~&", "Handler on array requires positive index for ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("$k?{&_[1}fsc", string4);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 4;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'T';
      longArray0[6] = (long) 'r';
      longArray0[7] = (long) 142;
      longArray0[8] = (long) (-1);
      String string5 = StringUtils.join(longArray0, 'T', 142, Integer.MIN_VALUE);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertArrayEquals(new long[] {84L, (-1L), 4L, (-1L), 84L, 84L, 114L, 142L, (-1L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.difference("4H57", "HCDY3c28~&");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("HCDY3c28~&", string6);
      
      String string7 = StringUtils.mid("Objectvarargsmustnotbenull", 6123, (-1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("&:Rd@] does not exist", "&:Rd@] does not exist", "&:Rd@] does not exist");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) null, 't');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWithAny("&:Rd@] does not exist", (CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.join((Object[]) null, 'B', (-3937), (-1082));
      assertNull(string2);
      
      String string3 = StringUtils.center("", 109, "!07.");
      assertNotNull(string3);
      assertEquals("!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!0!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07.!07", string3);
      
      String string4 = StringUtils.stripStart("&:Rd@] does not exist", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&:Rd@] does not exist", string4);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.remove("No arguments sources were found for @CartesianTest", 'L');
      assertNotNull(string0);
      assertEquals("No arguments sources were found for @CartesianTest", string0);
      
      String string1 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      String string2 = StringUtils.getDigits("No arguments sources were found for @CartesianTest");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match:", "No arguments sources were found for @CartesianTest");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("G");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("N(pPX;l%8W?Y", "2DK5+pm3}jvb=9I\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("2DK5+pm3}jvb=9I\rN(pPX;l%8W?Y2DK5+pm3}jvb=9I\r", string3);
      
      char[] charArray0 = new char[0];
      String string4 = StringUtils.join(charArray0, '7');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "2DK5+pm3}jvb=9I\rN(pPX;l%8W?Y2DK5+pm3}jvb=9I\r";
      String string5 = StringUtils.join(objectArray0, ';');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(4, objectArray0.length);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match:", "java.lang.Object@3075045f;;java.lang.Object@76a2ee89;2DK5+pm3}jvb=9I\rN(pPX;l%8W?Y2DK5+pm3}jvb=9I\r", stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "G", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      
      String string7 = StringUtils.unwrap("G", '7');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("G", string7);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.unwrap("s", 'H');
      assertNotNull(string0);
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.replaceChars("<init>", '|', '|');
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "<init>", "F!E.rZJ;L/");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "ofY=nhpK:");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("F!E.rZJ;L/", '');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.substringAfterLast("I\"e,d7af(l~QQ~[", "DzdPy<");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("<init>", "N%wDjj`@o", stringArray1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray1.length);
      assertEquals("N%wDjj`@o<init>", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("N%wDjj`@o<init>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("?NX>wZlU", "?NX>wZlU", 339);
      assertNotNull(string0);
      assertEquals("?NX>wZlU", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "?NX>wZlU", (CharSequence) "?NX>wZlU");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate(" resource lock", "?NX>wZlU", 339, 339);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" resource lock", string2);
      
      String string3 = StringUtils.rotate("?NX>wZlU", (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("NX>wZlU?", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("?NX>wZlU", " resource lock");
      assertEquals(0.4, double0, 0.01);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(string1));
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "fsc$k?{&_[1}");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.join((List<?>) linkedList0, 'A', (-1), (-1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.overlay("", "G", (-669), (-669));
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String string1 = StringUtils.remove("", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("G");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) (-669);
      longArray0[2] = (long) (-669);
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("Ge@]vO7", "G", (-669));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Ge@]vO7", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G", (CharSequence) "", (int) 'Y');
      assertEquals(1, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "G");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'A';
      charArray0[3] = 'B';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'B';
      charArray0[7] = 'Y';
      String string4 = StringUtils.removeEnd("G", "Ge@]vO7");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("G", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("G", "G", 240);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("3");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "3", (CharSequence) "3");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.right("3", 64);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3", string1);
      
      String string2 = StringUtils.truncate("3", 64);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("3", string2);
      
      String string3 = StringUtils.remove("3", '3');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceOnce("3", "c", "B1]BZ!;h&oaBM5G}C");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("3", string4);
      
      int[] intArray0 = new int[16];
      intArray0[0] = (-1);
      intArray0[1] = (int) '3';
      String[] stringArray0 = StringUtils.split("3", "3", 64);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("3");
      assertFalse(boolean0);
      
      String string5 = StringUtils.remove("hZbq", '~');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("hZbq", string5);
      
      String string6 = StringUtils.rightPad("3", (-1), '8');
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("3", string6);
      
      String string7 = StringUtils.repeat('8', (-1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      String string1 = StringUtils.overlay("Search and Replace array lengths don't match: ", "org.apache.commons.lang3.StringUtils", 98, 98);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: org.apache.commons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.remove("...", '[');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.getIfBlank("]'b^-k_-9y1", (Supplier<String>) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("]'b^-k_-9y1", string3);
      
      String string4 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match:", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      String string6 = StringUtils.right("]'b^-k_-9y1", (-286));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviate((String) null, "Search and Replace array lengths don't match: org.apache.commons.lang3.StringUtils", 3, 117);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", " resource lock", 1235, 1235);
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      String string1 = StringUtils.rotate("sI$jCSB?oo\"", 8);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("jCSB?oo\"sI$", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" resource lock"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(" resource lock"));
      
      boolean boolean0 = linkedList0.add("Y@W?R#$mZ4[P6M");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("Y@W?R#$mZ4[P6M"));
      assertFalse(linkedList0.contains(string0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "K8'hVY>");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Wq(uH.$0`u!<1WH'^d", "5%$Qm`[8@4%", "qvUM<$");
      assertNotNull(string0);
      assertEquals("Wq(uH.U0$u!<1WH'^d", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Oh`a.wW(vr+'p>mFR", 64);
      assertNull(stringArray0);
      
      String string1 = StringUtils.lowerCase("Wq(uH.U0$u!<1WH'^d");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("wq(uh.u0$u!<1wh'^d", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "WHyqqTR;5K_t", (CharSequence) "}Jh_>O");
      assertEquals(12, int0);
      
      String[] stringArray1 = StringUtils.split("6US#rbIGxOapaF~", 'Z');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.removeStart("There should be a `%s` method on class `%s`", "]d:9yF=dBzlO;|\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("There should be a `%s` method on class `%s`", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray1, "7Z{'hJ7pe~ v");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, stringArray1.length);
      assertEquals("6US#rbIGxOapaF~", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("There should be a `%s` method on class `%s`");
      assertFalse(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.Category> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = linkedList0.add(locale_Category0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, (String) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'd', (-929), (-929));
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.capitalize("&ZxP<Arv(JQ(@Mb\"h1F");
      assertNotNull(string0);
      assertEquals("&ZxP<Arv(JQ(@Mb\"h1F", string0);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.resource.TemporaryDirectory", ": ", "&ZxP<Arv(JQ(@Mb\"h1F");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.resource.TemporaryDirectory", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.resource.TemporaryDirectory", 2);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&ZxP<Arv(JQ(@Mb\"h1F", charArray0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another_Wb", (-638));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another_Wb", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("0|[j*7znho{u", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("0|[j*7znho{u", string3);
      
      String string4 = StringUtils.join((List<?>) null, '+', 722, (-3022));
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("/+N");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("/+N", string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another_Wb", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      
      String string6 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Search and Replace array lengths don't match: ", "org.junitpioneer.jupiter.resource.TemporaryDirectory");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Mitirurngbb.rviguiTtnwipuunwiuunTffcrunicn%p", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Mitirurngbb.rviguiTtnwipuunwiuunTffcrunicn%p";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.resource.TemporaryDirectory";
      charSequenceArray0[2] = (CharSequence) "/+N";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.resource.TemporaryDirectory";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.resource.TemporaryDirectory";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.resource.TemporaryDirectory";
      charSequenceArray0[7] = (CharSequence) "/+N";
      charSequenceArray0[8] = (CharSequence) "0|[j*7znho{u";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("/+N", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, '`');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '\\', '\\');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string2 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultIfBlank(" is not in the range '0' - '9'", "Z?A&b*qu+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, " is not in the range '0' - '9'");
      assertNull(stringArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String string5 = StringUtils.join(intArray0, 'v', 564, (-2964));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.join(intArray0, 'L');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("0L0L0", string7);
      
      String string8 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.swapCase("4'");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("4'", string9);
      
      boolean boolean0 = StringUtils.endsWith("4'", " &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1");
      assertFalse(boolean0);
      
      String string10 = StringUtils.trimToNull("");
      assertNull(string10);
      
      String string11 = StringUtils.difference("", (String) null);
      assertTrue(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertNotNull(string11);
      assertEquals("", string11);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.difference("c-F8JpHZ93r-hj)n<w", (String) null);
      assertNotNull(string0);
      assertEquals("c-F8JpHZ93r-hj)n<w", string0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)31;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)3520;
      shortArray0[3] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)31, (short)5, (short)3520, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("31e5e3520e5", string0);
      
      String string1 = StringUtils.unwrap("I/`b]\"pH", '{');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("I/`b]\"pH", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$k?{&_}", (CharSequence) "I/`b]\"pH");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      int int1 = StringUtils.indexOfAny((CharSequence) ")To'H*:v{Z8[UvR`", "I/`b]\"pH");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string3 = StringUtils.upperCase("736,");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("736,", string3);
      
      String string4 = StringUtils.replaceAll("736,", (String) null, "I/`b]\"pH");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("736,", string4);
      
      String string5 = StringUtils.replaceOnce("736,", (String) null, (String) null);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("736,", string5);
      
      String string6 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.containsWhitespace(")To'H*:v{Z8[UvR`");
      assertFalse(boolean0);
      
      String string7 = StringUtils.join((Object[]) null, "Threshold must not be negative", 832, (-128));
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "$k?{&_}");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.wrap((String) null, '{');
      assertNull(string8);
      
      String string9 = StringUtils.normalizeSpace("$k?{&_}");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals("$k?{&_}", string9);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBefore("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripEnd("\r", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringAfter("z", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("z", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("z", string1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.wrapIfMissing("&:Rd@] does not exist", "&:Rd@] does not exist");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&:Rd@] does not exist", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("&:Rd@] does not exist"));
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(10, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?v=SL%GJf", "?v=SL%GJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?v=SL%GJf", (-350));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      String string0 = StringUtils.join(charArray0, '^');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("^^^", string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("^^^", supplier0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^^^", string1);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      longArray0[0] = (-969L);
      longArray0[1] = (long) 3548;
      longArray0[2] = (long) 3548;
      longArray0[3] = (long) '^';
      longArray0[4] = (long) (-350);
      String string2 = StringUtils.join(longArray0, '^');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {(-969L), 3548L, 3548L, 94L, (-350L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("-969^3548^3548^94^-350", string2);
      
      String string3 = StringUtils.wrap("org.apache.commons.lang3.StringUtils", '^');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("^org.apache.commons.lang3.StringUtils^", string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^org.apache.commons.lang3.StringUtils^", "?v=SL%GJf");
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviateMiddle("", "org.apache.commons.lang3.StringUtils", 1671);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.substring(":", 3548, 49);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'A');
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2002, (-99));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[2] = (-1220.569F);
      floatArray0[3] = (-1220.569F);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("vz"));
      
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("vz"));
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean1);
      
      boolean boolean2 = priorityQueue0.add("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("vz"));
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean2);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("vz"));
      assertTrue(priorityQueue0.contains(""));
      
      String string2 = StringUtils.join(iterator0, '=');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("vz"));
      assertTrue(priorityQueue0.contains(""));
      assertEquals("=", string2);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = (Object) (-1220.569F);
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, objectArray0.length);
      assertEquals("-1220.569", string3);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("-1220.569", "-1220.569", locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(25, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "n%,2;M/=:+f");
      assertFalse(int1 == int0);
      assertEquals((-11), int1);
      
      String string4 = StringUtils.removeEndIgnoreCase("=", "BOrX(@tW");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("=", string4);
      
      String string5 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string5);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = (float) 'Y';
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 'Y';
      String string0 = StringUtils.join(floatArray0, 'Y');
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 89.0F, 89.0F, 89.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0Y0.0Y89.0Y89.0Y89.0", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("0.0Y0.0Y89.0Y89.0Y89.0", "0.0Y0.0Y89.0Y89.0Y89.0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("Strings must not be nullj3}_,D%g1!!d'%tn", "...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be nullj3}_,D%g1!!d'%tn", string1);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.replaceChars("n@-", '#', 'i');
      assertNotNull(string0);
      assertEquals("n@-", string0);
      
      String string1 = StringUtils.removeEnd("n@-", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("n@-", string1);
      
      String string2 = StringUtils.toRootLowerCase("n@-");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("n@-", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "n@-");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals("n@-", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      
      boolean boolean0 = StringUtils.isMixedCase("n@-");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("g}s}w<%(XH`DbQ", '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("&g}s}w<%(XH`DbQ&", string3);
      
      String string4 = StringUtils.lowerCase("n@-");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("n@-", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "n@-", ")To'H*:v{Z8[UvR`");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.upperCase("&");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("&", string5);
      
      String string6 = StringUtils.replaceAll("&", "Q:|T%gr^", "g}s}w<%(XH`DbQ");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("&", string6);
      
      String string7 = StringUtils.appendIfMissing((String) null, "&", (CharSequence[]) null);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.split((String) null, 'i');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("", "&:Rd@] does not exist");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(10, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'e', Integer.MAX_VALUE, 2735);
      assertNotNull(string2);
      assertEquals(10, stringArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("", "#QcU~@SgY._n=}4WM)%QoKd`hh-");
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stringArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '#', 2735, 182);
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(10, stringArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.center("", 31, "java.lang.SecurityManager");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("java.lang.Securjava.lang.Securi", string5);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Oznyz1gF+>0|?", '\'');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'Oznyz1gF+>0|?'", string1);
      
      int int0 = StringUtils.ordinalIndexOf("Oznyz1gF+>0|?", "Oznyz1gF+>0|?", 4);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("j3}_,D%g1!!d'%tn from static ", "Oznyz1gF+>0|?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j3}_,D%g1!!d'%tn from static ", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "j3}_,D%g1!!d'%tn from static ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Oznyz1gF+>0|?");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Oznyz1gF+>0|?"));
      
      boolean boolean1 = arrayList0.add((Object) "'Oznyz1gF+>0|?'");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("Oznyz1gF+>0|?"));
      assertTrue(arrayList0.contains("'Oznyz1gF+>0|?'"));
      assertTrue(boolean1);
      
      String string3 = StringUtils.join((List<?>) arrayList0, '\'', 0, 0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("Oznyz1gF+>0|?"));
      assertTrue(arrayList0.contains("'Oznyz1gF+>0|?'"));
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize(" from static j3}_,D%g1!!d'%tn");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(" from static j3}_,D%g1!!d'%tn", string4);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '\'';
      longArray0[4] = (long) 4;
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.abbreviateMiddle("'Oznyz1gF+>0|?'", "Ge@]vO7", (-6450));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("'Oznyz1gF+>0|?'", string6);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) " from static j3}_,D%g1!!d'%tn", (CharSequence) "'Oznyz1gF+>0|?'", 0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "j3}_,D%g1!!d'%tn from static ");
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(29, int4);
      
      String string7 = StringUtils.rightPad("The resource returned by [%s] was null, which is not allowed", 0, "'Oznyz1gF+>0|?'");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("The resource returned by [%s] was null, which is not allowed", string7);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.substringBetween("}", (String) null, ")]hd");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("yu>goUu#fk");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yu>gouu#fk", string2);
      
      charSequenceArray0[2] = (CharSequence) "yu>gouu#fk";
      String string3 = StringUtils.leftPad(")]hd", 565, 'i');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", string3);
      
      String string4 = StringUtils.abbreviate((String) null, (-25), 3);
      assertNull(string4);
      
      String string5 = StringUtils.strip("@HR9KLu^OFG;Ku5", "}");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("@HR9KLu^OFG;Ku5", string5);
      
      String string6 = StringUtils.capitalize("yu>goUu#fk");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("Yu>goUu#fk", string6);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "4WM)%QoKd`hh-");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "@HR9KLu^OFG;Ku5", 435, 565);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.removeFirst("yu>goUu#fk", "Strings must not be null");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("yu>goUu#fk", string7);
      
      String string8 = StringUtils.stripAccents("Pl1<V|");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("Pl1<V|", string8);
      
      boolean boolean2 = StringUtils.isAlpha("Pl1<V|");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("Threshold must not be negative", string9);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "4WM)%QoKd`hh-", charSequenceArray0[2]);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string10 = StringUtils.removeEnd("#QcU~@SgY._n=}", "4WM)%QoKd`hh-");
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertEquals("#QcU~@SgY._n=}", string10);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.stripEnd("doPrivileged", "-8Jpb},<@h#@!k$qW$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      String string2 = StringUtils.abbreviate("doPrivileged", 76);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("doPrivileged", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" is not in the range '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", '>');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals(20, stringArray0.length);
      assertEquals("is", charSequence0);
      
      String string4 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) 'k');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("OverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.removePattern("Aborting to protect against StackOverflowError - output of one loop is the input of another", "doPrivileged");
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      String string6 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-6), 'k');
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertNotNull(string6);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "doPrivileged";
      objectArray0[2] = (Object) "doPrivileged";
      objectArray0[3] = (Object) "is";
      String string7 = StringUtils.join(objectArray0, 'k');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
      assertEquals("kdoPrivilegedkdoPrivilegedkis", string7);
      
      String string8 = StringUtils.rightPad("doPrivileged", 76, 'k');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("doPrivilegedkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string8);
      
      String string9 = StringUtils.wrapIfMissing("sr<l(aU", "sr<l(aU");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("sr<l(aU", string9);
      
      byte[] byteArray0 = StringUtils.getBytes("sr<l(aU", (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)114, (byte)60, (byte)108, (byte)40, (byte)97, (byte)85}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string10 = StringUtils.unwrap("org.easymock.bytebuddy.asm.Advice$WithCustomMapping", 'k');
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      assertEquals("org.easymock.bytebuddy.asm.Advice$WithCustomMapping", string10);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "sr<l(aU", (CharSequence) "doPrivilegedkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.join((int[]) null, 'j', 7, 53);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((int[]) null, 'f');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("]gKF1O", 17);
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("N[ 9AlN )o&3wp*", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.join((int[]) null, '\"', 7, 15);
      assertNull(string5);
      
      String string6 = StringUtils.difference("swdfzv-KS7xdO", "a");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("a", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "]gKF1O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '6', 50, 16);
      assertNull(string0);
      
      String string1 = StringUtils.mid((String) null, 8, (-3810));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("HCDY3c28~&", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Objectvarargsmustnotbenull", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Objectvarargsmustnotbenull";
      charSequenceArray0[1] = (CharSequence) "HCDY3c28~&";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[3] = (CharSequence) "HCDY3c28~&";
      boolean boolean1 = StringUtils.startsWithAny("HCDY3c28~&", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'r');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("ObjectvarargsmustnotbenullrHCDY3c28~&rObject varargs must not be nullrHCDY3c28~&", string4);
      
      String string5 = StringUtils.rightPad("Object varargs must not be null", (-580), 'r');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Object varargs must not be null", string5);
      
      String string6 = StringUtils.mid((String) null, (-1844), (-2106));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.remove("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "bindingMechanic");
      assertNotNull(string0);
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string0);
      
      String string1 = StringUtils.overlay("&:Rd@] does not exist-", "swdfzv-KS7xdO", 160, 160);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&:Rd@] does not exist-swdfzv-KS7xdO", string1);
      
      String string2 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "G5`~";
      String string3 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '=');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("O=G5`~==", string4);
      
      String string5 = StringUtils.rightPad("1qi;bk%7x=@", 3, '=');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("1qi;bk%7x=@", string5);
      
      String string6 = StringUtils.unwrap("$%]6~PUr", (String) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("$%]6~PUr", string6);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("CLocale must not be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("CLocale must not be null", string2);
      
      String[] stringArray0 = StringUtils.split("eIN", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("4?SBjWk>", "eIN");
      assertEquals((-49), int0);
      
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.endsWith("CLocale must not be null", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)3520;
      shortArray0[3] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)46, (short)5, (short)3520, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("46e5e3520e5", string0);
      
      String string1 = StringUtils.unwrap("I/`b]\"pH", '{');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("I/`b]\"pH", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$k?{&_}", (CharSequence) "I/`b]\"pH");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      int int1 = StringUtils.indexOfAny((CharSequence) ")To'H*:v{Z8[UvR`", "I/`b]\"pH");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string3 = StringUtils.upperCase("736,");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("736,", string3);
      
      String string4 = StringUtils.replaceAll("736,", (String) null, "I/`b]\"pH");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("736,", string4);
      
      String string5 = StringUtils.appendIfMissing("736,", "46e5e3520e5", (CharSequence[]) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("736,46e5e3520e5", string5);
      
      String string6 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.containsWhitespace(")To'H*:v{Z8[UvR`");
      assertFalse(boolean0);
      
      String string7 = StringUtils.join((Object[]) null, "Threshold must not be negative", 851, (-128));
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "$k?{&_}");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1572);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("Object varargs must not be null", 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "Minimum abbreviation width with offset is %d");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("fsc", "$k?{&_}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$k?{&_}fsc$k?{&_}", string1);
      
      String string2 = StringUtils.substringBefore((String) null, Integer.MIN_VALUE);
      assertNull(string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1672;
      String string3 = StringUtils.join(intArray0, 'M', 48, (-1102));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new int[] {1672}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString((String) null, "File must not be null or blank");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("File must not be null or blank", string4);
      
      String string5 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "n@-", "O!");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("O!");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("?y3D=lIw4(4JX", "?");
      assertNotNull(string0);
      assertEquals("?y3D=lIw4(4JX?", string0);
      
      String string1 = StringUtils.substringBetween("?y3D=lIw4(4JX", "Whb$UOiB,y");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.startsWithAny("O!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'p', 89, (-1521));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("?y3D=lIw4(4JX", 3854, "nkZ(L");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "");
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "O!", (CharSequence) "?y3D=lIw4(4JX?");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.overlay("-0]?5,<R#' k=|#r~In", "Jxxx'2EL,=", 884, 822);
      assertNotNull(string0);
      assertEquals("-0]?5,<R#' k=|#r~InJxxx'2EL,=", string0);
      
      String string1 = StringUtils.wrapIfMissing("-0]?5,<R#' k=|#r~InJxxx'2EL,=", "-0]?5,<R#' k=|#r~In");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-0]?5,<R#' k=|#r~InJxxx'2EL,=-0]?5,<R#' k=|#r~In", string1);
      
      String string2 = StringUtils.defaultString("org.apache.commons.lang3.CharUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("-0]?5,<R#' k=|#r~InJxxx'2EL,=-0]?5,<R#' k=|#r~In");
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("cj^h}B@<F ", 822, "#");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("#####################################################################################################################################################################################################################################################################################################################################################################################################################cj^h}B@<F #####################################################################################################################################################################################################################################################################################################################################################################################################################", string3);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove(".", 'B');
      assertNotNull(string0);
      assertEquals(".", string0);
      
      String string1 = StringUtils.overlay("G5`~", "J_pQ `", 160, 3307);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~J_pQ `", string1);
      
      String string2 = StringUtils.defaultIfBlank("t1M;mQMO", "G5`~J_pQ `");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("t1M;mQMO", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "G5`~";
      charSequenceArray0[1] = (CharSequence) ".";
      charSequenceArray0[2] = (CharSequence) "G5`~J_pQ `";
      String string3 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+{!", "t1M;mQMO", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("p{InCombiningDiacriticalMarks}+{!t1M;mQMO", string3);
      
      boolean boolean0 = StringUtils.equalsAny("J_pQ `", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("@U|uGEv[B", 'B');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.prependIfMissing("J_pQ `", "G5`~", stringArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertEquals("G5`~J_pQ `", string4);
      
      String string5 = StringUtils.right("G5`~J_pQ `", 3307);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("G5`~J_pQ `", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("7'i^0~I_x2n$7Ti", "9");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("t1M;mQMO"));
      
      String string6 = StringUtils.join((Iterable<?>) hashSet0, 'G');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("t1M;mQMO"));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", value=", '=');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 68);
      assertEquals(13, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)22;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'o', 8, 2292);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.params.FloatRange", "jl1F_]7|,~", true);
      assertEquals(5, int0);
      
      String string0 = StringUtils.left("org.junitpioneer.jupiter.params.FloatRange", 5);
      assertNotNull(string0);
      assertEquals("org.j", string0);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.params.FloatRange", "org.j", "h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hunitpihneeupitepaamsFlhatRane", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "h";
      objectArray0[1] = (Object) "jl1F_]7|,~";
      objectArray0[3] = (Object) "N_o25(NyP;^";
      String string2 = StringUtils.join(objectArray0, "{", 1613, 1241);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.FloatRange", (String) null, (-1326));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "H(:*p|E", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.lowerCase("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.params.floatrange", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "H(:*p|E", (CharSequence) "org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(int1 == int0);
      assertEquals(41, int1);
      
      String string5 = StringUtils.substringAfter("org.junitpioneer.jupiter.params.floatrange", (-1118));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("N_o25(NyP;^");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      
      String string6 = StringUtils.right("", (-15));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.stripAccents((String) null);
      assertNull(string7);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(" from static ", (String) null, 1613);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.replace("\"c.!<el@9 <wfsf|)u(bindingMechanic=", (String) null, "jefEZcw");
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("`}V03wE", "metafactory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`}V03wE", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("`}V03wE", " from static ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" from static `}V03wE from static ", string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric(" from static ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("metafactory");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.replace("cJ", "OZ35s!g7}_wo'iG", (String) null, 6297);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("cJ", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("nk", "\n");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("nk", string4);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("nk", "\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("E.z5 fLWpw7hxJ,ekl*", "nk", 108);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("E.z5 fLWpw7hxJ,ekl*", string5);
      
      String string6 = StringUtils.removeStart("cJ", "\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("cJ", string6);
      
      String string7 = StringUtils.replaceOnce((String) null, "),b I:E!", "nk-");
      assertNull(string7);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '%';
      charArray0[2] = '*';
      charArray0[3] = '8';
      charArray0[4] = '+';
      charArray0[5] = 'h';
      charArray0[6] = '-';
      charArray0[7] = '3';
      int int0 = StringUtils.indexOfAny((CharSequence) "nk-", charArray0);
      assertArrayEquals(new char[] {'&', '%', '*', '8', '+', 'h', '-', '3'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.substringBefore((String) null, "+?rSs");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "B\"u{=qDMdIDpKNm");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceAll("O0yKOPgw[\\wzj#<D@", "Minimum abbreviation width is %d", "wQ)M)IUV|GR+MZZD");
      assertNotNull(string3);
      assertEquals("O0yKOPgw[\\wzj#<D@", string3);
      
      String string4 = StringUtils.repeat("+?rSs", 2527);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase((String) null, string4, (CharSequence[]) null);
      assertFalse(string4.equals((Object)string3));
      assertNull(string5);
      
      String string6 = StringUtils.lowerCase("org.junitpioneer.jupiter.params.LongRange");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.jupiter.params.longrange", string6);
      
      String string7 = StringUtils.truncate((String) null, 13);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("%O%");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("K` )bkVcf!RMSm", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("K` )bkVcf!RMSm", string1);
      
      String string2 = StringUtils.substringBetween("K` )bkVcf!RMSm", "K` )bkVcf!RMSm");
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'e', Integer.MAX_VALUE, 89);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(3, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("nkZ(L", 52, "%O%");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("%O%%O%%O%%O%%O%%O%%O%%nkZ(L%O%%O%%O%%O%%O%%O%%O%%O", string4);
      
      String string5 = StringUtils.join((Object[]) null, "b");
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "%O%%O%%O%%O%%O%%O%%O%%nkZ(L%O%%O%%O%%O%%O%%O%%O%%O", (CharSequence) "O");
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      
      boolean boolean1 = StringUtils.isEmpty("O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = 142;
      String string1 = "Object varargs must not be null";
      String string2 = StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Objectvarargsmustnotbenull", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Objectvarargsmustnotbenull";
      charSequenceArray0[1] = (CharSequence) "HCDY3c28~&";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[3] = (CharSequence) "HCDY3c28~&";
      boolean boolean1 = StringUtils.startsWithAny("HCDY3c28~&", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'B', (-325), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -325
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Illegal range. There's no way to get from %s to %s with a step of %s.", (-2235));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("j3T{-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j3T{-", string2);
      
      String string3 = "org.easymock.bytebuddy.build.CachedReturnPlugin";
      String string4 = StringUtils.toRootLowerCase("org.easymock.bytebuddy.build.CachedReturnPlugin");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("org.easymock.bytebuddy.build.cachedreturnplugin", string4);
      
      Locale locale0 = Locale.forLanguageTag("| ");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string4));
      
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.poll();
      assertNull(locale_LanguageRange0);
      assertEquals(0, linkedList0.size());
      
      String string5 = "-\\E\\oG[>F2rMG'{X}<";
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(string4));
      
      boolean boolean0 = priorityQueue0.addAll(vector0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(priorityQueue0.contains(string4));
      assertFalse(vector0.contains(string4));
      assertFalse(boolean0);
      
      boolean boolean1 = priorityQueue0.add("-EoG[>F2rMG'{X}<");
      assertFalse(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string4));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertTrue(boolean1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(priorityQueue0.contains(string4));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertFalse(list0.contains(string4));
      
      String string6 = StringUtils.upperCase("", locale0);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", string6);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.easymock.bytebuddy.build.CachedReturnPlugin", "j3T{-", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank("| ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string7 = "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.";
      String string8 = StringUtils.repeat('D', (-1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string8));
      assertTrue(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string4));
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin";
      // Undeclared exception!
      try { 
        StringUtils.truncate("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "BOrX(";
      charSequenceArray0[1] = (CharSequence) "BOrX(";
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BOrX(", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBetween("BOrX(", "wu55;SsA V$}06<A");
      assertNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "BOrX(", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("?vv=L%SGJf", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?vv=L%SGJf", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.wrapIfMissing("", "?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "O{c@9$of", "KmWaoMNh%v+ib,yydm");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("mE@CgC]", "");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("mE@CgC]", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("KmWaoMNh%v+ib,yydm", "mE@CgC]", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals("mE@CgC]KmWaoMNh%v+ib,yydm", string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "mE@CgC]KmWaoMNh%v+ib,yydm", (CharSequence) "mE@CgC]KmWaoMNh%v+ib,yydm", 102);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.center("?vv=L%SGJf", 10);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("?vv=L%SGJf", string4);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Qn");
      assertTrue(boolean0);
      
      String string0 = StringUtils.removePattern("Qn", "Qn");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("Qn", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Qn", string1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeIgnoreCase("j3}_,D%g1!!d'%tn", "3R\"Xwf@Pu?mUi0:U");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j3}_,D%g1!!d'%tn", string1);
      
      String string2 = StringUtils.stripEnd("j3}_,D%g1!!d'%tn", "6bPSSZ ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j3}_,D%g1!!d'%tn", string2);
      
      String string3 = StringUtils.getDigits("}*5~SJ_pQ `");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("5", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.wrapIfMissing("j3}_,D%g1!!d'%tn", " from static ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" from static j3}_,D%g1!!d'%tn from static ", string4);
      
      String string5 = StringUtils.substring("3R\"Xwf@Pu?mUi0:U", (-3223), 16);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("3R\"Xwf@Pu?mUi0:", string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("3R\"Xwf@Pu?mUi0:");
      assertFalse(boolean0);
      
      String string6 = StringUtils.leftPad("j3}_,D%g1!!d'%tn", 16, "5");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("j3}_,D%g1!!d'%tn", string6);
      
      String string7 = StringUtils.reverseDelimited("|'T#Tw:Y?vQEqgo", 'F');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("|'T#Tw:Y?vQEqgo", string7);
      
      String string8 = StringUtils.chomp((String) null, "org.apache.commons.lang3.Charsets");
      assertNull(string8);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&:Rd@] does not exist", "7a?sSO])K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.overlay((String) null, "&:Rd@] does not exist", 40, 40);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad((String) null, 40, 'c');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("0.0", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "0.0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0.0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "=d5UD'93SEAX{", (String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=d5UD'93SEAX{";
      stringArray0[1] = "=d5UD'93SEAX{";
      stringArray0[2] = "=d5UD'93SEAX{";
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender";
      String string1 = StringUtils.substringAfter("org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Oznyz1gF+>0|?", '\'');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'Oznyz1gF+>0|?'", string2);
      
      int int0 = StringUtils.ordinalIndexOf("Oznyz1gF+>0|?", "Oznyz1gF+>0|?", 4);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.unwrap("j3}_,D%g1!!d'%tn from static ", "Oznyz1gF+>0|?");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("j3}_,D%g1!!d'%tn from static ", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "j3}_,D%g1!!d'%tn from static ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Oznyz1gF+>0|?");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      boolean boolean1 = arrayList0.add((Object) "'Oznyz1gF+>0|?'");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("'Oznyz1gF+>0|?'"));
      assertFalse(arrayList0.contains(""));
      assertTrue(boolean1);
      
      String string4 = StringUtils.join((List<?>) arrayList0, '\'', 0, 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("'Oznyz1gF+>0|?'"));
      assertFalse(arrayList0.contains(""));
      assertEquals("", string4);
      
      String string5 = StringUtils.capitalize(" from static j3}_,D%g1!!d'%tn");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" from static j3}_,D%g1!!d'%tn", string5);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '\'';
      longArray0[4] = (long) 4;
      longArray0[5] = 4423L;
      longArray0[6] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '\'', 4, 1266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{", 'p');
      assertNotNull(string0);
      assertEquals("p{p", string0);
      
      int int0 = StringUtils.ordinalIndexOf("{", "{", 1);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.easymock.bytebuddy.asm.Advice$AssignReturned", "{");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.stripEnd("-", "-");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "-", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.overlay("", "", (-669), (-669));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("", 'Y');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) (-669);
      longArray0[2] = (long) (-669);
      String string4 = StringUtils.join(longArray0, 'g');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new long[] {66L, (-669L), (-669L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("66g-669g-669", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "66g-669g-669", (CharSequence) "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = "Ge@]vO7";
      String string7 = StringUtils.abbreviateMiddle("Ge@]vO7", (String) null, (-669));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("Ge@]vO7", string7);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5188);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      String string0 = "ORG.APACHE.COMMONS.LANG3.STRINGUTILSC,B.TP";
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "ORG.APACHE.COMMONS.LANG3.STRINGUTILSC,B.TP", "ORG.APACHE.COMMONS.LANG3.STRINGUTILSC,B.TP");
      assertNull(stringArray0);
      
      String string1 = StringUtils.mid("9$]2^,:z@L", 3, 3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2^,", string1);
      
      boolean boolean0 = StringUtils.isBlank("HhU$y/uA2W<K'hx3PV'");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((long[]) null, '4');
      assertNull(string2);
      
      String string3 = "{!";
      String string4 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", "{!");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("{!p{InCombiningDiacriticalMarks}+{!", string4);
      
      String string5 = StringUtils.join(charArray0, '_');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertArrayEquals(new char[] {'4', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("4_4_\u0000_\u0000_\u0000_\u0000_\u0000_\u0000_\u0000", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "2^,", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'4', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "HhU$y/uA2W<K'hx3PV'", (CharSequence) "{!");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "matches '%s'.", (CharSequence) "{!");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.join((String[]) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringBefore((String) null, 3);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("HCDY3c28~&", "ICVv", "2gF)&^Sor");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("HCDY3c28~&", string1);
      
      String string2 = StringUtils.trimToNull("HCDY3c28~&");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("HCDY3c28~&");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String string3 = StringUtils.join(booleanArray0, 'A', 348, 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviate(" is not visible to ", 96, 10);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("...ble to ", string4);
      
      String string5 = StringUtils.truncate("\"CC(_6M(*)d:;Gsh", 95);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("\"CC(_6M(*)d:;Gsh", string5);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("p<q");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.normalizeSpace("p<q");
      assertNotNull(string0);
      assertEquals("p<q", string0);
      
      boolean boolean0 = StringUtils.equalsAny("p<q", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Locale must not be null", "c4|", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("ltxe}dWO@tH", "Search and Replace array lengths don't match: ");
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" @?M/[f(", " @?M/[f(");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("% vd#&Aw/l&}n=|4;o.", "tdOfQLV,");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'E', (-780), (-780));
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.center("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "=[nMN");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.overlay("C5Ti+t/a~+aoC>", "Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", (-780), (-1105));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from itC5Ti+t/a~+aoC>", string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from itC5Ti+t/a~+aoC>");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny("Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from itC5Ti+t/a~+aoC>", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("=[nMN"));
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, 'L');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("=[nMN"));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "G5`~";
      int[] intArray0 = new int[1];
      intArray0[0] = 938;
      String string0 = StringUtils.join(intArray0, 'd');
      assertNotNull(string0);
      assertArrayEquals(new int[] {938}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("938", string0);
      
      charSequenceArray0[1] = (CharSequence) "938";
      charSequenceArray0[2] = (CharSequence) "G5`~";
      charSequenceArray0[3] = (CharSequence) "}";
      charSequenceArray0[4] = (CharSequence) "}";
      charSequenceArray0[5] = (CharSequence) "G5`~";
      int int0 = StringUtils.lastIndexOfAny("}", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("WJP]_Lo", "Minimum abbreviation width is %d", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", string1);
      
      String string2 = StringUtils.substringBetween("AV[T~E", "$~2l$3\"[w*M@#~^6aLf", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", "2%eZ:l[X");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("2%eZ:l[XThis test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.2%eZ:l[X", string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("I/`b]\"pH", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("G5`~I/`b]\"pH", string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "2%eZ:l[XThis test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.2%eZ:l[X", charSequenceArray0[1], 1752);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("}", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "I/`b]\"pH");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "2%eZ:l[X", 10, 938);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[5], (CharSequence) null, 183);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtils.join(booleanArray0, '7', (int) '7', (int) '7');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", ' ');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("b2Krm;Cg'Q(bhI@2b");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) null, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.center("}", 13, "}");
      assertNotNull(string0);
      assertEquals("}}}}}}}}}}}}}", string0);
      
      String string1 = StringUtils.stripStart("}}}}}}}}}}}}}", "'&qS'BU");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}}}}}}}}}}}}}", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(13));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.contains(13));
      
      boolean boolean0 = priorityQueue1.add("'&qS'BU");
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(1, priorityQueue1.size());
      assertNotSame(priorityQueue1, priorityQueue0);
      assertTrue(priorityQueue1.contains("'&qS'BU"));
      assertFalse(priorityQueue1.contains(13));
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertFalse(priorityQueue0.contains(13));
      
      String string2 = StringUtils.join(iterator0, '=');
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, priorityQueue0.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertFalse(priorityQueue0.contains(13));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) iterator0;
      objectArray0[2] = (Object) "}";
      objectArray0[1] = (Object) "}";
      objectArray0[4] = (Object) "'&qS'BU";
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(5, objectArray0.length);
      assertEquals("}}'&qS'BU", string3);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("", "}", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.chop(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-555L);
      longArray0[1] = 0L;
      String string0 = StringUtils.join(longArray0, 'y', 160, 11);
      assertNotNull(string0);
      assertArrayEquals(new long[] {(-555L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("W17(l_T3o1R2", 11, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("W17(l_T3o1R2", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "]");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string3 = StringUtils.abbreviate("W17(l_T3o1R2", "", (-5007), 160);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("W17(l_T3o1R2", string3);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.mid("aborting to protect against StackOverflowError - output of one loop is the input of another", 5, 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ing to protect ag", string1);
      
      String string2 = "BCe>|npI1y";
      String string3 = StringUtils.left("ing to protect ag", 17);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ing to protect ag", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[5] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "ing to protect ag";
      charSequenceArray0[3] = (CharSequence) "aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string4 = StringUtils.wrapIfMissing("ing to protect ag", "ing to protect ag");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("ing to protect ag", string4);
      
      String string5 = StringUtils.substring("aborting to protect against StackOverflowError - output of one loop is the input of another", (-3320), (-3320));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.remove("", '\u008D');
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "", 1100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.rotate("", 128);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
      
      charSequenceArray0[0] = (CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!";
      String string1 = StringUtils.removeAll("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.leftPad("S!", 6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("    S!", string2);
      
      charSequenceArray0[2] = (CharSequence) "    S!";
      String string3 = StringUtils.rotate("", 108);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", charSequence0);
      
      charSequenceArray0[4] = (CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!";
      String string4 = StringUtils.leftPad("org.junitpioneer.jupiter.RetryingTestExtension", (-1375), "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string4);
      
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension";
      String string5 = StringUtils.reverseDelimited("\"=BR6AUh-vVOm@R", 'F');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertNotNull(string5);
      assertEquals("\"=BR6AUh-vVOm@R", string5);
      
      charSequenceArray0[6] = (CharSequence) "\"=BR6AUh-vVOm@R";
      String string6 = StringUtils.chomp((String) null, "|{ihBH>ug33");
      assertNull(string6);
      
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("4w*\"]NbM}xC");
      assertNotNull(string0);
      assertEquals("4w*\"]NbM}xC", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("4w*\"]NbM}xC");
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("4w*\"]NbM}xC");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4W*\"]nBm}Xc", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '9';
      charArray0[2] = 'F';
      charArray0[3] = '|';
      int int0 = StringUtils.indexOfAny((CharSequence) "4w*\"]NbM}xC", charArray0);
      assertArrayEquals(new char[] {'q', '9', 'F', '|'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnce("4W*\"]nBm}Xc", "The Array must not be nullNo @DisabledUntil annotation found on element", "4W*\"]nBm}Xc");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("4W*\"]nBm}Xc", string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "4w*\"]NbM}xC", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'q', '9', 'F', '|'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\"', (-1), 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7)+jm:@0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'L');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.overlay("G5`~", "J_pQ `", 160, 3310);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~J_pQ `", string1);
      
      String string2 = StringUtils.defaultIfBlank("t1M;mQMO", "G5`~J_pQ `");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("t1M;mQMO", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "G5`~";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "G5`~J_pQ `";
      charSequenceArray0[3] = (CharSequence) "G5`~J_pQ `";
      charSequenceArray0[4] = (CharSequence) "t1M;mQMO";
      charSequenceArray0[5] = (CharSequence) "G5`~J_pQ `";
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'L');
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("G5`~L...LG5`~J_pQ `LG5`~J_pQ `Lt1M;mQMOLG5`~J_pQ `", string3);
      
      String string4 = StringUtils.rightPad("t1M;mQMO", 8192, 'F');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.repeat("...", "...", (-3097));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("7").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNotNull(string0);
      assertEquals("7", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      String string1 = StringUtils.join(booleanArray0, '*', (-386), (-386));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "7";
      charSequenceArray0[2] = (CharSequence) null;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-386);
      floatArray0[1] = (float) (-386);
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (-386);
      floatArray0[4] = (float) (-386);
      floatArray0[5] = (float) '*';
      floatArray0[6] = (float) '*';
      floatArray0[7] = (float) (-386);
      floatArray0[8] = (float) (-386);
      String string2 = StringUtils.join(floatArray0, '*', (-1855), (-4591));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-386.0F), (-386.0F), 42.0F, (-386.0F), (-386.0F), 42.0F, 42.0F, (-386.0F), (-386.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("", string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "7";
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.repeat("7", "o", (-1855));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("ith a step of %s.?*D<HEy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("Object varargs must not be null");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((int[]) null, 's');
      assertNull(string5);
      
      String string6 = StringUtils.substring("2Yj!>N~0", 1081);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2Yj!>N~0";
      String string7 = StringUtils.appendIfMissing("z[uVY0EL5", "2Yj!>N~0", charSequenceArray0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("z[uVY0EL52Yj!>N~0", string7);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "z[uVY0EL52Yj!>N~0", (CharSequence) "2Yj!>N~0");
      assertEquals(9, int0);
      
      String string8 = StringUtils.unwrap("org.junitpioneer.jupiter.resource.ResourceExtension", "StdIo_System_Err");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("org.junitpioneer.jupiter.resource.ResourceExtension", string8);
      
      boolean boolean0 = StringUtils.isNotEmpty("z[uVY0EL52Yj!>N~0");
      assertTrue(boolean0);
      
      String string9 = StringUtils.upperCase(string3);
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("B9mhnZ}~@E{jn4", "-Yz.6}*rz");
      assertNotNull(string0);
      assertEquals("B9mhnZ}~@E{jn4", string0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = "...";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.remove("...", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "J_pQ `", '\"');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("...", "#vW2%w0\"0U0");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.substring("...", 0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("...", string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#vW2%w0\"0U0");
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviate("J_as1)DR)i~qZ\"B", 1134, 2285);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("J_as1)DR)i~qZ\"B", string4);
      
      String string5 = StringUtils.strip((String) null, "%s was not annotated with @ArgumentsSource but should have been.");
      assertNull(string5);
      
      String string6 = StringUtils.capitalize("2DK5+pm3}jvb=9I");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("2DK5+pm3}jvb=9I", string6);
      
      boolean boolean1 = StringUtils.isNumeric("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = "58n|8uyiwv`1c k=@I";
      boolean boolean2 = StringUtils.containsNone((CharSequence) "...", "58n|8uyiwv`1c k=@I");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string8 = StringUtils.unwrap("...", (String) null);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("...", string8);
      
      int int1 = StringUtils.indexOf((CharSequence) "...", 3, 1134);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("2DK5+pm3}jvb=9I", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 47
         // Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000
         //                                                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "$%]6~PUrCP1@W8&s@", "L");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "No @DisabledUntil annotation found on element");
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '';
      charArray0[2] = 'i';
      charArray0[3] = '';
      charArray0[4] = '';
      String string1 = StringUtils.join(charArray0, '1');
      assertNotNull(string1);
      assertArrayEquals(new char[] {'i', '', 'i', '', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("i11i11", string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "i11i11");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "nk-", "Classpath resource [");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      int int0 = StringUtils.compare("\r", "\r", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeEnd(" from static ", "Cannot catch exception during constructor call for ");
      assertNotNull(string0);
      assertEquals(" from static ", string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) " from static ", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'D';
      charArray0[2] = '%';
      charArray0[3] = 'Z';
      charArray0[4] = '7';
      charArray0[5] = 'J';
      charArray0[6] = '#';
      charArray0[7] = 'o';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'<', 'D', '%', 'Z', '7', 'J', '#', 'o'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("<D%Z7J#o", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" from static ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " from static ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'<', 'D', '%', 'Z', '7', 'J', '#', 'o'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("!", "Object varargs must not be null", "!");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '<';
      String string1 = StringUtils.join(longArray0, 'E');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {60L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("60E0E0E0", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "?vv=L%SGJf");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null, true);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBefore("}c9vhi4&)eQ7Jr'}O_y", 32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("}c9vhi4&)eQ7Jr'}O_y", string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string3 = StringUtils.repeat("T5TH!Hd:u(821V#3", (String) null, 581);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat((String) null, "I^IfD7", (-1));
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("nk- ", 'T');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Search and Replace array lengths don't match: ", 16, (-1640));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("I^IfD7");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      String string1 = StringUtils.join(booleanArray0, '*', (-386), (-386));
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-386);
      floatArray0[1] = (float) (-386);
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (-386);
      floatArray0[4] = (float) (-386);
      floatArray0[5] = (float) '*';
      floatArray0[6] = (float) '*';
      floatArray0[7] = (float) (-386);
      floatArray0[8] = (float) (-386);
      String string2 = StringUtils.join(floatArray0, '*', (-1855), (-4591));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-386.0F), (-386.0F), 42.0F, (-386.0F), (-386.0F), 42.0F, 42.0F, (-386.0F), (-386.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("", string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.repeat((String) null, "o", (-1855));
      assertNull(string3);
      
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("3", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("3", "3");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.right("", 64);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.remove("3", '3');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnce("", "c", "B1]BZ!;h&oaBM5G}C");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[3] = (-1);
      String string6 = StringUtils.join(intArray0, 'S', 51, 1);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertArrayEquals(new int[] {(-1), 51, 51, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("", string6);
      
      String string7 = StringUtils.unwrap("QF", '>');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("QF", string7);
      
      String string8 = StringUtils.swapCase("id#K9VYf.t,@qBa:S@");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("ID#k9vyF.T,@QbA:s@", string8);
      
      String string9 = StringUtils.chomp("\r");
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = StringUtils.abbreviate("", "QF", 51);
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string9));
      assertNotNull(string10);
      assertEquals("", string10);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = 'S';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'S';
      charArray0[5] = 'e';
      charArray0[6] = '3';
      charArray0[7] = '>';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'3', 'S', '3', '3', 'S', 'e', '3', '>'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.chomp("?");
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("? RcD*S*'wx~r2", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("? RcD*S*'wx~r2", string1);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("0C^o~<YU(J", "0C^o~<YU(J", (-304));
      assertNotNull(string0);
      assertEquals("0C^o~<YU(J", string0);
      
      String string1 = StringUtils.chomp("s\" value=\"%s\" }");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s\" value=\"%s\" }", string1);
      
      String string2 = StringUtils.substringAfter("s\" value=\"%s\" }", "0C^o~<YU(J");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0C^o~<YU(J";
      charSequenceArray0[1] = (CharSequence) "0C^o~<YU(J";
      charSequenceArray0[2] = (CharSequence) "@";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@";
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string4 = StringUtils.prependIfMissing("@", "@", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("@", string4);
      
      String string5 = StringUtils.prependIfMissing("", charSequenceArray0[0], charSequenceArray0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.swapCase("$Proxy");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("$pROXY", string6);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.center((String) null, 286, "6ARn7#EEO3>RU");
      assertNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("6ARn7#EEO3>RU"));
      
      linkedList0.push((String) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("6ARn7#EEO3>RU"));
      
      boolean boolean0 = linkedList0.add("JO2F_Z");
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("6ARn7#EEO3>RU"));
      assertTrue(linkedList0.contains("JO2F_Z"));
      assertTrue(boolean0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList0.contains("6ARn7#EEO3>RU"));
      assertTrue(linkedList0.contains("JO2F_Z"));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertNotNull(string1);
      assertEquals(2, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("6ARn7#EEO3>RU"));
      assertTrue(linkedList0.contains(string1));
      assertEquals("JO2F_Z", string1);
      
      String string2 = StringUtils.repeat('%', 1572);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "9!\"s$bg$j5FS.N40=$", (CharSequence) "JO2F_Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPaduxEbmvuxEbmv");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEqualsuxEbmv", string2);
      
      String string3 = StringUtils.normalizeSpace("^2D&<Ir`A");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("^2D&<Ir`A", string3);
      
      int int0 = StringUtils.compare((String) null, "^2D&<Ir`A", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = "";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      
      boolean boolean2 = priorityQueue0.add("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'R');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.wrap("kjt~OXaL@", "");
      assertNotNull(string0);
      assertEquals("kjt~OXaL@", string0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?v=SL%GJf", "?v=SL%GJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?v=SL%GJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("yCBJ;");
      assertNotNull(string0);
      assertEquals("YCBJ;", string0);
      
      String string1 = StringUtils.unwrap("yCBJ;", '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yCBJ;", string1);
      
      String string2 = StringUtils.wrapIfMissing("...", "?v=SL%GJf");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?v=SL%GJf...?v=SL%GJf", string2);
      
      String string3 = StringUtils.difference("?v=SL%GJf", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, '2', 1672, (-1102));
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("|`W~=!([m[9", "yCBJ;");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("|`W~=!([m[9", string5);
      
      String string6 = StringUtils.join((int[]) null, '7');
      assertNull(string6);
      
      int int1 = StringUtils.compare((String) null, "5fB3sZ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.substringAfter("|`W~=!([m[9", (String) null);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int2 = StringUtils.lastIndexOfAny("yCBJ;", stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, stringArray0.length);
      assertEquals(5, int2);
      
      String string8 = StringUtils.leftPad((String) null, (-1), '&');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Z+'u@WGwvhTkuMr h", 2);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare((String) null, "Failed to assert access rights using security manager");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.strip("TjX{,X>$UB", "TjX{,X>$UB");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "TjX{,X>$UB");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // TjX{,X>$UB
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Wq(uH.$0`u!<1WH'^d", "5%$Qm`[8@4%", "qvUM<$");
      assertNotNull(string0);
      assertEquals("Wq(uH.U0$u!<1WH'^d", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Oh`a.wW(vr+'p>mFR", 64);
      assertNull(stringArray0);
      
      String string1 = StringUtils.lowerCase("Wq(uH.U0$u!<1WH'^d");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("wq(uh.u0$u!<1wh'^d", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "WHyqqTR;5K_t", (CharSequence) "}Jh_>O");
      assertEquals(12, int0);
      
      String string2 = StringUtils.substringAfter("Wq(uH.U0$u!<1WH'^d", 1847);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.right("7Ty L", 64);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("7Ty L", string3);
      
      String string4 = StringUtils.right("(m", 32);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("(m", string4);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {107.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("107.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.wrapIfMissing("4}6NNFW\u0006[c", "h)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h)4}6NNFW\u0006[ch)", string1);
      
      String string2 = StringUtils.trimToEmpty("kh{vm_ `F-,f>;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("kh{vm_ `F-,f>;", string2);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", '>');
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[3] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.difference("GMT", "GMT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[7] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[8] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequence0);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", 71);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removePattern("6}8?uO`9Nu2", "P_w");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("6}8?uO`9Nu2", string3);
      
      String string4 = StringUtils.center("E:2hyTm3p9i6'S{?lwQ", 71, '!');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!E:2hyTm3p9i6'S{?lwQ!!!!!!!!!!!!!!!!!!!!!!!!!!", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '>');
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(">Aborting to protect against StackOverflowError - output of one loop is the input of another>Aborting to protect against StackOverflowError - output of one loop is the input of another>Aborting to protect against StackOverflowError - output of one loop is the input of another>>Aborting to protect against StackOverflowError - output of one loop is the input of another>>Aborting to protect against StackOverflowError - output of one loop is the input of another>Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      String string6 = StringUtils.rightPad("6}8?uO`9Nu2", 3736, '!');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("6}8?uO`9Nu2", 3736, '.');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat('&', 13);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("&&&&&&&&&&&&&", string8);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[7], (CharSequence) "");
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'G';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = 'a';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "HCDY3c28~&", charArray0);
      assertArrayEquals(new char[] {'&', 'O', 'O', 'G', 'U', 'r', 'a'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-34);
      String string1 = StringUtils.join(byteArray0, 'O', (int) (byte)11, (int) (byte) (-34));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28, (byte)31, (byte)11, (byte) (-34), (byte)64, (byte) (-34)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("HCDY3c28~&");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayLanguage();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("Korean", string3);
      
      String string4 = StringUtils.upperCase("HCDY3c28~&", locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("HCDY3C28~&", string4);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("HCDY3c28~&", "HCDY3C28~&");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.swapCase("\n");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("107.0", 207, 76);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("107.0", string1);
      
      String string2 = StringUtils.strip("107.0", "org.apache.commons.lang3.ArrayUtils");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("107.0", string2);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.truncate((String) null, 5);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isBlank("ox7Nu`KW/Hl}*4y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", 938, 938);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.rotate("}", 938);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}", string1);
      
      String string2 = StringUtils.abbreviate("NMH?Pr;i%].a|MO=4", 938, 938);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NMH?Pr;i%].a|MO=4", string2);
      
      String string3 = StringUtils.strip("Minimum abbreviation width with offset is %d", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      String string4 = StringUtils.capitalize("HPQU`B] TSN");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("HPQU`B] TSN", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "NMH?Pr;i%].a|MO=4";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "}";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "NMH?Pr;i%].a|MO=4";
      charSequenceArray0[5] = (CharSequence) "HPQU`B] TSN";
      String string5 = StringUtils.appendIfMissing("Strings must not be null", "}", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("Strings must not be null", string5);
      
      String string6 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.containsWhitespace("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width with offset is %d", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string2 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("Another failed with one of the specified exceptions.", 21, '~');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Another failed with one of the specified exceptions.", string4);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string5 = StringUtils.join(objectArray0, '~');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(2, objectArray0.length);
      
      String string6 = StringUtils.rightPad("", 10, '|');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("||||||||||", string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.truncate("No instructions to disable", 21, 3861);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("sable", string7);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.substringAfterLast("Locale must not be null", 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("C", "Locale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Locale must not be nullCLocale must not be null", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Locale must not be null");
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '9');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be nullCLocale must not be null", charSequenceArray0[3], 16);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", '8');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.left("Z\"aSja1oZ:\"HmF", 16);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Z\"aSja1oZ:\"HmF", string4);
      
      String string5 = StringUtils.appendIfMissing("82:A7h4s2?s9", charSequenceArray0[2], charSequenceArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("82:A7h4s2?s9ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("Locale must not be nullCLocale must not be null", supplier0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Locale must not be nullCLocale must not be null", string6);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      int int1 = StringUtils.countMatches((CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j", 'u');
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j", (CharSequence) " AU=(QUO7)`B+'}#%O6ISM~;F0J", 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("[oiO,i[='k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.deleteWhitespace("\nLHD,Ql,Fc)Iy'jv ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LHD,Ql,Fc)Iy'jv", string1);
      
      String[] stringArray0 = new String[6];
      String string2 = StringUtils.join((Object[]) stringArray0, "LHD,Ql,Fc)Iy'jv", (-3096), (-3096));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, stringArray0.length);
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "LHD,Ql,Fc)Iy'jv", (-3096));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.replaceIgnoreCase("", "", "ZRiJ|`aPyC71=BNhx");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.lowerCase("LHD,Ql,Fc)Iy'jv");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("lhd,ql,fc)iy'jv", string4);
      
      String string5 = StringUtils.unwrap("", '0');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string6 = StringUtils.substringAfter("LHD,Ql,Fc)Iy'jv", 10);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("ouPh!Dr.9j~t");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(9, stringArray2.length);
      
      String string7 = StringUtils.right("\r", (-3958));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("$%]6~PUr", "lhd,ql,fc)iy'jv");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      
      String string8 = StringUtils.deleteWhitespace("LHD,Ql,Fc)Iy'jv");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("LHD,Ql,Fc)Iy'jv", string8);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("", "Search and Replace array lengths don't match: ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("(bindingMechanic=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: (bindingMechanic=
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.remove(" shared annotation", '6');
      assertNotNull(string0);
      assertEquals(" shared annotation", string0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, '\\');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.center((String) null, 13, '6');
      assertNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '\\';
      charArray0[2] = ')';
      charArray0[3] = '\\';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " shared annotation", charArray0);
      assertArrayEquals(new char[] {'6', '\\', ')', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'6', '\\', ')', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("", " shared annotation");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.compareIgnoreCase(" resource factory", (String) null);
      assertEquals(1, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      
      boolean boolean2 = linkedList0.remove((Object) " shared annotation");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = linkedList0.add(object0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      assertTrue(linkedList0.contains(object0));
      assertTrue(boolean3);
      
      boolean boolean4 = linkedList0.add((Object) "");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean4);
      
      Object object1 = linkedList0.removeFirst();
      assertNotNull(object1);
      assertEquals(1, linkedList0.size());
      assertSame(object1, object0);
      assertFalse(linkedList0.contains(13));
      assertTrue(linkedList0.contains(""));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '=', 1, (-2505));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      assertTrue(linkedList0.contains(""));
      assertEquals("", string4);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      int int1 = StringUtils.compare(" shared annotation", "w.Nh}9m;&+L", false);
      assertFalse(int1 == int0);
      assertEquals((-87), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 104);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.substring("", (-2505), 114);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.getDigits("%E0%ZwN9#Paes'");
      assertNotNull(string0);
      assertEquals("09", string0);
      
      String string1 = StringUtils.leftPad("Locale must not be null", 167, " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                Locale must not be null", string1);
      
      String string2 = StringUtils.defaultString("m.yA-BG;RKN");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("m.yA-BG;RKN", string2);
      
      boolean boolean0 = StringUtils.isAlpha("%E0%ZwN9#Paes'");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBefore("m.yA-BG;RKN", "%E0%ZwN9#Paes'");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("m.yA-BG;RKN", string3);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 167;
      floatArray0[1] = (float) 167;
      floatArray0[2] = (float) 167;
      floatArray0[3] = (float) 167;
      String string4 = StringUtils.join(floatArray0, 'W', 167, 167);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new float[] {167.0F, 167.0F, 167.0F, 167.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.center("&ns(^Nxs^AIN?", 167);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("                                                                             &ns(^Nxs^AIN?                                                                             ", string5);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.defaultString("@T");
      assertNotNull(string0);
      assertEquals("@T", string0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '\\');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Cannot cache the value of an abstract method: ");
      assertNotNull(string0);
      assertEquals("cannot cache the value of an abstract method: ", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "cannot cache the value of an abstract method: ", "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split((String) null, "n1m");
      assertNull(stringArray0);
      
      String string1 = StringUtils.repeat('?', 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'u');
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter((String) null, 160);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("Strings must not be null", (int) (byte) (-44));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.forLanguageTag("K7a8b0xeju");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int2 = StringUtils.getFuzzyDistance("Strings must not be null", "Cannot cache the value of an abstract method: ", locale0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.replaceChars("RObjfQ", "RObjfQ", "RObjfQ");
      assertNotNull(string0);
      assertEquals("RObjfQ", string0);
      
      String string1 = StringUtils.join((int[]) null, 'd', 76, 76);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissing("g", "g", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("g", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g", (CharSequence) "g");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("g", "", "g");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("g", string1);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      String string2 = StringUtils.join(longArray0, 'B');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("0B0B0B0", string2);
      
      String string3 = StringUtils.abbreviate("", 6, 1645);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "g");
      assertFalse(boolean0);
      
      String string4 = StringUtils.join(longArray0, ',', 1227, 7);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.difference((String) null, "permitSubclassEquality");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("permitSubclassEquality", string5);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("...", supplier0);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.repeat("...", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "...", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("...", "...");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 'Y';
      String string3 = StringUtils.join(floatArray0, 'i');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new float[] {89.0F, 89.0F, 89.0F, 89.0F, 89.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("89.0i89.0i89.0i89.0i89.0", string3);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string4 = StringUtils.swapCase("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j";
      String string2 = StringUtils.lowerCase("#Q");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#q", string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "% vd#&Aw/l&}n=|4;o.";
      stringArray0[1] = "% vd#&Aw/l&}n=|4;o.";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("% vd#&Aw/l&}n=|4;o.", string0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.leftPad("HCDY3c28~&", 0, 'r');
      assertNotNull(string0);
      assertEquals("HCDY3c28~&", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "HCDY3c28~&", (CharSequence) "HCDY3c28~&");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceIgnoreCase("HCDY3c28~&", "HCDY3c28~&", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("HCDY3c28~&", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("HCDY3c28~&", supplier0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("HCDY3c28~&", string2);
      
      String string3 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Objectvarargsmustnotbenull", string3);
      
      String string4 = StringUtils.replace("Search and Replace array lengths don't match: ", "j3}_,D%g1!!d'", "4xVw/`VGwTH%O", 2946);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string5 = StringUtils.rightPad("', has a length less than 2", 2946);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string5, (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "', has a length less than 2", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripAccents("HCDY3c28~&");
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("HCDY3c28~&", string6);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-658);
      longArray0[1] = (long) (-658);
      longArray0[2] = (long) (-658);
      String string1 = StringUtils.join(longArray0, 'V');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {(-658L), (-658L), (-658L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("-658V-658V-658", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'V', '4'}, charArray0);
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("V4", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.replaceChars(":/)UjU-yUvLE&", "Search and Replace array lengths don't match: ", "\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("/)UjU-UvLE&", string2);
      
      boolean boolean0 = StringUtils.endsWithAny("-658V-658V-658", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ":/)UjU-yUvLE&", (CharSequence) ":/)UjU-yUvLE&", (-658));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = "\n";
      int int0 = 16;
      String string1 = StringUtils.left("\n", 16);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("\n"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.substringBetween("}", (String) null, ")]hd");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("yu>goUu#fk");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yu>gouu#fk", string2);
      
      charSequenceArray0[2] = (CharSequence) "yu>gouu#fk";
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.split("%/N40r", 'U');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 1, 't');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.center((String) null, (-1586), '~');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.mid("aborting to protect against StackOverflowError - output of one loop is the input of another", 5, 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ing to protect ag", string1);
      
      String string2 = StringUtils.replaceOnce("BCe>|npI1y", "qNAg'w!sbu'P+", " for ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("BCe>|npI1y", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "BCe>|npI1y";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "BCe>|npI1y";
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      String string3 = StringUtils.join(charArray0, '*', 332, 48);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, (String) null, 1415, 62);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBetween((String) null, "I/`b]\"pH", "zg?Ird?}UIf0Q|4}6NNFW\u0006[c");
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("Duplicate advice for ", "", (-3195));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("Duplicate advice for ", string6);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = "j3}_,D%g1!!d'%tn";
      String string1 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeIgnoreCase("j3}_,D%g1!!d'%tn", "3R\"Xwf@Pu?mUi0:U");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j3}_,D%g1!!d'%tn", string2);
      
      String string3 = StringUtils.stripEnd("j3}_,D%g1!!d'%tn", "6bPSSZ ");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("j3}_,D%g1!!d'%tn", string3);
      
      String string4 = StringUtils.getDigits("}*5~SJ_pQ `");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("5", string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string5 = StringUtils.wrapIfMissing("j3}_,D%g1!!d'%tn", " from static ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(" from static j3}_,D%g1!!d'%tn from static ", string5);
      
      String string6 = StringUtils.substring("3R\"Xwf@Pu?mUi0:U", (-3223), 16);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("3R\"Xwf@Pu?mUi0:", string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("3R\"Xwf@Pu?mUi0:");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      String string7 = StringUtils.wrapIfMissing("3R\"Xwf@Pu?mUi0:U", "5");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("53R\"Xwf@Pu?mUi0:U5", string7);
      
      String string8 = StringUtils.substring("3R\"Xwf@Pu?mUi0:", 1, 51);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("R\"Xwf@Pu?mUi0:", string8);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" from static j3}_,D%g1!!d'%tn from static ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.join(objectArray0, 'N');
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals(1, objectArray0.length);
      assertEquals("", string9);
      
      String string10 = StringUtils.substring("Method `", 1);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertNotNull(string10);
      assertEquals("ethod `", string10);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "ethod `", (CharSequence) "6bPSSZ ", (-3223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains(object0));
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains(object0));
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.contains(string0));
      
      Iterator<String> iterator1 = priorityQueue1.iterator();
      assertNotNull(iterator1);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.contains(string0));
      
      String string2 = StringUtils.join(iterator1, 'X');
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.contains(string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string3);
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(int1 == int0);
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.replace("\"c.!<el@9 <wfsf|)u(bindingMechanic=", (String) null, "\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("`}V03wE", "metafactory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`}V03wE", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("`}V03wE", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`}V03wE", string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("metafactory");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.trimToNull("h+S=15{ei#Q>lh");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("h+S=15{ei#Q>lh", string3);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("`}V03wE");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string4 = StringUtils.join(booleanArray0, '3', (-1141), (-1141));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate((String) null, (-2294), 8);
      assertNull(string5);
      
      String string6 = StringUtils.truncate("h+S=15{ei#Q>lh", 55);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("h+S=15{ei#Q>lh", string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(18, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(18, stringArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.substringBetween("offset cannt be neative", "offset cannt be neative", "offset cannt be neative");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("offset cannt be neative");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "offset cannt be neative", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '1';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '4';
      charArray0[8] = '4';
      String string1 = StringUtils.join(charArray0, '3');
      assertNotNull(string1);
      assertArrayEquals(new char[] {'4', '4', '^', '^', '1', '^', '^', '4', '4'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("4343^3^313^3^3434", string1);
      
      String string2 = "bX$XL";
      Supplier<String> supplier0 = null;
      String string3 = StringUtils.getIfBlank("bX$XL", (Supplier<String>) null);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("bX$XL", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "4343^3^313^3^3434", charArray0);
      assertArrayEquals(new char[] {'4', '4', '^', '^', '1', '^', '^', '4', '4'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = (-1765);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "bX$XL", (-1765), 2913);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("9earch and Replace array lengths don't atch: ", (-691), (-691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?vv=L%SGJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("yCBJ;");
      assertNotNull(string0);
      assertEquals("YCBJ;", string0);
      
      String string1 = StringUtils.unwrap("yCBJ;", '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yCBJ;", string1);
      
      String string2 = StringUtils.leftPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", (-1544));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string2);
      
      String string3 = StringUtils.center("repeatOn", (-1544), 'Q');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("repeatOn", string3);
      
      String string4 = StringUtils.replaceFirst("~Fc2)S?r]a8mPY@qm", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", "?vv=L%SGJf");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("~Fc2)S?r]a8mPY@qm", string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = '&';
      charArray0[3] = 'Q';
      charArray0[4] = 'o';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "~Fc2)S?r]a8mPY@qm", charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', '&', 'Q', 'o'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.getIfEmpty("yCBJ;", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("yCBJ;", string5);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string6 = StringUtils.join(booleanArray0, 'Q');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals("falseQfalseQfalseQfalseQfalseQfalseQfalseQfalse", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 1908, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      String string2 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      String string3 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'k');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String string4 = StringUtils.leftPad("H,@Rg:", 1894);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst("\"s9\"k7_", "Failed to assert access rights using security manager", "tq&C3(ot[yJ/<;gq(");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("\"s9\"k7_", string5);
      
      String string6 = StringUtils.replace("", "^/qH", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 1894);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      try { 
        StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", "o1 XJdY&QAmk$");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "J_pQ `", '\"');
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("J_pQ `", "zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pH", "...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J_ ", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) null, "zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pH", (-622), (-107));
      assertNull(string2);
      
      String string3 = "Cffjk";
      int int1 = 256;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cffjk", (String) null, 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase("Iby[*", "maxWith cannot be negative", "$");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Iby[*", string4);
      
      String string5 = StringUtils.lowerCase("Another failed with one of the specified exceptions.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("another failed with one of the specified exceptions.", string5);
      
      String string6 = StringUtils.substringBetween("Cffjk", "...");
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Iby[*", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.substringBetween("(D", "(D", "(D");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "(D", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RObjfQ";
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("&:Rd@] does not exist", "&:Rd@] does not exist", "&:Rd@] does not exist");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) null, 't');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.replaceFirst((String) null, "ownG5`~", "_,D%g1!!d'%tn");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-658);
      longArray0[1] = (long) (-658);
      longArray0[2] = (long) (-658);
      String string1 = StringUtils.join(longArray0, 'V');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {(-658L), (-658L), (-658L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("-658V-658V-658", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'V', 'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("VD", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) charBuffer0, supplier0);
      assertNotNull(charSequence0);
      assertArrayEquals(new char[] {'V', 'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("VD", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charSequence0.length());
      assertEquals("VD", charSequence0.toString());
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.mid("EX%", (-658), (-658));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("", 127);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf(charSequence0, 97, 97);
      assertArrayEquals(new char[] {'V', 'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("VD", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charSequence0.length());
      assertEquals("VD", charSequence0.toString());
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>(49);
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, 'b');
      assertNotNull(string0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.wrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.removeEnd("", "Object varargs must not be null");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) 49;
      String string3 = StringUtils.join(longArray0, 'b');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new long[] {49L, 98L, 49L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("49b98b49", string3);
      
      charSequenceArray0[3] = (CharSequence) "49b98b49";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[0], supplier0);
      assertNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[4] = null;
      String string4 = StringUtils.LF;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\n", string4);
      
      charSequenceArray0[5] = (CharSequence) "\n";
      String string5 = StringUtils.mid("V6uk", 49, 49);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string6 = StringUtils.truncate("Object varargs must not be null", 49);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Object varargs must not be null", string6);
      
      charSequenceArray0[7] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", 938, 938);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "G5`~";
      charSequenceArray0[1] = (CharSequence) "G5`~";
      charSequenceArray0[3] = (CharSequence) "}";
      charSequenceArray0[4] = (CharSequence) "}";
      String string1 = StringUtils.substringAfterLast("G5`~", 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("}");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("}", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '`';
      charArray0[2] = '=';
      charArray0[3] = 'p';
      charArray0[4] = 'u';
      charArray0[5] = '|';
      charArray0[6] = 'M';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#Q", charArray0);
      assertArrayEquals(new char[] {'&', '`', '=', 'p', 'u', '|', 'M'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("#Q");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("P;gQtI9L2s");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.rotate("Strings must not be null", 938);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("llStrings must not be nu", string3);
      
      String string4 = StringUtils.substringAfter("o>", "I/`b]\"pHzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.stripToNull(" ");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) " ", 8);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match:", " ", " &R+0`O%$%]6~PUrCP1@W8&s@Search and Replace array lengths don't match: O6mnqe_C@()=7X#8H1", 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match:", string3);
      
      String string4 = StringUtils.substringBetween("g-g9btX", " ", "muIAw/_&{");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("9earch and Replace array lengths don't atch: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale1, locale0);
      assertFalse(set0.contains(string0));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(locale1, locale0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      
      String string2 = StringUtils.replaceChars((String) null, (String) null, "s!?xA3Z.0T>O");
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split((String) null, '.');
      assertNull(stringArray1);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissing((String) null, "Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\r", "\r", "\r");
      assertNull(string0);
      
      String string1 = StringUtils.rotate(" 8nfVs1;&B'", 2980);
      assertNotNull(string1);
      assertEquals("8nfVs1;&B' ", string1);
      
      String string2 = StringUtils.leftPad((String) null, 2980, "\r");
      assertNull(string2);
      
      String string3 = StringUtils.truncate((String) null, 53);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((int[]) null, '9');
      assertNull(string5);
      
      String string6 = StringUtils.substring((String) null, 12);
      assertNull(string6);
      
      String string7 = StringUtils.truncate((String) null, 27);
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string3;
      charSequenceArray0[1] = (CharSequence) "o(AGKFf*/]]}y?(*";
      String string8 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string8);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string9 = StringUtils.substringAfter("Oh\fy@6Q]aQO90Z", "-");
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = StringUtils.substringAfter("9earch and Replace array lengths don't atch: ", 22);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("6#%Htu");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6#%Htu", string1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "w3i@7+JX{_");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
      
      String string1 = StringUtils.removeAll("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.leftPad("S!", 6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("    S!", string2);
      
      charSequenceArray0[2] = (CharSequence) "    S!";
      String string3 = StringUtils.rotate("", 108);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[2], "");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviateMiddle("$U_PGeT+yW", "E9va\u0001e.g*z@h3>", 1072);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("$U_PGeT+yW", string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "$U_PGeT+yW", '9');
      assertEquals(0, int0);
      
      String string5 = StringUtils.left((String) null, 1067);
      assertNull(string5);
      
      String string6 = StringUtils.appendIfMissing((String) null, "E9va\u0001e.g*z@h3>", charSequenceArray0);
      assertNull(string6);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = StringUtils.chomp("\n");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.stripEnd("\n", (String) null);
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.substringAfterLast("`}V03wE>&MZ;bKkH6[;(", 108);
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9', '9', '9'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.chomp("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.wrapIfMissing("a;&1I38+3wbO1df", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a;&1I38+3wbO1df", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("JkdzL+09YM[I2");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '9');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertEquals("", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "a;&1I38+3wbO1df", (CharSequence) "nk-", 256);
      assertEquals(15, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "nk-", '\'');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.left("'@f.hh&:x^*j", 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("X7DS.Fld", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("X7DS.Fld", string4);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string5);
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.overlay("G5`~", "J_pQ `", 160, 3307);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~J_pQ `", string1);
      
      String string2 = StringUtils.defaultIfBlank("t1M;mQMO", "G5`~J_pQ `");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("t1M;mQMO", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "G5`~";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "G5`~J_pQ `";
      charSequenceArray0[3] = (CharSequence) "G5`~J_pQ `";
      charSequenceArray0[4] = (CharSequence) "t1M;mQMO";
      charSequenceArray0[5] = (CharSequence) "G5`~J_pQ `";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'D');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("G5`~D...DG5`~J_pQ `DG5`~J_pQ `Dt1M;mQMODG5`~J_pQ `", string3);
      
      String string4 = StringUtils.deleteWhitespace("G5`~D...DG5`~J_pQ `DG5`~J_pQ `Dt1M;mQMODG5`~J_pQ `");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("G5`~D...DG5`~J_pQ`DG5`~J_pQ`Dt1M;mQMODG5`~J_pQ`", string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], "G5`~D...DG5`~J_pQ`DG5`~J_pQ`Dt1M;mQMODG5`~J_pQ`");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("O';9! B47-", "Object varargs must not be null", 10);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("O';9! B47-", string5);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'U');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J.Qg+>Fl:oTZ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      long[] longArray0 = new long[1];
      String string2 = StringUtils.join(longArray0, '\\');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "J.Qg+>Fl:oTZ", (CharSequence) "J.Qg+>Fl:oTZ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.rightPad((String) null, 0, '\\');
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween((String) null, "%eh_?oo\"xg4o_-(C", "*W,h0<");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-6));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap(" vs ", 'd');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" vs ", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " vs ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'O', 'O'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("n0x@^Mp7q>q_k9");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("n0x@^mp7q>q_k9", string5);
      
      boolean boolean2 = StringUtils.isNumeric("n0x@^Mp7q>q_k9");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.leftPad((String) null, (-6), "$Mk#Gm4.Q");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotatio.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.stripEnd("doPrivileged", "-8Jpb},<@h#@!k$qW$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("X]G4Ln\"N", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("X]G4Ln\"N", string2);
      
      String string3 = StringUtils.repeat("doPrivileged", 76);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("doPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivileged", string3);
      
      StringUtils.isBlank("X]G4Ln\"N");
      StringUtils.substringBetween("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotatio.");
      StringUtils.unwrap((String) null, "doPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivileged");
      StringUtils.contains((CharSequence) "doPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivilegeddoPrivileged", 13);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("", "&:Rd@] does not exist");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(10, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'e', Integer.MAX_VALUE, 2735);
      assertNotNull(string2);
      assertEquals(10, stringArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("nkZ(L", 1985, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "nkZ(L");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.center("", 321, "");
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.getDigits("v6@4mNEiA2%3UKT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6423", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("", "Locale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Locale must not be null");
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '9');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[3], 16);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", '8');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.left("Gx=SbPVef2u@~)h*a", 2549);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Gx=SbPVef2u@~)h*a", string4);
      
      String string5 = StringUtils.appendIfMissing((String) null, "ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", charSequenceArray0);
      assertNull(string5);
      assertEquals(6, charSequenceArray0.length);
      
      String string6 = StringUtils.stripToEmpty((String) null);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.rightPad("?n>McR/}+O\u0006", 109, "?n>McR/}+O\u0006");
      assertNotNull(string0);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("WV4", "?n>McR/}+O\u0006");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", "g/s,nk)<#l[.", "hm#~3>9V4JDuEea");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", string1);
      
      String string2 = StringUtils.leftPad("", 109, "?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006??n>McR/}+", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "WV4");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.overlay("nk", "...", 2441, 2810);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("nk...", string4);
      
      String string5 = StringUtils.replace("KnIFq',yv`*2", "\" should have a parent context.", "g/s,nk)<#l[.", (-2408));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("KnIFq',yv`*2", string5);
      
      String string6 = StringUtils.center((String) null, 8, 'L');
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?");
      assertNotNull(intArray0);
      assertEquals(100, intArray0.length);
      
      String[] stringArray1 = StringUtils.split("ddy/build.plugins", 'L');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.abbreviate("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", 109);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", string7);
      
      String string8 = StringUtils.removeEnd("nk", "Z(L");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("nk", string8);
      
      String string9 = StringUtils.replace("hm#~3>9V4JDuEea", "", " ", (-2408));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("hm#~3>9V4JDuEea", string9);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n@-", (CharSequence) "n@-", 1252);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("*_,E4\"${`KNHU");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.defaultIfEmpty("*_,E4\"${`KNHU", "n@-");
      assertNotNull(string0);
      assertEquals("*_,E4\"${`KNHU", string0);
      
      String string1 = StringUtils.uncapitalize("', '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("', '", string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("', '"));
      
      boolean boolean0 = treeSet0.add("*_,E4\"${`KNHU");
      assertTrue(treeSet0.contains("*_,E4\"${`KNHU"));
      assertFalse(treeSet0.contains("', '"));
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains("*_,E4\"${`KNHU"));
      assertFalse(treeSet0.contains("', '"));
      
      String string2 = StringUtils.replaceIgnoreCase("*_,E4\"${`KNHU", "IDHZ,", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("*_,E4\"${`KNHU", string2);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("', '"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) "', '");
      assertNotNull(predicate0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertNotNull(charBuffer0);
      assertEquals(157, charBuffer0.remaining());
      assertEquals(157, charBuffer0.capacity());
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(157, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(157, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean1 = StringUtils.isMixedCase("*_,E4\"${`KNHU");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrapIfMissing(" is not visible to ", 'U');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("U is not visible to U", string3);
      
      String string4 = StringUtils.rightPad("org.junitpioneer.jupiter.params.IntRange", 1252, 'i');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("', '", " is not visible to ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("\r];XD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("9itgI^", "9itgI^");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.toRootLowerCase("J;ys'3X");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j;ys'3x", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("", 'r');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.lowerCase("-6e?!N'c83\">BKX");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-6e?!n'c83\">bkx", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.upperCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.replaceAll("-6e?!N'c83\">BKX", " from static j3}_,D%g1!!d'%tn", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("-6e?!N'c83\">BKX", string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase(" from static j3}_,D%g1!!d'%tn", charBuffer0, (CharSequence[]) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(" from static j3}_,D%g1!!d'%tn", string7);
      
      String string8 = StringUtils.lowerCase("-6e?!N'c83\">BKX");
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("-6e?!n'c83\">bkx", string8);
      
      String string9 = StringUtils.truncate("#:,", 178);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals("#:,", string9);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 1186.0588182832;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2095.501612);
      doubleArray0[5] = 1237.6666788095358;
      doubleArray0[6] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'T');
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, 0.1, 1186.0588182832, 1.0, (-2095.501612), 1237.6666788095358, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("0.0T0.1T1186.0588182832T1.0T-2095.501612T1237.6666788095358T0.0", string0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = "$Proxy";
      String string2 = StringUtils.wrapIfMissing("0.0T0.1T1186.0588182832T1.0T-2095.501612T1237.6666788095358T0.0", "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("offset cannot be negative0.0T0.1T1186.0588182832T1.0T-2095.501612T1237.6666788095358T0.0offset cannot be negative", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(0.0));
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(0.0));
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean2 = hashSet0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(hashSet0.contains(0.0));
      assertTrue(hashSet0.contains(object2));
      assertTrue(boolean2);
      
      boolean boolean3 = priorityQueue0.containsAll(hashSet0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(priorityQueue0.contains(object2));
      assertFalse(hashSet0.contains(0.0));
      assertTrue(hashSet0.contains(object2));
      assertFalse(boolean3);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      boolean boolean4 = priorityQueue0.add(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertEquals(1, priorityQueue0.size());
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertNotSame(object3, object0);
      assertTrue(priorityQueue0.contains(object3));
      assertFalse(priorityQueue0.contains(object2));
      assertTrue(boolean4);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      // Undeclared exception!
      try { 
        priorityQueue0.add("offset cannot be negative");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.overlay("TO$Cn=", "TO$Cn=", 938, (-969));
      assertNotNull(string0);
      assertEquals("TO$Cn=", string0);
      
      String string1 = StringUtils.defaultIfBlank("G5s~", "TO$Cn=");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5s~", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("TO$Cn=");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStart("...", "TO$Cn=");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.overlay("Threshold must not be negative", "Strings must not be null", 3714, (-1204));
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[2] = (CharSequence) "n@-";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
      charSequenceArray0[6] = (CharSequence) "Strings must not be null";
      charSequenceArray0[7] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[8] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Strings must not be null", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[7]);
      assertNotNull(charBuffer0);
      assertEquals(30, charBuffer0.length());
      assertEquals(30, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(30, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(30, charBuffer0.limit());
      assertEquals("Threshold must not be negative", charBuffer0.toString());
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertEquals(30, charBuffer0.length());
      assertEquals(30, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(30, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(30, charBuffer0.limit());
      assertEquals("Threshold must not be negative", charBuffer0.toString());
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.wrapIfMissing("SOw~\"R", '=');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=SOw~\"R=", string1);
      
      String string2 = StringUtils.rightPad("7S9|L$pB6HXG/E#mO", (-658), '4');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("7S9|L$pB6HXG/E#mO", string2);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      String string0 = StringUtils.prependIfMissing("g", "g", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("g", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g", (CharSequence) "g");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      String string1 = StringUtils.replaceChars("g", "", "g");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("g", string1);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string2 = StringUtils.join(objectArray0, "contains '%s'.", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'XOUk}GT&])l[", "s\" value=\"%s\" }", 11);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.replaceIgnoreCase("", "$", "&);m@Kl");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.lowerCase("'XOUk}GT&])l[");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("'xouk}gt&])l[", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "g", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string5 = StringUtils.substringAfter("g", 0);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("g");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      String string6 = StringUtils.right("\"(]", (-1821));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.center("S&v$&RY2U]`3o", 16, "S&v$&RY2U]`3o");
      assertNotNull(string0);
      assertEquals("SS&v$&RY2U]`3oS&", string0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.replace("\"c.!<el@9 <wfsf|)u(bindingMechanic=", (String) null, "jefEZcw");
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("`}V03wE", "metafactory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`}V03wE", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\"c.!<el@9 <wfsf|)u(bindingMechanic=");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("\"c.!<el@9 <wfsf|)u(bindingMechanic=", 'q');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(18, stringArray0.length);
      assertEquals("\"", charSequence0);
      
      String string3 = StringUtils.substringAfterLast((String) null, 3089);
      assertNull(string3);
      
      String string4 = StringUtils.removePattern("`}V03wE", "org.junitpioneer.jupiter.RetryingTestExtension");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("`}V03wE", string4);
      
      String string5 = StringUtils.center("rMTX5D'g", 108, '#');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("##################################################rMTX5D'g##################################################", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'm');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(18, stringArray0.length);
      assertEquals("\"mcm.!m<melm@m9m m<mwfsfm|m)mum(mbindingmMmechanicm=", string6);
      
      String string7 = StringUtils.rightPad("`}V03wE", (-1812), '#');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("`}V03wE", string7);
      
      String string8 = StringUtils.wrap("d6L}['k1oaOJr+", '#');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)charSequence0));
      assertNotNull(string8);
      assertEquals("#d6L}['k1oaOJr+#", string8);
      
      String string9 = StringUtils.substringAfterLast("53R\"Xwf@Pu?mUi0:U", 3089);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = StringUtils.chomp("Cannot catch exception during constructor call for ");
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertEquals("Cannot catch exception during constructor call for ", string10);
      
      String string11 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)charSequence0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertNotNull(string11);
      assertEquals(18, stringArray0.length);
      assertEquals("", string11);
      
      int int0 = StringUtils.compare((String) null, "Cannot catch exception during constructor call for ", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("fsc", "$k?{&_}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$k?{&_}fsc$k?{&_}", string1);
      
      String string2 = StringUtils.substringBefore((String) null, Integer.MIN_VALUE);
      assertNull(string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1672;
      String string3 = StringUtils.join(intArray0, 'M', 48, (-1102));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new int[] {1672}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString((String) null, "File must not be null or blank");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("File must not be null or blank", string4);
      
      String string5 = StringUtils.join(intArray0, 'M');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertArrayEquals(new int[] {1672}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("1672", string5);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'w');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      
      String string1 = StringUtils.reverse("\u0000");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = StringUtils.join((short[]) null, 'w');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cvZ^nk-", "_H(YJD", 1825);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      String string3 = StringUtils.join(byteArray0, '\"', (int) (byte)28, 2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)11, (byte)31, (byte)31}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "No exit advice defined by ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char char0 = 'B';
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertEquals((-1), int0);
      
      String string1 = null;
      int int1 = StringUtils.indexOfAny((CharSequence) null, "LsM['=3|ZPaUboC2V+");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = "(Z}_WvI!2@>";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("m55,SJ_YQ `", "(Z}_WvI!2@>");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("(Z}_WvI!2@>m55,SJ_YQ `(Z}_WvI!2@>", string3);
      
      char[] charArray0 = new char[19];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      String string4 = StringUtils.substring("m55,SJ_YQ `", (-1), (-1205));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, 'm');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((Object[]) null, 'B');
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) null, (-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0, 324);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.chomp("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.wrapIfMissing("a;&1I38+3wbO1df", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a;&1I38+3wbO1df", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("JkdzL+09YM[I2");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '9');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertEquals("", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "a;&1I38+3wbO1df", (CharSequence) "nk-", 256);
      assertEquals(15, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "nk-", '\'');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.left("'@f.hh&:x^*j", 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast("40HFX8(7Ez", "offset cannot be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.EMPTY;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.getDigits("");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "JkdzL+09YM[I2";
      charSequenceArray0[2] = (CharSequence) "'@f.hh&:x^*j";
      String string7 = StringUtils.appendIfMissing("...", "...", charSequenceArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("...", string7);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S)Pqy5%qF-ElGrd'Y$t", (CharSequence) "}", 1233);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = "D;'DzhoC";
      char char0 = 'W';
      String string1 = StringUtils.leftPad("D;'DzhoC", 0, 'W');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("D;'DzhoC", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "zg?Ird?}UIf0Q|", (CharSequence) "D;'DzhoC");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("ox7Nu`KW/Hl}*4y", "zg?Ird?}UIf0Q|", true);
      assertEquals((-11), int0);
      
      String string2 = "Object varargs must not be null";
      String string3 = StringUtils.replaceIgnoreCase((String) null, "Object varargs must not be null", (String) null);
      assertNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace((String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Duplicate registration of handler for ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Duplicate registration of handler for 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("nk", "#!;KZ&sZ`U}S=t\u0000");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("O");
      assertTrue(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "%O%", 'w');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'l';
      charArray0[4] = 'u';
      String string2 = StringUtils.join(charArray0, 'u');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'u', '\u0000', 'u', 'l', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("uu\u0000uuuluu", string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("#!;KZ&sZ`U}S=t\u0000", "nk");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000", "#!;KZ&sZ`U}S=t\u0000", (CharSequence[]) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000", string3);
      
      String string4 = StringUtils.lowerCase("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.issueextension", string4);
      
      int int2 = StringUtils.compareIgnoreCase("#Nzyr&?06`4C0xB", "#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(77, int2);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.security.AccessController", "offset cannot be negative", (String) null);
      assertNotNull(string0);
      assertEquals("j.ury.ACrllr", string0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("#Search and Replace array leng2hs don't match: Sear_h and Replace array lengths don't match: ", "y#", "y#");
      assertNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) null, 'c', (-1544), (-1544));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1572);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "", 1572);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.right((String) null, (-2095609029));
      assertNull(string2);
      
      String string3 = StringUtils.center(".[gxe8\u0000b#mzpAOb/h", 1994);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`JeV<I0,V8C[|-|", 14, 14);
      assertNotNull(string0);
      assertEquals("`JeV<I0,V8C...", string0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.abbreviate(" is not visiZble Mo ", (-1), 8);
      assertNotNull(string0);
      assertEquals(" is n...", string0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.abbreviate("YW[3F<bkz`fb{!n=", 11, 11);
      assertNotNull(string0);
      assertEquals("...z`fb{!n=", string0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)409;
      shortArray0[1] = (short) (-2928);
      shortArray0[0] = (short)3520;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)8192;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)3520, (short) (-2928), (short)0, (short)46, (short)5, (short)8192}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("3520e-2928e0e46e5e8192", string0);
      
      String string1 = StringUtils.unwrap("$k?{&_}", 'e');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$k?{&_}", string1);
      
      String string2 = StringUtils.deleteWhitespace("$k?{&_}");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("$k?{&_}", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "3520e-2928e0e46e5e8192", (CharSequence) "$k?{&_}");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "$k?{&_}", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "$k?{&_}", 9);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.abbreviate("doesn't contain any substring.", "$k?{&_}", 17);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("doesn't co$k?{&_}", string3);
      
      String string4 = StringUtils.remove(" ", '`');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(" ", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "doesn't co$k?{&_}";
      String string5 = StringUtils.chomp("", "}L }9kurceArgumentsProvider");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Y6LBKR}sZ-IISIR+;");
      assertNotNull(string0);
      assertEquals("y6lbkr}sz-iisir+;", string0);
      
      int int0 = StringUtils.ordinalIndexOf("y6lbkr}sz-iisir+;", "y6lbkr}sz-iisir+;", (-2844));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "y6lbkr}sz-iisir+;";
      objectArray0[1] = (Object) "Y6LBKR}sZ-IISIR+;";
      objectArray0[2] = (Object) "Y6LBKR}sZ-IISIR+;";
      objectArray0[3] = (Object) "Y6LBKR}sZ-IISIR+;";
      objectArray0[4] = (Object) "Y6LBKR}sZ-IISIR+;";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Y6LBKR}sZ-IISIR+;";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "Y6LBKR}sZ-IISIR+;";
      int int1 = (-458);
      String string1 = StringUtils.join(objectArray0, "Y6LBKR}sZ-IISIR+;", (-1), (-458));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, objectArray0.length);
      assertEquals("", string1);
      
      String string2 = "ua>:V>LY(";
      // Undeclared exception!
      try { 
        StringUtils.truncate("ua>:V>LY(", (-2844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y=", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Y=", string0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = "...";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.remove("...", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      String string2 = "J_pQ `";
      int int0 = StringUtils.countMatches((CharSequence) "J_pQ `", '\"');
      assertEquals(0, int0);
      
      String string3 = "W\\HyqqTR;5K_t";
      String string4 = StringUtils.replaceChars("...", "...", "7Ty L");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("777", string4);
      
      String string5 = "}Jh_>O";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "...";
      int int1 = 32;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "?MU", 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", (-26), (-26));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 'k');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceChars("WHyqqTR;5K_t", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("WHiqqTC;5K_r", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      String string3 = "}Jh_>O";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "}Jh_>O", (-13), 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "]gKF1O", (-2385));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("y#qo;", (-1));
      assertNotNull(string0);
      assertEquals(";", string0);
      
      String string1 = StringUtils.unwrap("y#qo;", '\u0018');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y#qo;", string1);
      
      String string2 = StringUtils.right(";", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ";", ";");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1572);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "", 1572);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove(" is not in the range '0' - '9'", 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(1, stringArray0.length);
      assertEquals("Object varargs must not be null", charSequence0);
      
      String string2 = StringUtils.substringAfterLast("z", 1572);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removePattern(" is not in the range '0' - '9'", "...");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("`", 3724, 'k');
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'y');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertEquals("Object varargs must not be null", string5);
      
      String string6 = StringUtils.rightPad("", 322, 'y');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "...";
      String string7 = StringUtils.right("metafactorymE@CgC]", (-284));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) string4;
      charSequenceArray0[5] = (CharSequence) string4;
      String string8 = StringUtils.replaceFirst(" is not in the range '0' - '9'", "a6f1D`rV+FGx#q", " is not in the range '0' - '9'");
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(" is not in the range '0' - '9'", string8);
      
      charSequenceArray0[6] = (CharSequence) " is not in the range '0' - '9'";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWithAny(charSequenceArray0[5], charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.substring("{\"xiB{9fh=", 3626);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("?vv=L%SGJf").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?vv=L%SGJf", string2);
      
      String string3 = StringUtils.repeat("Xq^QE$zLZIfDFn/-", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.right("U.aPo2c_[X_u`=b1e", 3626);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("U.aPo2c_[X_u`=b1e", string5);
      
      String string6 = StringUtils.chop("...4_k?8HWcV~`#O?|i");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("...4_k?8HWcV~`#O?|", string6);
      
      String string7 = StringUtils.reverse("java.lang.invoke.LambdaMetafactory");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("yrotcafateMadbmaL.ekovni.gnal.avaj", string7);
      
      String string8 = StringUtils.rightPad("yrotcafateMadbmaL.ekovni.gnal.avaj", 3626, '^');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      String string9 = StringUtils.reverseDelimited("doPr", '\'');
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("doPr", string9);
      
      String string10 = StringUtils.upperCase("java.lang.invoke.LambdaMetafactory");
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
      assertEquals("JAVA.LANG.INVOKE.LAMBDAMETAFACTORY", string10);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string11 = StringUtils.replaceIgnoreCase("", string8, "", 633);
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      assertEquals("", string11);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...4_k?8HWcV~`#O?|";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) string8, (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "Xq^QE$zLZIfDFn/-", (CharSequence) "java.lang.invoke.LambdaMetafactory");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.abbreviate("#aoth,7@,\"{", "", 46, 46);
      assertNotNull(string0);
      assertEquals("#aoth,7@,\"{", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("#aoth,7@,\"{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("]gKF1O");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("@YC<&t)\"Q1WDV[", (-1762));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("@YC<&t)\"Q1WDV[", "", (-1762), (-1762));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@YC<&t)\"Q1WDV[", string1);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-821));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@tW";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.replaceChars("@tW", 'D', '9');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@tW", string2);
      
      charSequenceArray0[3] = (CharSequence) "@tW";
      String string3 = StringUtils.abbreviate("Strings must not be null", "", (-821), 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      String string4 = StringUtils.appendIfMissingIgnoreCase("@tW", "", charSequenceArray0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("@tW", string4);
      
      String string5 = StringUtils.lowerCase((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Strings must not be null", "@tW");
      assertFalse(boolean0);
      
      String string6 = StringUtils.removeAll("-", "Y2_U$");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("-", string6);
      
      String string7 = StringUtils.chop("...");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("..", string7);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("~Fc2)S?r]a8mPY@qm", "#!;KZ&sZ`U}S=t\u0000%O%");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string8 = StringUtils.stripToEmpty((String) null);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.replaceChars("n@-", '#', 'i');
      assertNotNull(string0);
      assertEquals("n@-", string0);
      
      String string1 = StringUtils.removeEnd("n@-", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("n@-", string1);
      
      String string2 = StringUtils.toRootLowerCase("n@-");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("n@-", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "n@-");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("n@-", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.length());
      
      boolean boolean0 = StringUtils.isMixedCase("n@-");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("g}s}w<%(XH`DbQ", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("&g}s}w<%(XH`DbQ&", string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) '&';
      floatArray0[2] = (float) '.';
      floatArray0[3] = (float) '&';
      floatArray0[4] = (float) (-2506);
      String string4 = StringUtils.replace((String) null, "%O%#!;KZ&sZ`U}S=t\u0000", "mX7TS=QzD,P-@O~ZRM'", (-2506));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.abbreviateMiddle("%O%#!;KZ&sZ`U}S=t\u0000", "tX3#K|#Z3Hikjjq7(", 32);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("%O%#!;KZ&sZ`U}S=t\u0000", string5);
      
      String string6 = StringUtils.upperCase("n@-");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("N@-", string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("P9~h7`vzdqV", supplier0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("P9~h7`vzdqV", string7);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.replaceChars("cbpeo9h%,-Pds3T", "cbpeo9h%,-Pds3T", "(D");
      assertNotNull(string0);
      assertEquals("(D", string0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (-350));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.replaceIgnoreCase("org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection", "yj:f0mad8/*zr2?o8", (String) null, Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection", string0);
      
      charSequenceArray0[1] = (CharSequence) "org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection";
      charSequenceArray0[2] = (CharSequence) "&:Rd@] does not exist-";
      charSequenceArray0[3] = (CharSequence) "~Fc2)S?r]a8mPY@qm";
      charSequenceArray0[4] = (CharSequence) "&:Rd@] does not exist-";
      String string1 = StringUtils.appendIfMissingIgnoreCase("&:Rd@] does not exist-", "&:Rd@] does not exist-", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("&:Rd@] does not exist-", string1);
      
      String string2 = StringUtils.lowerCase("org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.build.plugin$factory$usingreflection", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeAll("TQe^;", ": ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("TQe^;", string3);
      
      String string4 = StringUtils.chop("l5*o");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("l5*", string4);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertNotNull(charSequence0);
      assertEquals("org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection", charSequence0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split((String) null, "TQe^;");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      String string1 = StringUtils.repeat("8Pyq", 82);
      assertNotNull(string1);
      assertEquals("8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq", string1);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.overlay("mE@CgC]metafactory", " from static j3}_,D%g1!!d'%tn", 82, 82);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("mE@CgC]metafactory from static j3}_,D%g1!!d'%tn", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = '[';
      charArray0[2] = '7';
      char char0 = 'j';
      charArray0[3] = 'j';
      charArray0[4] = ')';
      charArray0[5] = ']';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "mE@CgC]metafactory from static j3}_,D%g1!!d'%tn", charArray0);
      assertArrayEquals(new char[] {'e', '[', '7', 'j', ')', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 97);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " from static j3}_,D%g1!!d'%tn", (char[]) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "8Pyq", 177, 177);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "mE@CgC]metafactory from static j3}_,D%g1!!d'%tn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("Minimum abbreviation width is %d", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %d", string1);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) stringArray0[0], (CharSequence) stringArray0[0], (-448));
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 31);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("i", "i", "org.easymock.bytebuddy.asm.Advice$WithCustomMapping");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = StringUtils.rotate("0", 15);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.rotate("-", 54);
      assertNotNull(string0);
      assertEquals("-", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("-");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("-", "-");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-", string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "-", 54);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
      
      Locale locale0 = new Locale("u61;3V9", "?Ik*#.J1g;=_SG4{0v", "");
      assertNotNull(locale0);
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertFalse(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale1.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("u61;3v9", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int1 = StringUtils.indexOf((CharSequence) "matches '%s'.", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`K{KY@us]s[p`HpD%%");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((boolean[]) null, 'U');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1572);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "", 1572);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove(" is not in the range '0' - '9'", 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(1, stringArray0.length);
      assertEquals("Object varargs must not be null", charSequence0);
      
      String string2 = StringUtils.substringAfterLast("z", 1572);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removePattern(" is not in the range '0' - '9'", "...");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("org.esymock.bytebuddy.build.CachedReturnPlugin$CacheFiel$OffsetMapping", (-1062), 'k');
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("org.esymock.bytebuddy.build.CachedReturnPlugin$CacheFiel$OffsetMapping", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'y');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertEquals("Object varargs must not be null", string5);
      
      String string6 = StringUtils.rightPad(" is not in the range '0' - '9'", 175, 'k');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(" is not in the range '0' - '9'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " is not in the range '0' - '9'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "_]$``h7>M|lx:Ii", "_]$``h7>M|lx:Ii");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "_]$``h7>M|lx:Ii", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.substringBetween(",_2JU%FN:_u", ",_2JU%FN:_u", ",_2JU%FN:_u");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String string0 = StringUtils.substring("{\"xiB{9fh=", 3626);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("Xq^QE$zLZIfDFn/-", 0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.right("U.aPo2c_[X_u`=b1e", 3626);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("U.aPo2c_[X_u`=b1e", string5);
      
      String string6 = StringUtils.chop("...4_k?8HWcV~`#O?|i");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("...4_k?8HWcV~`#O?|", string6);
      
      String string7 = StringUtils.reverse("java.lang.invoke.LambdaMetafactory");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("yrotcafateMadbmaL.ekovni.gnal.avaj", string7);
      
      String string8 = StringUtils.rightPad("yrotcafateMadbmaL.ekovni.gnal.avaj", 3626, '^');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.reverseDelimited("doPr", '\'');
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("doPr", string9);
      
      String string10 = StringUtils.upperCase("java.lang.invoke.LambdaMetafactory");
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
      assertEquals("JAVA.LANG.INVOKE.LAMBDAMETAFACTORY", string10);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string11 = StringUtils.replaceIgnoreCase("", string8, "", 633);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertNotNull(string11);
      assertEquals("", string11);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      String string12 = StringUtils.substringBefore("metafactorymE@CgC]", "-m9':$O t]IzVC=%O-?");
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertNotNull(string12);
      assertEquals("metafactorymE@CgC]", string12);
      
      charSequenceArray0[1] = (CharSequence) "metafactorymE@CgC]";
      int int1 = StringUtils.indexOfAny((CharSequence) "U.aPo2c_[X_u`=b1e", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "doPr", 48, 3626);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string13 = StringUtils.replace("Cannot clear and set the following entries at the same time: ", "U.aPo2c_[X_u`=b1e", "Y#f-` t\"p;+o", 24);
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string4));
      assertNotNull(string13);
      assertEquals("Cannot clear and set the following entries at the same time: ", string13);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("]", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]", string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '<';
      String string2 = StringUtils.join(longArray0, 'B');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {60L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("60B0B0B0", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "?vv=L%SGJf");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = 'y';
      charArray0[4] = '<';
      charArray0[5] = ',';
      charArray0[6] = 'B';
      String string3 = StringUtils.join(charArray0, ';');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'|', '<', '<', 'y', '<', ',', 'B'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("|;<;<;y;<;,;B", string3);
      
      String string4 = StringUtils.substringBetween("]", "J", "J5Qs?iXE.VXsr");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("?vv=L%SGJf", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.chomp("]", "]");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("{index}", "", "q+CW3r#", 391);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{index}", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{index}", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertEquals(1, int0);
      
      String string2 = StringUtils.wrapIfMissing("j3}_,D%g1!!d'%tn", "q+CW3r#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("q+CW3r#j3}_,D%g1!!d'%tnq+CW3r#", string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      String string3 = StringUtils.join(charArray0, 'u');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'', '', '', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("uuu", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("q+CW3r#", "q+CW3r#j3}_,D%g1!!d'%tnq+CW3r#");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("q+CW3r#", string4);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = "doPrivileged";
      String string1 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      String[] stringArray0 = StringUtils.split("L0QP\"O%6sm\"ZG{(", ",~1pplrh\"E#[c[7M");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("zJ ^7@", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.zJ ^7@The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      String string3 = StringUtils.join(charArray0, '3');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("3", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.zJ ^7@The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("", ",~1pplrh\"E#[c[7M");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = 32;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '3', 32, 2070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.substringBefore("v)WL]B,T|$`YbP|", (String) null);
      assertNotNull(string0);
      assertEquals("v)WL]B,T|$`YbP|", string0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "^>4t6G+0T_'Z1PxjJ+", (CharSequence) null, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[3] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[4] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[5] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[6] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[7] = (CharSequence) "?vv=L%SGJf";
      charSequenceArray0[8] = (CharSequence) "?vv=L%SGJf";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("?vv=L%SGJf", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[8]);
      assertNotNull(charBuffer0);
      assertEquals("?vv=L%SGJf", charBuffer0.toString());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase("Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.wrapIfMissing("?vv=L%SGJf", '2');
      assertNotNull(string0);
      assertEquals("2?vv=L%SGJf2", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) '<';
      floatArray0[2] = (float) '2';
      String string1 = StringUtils.join(floatArray0, '$', 196, (-345));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new float[] {50.0F, 60.0F, 50.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((byte[]) null, 'T');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)3520;
      shortArray0[3] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)46, (short)5, (short)3520, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("46e5e3520e5", string0);
      
      String string1 = StringUtils.unwrap("I/`b]\"pH", '{');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("I/`b]\"pH", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$k?{&_}", (CharSequence) "I/`b]\"pH");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {']', 'e', '\u0000', 'e', '{', '{', '{', '{'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "$k?{&_}", 256);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "I/`b]\"pH", (char[]) null);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "46e5e3520e5", (int) (short)5, 960);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      double double0 = StringUtils.getJaroWinklerDistance("I/`b]\"pH", "46e5e3520e5");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.substringAfter((String) null, "I/`b]\"pH");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("}1", '}');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.wrap("$O", '2');
      assertNotNull(string0);
      assertEquals("2$O2", string0);
      
      String[] stringArray0 = StringUtils.split("2$O2", '2');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.replaceChars("n@-", '#', 'i');
      assertNotNull(string0);
      assertEquals("n@-", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "n@-", "n@-");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n@-");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "n@-");
      assertNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '#', 91, 0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string2);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      
      boolean boolean0 = priorityQueue0.add("^8");
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("^8"));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("RVHc");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("^8"));
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      assertNotNull(arrayList0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("^8"));
      assertTrue(arrayList0.contains("^8"));
      assertFalse(arrayList0.contains('#'));
      
      String string3 = StringUtils.join((Iterable<?>) arrayList0, "n@-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, priorityQueue0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(priorityQueue0.contains(string3));
      assertTrue(priorityQueue0.contains("^8"));
      assertTrue(arrayList0.contains("^8"));
      assertFalse(arrayList0.contains('i'));
      assertEquals("RVHcn@-^8", string3);
      
      String string4 = StringUtils.center((String) null, (-405));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.push((String) null);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((String) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?n$W,x4_^(R4t nJ");
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("?n$W,x4_^(R4t nJ"));
      assertEquals("?n$W,x4_^(R4t nJ", string0);
      
      String string1 = StringUtils.repeat('}', 13);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}}}}}}}}}}}}}", string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "?n$W,x4_^(R4t nJ", (CharSequence) "JO2F_Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Strings must not be null");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("Strings must not be null"));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("Strings must not be null"));
      assertTrue(boolean1);
      
      String string0 = StringUtils.substringBeforeLast("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "*>&|");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("*>&|"));
      assertTrue(priorityQueue0.contains("Strings must not be null"));
      assertEquals("Strings must not be null*>&|Strings must not be null", string1);
      
      charSequenceArray0[2] = (CharSequence) "Strings must not be null*>&|Strings must not be null";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.center("}", 13, "}");
      assertNotNull(string0);
      assertEquals("}}}}}}}}}}}}}", string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short)943;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short) (-881);
      shortArray0[4] = (short) (-479);
      shortArray0[5] = (short) (-368);
      shortArray0[6] = (short)53;
      String string1 = StringUtils.join(shortArray0, 'O', (int) (short)53, (-711));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)37, (short)943, (short)15, (short) (-881), (short) (-479), (short) (-368), (short)53}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("}}}}}}}}}}}}}", "#!;KZ&sZ`U}S=t\u0000", 0);
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "}", (CharSequence) "", 55);
      assertEquals(1, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.normalizeSpace("Threshold m");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Threshold m", string2);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Never disable parameterized test method itself", "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(23, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Never disable parameterized test method itself", " ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", 112, 1945);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.removeFirst("Threshold must not be negative", "");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("_8|MJgZe{)6z#a(C");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_8|MJgZe{)6z#a(C", string2);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) " ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.replaceAll((String) null, "HHZSH|=CtdAwVuVl", "HHZSH|=CtdAwVuVl");
      assertNull(string3);
      
      String string4 = StringUtils.substring("z`7zMT", 112, 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0wisKYm#fl&YI@", (CharSequence) "hF,ksXEk");
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = (-1274.37);
      doubleArray0[2] = 1.5;
      String string2 = StringUtils.join(doubleArray0, 'y');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(19, doubleArray0.length);
      assertEquals("0.0y-1274.37y1.5y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0", string2);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.replaceIgnoreCase("'Xe:r6:WT f #!LJ5<", "0.0y-1274.37y1.5y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0", "m5}*5~SJ_pQ `(Z}_WvI!2@>", 2620);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("'Xe:r6:WT f #!LJ5<", string3);
      
      int int0 = StringUtils.compare("StdIo_System_In", "cMM`>-");
      assertEquals((-16), int0);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("vz", (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removePattern("YP@L^1QU(I:r", "'Xe:r6:WT f #!LJ5<");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("YP@L^1QU(I:r", string5);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "'Xe:r6:WT f #!LJ5<", 2620);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.substring("{\"xiB{9fh=", 3626);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.repeat("Xq^QE$zLZIfDFn/-", 0);
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.right("U.aPo2c_[X_u`=b1e", 3626);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("U.aPo2c_[X_u`=b1e", string5);
      
      String string6 = StringUtils.chop("...4_k?8HWcV~`#O?|i");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("...4_k?8HWcV~`#O?|", string6);
      
      String string7 = StringUtils.reverse("java.lang.invoke.LambdaMetafactory");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("yrotcafateMadbmaL.ekovni.gnal.avaj", string7);
      
      String string8 = StringUtils.rightPad("yrotcafateMadbmaL.ekovni.gnal.avaj", 3626, '^');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      String string9 = StringUtils.reverseDelimited("doPr", '\'');
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("doPr", string9);
      
      String string10 = StringUtils.upperCase("java.lang.invoke.LambdaMetafactory");
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("JAVA.LANG.INVOKE.LAMBDAMETAFACTORY", string10);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string11 = StringUtils.replaceIgnoreCase("", string8, "", 633);
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
      assertEquals("", string11);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...4_k?8HWcV~`#O?|";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("SM4$7B~n?X");
      assertNotNull(string0);
      assertEquals("SM4$7B~n?X", string0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String[] stringArray0 = new String[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trimToEmpty(stringArray0[2]);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeFirst("h@,@nDWn%zu*@k8[] vs ", "N\fa3>#]0 Jq");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h@,@nDWn%zu*@k8[] vs ", string1);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = "6){g?B#&}9azV,p3";
      String string1 = StringUtils.substringAfter("6){g?B#&}9azV,p3", "im@M[+A*'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.leftPad("Object varargs must not be null", 1081);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'D');
      assertNull(string5);
      
      String string6 = StringUtils.substring("6){g?B#&}9azV,p3", 1295);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertEquals((-1), int0);
      
      String string7 = "Oof;";
      String string8 = "9-l";
      String string9 = StringUtils.unwrap("Oof;", "9-l");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("Oof;", string9);
      
      String string10 = StringUtils.rightPad("java.security.", (-1), '\\');
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      assertEquals("java.security.", string10);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("StdIo_System_Err", "org.easymock.bytebuddy.asm.Advice$WithCustomMapping", 1295, (-2984));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 52
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '^');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertEquals(20, doubleArray0.length);
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't mat_h: ", "Search and Replace array lengths don't mat_h: ", "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", (-658));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", string1);
      
      int int0 = StringUtils.compare("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", "#!;KZ&sZ`U}S=t\u0000nk");
      assertEquals(14, int0);
      
      String string2 = StringUtils.center("Search and Replace array lengths don't mat_h: ", 14, ')');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't mat_h: ", string2);
      
      String string3 = StringUtils.join((int[]) null, 'x');
      assertNull(string3);
      
      String string4 = StringUtils.substring("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", (-231));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", string4);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0");
      assertNotNull(charBuffer0);
      assertEquals(81, charBuffer0.capacity());
      assertEquals(81, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(81, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(81, charBuffer0.limit());
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) charBuffer0, (CharSequence) "#!;KZ&sZ`U}S=t\u0000nk");
      assertFalse(int1 == int0);
      assertEquals(81, charBuffer0.capacity());
      assertEquals(81, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(81, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(81, charBuffer0.limit());
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compare("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", "Search and Replace array lengths don't mat_h: ", false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-34), int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", 10, 1);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.strip("Search and Replace array lengths don't mat_h: ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Search and Replace array lengths don't mat_h:", string5);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "$%]6~PUrCP1@W8&s@");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("nk-", " ");
      assertNotNull(string0);
      assertEquals(" nk- ", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      String string1 = StringUtils.join(charArray0, '');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'', '', '', '', '', ''}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "(Z}_WvI!2@>");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("Wq(uH.$0`u!<1WH'^d", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Wq(uH.$0`u!<1WH'^d", string2);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("&:Rd@] does not exist", "&:Rd@] does not exist", "&:Rd@] does not exist");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) null, 't');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.join((char[]) null, 't');
      assertNull(string2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase((CharSequence) null, "&:Rd@] does not exist");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.chomp((String) null, "jle=b");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string3 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("jKDEzYTk", string3);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Threshold must not be negative");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(30, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(30, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(30, charBuffer0.length());
      assertEquals("Threshold must not be negative", charBuffer0.toString());
      assertEquals(30, charBuffer0.remaining());
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing(" is not visible to ", 'v');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("v is not visible to v", string4);
      
      String string5 = StringUtils.rightPad("m5}*5~SJ_pQ `6AAYRa", 178, 'v');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("m5}*5~SJ_pQ `6AAYRavvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string5);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.unwrap("GX7}Ojlf/L_#SF~", "GX7}Ojlf/L_#SF~");
      assertNotNull(string0);
      assertEquals("GX7}Ojlf/L_#SF~", string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((byte[]) null, 'F');
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "GX7}Ojlf/L_#SF~");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[0] = 'f';
      charArray0[3] = 'f';
      String string1 = StringUtils.join(charArray0, 'f');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'f', 'f', '\u0000', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("ffff\u0000ff", string1);
      
      String string2 = StringUtils.leftPad(":p4P0>", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":p4P0>", string2);
      
      String string3 = StringUtils.center("vj(?*>h1M,!}{QwyT#x", (-1), '(');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("vj(?*>h1M,!}{QwyT#x", string3);
      
      String string4 = StringUtils.join((int[]) null, 'f');
      assertNull(string4);
      
      String string5 = StringUtils.substring("", (-1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "vj(?*>h1M,!}{QwyT#x");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1158;
      floatArray0[1] = (float) 'f';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 'f';
      String string6 = StringUtils.join(floatArray0, 'v', 588, (-782));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertArrayEquals(new float[] {1158.0F, 102.0F, (-1.0F), 102.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string6);
      
      String string7 = StringUtils.join((byte[]) null, '|');
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'k', 39, (-1526));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.overlay("", "NEVER", 160, 30);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NEVER", string1);
      
      String string2 = StringUtils.defaultIfBlank("[bc/'4Kmxy4wO", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[bc/'4Kmxy4wO", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = "]W}JE,";
      String string4 = StringUtils.deleteWhitespace("-5hlt}8)=)");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("-5hlt}8)=)", string4);
      
      String string5 = StringUtils.normalizeSpace("}2}p2w^/YF0U?}R'");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("}2}p2w^/YF0U?}R'", string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string6);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray2 = StringUtils.split("YKr7#u6kRng(A|yUV", '\"');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '\"';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = '\"';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'R', '\"', 'R', 'R', 'R', '\"'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("YuqxT_K?@N Jk`!v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: YuqxT_K?@N Jk`!v
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ojI['ArwMf", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(178));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(178));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains('}'));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("Threshold must not be negative"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("jKDEzYTk", "", 4);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "ojI['ArwMf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.stripToNull("]gKF1O");
      assertNotNull(string0);
      assertEquals("]gKF1O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "]gKF1O";
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("]gKF1O"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("]gKF1O"));
      
      String string1 = StringUtils.join(iterator0, 'y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(treeSet0.contains("]gKF1O"));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("jKDEzYTk", "%Hgg^oLQ", "]gKF1O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("jKDEzYTk", string2);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("]gKF1O"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<String> predicate0 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate0);
      assertNotSame(object1, object0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "%Hgg^oLQ");
      assertNotNull(predicate1);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      
      boolean boolean0 = vector0.removeIf(predicate2);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertFalse(vector0.contains("]gKF1O"));
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((List<?>) vector0, '(', 8192, 8192);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("]gKF1O"));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.equalsAny("Threshold must not be negative", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      String string4 = StringUtils.join(shortArray0, '(');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.swapCase("");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = "?vv=L%SGJf";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.join((double[]) null, 'a');
      assertNull(string1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ']', 6, 1158);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'x');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("<o$wm@fhW0ZF9g", 48);
      assertNotNull(string0);
      assertEquals("ZF9g", string0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.stripEnd("doPrivileged", "-8Jpb},<@h#@!k$qW$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      String string2 = StringUtils.abbreviate("doPrivileged", 76);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("doPrivileged", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" is not in the range '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", '>');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      assertEquals(20, stringArray0.length);
      assertEquals("is", charSequence0);
      
      String string4 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) 'k');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("OverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.removePattern("Aborting to protect against StackOverflowError - output of one loop is the input of another", "doPrivileged");
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      String string6 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-6), 'k');
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "doPrivileged";
      objectArray0[2] = (Object) "doPrivileged";
      objectArray0[3] = (Object) "is";
      String string7 = StringUtils.join(objectArray0, 'k');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals(4, objectArray0.length);
      assertEquals("kdoPrivilegedkdoPrivilegedkis", string7);
      
      String string8 = StringUtils.rightPad("doPrivileged", 76, 'k');
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("doPrivilegedkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string8);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "is", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(" @?/[fN(", " @?/[fN(", " @?/[fN(");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         //  @?/[fN(
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string1 = StringUtils.join(booleanArray0, '!', (-1), (-1111));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 24);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ojI['ArwMf", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(178));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(178));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(178));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("Threshold must not be negative"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("jKDEzYTk", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceChars("Ti{<G7ElpH9", '}', 'v');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Ti{<G7ElpH9", string5);
      
      String string6 = StringUtils.stripToEmpty("4_k?8HWcV~`#O?|i");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("4_k?8HWcV~`#O?|i", string6);
      
      int int1 = StringUtils.ordinalIndexOf("4_k?8HWcV~`#O?|i", "4_k?8HWcV~`#O?|i", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.removeEnd("!Sn", "!Sn");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = null;
      String string2 = StringUtils.removeStart("!Sn", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!Sn", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "!Sn";
      charSequenceArray0[1] = (CharSequence) "!Sn";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "!Sn";
      boolean boolean2 = StringUtils.startsWithAny("!Sn", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayCountry();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("Japan", string3);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", (-669), (-669));
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.remove("", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'o');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertEquals("}", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("S)Pqy5%qF-ElGrd'Y$t", "", "S)Pqy5%qF-ElGrd'Y$t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#^:'K6%&X0yCIlc`}T", "p{InCombiningDiacriticalMarks}+", 931);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#^:'K6%&X0yCIlc`}T", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("#^:'K6%&X0yCIlc`}T", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.split("#^:'K6%&X0yCIlc`}T", "#^:'K6%&X0yCIlc`}T");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)89;
      String string1 = StringUtils.join(byteArray0, '8', (int) (byte)0, (-149));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)86, (byte)49, (byte) (-60), (byte) (-74), (byte)44, (byte)124, (byte)89}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "[oSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      stringArray0[3] = "[oSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      stringArray0[4] = "";
      stringArray0[5] = "[oSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("[oSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[2] = ';';
      charArray0[3] = ';';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "0wisKYm#fl&YI@");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1945, 1945);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\u0000";
      stringArray1[1] = "gml5J@I]l+*{O/rt";
      stringArray1[2] = "";
      stringArray1[3] = "0wisKYm#fl&YI@";
      stringArray1[4] = ":p4P0>";
      stringArray1[5] = "0wisKYm#fl&YI@";
      stringArray1[6] = "gml5J@I]l+*{O/rt";
      String string1 = StringUtils.replaceEach("gml5J@I]l+*{O/rt", stringArray1, stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals("gml5J@I]l+*{O/rt", string1);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) ":p4P0>", (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\u0000");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '<', (int) '<', (int) '<');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Object varargs must not be null", (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.chop("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("Object varargs must not be nul", string1);
      
      String string2 = StringUtils.substring((String) null, 35, 35);
      assertNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "ptf^8";
      String string3 = StringUtils.removeFirst("@2gu+,$g=7SpTc)9q[_", "ptf^8");
      assertNotNull(string3);
      assertEquals("@2gu+,$g=7SpTc)9q[_", string3);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.stripToEmpty("@2gu+,$g=7SpTc)9q[_");
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("@2gu+,$g=7SpTc)9q[_", string4);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[4], (CharSequence) null);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceAll("]p(wc!", "WV4t1M;mQMO", string0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("]p(wc!", string5);
      
      String string6 = StringUtils.substring((String) null, 1204, (-44));
      assertNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "($i? vgnIo.xme", (CharSequence) "($i? vgnIo.xme");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.joinWith("Unable to create a resource from `%s`", charSequenceArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Unable to create a resource from `%s`Unable to create a resource from `%s`Unable to create a resource from `%s`Unable to create a resource from `%s`Unable to create a resource from `%s`Unable to create a resource from `%s`Unable to create a resource from `%s`", string7);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("matches '%s'.", 7);
      assertNotNull(string0);
      assertEquals("matches '%s'.", string0);
      
      Locale locale0 = new Locale("u61;3V9", "?Ik*#.J1g;=_SG4{0v", "");
      assertNotNull(locale0);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertFalse(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale1.getLanguage());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = StringUtils.stripEnd("] does not exist", "cdK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("] does not exist", string1);
      
      String string2 = StringUtils.join((float[]) null, ')');
      assertNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "u61;3V9", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join(charArray0, 'V', 4142, (-1896));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly("R(X<%^Jk_goUD", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals("R(X<%^Jk_goUD", string0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "ptf^8";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string3 = StringUtils.wrapIfMissing("ptf^8", "F+");
      assertNotNull(string3);
      assertEquals("F+ptf^8F+", string3);
      
      String string4 = StringUtils.chomp((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isBlank("-&:Rd@] does not exist");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1949), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", (int) 'n', 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringBetween("", "", "");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBetween((String) null, "qw;yO2=9D;", "");
      assertNull(string6);
      
      String string7 = StringUtils.abbreviate("", "?n>McR/}+O\u0006", (-1949));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.capitalize("cs*:X`/J+']Dn'!Y%WH");
      assertNotNull(string0);
      assertEquals("Cs*:X`/J+']Dn'!Y%WH", string0);
      
      String string1 = StringUtils.join((Object[]) null, "Cs*:X`/J+']Dn'!Y%WH", 1, 1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]gKF1O", "]gKF1O", "s");
      assertNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charArray0.length);
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.capacity());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.hasArray());
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.center("8t'_rJhgakW0/", 9);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8t'_rJhgakW0/", string1);
      
      int int0 = StringUtils.ordinalIndexOf(charBuffer0, "8t'_rJhgakW0/", 9);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("matches '%s'.", 7);
      assertNotNull(string0);
      assertEquals("matches '%s'.", string0);
      
      Locale locale0 = new Locale("u61;3V9", "?Ik*#.J1g;=_SG4{0v", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertFalse(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("u61;3v9", locale1.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale1.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = ')';
      charArray0[2] = '=';
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      
      boolean boolean1 = priorityQueue0.add("6AAYRa");
      assertFalse(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("6AAYRa"));
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      assertNotNull(arrayList0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("6AAYRa"));
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.contains("6AAYRa"));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("6AAYRa"));
      assertFalse(arrayList0.contains(false));
      assertTrue(arrayList0.contains("6AAYRa"));
      assertEquals("6AAYRa", string1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.rotate("", 54);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      
      boolean boolean1 = priorityQueue0.add("");
      assertFalse(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      assertNotNull(arrayList0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(priorityQueue0.contains(""));
      assertFalse(arrayList0.contains(54));
      assertTrue(arrayList0.contains(""));
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Strings must not be null"));
      assertTrue(priorityQueue0.contains(""));
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      String string1 = StringUtils.repeat("8Pyq", 82);
      assertNotNull(string1);
      assertEquals("8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq", string1);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase("nAGF{N2Z2yh2^", "8Pyq");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nAGF{N2Z2yh2^", string2);
      
      String string3 = StringUtils.rightPad((String) null, 82, "3_fv *,P`+[!O");
      assertNull(string3);
      
      int int0 = StringUtils.compare("17NSB:^|R=dm", "Minimum abbreviation width is %d");
      assertEquals((-28), int0);
      
      String string4 = StringUtils.wrapIfMissing("8Pyq", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("8Pyq", string4);
      
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) "8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq", (CharSequence) "Minimum abbreviation width is %d");
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.overlay("G5`~", "J_pQ `", 160, 3307);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~J_pQ `", string1);
      
      String string2 = StringUtils.defaultIfBlank("t1M;mQMO", "G5`~J_pQ `");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("t1M;mQMO", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "G5`~";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "G5`~J_pQ `";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "t1M;mQMO";
      charSequenceArray0[5] = (CharSequence) "G5`~J_pQ `";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'D');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("G5`~D...DG5`~J_pQ `D...Dt1M;mQMODG5`~J_pQ `", string3);
      
      String string4 = StringUtils.rightPad("t1M;mQMO", 8192, 'F');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("@z|BX+SZ", "", "G5`~");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.center("}", 13, "}");
      assertNotNull(string0);
      assertEquals("}}}}}}}}}}}}}", string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short)943;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short) (-881);
      shortArray0[4] = (short) (-479);
      shortArray0[5] = (short) (-368);
      shortArray0[6] = (short)53;
      String string1 = StringUtils.substringBetween("}", "}}}}}}}}}}}}}", "}");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "~6#li@BO_>|h!4>.JJD");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "}";
      charSequenceArray0[1] = (CharSequence) "mE@CgC]";
      charSequenceArray0[2] = (CharSequence) "mE@CgC]";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "}";
      charSequenceArray0[5] = (CharSequence) "mE@CgC]";
      charSequenceArray0[6] = (CharSequence) "mE@CgC]";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "mE@CgC]";
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, "}", charSequenceArray0);
      assertNull(string3);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween(".g:6D{r1u$%", (String) null, " parameters");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(3, charSequenceArray0.length);
      
      charSequenceArray0[2] = null;
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.unwrap(",g#w{", "nX");
      assertNotNull(string0);
      assertEquals(",g#w{", string0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((int[]) null, '9');
      assertNull(string5);
      
      String string6 = StringUtils.substring((String) null, 12);
      assertNull(string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "");
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, int0);
      
      String string7 = StringUtils.unwrap("^b?\u0003U!!H/Jkr?z}", "\n");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("^b?\u0003U!!H/Jkr?z}", string7);
      
      String string8 = StringUtils.rightPad("...", 86, '9');
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("...99999999999999999999999999999999999999999999999999999999999999999999999999999999999", string8);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "P3SN7f+a?.L", (CharSequence) "P3SN7f+a?.L", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.mid("%O%#!;KZ&sZ`U}S=t\u0000", 0, 13);
      assertNotNull(string0);
      assertEquals("%O%#!;KZ&sZ`U", string0);
      
      String string1 = StringUtils.remove("BOrX(", 'i');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("BOrX(", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J.Qg+>Fl:oTZ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '|');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "BOrX(", (CharSequence) "BOrX(");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("BOrX(", "5L_L_&%r-#sy;", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("BOrX(", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "BOrX(", (CharSequence) "BOrX(", 13);
      assertEquals(0, int0);
      
      String string4 = StringUtils.defaultIfEmpty("S)Pqy5%qF-ElGrd'Y$t", "J.Qg+>Fl:oTZ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("S)Pqy5%qF-ElGrd'Y$t", string4);
      
      String string5 = StringUtils.mid(" from static ", (-646), 1075);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" from static ", string5);
      
      String[] stringArray1 = StringUtils.split("J6%Ja15!d*\"$uaN8nC>", '`');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.removeStart("o=>d@", "%O%#!;KZ&sZ`U");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("o=>d@", string6);
      
      String string7 = StringUtils.join((Object[]) stringArray1, "No arguments sources were found for @CartesianTest");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals("J6%Ja15!d*\"$uaN8nC>", string7);
      
      boolean boolean1 = StringUtils.isAlphaSpace("}L }9k");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.Category> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, "...");
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      boolean boolean0 = linkedList0.removeFirstOccurrence("");
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("...", "...");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("...", (-1), "x>$cP2!_d\"ambYJi[up{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat("x>$cP2!_d\"ambYJi[up{InCombiningDiacriticalMarks}+", (-1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.uncapitalize("...");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("...", string4);
      
      boolean boolean2 = StringUtils.isBlank("...");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.repeat('#', (-1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "", (-1));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.stripStart("dMR4~T'Oo$!*", " $i4+o/U7(i6P0rDR{");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("dMR4~T'Oo$!*", string6);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-47);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'T', (-1818), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1818
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Display nme %s %s", "d>O)roQ$]dvzu+ \"z[");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 1067);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "SearchandReplacearraylengthsdon'tmatch:", (CharSequence) "SearchandReplacearraylengthsdon'tmatch:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string2 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("", '.');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string4 = StringUtils.substringAfterLast("U@V2R}7c<RA|2~=H^", (String) null);
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertNotNull(string0);
      assertEquals("G5`~maxWith cannot be negative", string0);
      
      String string1 = StringUtils.defaultIfBlank("doPrivileged", "G5`~");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.getDigits("v6@4mNEiA2%3UKT");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("6423", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.wrapIfMissing("doPrivileged", "nk-");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("nk-doPrivilegednk-", string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, '9');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(0, objectArray0.length);
      assertEquals("", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6423", (CharSequence) "nk-doPrivilegednk-", 256);
      assertEquals(20, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '9');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.left((String) null, 938);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("Unexpected error: ", "...4_k?8HWcV~`#O?|i");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Unexpected error: ";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      String string7 = StringUtils.EMPTY;
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string8 = StringUtils.getDigits("Exception cloning Cloneable type ");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string9 = StringUtils.appendIfMissing("nk-doPrivilegednk-", "", charSequenceArray0);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("nk-doPrivilegednk-", string9);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[2] = 2705.85F;
      floatArray0[3] = (-1616.1832F);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 53;
      String string2 = StringUtils.join(intArray0, 'g', 1672, 1053);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new int[] {1, 53}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join(intArray0, 'g');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new int[] {1, 53}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("1g53", string4);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "1g53", (CharSequence) "1g53");
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("!N", 0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("!N", string5);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 830);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("?vv=L%SGJf", "...", 1222);
      assertNotNull(string0);
      assertEquals("?vv=L%SGJf", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("?vv=L%SGJf", "...", "?vv=L%SGJf");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((long[]) null, 'T');
      assertNull(string1);
      
      String string2 = StringUtils.join((int[]) null, 'l');
      assertNull(string2);
      
      String string3 = StringUtils.substring("#!;KZ&sZ`U}S=t\u0000", 17);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.unwrap("...", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("...", string4);
      
      String string5 = StringUtils.rightPad("^", 1312, '2');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.getDigits("nk-");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase(string5, "", (CharSequence[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllUpperCase(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.substring("iO", 21);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "9");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("B;dK:@");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("m5}*5~SJ_pQ `", "6AAYRa");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '');
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2012);
      assertNotNull(charBuffer0);
      assertEquals(2012, charBuffer0.capacity());
      assertEquals(2012, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2012, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2012, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "<", (-1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.strip((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3061), (-3061));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = StringUtils.join(objectArray0, 'u', 10, (-1680));
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'u');
      assertNotNull(string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, (-3061));
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1680);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'u';
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 'u';
      char char0 = 'V';
      String string3 = StringUtils.join(doubleArray0, 'V');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new double[] {0.0, (-1680.0), (-1.0), 117.0, 0.0, (-1.0), (-1.0), (-1.0), 117.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("0.0V-1680.0V-1.0V117.0V0.0V-1.0V-1.0V-1.0V117.0", string3);
      
      String string4 = "t";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string5 = "nk#!;KZ&sZ`U}S=t\u0000";
      // Undeclared exception!
      try { 
        Charset.isSupported(",Y=N");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,Y=N
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.rightPad("?n>McR/}+O\u0006", 109, "?n>McR/}+O\u0006");
      assertNotNull(string0);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("WV4", "?n>McR/}+O\u0006");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", "g/s,nk)<#l[.", "hm#~3>9V4JDuEea");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?", string1);
      
      String string2 = StringUtils.leftPad("", 109, "?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006??n>McR/}+", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "WV4");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.overlay("nk", "...", 2441, 2810);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("nk...", string4);
      
      String string5 = StringUtils.replace("KnIFq',yv`*2", "\" should have a parent context.", "g/s,nk)<#l[.", (-2408));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("KnIFq',yv`*2", string5);
      
      String string6 = StringUtils.center((String) null, 8, 'L');
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?n>McR/}+O\u0006?");
      assertNotNull(intArray0);
      assertEquals(100, intArray0.length);
      
      String[] stringArray1 = StringUtils.split("ddy/build.plugins", 'L');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.replaceChars("g/s,nk)<#l[.", 'L', '5');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("g/s,nk)<#l[.", string7);
      
      String string8 = StringUtils.removeEnd("nk", "Z(L");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("nk", string8);
      
      String string9 = StringUtils.replace("hm#~3>9V4JDuEea", "", " ", (-2408));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("hm#~3>9V4JDuEea", string9);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "hm#~3>9V4JDuEea", "EHyn>r7^46,");
      assertFalse(boolean0);
      
      String string10 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals("WV4", string10);
      
      boolean boolean1 = StringUtils.isNumeric("WV4");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.center("(Mw", 100, "Parameter of type %s must reference an Enum type");
      assertNotNull(string0);
      assertEquals("Parameter of type %s must reference an Enum type(MwParameter of type %s must reference an Enum typeP", string0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Never disable parameterized test method itself", "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(23, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", 5);
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", string1);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '.');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", "org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("x~ke+50", "aB}v$bj!AW3NFD", 2216);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("x~ke+50", string3);
      
      int int1 = StringUtils.lastIndexOfAny("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(23, stringArray0.length);
      assertEquals(77, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider&:Rd@] does not exist", "Minimum abbreviation width is %d", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 33
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("]", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 53;
      intArray0[1] = (-457);
      intArray0[2] = 53;
      intArray0[3] = 1672;
      intArray0[4] = (-658);
      intArray0[5] = (int) '<';
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = (-796);
      String string2 = StringUtils.join(intArray0, '<', 1166, (-3743));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new int[] {53, (-457), 53, 1672, (-658), 60, 1, 1, (-796)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("", "]");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join(intArray0, '<');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new int[] {53, (-457), 53, 1672, (-658), 60, 1, 1, (-796)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("53<-457<53<1672<-658<60<1<1<-796", string4);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[0] = 'f';
      charArray0[3] = 'f';
      String string1 = StringUtils.join(charArray0, 'f');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'f', 'f', '\u0000', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("ffff\u0000ff", string1);
      
      String string2 = StringUtils.leftPad(":p4P0>", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":p4P0>", string2);
      
      String string3 = StringUtils.center("vj(?*>h1M,!}{QwyT#x", (-1), '(');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("vj(?*>h1M,!}{QwyT#x", string3);
      
      String string4 = StringUtils.join((int[]) null, 'f');
      assertNull(string4);
      
      String string5 = StringUtils.substring("", (-1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "vj(?*>h1M,!}{QwyT#x");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("", "g)L>sLE|}", true);
      assertFalse(int1 == int0);
      assertEquals((-9), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "vj(?*>h1M,!}{QwyT#x", (-9), 172);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.strip("");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = ".";
      String string1 = StringUtils.substringAfterLast(".", ".");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compare(".", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = "}c9vhi4&)eQ7Jr'}O_y";
      String string3 = StringUtils.substringBefore("}c9vhi4&)eQ7Jr'}O_y", (-1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("}c9vhi4&)eQ7Jr'}O_y", string3);
      
      try { 
        StringUtils.getBytes("Ki:&T +CAO\"egD8N#~d", "}c9vhi4&)eQ7Jr'}O_y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 128, 128);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("Z+'u@WGwvhTkuMr h");
      assertNotNull(intArray0);
      assertEquals(17, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 'g';
      floatArray0[4] = 2705.85F;
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'a');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("y?Bbu2W4H");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("11Z=fz}g0H", 2012, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string2, (CharSequence) "9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("B;dK:@");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("m5}*5~SJ_pQ `", "6AAYRa");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '');
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2012);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2012, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2012, charBuffer0.limit());
      assertEquals(2012, charBuffer0.remaining());
      assertEquals(2012, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "f|Pd", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 3, "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.leftPad("Object varargs must not be nullv+=w*%d^n-XB/", (-1), "Object varargs must not be nullv+=w*%d^n-XB/");
      assertNotNull(string0);
      assertEquals("Object varargs must not be nullv+=w*%d^n-XB/", string0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'i', 'i');
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Never disabl parameterized test methoditself");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) 'i';
      floatArray0[5] = (float) 'i';
      String string2 = StringUtils.substring((String) null, (-345));
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.leftPad("&:Rd@] does not exist", (-1), (String) null);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("&:Rd@] does not exist", string3);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.join((int[]) null, '9');
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, (int) 's');
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("^b?\u0003U!!H/Jkr?z}");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("^B?\u0003U!!H/JKR?Z}", string3);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.removeStart("NAg'!sbu'P+", (String) null);
      assertNotNull(string0);
      assertEquals("NAg'!sbu'P+", string0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("PI+z(4$x", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("PI+z(4$x", string0);
      
      boolean boolean0 = StringUtils.isBlank("PI+z(4$x");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'x';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "PI+z(4$x", charArray0);
      assertArrayEquals(new char[] {' ', 'x', ' ', ' ', ' ', ' ', ' ', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 677);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "PI+z(4$x", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {' ', 'x', ' ', ' ', ' ', ' ', ' ', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 'k');
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", 'k');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", string1);
      
      String string2 = StringUtils.deleteWhitespace("$k?{&_}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$k?{&_}", string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'e';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = '=';
      charArray0[7] = 'e';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'k', 'e', '\u0000', 'k', 'k', '=', '\u0000', 'e'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping";
      charSequenceArray0[1] = (CharSequence) " to be an annotation type";
      charSequenceArray0[2] = (CharSequence) " to be an annotation type";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      charSequenceArray0[5] = (CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping";
      String string3 = StringUtils.leftPad("org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", 597);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEqualsorg.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", string3);
      
      charSequenceArray0[6] = (CharSequenceorg.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping";
      charSequenceArray0[7] = (CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping";
      String string4 = StringUtils.prependIfMissingIgnoreCase(" to be an annotation type", "$k?{&_}", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(" to be an annotation type", string4);
      
      String string5 = StringUtils.unwrap("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 'k');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string5);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (CharSequence) "$k?{&_}", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 5836L;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'M';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 77L;
      floatArray0[1] = (float) 'g';
      floatArray0[2] = 2705.85F;
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) 'g';
      floatArray0[6] = (float) 'M';
      floatArray0[7] = 2705.85F;
      String string1 = StringUtils.join(floatArray0, '$', 925, (int) 'M');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new float[] {77.0F, 103.0F, 2705.85F, 0.0F, 103.0F, 103.0F, 77.0F, 2705.85F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'g');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeEnd(")!", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(")!", string3);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = StringUtils.split("", "CfV", 145);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      
      String string2 = StringUtils.replaceOnce("", "", "CfV");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "CfV", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "{[0-9]+}");
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("offset cannot be negative", (-1), (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("offset cannot be negative", string5);
      
      int int2 = StringUtils.compare("&", "offset cannot be negative");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-73), int2);
      
      String string6 = StringUtils.wrapIfMissing("org.easymock.bytebuddy.createJavaDispatcher", "P");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Porg.easymock.bytebuddy.createJavaDispatcherP", string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence) "");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertSame(charset1, charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ojI['ArwMf", string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string2 = StringUtils.lowerCase("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("ojI['ArwMf", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeAll(" was expected to be static: ", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" was expected to be static: ", string3);
      
      String string4 = StringUtils.chop(" was expected to be static: ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" was expected to be static:", string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" was expected to be static: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("ojI['ArwMf", "^E6x;\"[/!YI}b0Pc");
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.substringBefore("GX7}Ojlf/L_#;F~", 59);
      assertNotNull(string0);
      assertEquals("GX7}Ojlf/L_#", string0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("}", "G5`~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("}", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 938;
      longArray0[3] = (long) 938;
      longArray0[4] = (long) 938;
      String string4 = StringUtils.normalizeSpace("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string5 = StringUtils.firstNonEmpty(stringArray1);
      assertNull(string5);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("`", 'R');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "G5`~maxWith cannot be negative", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("s7XlWf,$haG?|", "s7XlWf,$haG?|", "s7XlWf,$haG?|");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("s7XlWf,$haG?|", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "Y(4C&qu2B|L?&x4z-d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", ".f<z(v2~W3R*\"4");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = linkedList0.add("Y(4C&qu2B|L?&x4z-d");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("Y(4C&qu2B|L?&x4z-d"));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore("", "org.easymock.bytebuddy.asm.Advice$AssignReturned$ForScalar");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "6.0=4", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.upperCase("jT~6}a[0d7@oXec");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("JT~6}A[0D7@OXEC", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "JT~6}A[0D7@OXEC";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "{[0-9]+}");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("jT~6}a[0d7@oXec", (-1), ".f<z(v2~W3R*\"4");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("jT~6}a[0d7@oXec", string5);
      
      int int2 = StringUtils.compare("maxWith cannot be negative", "Object varargs must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(30, int2);
      
      String string6 = StringUtils.wrapIfMissing("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", "#!;KZ&sZ`U}S=t\u0000");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("#!;KZ&sZ`U}S=t\u0000Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000", string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "{[0-9]+}", (CharSequence) "Locale must not be null from static ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertSame(charset1, charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "G5`~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 938;
      longArray0[3] = (long) 938;
      longArray0[4] = (long) 938;
      String string4 = StringUtils.join(longArray0, '$');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new long[] {160L, 160L, 938L, 938L, 938L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("160$160$938$938$938", string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.repeat('$', 117);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("(Z}_WvI!2@>m5}*5~SJ_pQ `", "h=?u|YGwehsO5", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNull(stringArray0);
      
      String string7 = StringUtils.replace("Minimum abbreviation width is %d", "Threshold must not be negative", "");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("Minimum abbreviation width is %d", string7);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string8 = StringUtils.defaultIfEmpty("Minimum abbreviation width is %d", "(Z}_WvI!2@>m5}*5~SJ_pQ `");
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("Minimum abbreviation width is %d", string8);
      
      String string9 = StringUtils.removeEndIgnoreCase("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", "G5`~");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", string9);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = StringUtils.split("", "CfV", 145);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      
      String string2 = StringUtils.replaceOnce("", "", "CfV");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("7,");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceFirst("offset cannot be negative", "", "E*Shk%^\"h");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("E*Shk%^\"hoffset cannot be negative", string3);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 's', (-2401), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2401
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      char char0 = 'r';
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string1);
      
      String string2 = StringUtils.leftPad("]gKF1O", 114, "]gKF1O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O]gKF1O", (-895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p<q");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("p<q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.upperCase("p<q");
      assertNotNull(string0);
      assertEquals("P<Q", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.replace("zg?Ird?}UIf0Q|", "zg?Ird?}UIf0Q|", "I/`b]\"pH", 52);
      assertNotNull(string0);
      assertEquals("I/`b]\"pH", string0);
      
      boolean boolean0 = StringUtils.endsWith("zg?Ird?}UIf0Q|", "I/`b]\"pH");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("4}6NNFW\u0006[c", "zg?Ird?}UIf0Q|");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|", string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("4}6NNFW\u0006[c", "zg?Ird?}UIf0Q|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "4}6NNFW\u0006[c";
      charSequenceArray0[1] = (CharSequence) "zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|";
      String string2 = StringUtils.wrapIfMissing("zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|", "I/`b]\"pH");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("I/`b]\"pHzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pH", string2);
      
      charSequenceArray0[2] = (CharSequence) "I/`b]\"pHzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pH";
      charSequenceArray0[3] = (CharSequence) "4}6NNFW\u0006[c";
      boolean boolean2 = StringUtils.equalsAny("4}6NNFW\u0006[c", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'v');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("4}6NNFW\u0006[cvzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|vI/`b]\"pHzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pHv4}6NNFW\u0006[c", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "zg?Ird?}UIf0Q|", charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("I/`b]\"pH");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.split("4}6NNFW\u0006[cvzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|vI/`b]\"pHzg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|I/`b]\"pHv4}6NNFW\u0006[c");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean4);
      
      String string4 = StringUtils.replaceFirst("zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|", "urceAr", "Container creation requires an assignable array as return value: ");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|", string4);
      
      boolean boolean5 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean5);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'v';
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = (long) 52;
      String string5 = StringUtils.join(longArray0, 'v', 52, (-1094));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertArrayEquals(new long[] {0L, 118L, 0L, 118L, 0L, 0L, 52L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.difference("", "uA|]");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("uA|]", string6);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", 938, 938);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.defaultIfBlank("NMH?Pr;i%].a|MO=4", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NMH?Pr;i%].a|MO=4", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("}", "NMH?Pr;i%].a|MO=4");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.deleteWhitespace("G5`~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("}");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd("cdK", "cdK");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.strip("G5`~", "G5`~");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.removeEnd("", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Ky%wY`x79o[.[5}", (String) null);
      assertNotNull(string0);
      assertEquals("Ky%wY`x79o[.[5}", string0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)409;
      String string0 = StringUtils.replace("W$G{n", "metafactorymE@CgC]", "y;TkJ", 52);
      assertNotNull(string0);
      assertEquals("W$G{n", string0);
      
      boolean boolean0 = StringUtils.endsWith("metafactorymE@CgC]", "metafactorymE@CgC]");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("h)", "y;TkJ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y;TkJh)y;TkJ", string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("4}6NNFW\u0006[c", "W$G{n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chomp("ExceptionWasThrown", "GMT");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ExceptionWasThrown", string2);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExceptionWasThrown");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)3520;
      shortArray0[3] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)46, (short)5, (short)3520, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("46e5e3520e5", string0);
      
      String string1 = StringUtils.unwrap("I/`b]\"pH", '{');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("I/`b]\"pH", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$k?{&_}", (CharSequence) "I/`b]\"pH");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {']', 'e', 'e', 'e', '{', '{', '{', '{'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "$k?{&_}", 256);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "I/`b]\"pH", (char[]) null);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "46e5e3520e5", (int) (short)5, 960);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("=C");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "=C", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = StringUtils.substring("88*%a$W6bu~uzNr_V~!S3L", (-2147483608), (-2147483608));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.strip("nN[iSsv#+E!/w", "nN[iSsv#+E!/w");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "nN[iSsv#+E!/w", (CharSequence) "", 141);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-1);
      String string0 = "Strings must not be null";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      String string1 = StringUtils.join(booleanArray0, '2', 39, (int) (short) (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '^', (int) (short) (-1), (int) (short)8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("%O%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("nk", "#!;KZ&sZ`U}S=t\u0000");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("O");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "%O%", 'w');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'l';
      charArray0[4] = 'u';
      String string2 = StringUtils.join(charArray0, 'u');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'l', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("uuuuuuluu", string2);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("#!;KZ&sZ`U}S=t\u0000", "nk");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.chomp("org.junitpioneer.jupiter.IssueExtension", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#!;KZ&sZ`U}S=t\u0000";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.IssueExtension";
      charSequenceArray0[2] = (CharSequence) "uuuuuuluu";
      boolean boolean3 = StringUtils.endsWithAny("uuuuuuluu", charSequenceArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      String string0 = StringUtils.prependIfMissing("Display name '%s' %s", "Display name '%s' %s", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("Display name '%s' %s", string0);
      
      String string1 = StringUtils.replaceFirst("Display name '%s' %s", "Display name '%s' %s", "Display name '%s' %s");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Display name '%s' %s", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0rvpn&1y9stO]msj}");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Display name '%s' %s"));
      
      String string2 = StringUtils.center("=QFNSW@EtB%S)iT", (-786), "Display name '%s' %s");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=QFNSW@EtB%S)iT", string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Display name '%s' %s", "=QFNSW@EtB%S)iT");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Test '%s' was supposed to run no longer than %d ms.", (CharSequence) "f|Pd");
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Failed to assert access rights using security manager");
      assertNotNull(string0);
      assertEquals("failed to assert access rights using security manager", string0);
      
      String string1 = StringUtils.mid("failed to assert access rights using security manager", 5, 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("d to assert acces", string1);
      
      String string2 = StringUtils.replaceOnce("BCe>|npI1y", "qNAg'w!sbu'P+", " for ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("BCe>|npI1y", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "BCe>|npI1y";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "BCe>|npI1y";
      charSequenceArray0[3] = (CharSequence) "failed to assert access rights using security manager";
      charSequenceArray0[4] = (CharSequence) "d to assert acces";
      charSequenceArray0[5] = (CharSequence) " for ";
      String string3 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "BCe>|npI1y", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String string4 = StringUtils.lowerCase("Failed to assert access rights using security manager");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("failed to assert access rights using security manager", string4);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "qNAg'w!sbu'P+");
      assertEquals(6, charSequenceArray0.length);
      assertEquals(87, int0);
      
      String string5 = StringUtils.substringAfter("=4", 2311);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("d to assert acces"));
      
      Vector<String> vector0 = new Vector<String>(treeSet0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(treeSet0.contains("d to assert acces"));
      assertFalse(vector0.contains("d to assert acces"));
      
      String string6 = StringUtils.join((Iterable<?>) vector0, "JO+ ba^-m.");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(treeSet0.contains(string0));
      assertFalse(vector0.contains(string0));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("|4+bLi-QR}b|4+bLi-QR}b", "|4+bLi-QR}b|4+bLi-QR}b", (-141));
      assertNotNull(string0);
      assertEquals("|4+bLi-QR}b|4+bLi-QR}b", string0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = (-1274.37);
      doubleArray0[2] = 1.5;
      String string2 = StringUtils.join(doubleArray0, 'y');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(19, doubleArray0.length);
      assertEquals("0.0y-1274.37y1.5y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0", string2);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.replaceIgnoreCase("'Xe:r6:WT f #!LJ5<", "0.0y-1274.37y1.5y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0y0.0", "m5}*5~SJ_pQ `(Z}_WvI!2@>", 2620);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("'Xe:r6:WT f #!LJ5<", string3);
      
      int int0 = StringUtils.compare("TkiiC}IFe", "cMM`>-");
      assertEquals((-15), int0);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("vz", (CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removePattern("YP@L^1QU(I:r", "'Xe:r6:WT f #!LJ5<");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("YP@L^1QU(I:r", string5);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "'Xe:r6:WT f #!LJ5<", 2620);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("p<q", "T:;Pm.", 1);
      assertNotNull(string0);
      assertEquals("p<q", string0);
      
      String string1 = StringUtils.rotate("p<q", 102);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("p<q", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("p<q", "p<q");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Illegal range. There's no way to get from %s to %s with a step of %s.", "Illegal range. There's no way to get from %s to %s with a step of %s.", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "]gKF1O", (-2385));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("]gKF1O", "]gKF1O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "s", "s");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("]gKF1O");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("hQC?<]>d:bC=&)1", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hQC?<]>d:bC=&)1", string1);
      
      Vector<Object> vector0 = new Vector<Object>(3111, 108);
      assertNotNull(vector0);
      assertEquals(3111, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((-2385)));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1263);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1263);
      shortArray0[4] = (short) (-1263);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1263);
      shortArray0[7] = (short)5;
      shortArray0[8] = (short)5;
      String string2 = StringUtils.join(shortArray0, 'i');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short) (-1263), (short)5, (short)5, (short) (-1263), (short) (-1263), (short)0, (short) (-1263), (short)5, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals("-1263i5i5i-1263i-1263i0i-1263i5i5", string2);
      
      String string3 = StringUtils.swapCase("@TO5*kV)0S(m");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("@to5*Kv)0s(M", string3);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Locale must not be null", "Locale must not be null", "Searc");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("<|uY6__3y6^J", "<|uY6__3y6^J", "\r");
      assertNull(stringArray0);
      
      int int0 = StringUtils.length("<|uY6__3y6^J");
      assertEquals(12, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m5}*5~", "m5}*5~", 256);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String string0 = StringUtils.chop("m5}*5~");
      assertNotNull(string0);
      assertEquals("m5}*5", string0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Object varargs must not be null");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(6, stringArray2.length);
      
      String[] stringArray3 = StringUtils.stripAll((String[]) null, "\r");
      assertNull(stringArray3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "m5}*5~", (CharSequence) "m5}*5~", 12);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("\"^3+E");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"^3+E", string1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string2 = StringUtils.join(booleanArray0, 'v');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "<|uY6__3y6^J", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int2);
      
      String string3 = StringUtils.replaceChars("D^cT9zvcO-J", 'd', 'v');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("D^cT9zvcO-J", string3);
      
      String[] stringArray4 = StringUtils.split("Strings must not be null");
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertNotNull(stringArray4);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertEquals(5, stringArray4.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 0;
      intArray0[3] = (int) 'v';
      intArray0[4] = 4034;
      String string4 = StringUtils.join(intArray0, 'v', 12, 12);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new int[] {12, 12, 0, 118, 4034}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(string1));
      
      String string5 = StringUtils.join((List<?>) vector0, "-VRUG", (-12), (-75));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'p');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "G5`~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 938;
      longArray0[3] = (long) 938;
      longArray0[4] = (long) 938;
      String string4 = StringUtils.join(longArray0, '$');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertArrayEquals(new long[] {160L, 160L, 938L, 938L, 938L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("160$160$938$938$938", string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string6 = StringUtils.firstNonEmpty(stringArray1);
      assertNull(string6);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("`", 'R');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      
      String string7 = StringUtils.substringBefore("]W}JE,", "doPrivileged");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("]W}JE,", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "]W}JE,", 938);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.join((Iterator<?>) null, 'R');
      assertNull(string8);
      
      String string9 = StringUtils.right("F\"-k*c", 160);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals("F\"-k*c", string9);
      
      boolean boolean0 = StringUtils.isNotEmpty("`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.wrapIfMissing("V>~RxTN", "V>~RxTN");
      assertNotNull(string0);
      assertEquals("V>~RxTN", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = 'A';
      charArray0[8] = '';
      String string1 = StringUtils.join(charArray0, '');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'A', 'A', 'A', '', '', '', '', 'A', ''}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("AAAA", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("V>~RxTN", "V>~RxTN");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp("6AAYRam5}*5~SJ_pQ `6AAYRaorg.junitpioneer.jupiter.IssueExtension", "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string2);
      
      String string3 = StringUtils.getDigits("6AAYRam5}*5~SJ_pQ `6AAYRaorg.junitpioneer.jupiter.IssueExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("6556", string3);
      
      String string4 = StringUtils.chomp("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "6AAYRam5}*5~SJ_pQ `6AAYRa";
      objectArray0[3] = (Object) '';
      objectArray0[4] = (Object) 'A';
      objectArray0[5] = (Object) "org.junitpioneer.jupiter.IssueExtension";
      objectArray0[6] = (Object) 'A';
      objectArray0[7] = (Object) '';
      objectArray0[8] = (Object) '';
      String string5 = StringUtils.join(objectArray0, "Only one method-level arguments source can be used with @CartesianTest");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 'k');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceChars("WHyqqTR;5K_t", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("WHiqqTC;5K_r", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "WHyqqTR;5K_t");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      String string3 = StringUtils.join(objectArray0, "}Jh_>O", 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, objectArray0.length);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 4351);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase("}Jh_>O", "}Jh_>O", "No exit advice defined by ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("No exit advice defined by ", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 4351);
      assertFalse(int1 == int0);
      assertEquals(68, int1);
      
      String string5 = StringUtils.defaultIfEmpty("", "j3}_,D%g1!!d'%tn");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("j3}_,D%g1!!d'%tn", string5);
      
      String string6 = StringUtils.mid("No exit advice defined by ", (-1425), 0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.split("", '#');
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string7 = StringUtils.removeStart("urceArgumentsProvider", "}L }9k");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("urceArgumentsProvider", string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "");
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals("", string8);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.stripToNull((String) null);
      assertNull(string9);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "`I1,dBha[+v'AtH>e/a", 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = linkedList0.add("6.0=4");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("6.0=4"));
      assertFalse(linkedList0.contains(string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.upperCase("B");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("B", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "B";
      charSequenceArray0[1] = (CharSequence) "B";
      charSequenceArray0[2] = (CharSequence) "B";
      charSequenceArray0[3] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) "6.0=4", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("B", 25, "GMT");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("BGMTGMTGMTGMTGMTGMTGMTGMT", string5);
      
      int int2 = StringUtils.compare("B", "Locale must not be null from static ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-10), int2);
      
      String string6 = StringUtils.wrapIfMissing("LHD,Ql,Fc)Iy'jv ", "\n");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("\nLHD,Ql,Fc)Iy'jv \n", string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "'v*^l", (CharSequence) "\nLHD,Ql,Fc)Iy'jv \n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertSame(charset1, charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.rightPad("\n", 65536, "\n");
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.stripStart(";24#/yd0EllHU", ";24#/yd0EllHU");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "p<q", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) ";24#/yd0EllHU", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      int int0 = (-658);
      String string1 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string2 = "@";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "@");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], "Search and Replace array lengths don't match: ");
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@", "Search and Replace array lengths don't match: ", (-658), (-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 47
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " is not visible to ", (CharSequence) "O");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "$  GV'1244E}*";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {107.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("107.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "107.0", (-658));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("107.0", string1);
      
      int int0 = StringUtils.compare("107.0", "#!;KZ&sZ`U}S=t\u0000nk");
      assertEquals(14, int0);
      
      String string2 = StringUtils.substringAfter("107.0", "Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "107.0";
      charSequenceArray0[2] = (CharSequence) "107.0";
      charSequenceArray0[3] = (CharSequence) "107.0";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removePattern("", "107.0");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.ordinalIndexOf("107.0", "KSl*j", (-658));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) ">", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = 0.0F;
      int int0 = StringUtils.indexOf((CharSequence) "", 1867);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("", "&:Rd@] does not exist");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("&:Rd@] does not exist", "-");
      assertNotNull(string2);
      assertEquals("-&:Rd@] does not exist-", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(1867));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(1867));
      
      int int1 = StringUtils.lastOrdinalIndexOf("&:Rd@] does not exist", "", 2147483645);
      assertFalse(int1 == int0);
      assertEquals(21, int1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.rightPad("FY4", (-1192), (String) null);
      assertNotNull(string0);
      assertEquals("FY4", string0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>(49);
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = arrayDeque0.add(locale_Category0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, 'b');
      assertNotNull(string0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertEquals("DISPLAY", string0);
      
      charSequenceArray0[0] = (CharSequence) "DISPLAY";
      String string1 = StringUtils.wrap("DISPLAY", "DISPLAY");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("DISPLAYDISPLAYDISPLAY", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = arrayDeque0.removeFirstOccurrence(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertFalse(boolean1);
      
      charSequenceArray0[1] = (CharSequence) "DISPLAYDISPLAYDISPLAY";
      String string2 = StringUtils.removeEnd("DISPLAYDISPLAYDISPLAY", "Object varargs must not be null");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("DISPLAYDISPLAYDISPLAY", string2);
      
      String string3 = StringUtils.replaceChars((String) null, "|]", "offset cannot be negative");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("G`A[3^]:", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove("...", 'B');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "LsM['=3|ZPaUboC2V+");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("m5}*5~SJ_pQ `", "(Z}_WvI!2@>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(Z}_WvI!2@>m5}*5~SJ_pQ `(Z}_WvI!2@>", string1);
      
      char[] charArray0 = new char[19];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = 'B';
      String string2 = StringUtils.join(charArray0, 'B');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(19, charArray0.length);
      assertEquals("BBBBBBBBBB\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000B\u0000", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", "nk-");
      assertFalse(boolean0);
      
      String string3 = StringUtils.chomp("org.junitpioneer.jupiter.IssueExtension", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("...", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string0);
      
      String string1 = StringUtils.lowerCase("=4");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=4", string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("ktwaW<=B 9*n_|;wZ", 's');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ktwaW<=B 9*n_|;wZ", string2);
      
      int int0 = StringUtils.lastIndexOfAny("=4", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|VIz%57Z!-");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("ktwaW<=B 9*n_|;wZ", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOfAny("3zem", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (int) '<');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("h~O{{V:@pvt", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-52));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string0 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'Q');
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("PhoZq'", 1081, '9');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, '9');
      assertNull(string5);
      
      String string6 = StringUtils.substring("#!;KZ&sZ`U}S=t\u0000", 12);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("=t\u0000", string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.unwrap("^b?\u0003U!!H/Jkr?z}", "");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("^b?\u0003U!!H/Jkr?z}", string7);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", "AX");
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("Node ");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("node ", string2);
      
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[4], (CharSequence) null);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Oc[5]H-1B+>P+XOw", "2", (int) '|');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?vv=L%SGJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("?vv=L%SGJf", "~Fc2)S?r]a8mPY@qm", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("?vv=L%SGJf", string0);
      
      String string1 = StringUtils.lowerCase("6PT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6pt", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("6pt", "?vv=L%SGJf");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll(": ", "`'BW%1");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(": ", string2);
      
      String string3 = StringUtils.chop(" does not have data element at ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" does not have data element at", string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("?vv=L%SGJf");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("'[<7>V\",aAH-d:XNmD", "}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.leftPad(">", 6);
      assertNotNull(string0);
      assertEquals("     >", string0);
      
      String string1 = StringUtils.unwrap("     >", "CL3BgH!p");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("     >", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      String string2 = StringUtils.replaceEach("     >", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertEquals("     >", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "     >", "Cannot assign ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("CL3BgH!p", "Parameter [%s] is not of the correct target type %s", 2007);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("CL3BgH!p", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "     >", ')');
      assertEquals(0, int0);
      
      String string4 = StringUtils.left("f!6Fu{!<", 1067);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("f!6Fu{!<", string4);
      
      String string5 = StringUtils.appendIfMissing(">", "     >", stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertEquals(">", string5);
      
      String string6 = StringUtils.stripEnd("` dzK$0Xb3w`", "f!6Fu{!<");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("` dzK$0Xb3w`", string6);
      
      String string7 = StringUtils.deleteWhitespace("Strings must not be null");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("Stringsmustnotbenull", string7);
      
      String string8 = StringUtils.substringBefore("Parameter [%s] is not of the correct target type %s", (int) ')');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("Parameter [%s] is not of the correct target type %s", string8);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j";
      charSequenceArray0[1] = (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
      charSequenceArray0[2] = (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
      int int1 = StringUtils.lastIndexOfAny(" au=(Quo7)`B+'}#%O6IsM~;F0j", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L", "L", (-1231));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceEach("i#F+NYM9T", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertEquals("i#F+NYM9T", string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2?dbTi&JZt5?v'u";
      stringArray0[1] = "2?dbTi&JZt5?v'u";
      stringArray0[2] = "2?dbTi&JZt5?v'u";
      stringArray0[3] = "2?dbTi&JZt5?v'u";
      stringArray0[4] = "2?dbTi&JZt5?v'u";
      stringArray0[5] = "2?dbTi&JZt5?v'u";
      stringArray0[6] = "2?dbTi&JZt5?v'u";
      stringArray0[7] = "2?dbTi&JZt5?v'u";
      String string0 = StringUtils.replaceEach("2?dbTi&JZt5?v'u", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      assertEquals("2?dbTi&JZt5?v'u", string0);
      
      boolean boolean0 = StringUtils.isBlank("2?dbTi&JZt5?v'u");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("2?dbTi&JZt5?v'u", "2?dbTi&JZt5?v'u", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CY'SC4c0 V/La^p7<~D";
      stringArray0[1] = "p<q";
      stringArray0[2] = "p<q";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("CY'SC4c0 V/La^p7<~D", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String string0 = "Strings must not be null";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("]gKF1O", "[gze3V/[i,c", "+n$e`,B");
      assertNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.substring("[gze3V/[i,c", (-946));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[gze3V/[i,c", string1);
      
      boolean boolean0 = StringUtils.isNumeric("[gze3V/[i,c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripEnd("", "-");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.reverse("");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.leftPad("!@Mk(sy", 0, 'H');
      assertNotNull(string0);
      assertEquals("!@Mk(sy", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!@Mk(sy", (CharSequence) "j3}_,D%g1!!d'%tn");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("&V=7w8GoV~,:^", "nN9;w0Vg&^*Cv_", true);
      assertEquals((-72), int0);
      
      String string1 = StringUtils.repeat("zU}fTS6WTs/cu_$BC", (-4270));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isBlank("!@Mk(sy");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceAll("zU}fTS6WTs/cu_$BC", "nN9;w0Vg&^*Cv_", "&V=7w8GoV~,:^");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("zU}fTS6WTs/cu_$BC", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "nN9;w0Vg&^*Cv_";
      charSequenceArray0[1] = (CharSequence) "zU}fTS6WTs/cu_$BC";
      charSequenceArray0[2] = (CharSequence) "ox7Nu`KW/Hl}*4y";
      charSequenceArray0[3] = (CharSequence) "j3}_,D%g1!!d'%tn";
      String string3 = StringUtils.appendIfMissingIgnoreCase("nN9;w0Vg&^*Cv_", "zU}fTS6WTs/cu_$BC", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("nN9;w0Vg&^*Cv_", string3);
      
      String string4 = StringUtils.lowerCase("j3}_,D%g1!!d'%tn");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("j3}_,d%g1!!d'%tn", string4);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "z4X", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("11Z=fz}g0H", 2012, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string2, (CharSequence) "9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("B;dK:@");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("m5}*5~SJ_pQ `", "6AAYRa");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '');
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2012);
      assertNotNull(charBuffer0);
      assertEquals(2012, charBuffer0.capacity());
      assertEquals(2012, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2012, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2012, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2012, charBuffer0.capacity());
      assertEquals(2012, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2012, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2012, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2012, charBuffer1.limit());
      assertEquals(2012, charBuffer1.remaining());
      assertEquals(2012, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2012, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("m5}*5~SJ_pQ `", charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertEquals(2012, charBuffer0.capacity());
      assertEquals(2012, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2012, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2012, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
      
      String string6 = StringUtils.chomp("6AAYRam5}*5~SJ_pQ `6AAYRa", "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("6AAYRam5}*5~SJ_pQ `6AAYRa", string6);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) '%';
      longArray0[2] = 61L;
      String string1 = StringUtils.join(longArray0, 'a');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {36L, 37L, 61L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("36a37a61", string1);
      
      String string2 = StringUtils.normalizeSpace("36a37a61");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("36a37a61", string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%O%";
      stringArray0[1] = "O";
      stringArray0[2] = "O";
      stringArray0[3] = "";
      stringArray0[4] = "36a37a61";
      stringArray0[5] = "t~[[]S";
      stringArray0[6] = "36a37a61";
      stringArray0[7] = "36a37a61";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      
      String string3 = StringUtils.firstNonEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertEquals("%O%", string3);
      
      String[] stringArray2 = StringUtils.split("A1>:#", 'R');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '~';
      charArray0[2] = 'a';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "O", charArray0);
      assertArrayEquals(new char[] {'', '~', 'a'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      String string4 = StringUtils.join((List<?>) arrayList0, "O", 0, 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("O"));
      assertEquals("", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "t~[[]S");
      assertFalse(int1 == int0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.leftPad("BOrX(", 0, 'r');
      assertNotNull(string0);
      assertEquals("BOrX(", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "BOrX(", (CharSequence) "BOrX(");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("ox7Nu`KW/Hl}*4y", "ox7Nu`KW/Hl}*4y", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, "BOrX(");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeAll((String) null, "nk#!;KZ&sZ`U}S=t\u0000");
      assertNull(string2);
      
      String string3 = StringUtils.chop("r@6d~UAw:c;5RjK");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("r@6d~UAw:c;5RjK");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("BOrX(", "o)0liRC");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("B", (CharSequence) null, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.endsWithAny("Z+'u@WGwvhTkuMr h", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", 938, 938);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.defaultIfBlank("NMH?Pr;i%].a|MO=4", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NMH?Pr;i%].a|MO=4", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("}", "NMH?Pr;i%].a|MO=4");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.repeat('N', 938);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEqualsstring2);
      
      StringUtils.reverseDelimited("}", 'X');
      StringUtils.substringAfter("(Z}_WvI!2@>m5}*5~SJ_pQ `", 938);
      StringUtils.leftPad((String) null, (int) (byte) (-72));
      StringUtils.replaceIgnoreCase("}QyLmh'q?+[HFM", "(Z}_WvI!2@>m5}*5~SJ_pQ `", "SZw>'w k0o", 938);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "}";
      StringUtils.indexOfDifference(charSequenceArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'X';
      charArray0[7] = 'N';
      StringUtils.indexOfAny((CharSequence) "}QyLmh'q?+[HFM", charArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertEquals(20, doubleArray0.length);
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't mat_h: ", "Search and Replace array lengths don't mat_h: ", "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", (-658));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", string1);
      
      int int0 = StringUtils.compare("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", "#!;KZ&sZ`U}S=t\u0000nk");
      assertEquals(14, int0);
      
      String string2 = StringUtils.substringAfter("107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0", "Search and Replace array lengths don't mat_h: ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't mat_h: ";
      charSequenceArray0[1] = (CharSequence) "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0";
      charSequenceArray0[2] = (CharSequence) "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0";
      charSequenceArray0[3] = (CharSequence) "107.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0k0.0";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Search and Replace array lengths don't mat_h: ", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceChars("", 'k', 'k');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "#!;KZ&sZ`U}S=t\u0000nk", charSequenceArray0[2]);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.removeAll("GX7}Ojlf/L_#;F~", "GX7}Ojlf/L_#;F~");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.substringAfter("_9fkV2,](z@J8q`", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.substringBefore("maxWith cannot be negative", "RG=:<uAlO`");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.chomp("G]uDT(i");
      assertNotNull(string0);
      assertEquals("G]uDT(i", string0);
      
      int int0 = StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G]uDT(i", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace("$Proxy");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$Proxy", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Proxy";
      String string2 = StringUtils.strip("maxWith cannot be negative", "Error reading class file of ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("maxWith cannot be negativ", string2);
      
      String string3 = StringUtils.replaceChars(" resource lock", 'r', 'G');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" GesouGce lock", string3);
      
      String string4 = StringUtils.substringAfterLast("v", 1155);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " resource lock", charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 1155);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.removeFirst("Minimum abbreviation width is %d", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("Minimum abbreviation width is %d", string5);
      
      String string6 = StringUtils.left(" GesouGce lock", (-2262));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBefore("Minimum abbreviation width is %d", "LfG%b");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("Minimum abbreviation width is %d", string7);
      
      int int3 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-640));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.substringBefore("3#", "3#");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("matches '%s'.", 7);
      assertNotNull(string0);
      assertEquals("matches '%s'.", string0);
      
      Locale locale0 = new Locale("u61;3V9", "?Ik*#.J1g;=_SG4{0v", "");
      assertNotNull(locale0);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale1.getCountry());
      assertEquals("u61;3v9", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = ')';
      charArray0[2] = '=';
      charArray0[3] = ')';
      charArray0[4] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "kuM4]W=^p%,XlDG5Fb36.0T107.0T107.0T107.0T29.0T107.0T0.0T36.0T107.0", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'d', ')', '=', ')', '='}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("matches '%s'.", 7);
      assertNotNull(string0);
      assertEquals("matches '%s'.", string0);
      
      Locale locale0 = new Locale("u61;3V9", "?Ik*#.J1g;=_SG4{0v", "");
      assertNotNull(locale0);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean0);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("u61;3v9", locale0.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale0.toString());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("?IK*#.J1G;=_SG4{0V", locale1.getCountry());
      assertEquals("u61;3v9", locale1.getLanguage());
      assertEquals("u61;3v9_?IK*#.J1G;=_SG4{0V", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int1 = StringUtils.indexOf((CharSequence) "matches '%s'.", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`K{KY@us]s[p`HpD%%");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((boolean[]) null, 'U');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "t");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("t", "?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("?vv=L%SGJft?vv=L%SGJf", string0);
      
      String string1 = "}+";
      String[] stringArray1 = StringUtils.splitByWholeSeparator("t", "}+", (-869));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string2 = null;
      int int0 = StringUtils.compareIgnoreCase("t", (String) null);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.right("lExtens`ion", 6378);
      assertNotNull(string0);
      assertEquals("lExtens`ion", string0);
      
      String string1 = StringUtils.removeStart("lExtens`ion", "lExtens`ion");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.replaceChars("'WfN^.\"SdIOD@sMF&", "\r", "'WfN^.\"SdIOD@sMF&");
      assertNotNull(string0);
      assertEquals("'WfN^.\"SdIOD@sMF&", string0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1949), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", (int) 'n', 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringBetween("", "", "");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.wrapIfMissing("mE@CgC]", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("mE@CgC]", string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("7,", "mE@CgC]", charSequenceArray0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("7,", string7);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("]", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]", string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '<';
      String string2 = StringUtils.join(longArray0, 'R');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {60L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("60R0R0R0", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "!");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("60R0R0R0", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("6a11By$Hy`[8O^ vR", "Object varargs must not be null", 120);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("6a11By$Hy`[8O^ vR", string3);
      
      String string4 = StringUtils.defaultIfBlank("]", "!");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("]", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("]", "#!;KZ&sZ`U}S=t\u0000nk", 13);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", (int) 'n', 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.joinWith("", charSequenceArray0);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string6);
      
      String string7 = StringUtils.substringAfter("#", "");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("#", string7);
      
      String string8 = StringUtils.stripStart("", "Gczmicd[eE");
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[3], charSequenceArray0[0]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "doPrivileged";
      charSequenceArray0[1] = (CharSequence) "doPrivileged";
      String string0 = StringUtils.trimToNull("doPrivileged");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      charSequenceArray0[2] = (CharSequence) "doPrivileged";
      charSequenceArray0[3] = (CharSequence) "doPrivileged";
      charSequenceArray0[4] = (CharSequence) "doPrivileged";
      charSequenceArray0[5] = (CharSequence) "doPrivileged";
      charSequenceArray0[6] = (CharSequence) "doPrivileged";
      charSequenceArray0[7] = (CharSequence) "doPrivileged";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      String string1 = StringUtils.join(charArray0, 'w');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("wwwwwww", string1);
      
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((short[]) null, 'f');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("doPrivileged", charSequenceArray0[4]);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.wrapIfMissing("", (String) null);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('w'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = priorityQueue0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, priorityQueue0.size());
      assertNotSame(object1, object0);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains('w'));
      assertTrue(boolean2);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains('w'));
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string4));
      
      int int0 = (-1946);
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-2516));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2516
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(178));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(178));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(178));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(string2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate1);
      assertNotSame(object1, object0);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotSame(object0, object1);
      assertFalse(vector0.contains(string2));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) vector0, '}', 8192, 8192);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(string2));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Object[]) null, '}');
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllLowerCase("jKDEzYTk");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("E*Shk%^\"h");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 8192;
      String string7 = StringUtils.join(intArray0, 'w');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertArrayEquals(new int[] {0, 8192}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("0w8192", string7);
      
      String string8 = StringUtils.substring("MQH;)l<", 0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("MQH;)l<", string8);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "0w8192", (CharSequence) "MQH;)l<");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Never disable parameterized test method itself", "");
      assertNotNull(string0);
      assertEquals("Never disable parameterized test method itself", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Display {[eK%s+As", (CharSequence) "Never disable parameterized test method itself", 19);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", '<');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "t";
      stringArray0[2] = "4f4^vcP*q`FIr$>";
      stringArray0[3] = "}] doe";
      stringArray0[4] = "3klF2;0@N+W0ur8p";
      stringArray0[5] = "";
      stringArray0[6] = "@3<e:Ym}$vUX";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("@3<e:Ym}$vUX"));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("@3<e:Ym}$vUX"));
      
      int int0 = StringUtils.lastOrdinalIndexOf("4f4^vcP*q`FIr$>", "}] doe", 160);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "3klF2;0@N+W0ur8p");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 160);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", "5Xi16;Y#4");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.strip("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = 0.0F;
      int int0 = StringUtils.indexOf((CharSequence) "", 1867);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("", "&:Rd@] does not exist");
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "", (-547));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compare("#!;KZ&sZ`U}S=t\u0000nk", "#!;KZ&sZ`U}S=t\u0000nk");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.substringAfter("", (String) null);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removePattern((String) null, "KSl*j");
      assertNull(string4);
      
      int int2 = StringUtils.ordinalIndexOf((CharSequence) null, "", (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("?vv=L%SGJf", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?vv=L%SGJf", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.wrapIfMissing("", "17k)IMYtS=B'");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.truncate("", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trim("n0K>Ac|S>rq`]G");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("n0K>Ac|S>rq`]G", string2);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[1] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray2 = StringUtils.split("", '4');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      
      String string1 = StringUtils.removePattern("", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '4';
      intArray0[2] = (int) '6';
      intArray0[3] = (int) '6';
      intArray0[4] = 321;
      intArray0[5] = (int) '6';
      intArray0[6] = (int) '6';
      intArray0[7] = (int) '4';
      objectArray0[6] = (Object) '4';
      String string2 = StringUtils.join(intArray0, '6');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new int[] {52, 0, 54, 54, 321, 54, 54, 52, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("5260654654632165465465260", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'r';
      charArray0[2] = '6';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = '4';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {')', 'r', '6', ')', ')', '4'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.left("877)", (-2352));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {107.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("107.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.wrapIfMissing("107.0", "$Proxy");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$Proxy107.0$Proxy", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("107.0"));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.complementOf(enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      
      boolean boolean1 = priorityQueue0.retainAll(enumSet1);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(priorityQueue0.contains("107.0"));
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertFalse(boolean1);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("107.0"));
      
      int int0 = StringUtils.lastOrdinalIndexOf("$Proxy", "$Proxy", 29);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "$Proxy107.0$Proxy", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 55);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "Strings must not be null";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfter("-pSxd\"]Z~bb|", (int) (short) (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      boolean boolean0 = treeSet0.removeIf(predicate0);
      assertFalse(treeSet0.contains(string0));
      assertFalse(boolean0);
      
      Vector<String> vector0 = new Vector<String>(treeSet0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(treeSet0.contains(string0));
      assertFalse(vector0.contains(string0));
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, "f5'WQIvejezh;Y;");
      assertNotNull(string1);
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)409;
      shortArray0[1] = (short) (-2928);
      shortArray0[2] = (short)3520;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)8192;
      String string0 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)409, (short) (-2928), (short)3520, (short)46, (short)5, (short)8192}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("409e-2928e3520e46e5e8192", string0);
      
      String string1 = StringUtils.unwrap("$k?{&_}", 'e');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$k?{&_}", string1);
      
      String string2 = StringUtils.deleteWhitespace("$k?{&_}");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("$k?{&_}", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "409e-2928e3520e46e5e8192", (CharSequence) "$k?{&_}");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "$k?{&_}", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "$k?{&_}", 9);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains((short)409));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains((short)409));
      
      String string3 = StringUtils.join(iterator0, "$k?{&_}");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains((short)409));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("cW#^/[8\",|7=HIEtMsi", "Ews,a8GJzwR_'Qa>fxY");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("Ews,a8GJzwR_'Qa>fxY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", "3R\"Xwf@Pu?mUi0:U5");
      assertEquals(13, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "Never disabl parameterized test methoditself");
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Never disabl parameterized test methoditself");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      
      String string2 = StringUtils.center("3R\"Xwf@Pu?mUi0:U5", 13);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("3R\"Xwf@Pu?mUi0:U5", string2);
      
      boolean boolean0 = StringUtils.startsWithAny("3R\"Xwf@Pu?mUi0:U5", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("", "ACCESS_CONTROLLER");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceIgnoreCase("ACCESS_CONTROLLER", "ACCESS_CONTROLLER", ">?'I4/RO,=EI&jm!");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">?'I4/RO,=EI&jm!", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.remove("", 'P');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|VIz%57Z!-");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean2);
      
      String string4 = StringUtils.stripToNull(">?'I4/RO,=EI&jm!");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(">?'I4/RO,=EI&jm!", string4);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("h", string0);
      
      String string1 = StringUtils.deleteWhitespace("h");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h";
      charSequenceArray0[1] = (CharSequence) "h";
      charSequenceArray0[2] = (CharSequence) "h";
      charSequenceArray0[3] = (CharSequence) "h";
      charSequenceArray0[4] = (CharSequence) "h";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replacePattern((String) null, "h", "pq5_ V");
      assertNull(string2);
      
      String string3 = StringUtils.remove("pq5_ V", 'h');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("pq5_ V", string3);
      
      String string4 = StringUtils.difference("h", "pq5_ V");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("pq5_ V", string4);
      
      String string5 = StringUtils.replacePattern("pq5_ V", "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", (String) null);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("pq5_ V", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "pq5_ V", 4254, (-1823));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.overlay("+;eAf/twg?*<S[Ui", "", 0, 0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("+;eAf/twg?*<S[Ui", string6);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("h", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.compareIgnoreCase("+;eAf/twg?*<S[Ui", "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider");
      assertFalse(int1 == int0);
      assertEquals((-68), int1);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("+;eAf/twg?*<S[Ui"));
      
      String string7 = StringUtils.join((List<?>) vector0, '+', 4, (-68));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("+;eAf/twg?*<S[Ui"));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("?vv=L%SGJf", '=');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Iq-FTB");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = "";
      String string1 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = "ptf^8";
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "ptf^8", 1);
      assertNull(stringArray1);
      
      String string3 = StringUtils.wrapIfMissing("ptf^8", "17k)IMYtS=B'");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("17k)IMYtS=B'ptf^817k)IMYtS=B'", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        StringUtils.truncate("RG/{Km\"tQ(%jjy", (-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.wrap("$resource factory key>", '\u0004');
      assertNotNull(string0);
      assertEquals("\u0004$resource factory key>\u0004", string0);
      
      int int0 = (-575);
      String string1 = StringUtils.center("$resource factory key>", (-575), "$resource factory key>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$resource factory key>", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("/I0`|MOmnM_Ei&wL", "$resource factory key>", (-575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 23
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrap("Failed to assert access rights using security manager", "5%$Qm`[8@4%");
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to assert access rights using security manager", string2);
      
      String string3 = StringUtils.strip("Failed to assert access rights using security manager", "Failed to assert access rights using security manager");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Failed to assert access rights using security manager", string4);
      
      boolean boolean1 = StringUtils.isNumeric("5%$Qm`[8@4%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      String string5 = StringUtils.join(charArray0, 'E');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("=", string5);
      
      String string6 = StringUtils.replaceIgnoreCase("9PJs", "", " vs ", (-207));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("9PJs", string6);
      
      String string7 = StringUtils.stripStart("9PJs", "9PJs");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.wrap("l=@", "l=@");
      assertNotNull(string0);
      assertEquals("l=@l=@l=@", string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[2] = ';';
      charArray0[3] = ';';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "0wisKYm#fl&YI@");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1945, 1945);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeFirst("hF,ksXEk", "\u0000");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hF,ksXEk", string1);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("`)gIX:r*0^5XEo5?4sU");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`)gIX:r*0^5XEo5?4sU", string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "0wisKYm#fl&YI@");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.replaceAll("", "hF,ksXEk", "($i? vgnIo.xme");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("", 1945, 3);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "($i? vgnIo.xme", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(14, int2);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.substring("6", 32, 32);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("MO", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("MOORG.APACHE.COMMONS.LANG3.STRINGUTILS", string1);
      
      String string2 = StringUtils.lowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.stringutils", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[2], charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeAll("`'BW%1", "org.apache.commons.lang3.stringutils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("`'BW%1", string3);
      
      String string4 = StringUtils.chop("org.apache.commons.lang3.stringutils");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.stringutil", string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.stringutil");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.chop("kTNx-N3R[/>?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("kTNx-N3R[/>?vv=L%SGJ", string0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "?vv=L%SGJf", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap((String) null, '_');
      assertNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("p{InCombiningDiacriticalMarks}+", supplier0);
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.leftPad(" H", 0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" H", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.abbreviate((String) null, 15);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.removeIgnoreCase("M:ai#~zVOl", "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("M:ai#~zVOl", string5);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.repeat("dva?:Zw...", 5);
      assertNotNull(string0);
      assertEquals("dva?:Zw...dva?:Zw...dva?:Zw...dva?:Zw...dva?:Zw...", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("dva?:Zw...dva?:Zw...dva?:Zw...dva?:Zw...dva?:Zw...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("dva?:Zw...", "9ZmM6W(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("dva?:Zw...", string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'E', (-780), (-780));
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Not an annotation type: ", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '\\', 44, 44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.left("RObf", 128);
      assertNotNull(string0);
      assertEquals("RObf", string0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.getDigits("v6@4mNEiA2%3UKT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6423", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("", "Locale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Locale must not be null");
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '9');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[3], 16);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils9ORG.APACHE.COMMONS.LANG3.STRINGUTILS9org.apache.commons.lang3.StringUtils99", '8');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.left("dIs=]o>S9HHHDG", 16);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("dIs=]o>S9HHHDG", string4);
      
      String string5 = StringUtils.appendIfMissing("Exception cloning Cloneable type ", "dIs=]o>S9HHHDG", charSequenceArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("Exception cloning Cloneable type dIs=]o>S9HHHDG", string5);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("?vv=L%SGJf", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?vv=L%SGJf", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.wrapIfMissing("", "?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "O{c@9$of", "KmWaoMNh%v+ib,yydm");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 0);
      assertNull(string2);
      
      String string3 = StringUtils.left((String) null, 0);
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 102);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Failed to assert access rights using security manager", "5%$Qm`[8@4%", "5%$Qm`[8@4%");
      assertNotNull(string0);
      assertEquals("Failed to assert access rights using security manager", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      String string2 = StringUtils.strip("Failed to assert access rights using security manager", "Failed to assert access rights using security manager");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Failed to assert access rights using security manager", string3);
      
      String string4 = StringUtils.substringAfter("", "Failed to assert access rights using security manager");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.replace("-jPPxccX,6aRY&", ",ou=%\"EKfQ0,fz-9M", "KT#Co^|!<d]q:Usd", 2285);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("-jPPxccX,6aRY&", string5);
      
      String string6 = StringUtils.center("KT#Co^|!<d]q:Usd", 2285);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "Failed to assert access rights using security manager", (CharSequence) "Failed to assert access rights using security manager");
      assertEquals(0, int0);
      
      String string7 = StringUtils.replaceAll("-jPPxccX,6aRY&", "", "Failed to assert access rights using security manager");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("Failed to assert access rights using security manager-Failed to assert access rights using security managerjFailed to assert access rights using security managerPFailed to assert access rights using security managerPFailed to assert access rights using security managerxFailed to assert access rights using security managercFailed to assert access rights using security managercFailed to assert access rights using security managerXFailed to assert access rights using security manager,Failed to assert access rights using security manager6Failed to assert access rights using security manageraFailed to assert access rights using security managerRFailed to assert access rights using security managerYFailed to assert access rights using security manager&Failed to assert access rights using security manager", string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "-jPPxccX,6aRY&", (CharSequence) "Failed to assert access rights using security manager", 2285);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.replace("c::#;u", string6, "", (-5098));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("c::#;u", string8);
      
      String string9 = StringUtils.left("Failed to assert access rights using security manager", 5);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("Faile", string9);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.substringBefore(stringArray0[1], stringArray0[0]);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = linkedList0.add((String) null);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add("6.0=4");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("6.0=4"));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean1);
      
      char char0 = '6';
      int int0 = (-1236);
      String string2 = StringUtils.substringBefore("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 16;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '6', (-1236), 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1236
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("%O%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("nk", "#!;KZ&sZ`U}S=t\u0000");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#!;KZ&sZ`U}S=t\u0000nk#!;KZ&sZ`U}S=t\u0000", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("O");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "%O%", 'w');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.repeat('u', 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("qeG2Fvx$oV'c#|c", "XGi5&d$Ih&qO{z", "qeG2Fvx$oV'c#|c");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Illegal range. There's no way to get from %s to %s with a step of %s.", "RG/{Km\"tQ(%jjy", 102);
      assertNotNull(string0);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string0);
      
      String string1 = StringUtils.getDigits("O}rVV,");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center("N~J_m&^S", (-1133), "=QFNSW@EtB%S)iT");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("N~J_m&^S", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "O}rVV,");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("S$8?gU0D[=!{.9].m");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'G', (int) (byte)44, 1780);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      String string0 = StringUtils.join((byte[]) null, 'a', 1333, (int) (byte)28);
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("offset cannot be negative");
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      
      String string2 = StringUtils.deleteWhitespace("offset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("offsetcannotbenegative", string2);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'U';
      charArray0[2] = '&';
      charArray0[3] = 'O';
      charArray0[4] = 'G';
      charArray0[5] = 'a';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "bg!m-}X\"oBJY19a#9", charArray0);
      assertArrayEquals(new char[] {'D', 'U', '&', 'O', 'G', 'a', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '3', (-27), (int) (byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("CLocale must not be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("CLocale must not be null", string2);
      
      String string3 = StringUtils.mid("4?SBjWk>", 4016, 4016);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("eIN", '`');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.removeStart("U@V2R}7c<RA|2~=H^", "S)Pqy5%qF-ElGrd'Y$t");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("U@V2R}7c<RA|2~=H^", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertEquals("eIN", string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("CLocale must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(""));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate1);
      assertNotSame(object1, object0);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotSame(object0, object1);
      assertFalse(vector0.contains(""));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) vector0, '}', 8192, 0);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Object[]) null, '}');
      assertNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("jKDEzYTk");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("E*Shk%^\"h");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 8192;
      String string7 = StringUtils.join(intArray0, 'w');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertArrayEquals(new int[] {0, 8192}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("0w8192", string7);
      
      String string8 = StringUtils.substring("MQH;)l<", 0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("MQH;)l<", string8);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "0w8192", (CharSequence) "MQH;)l<");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, "org.easymock.bytebuddy.asm.Advice$AssignReturned$ToArguments$Handler", stringArray0);
      assertNull(string0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("", "ACCESS_CONTROLLER");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceIgnoreCase("ACCESS_CONTROLLER", "ACCESS_CONTROLLER", ">?'I4/RO,=EI&jm!");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">?'I4/RO,=EI&jm!", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.remove("", 'P');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|VIz%57Z!-");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad("", 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(9, stringArray0.length);
      assertEquals("", string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)108;
      String string6 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)2, (byte)4, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\u0002\u0004l", string6);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.leftPad("114.0S0.0S114.0S114.0S-895.0S6.0=4", 17, 'K');
      assertNotNull(string0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "114.0S0.0S114.0S114.0S-895.0S6.0=4", (CharSequence) "114.0S0.0S114.0S114.0S-895.0S6.0=4");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("matches '%s'.", "kuM4]W=^p%,XlDG5Fb36.0T107.0T107.0T107.0T29.0T107.0T0.0T36.0T107.0", true);
      assertEquals(2, int0);
      
      String string1 = StringUtils.rightPad("K-nsX.CTNW", 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("K-nsX.CTNW       ", string1);
      
      Locale locale0 = new Locale("?Ik*#.J1g;=_SG4{0v", "114.0S0.0S114.0S114.0S-895.0S6.0=4", "2j!Ws-8qvf,2{_|s3?");
      assertNotNull(locale0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(boolean1 == boolean0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertFalse(boolean1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale1.getLanguage());
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale1.getCountry());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale1.toString());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int1 = StringUtils.getFuzzyDistance("114.0S0.0S114.0S114.0S-895.0S6.0=4", "K-nsX.CTNW      ", locale0);
      assertFalse(int1 == int0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertSame(locale0, locale1);
      assertEquals(0, int1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, '#');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals("", string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "8", charSequenceArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("$_!|", "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals((-61), int0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\r", "\r", 1759);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.substringBetween("}", (String) null, ")]hd");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("yu>goUu#fk");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yu>gouu#fk", string2);
      
      charSequenceArray0[2] = (CharSequence) "yu>gouu#fk";
      String string3 = StringUtils.leftPad(")]hd", 565, 'i');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", string3);
      
      charSequenceArray0[3] = (CharSequence) "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd";
      String string4 = StringUtils.leftPad("}", 565);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals}", string4);
      
      charSequenceArray0[4] = (CharSequence}";
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.removeStart("] doe", "}");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("] doe", string6);
      
      charSequenceArray0[6] = (CharSequence) "] doe";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      String string7 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(1, byteArray0.length);
      assertEquals("/", string7);
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertSame(charset1, charset0);
      
      charSequenceArray0[7] = (CharSequence) "/";
      String string8 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", 'i', 'i');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("Minimum abbreviation width with offset is %d", string8);
      
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string9 = StringUtils.join((Object[]) charSequenceArray0);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[2], (CharSequence) "] doe");
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string10 = StringUtils.replaceIgnoreCase("yu>goUu#fk", "#QcU~@SgY._n=}", (String) null, (-651));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertNotNull(string10);
      assertEquals("yu>goUu#fk", string10);
      
      String string11 = StringUtils.abbreviate((String) null, "yu>goUu#fk", (-651));
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      int int0 = 5;
      String string0 = StringUtils.lowerCase("l@kJ/GydR)");
      assertNotNull(string0);
      assertEquals("l@kj/gydr)", string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("l@kJ/GydR)", "l@kj/gydr)", 1002);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = "nk";
      String string2 = StringUtils.wrapIfMissing("-", "nk");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("nk-nk", string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("nk-nk");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripToEmpty("l@kJ/GydR)");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("l@kJ/GydR)", string3);
      
      try { 
        StringUtils.getBytes("Illegal range. The step cannot be zero.", "nk");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      try { 
        StringUtils.getBytes("#i3", "#i3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'w');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      
      String string1 = StringUtils.reverse("\u0000");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = StringUtils.join((short[]) null, 'f');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cvZ^nk-", "_H(YJD", (-2324));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_H(YJD";
      charSequenceArray0[1] = (CharSequence) "yN'eN$]*^!";
      charSequenceArray0[2] = (CharSequence) "\u0000";
      charSequenceArray0[3] = (CharSequence) "\u0000";
      charSequenceArray0[4] = (CharSequence) "\u0000";
      charSequenceArray0[5] = (CharSequence) "\u0000";
      charSequenceArray0[6] = (CharSequence) "yN'eN$]*^!";
      String string3 = StringUtils.appendIfMissingIgnoreCase("yN'eN$]*^!", "cvZ^nk-", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("yN'eN$]*^!", string3);
      
      String string4 = StringUtils.lowerCase("&98p:F+/R1");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("&98p:f+/r1", string4);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.leftPad("NfJ", 51, "yN'eN$]*^!");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("yN'eN$]*^!yN'eN$]*^!yN'eN$]*^!yN'eN$]*^!yN'eN$]*NfJ", string5);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.join((Object[]) stringArray0, 'o');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("ooo", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("ooo");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" vs "));
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      String string2 = "1/mL\"'^/hNZ";
      // Undeclared exception!
      StringUtils.center("1/mL\"'^/hNZ", 32767, "");
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk-", 365, "-");
      assertNotNull(string0);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      objectArray0[1] = (Object) "nk-";
      objectArray0[2] = (Object) "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      objectArray0[3] = (Object) "-";
      String string1 = StringUtils.joinWith("nk-", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-nk-nk-nk--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-nk--", string1);
      
      String string2 = StringUtils.difference("nk-", "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string2);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "G`A[3^]:", (CharSequence) "G`A[3^]:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "t";
      stringArray0[2] = "4f4^vcP*q`FIr$>";
      stringArray0[3] = "}] doe";
      stringArray0[4] = "3klF2;0@N+W0ur8p";
      stringArray0[5] = "";
      stringArray0[6] = "@3<e:Ym}$vUX";
      stringArray0[7] = "...";
      stringArray0[8] = "/W#ufevs4zv|";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ",[_]5Xu&.U3C`");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.truncate("<o$wm@fhW0ZF9g", 48, 48);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("=4114.0S0.0S114.0S114.0S-895.0S6.0", "`O&_RL", "`O&_RL");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "`O&_RL", (CharSequence) "=4114.0S0.0S114.0S114.0S-895.0S6.0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("=4114.0S0.0S114.0S114.0S-895.0S6.0");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`O&_RL");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.center("Illegal range. Equal from and to will produce an empty range.", (-1933));
      assertNotNull(string0);
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string0);
      
      String string1 = StringUtils.replaceChars("=4114.0S0.0S114.0S114.0S-895.0S6.0", 'g', 'g');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=4114.0S0.0S114.0S114.0S-895.0S6.0", string1);
      
      String string2 = StringUtils.repeat('g', 46);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggg", string2);
      
      String string3 = StringUtils.substringAfter("=4114.0S0.0S114.0S114.0S-895.0S6.0", 3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("=4114.0S0.0S114.0S114.0S-895.0S6.0", 46, 3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3;
      floatArray0[1] = 1020.0F;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      String string6 = StringUtils.join(floatArray0, 'K');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertArrayEquals(new float[] {3.0F, 1020.0F, 3.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("3.0K1020.0K3.0K-1.0K-1.0", string6);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("#Search and Replace array lengths don't match: Sear_h and Replace array lengths don't match: ", "s", "s");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[2] = 2705.85F;
      floatArray0[3] = 2705.85F;
      String string2 = StringUtils.join(floatArray0, 'g', 5, 5);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-1220.569F), 1723.05F, 2705.85F, 2705.85F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 2705.85F;
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 1723.05F;
      doubleArray0[5] = (double) (-1220.569F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      String string3 = StringUtils.join(byteArray0, 'P');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("95", string3);
      
      String string4 = StringUtils.replaceChars("kuM4]W=^p%,XlDG5Fb", 'g', ';');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("kuM4]W=^p%,XlDG5Fb", string4);
      
      String string5 = StringUtils.substringAfterLast("", 1155);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StnckOverflowError`- output of one loop is $he input of anxther";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", 151, 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("bhcItZrWLPCc0Wc@/}4");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("BhcItZrWLPCc0Wc@/}4", string4);
      
      charSequenceArray0[4] = (CharSequence) "BhcItZrWLPCc0Wc@/}4";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.strip("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", "~R%>=&GSq,_");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", string6);
      
      charSequenceArray0[6] = (CharSequence) "org.easymock.bytebuddy.asm.Advice$OnDefaultValue";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty("Cz+)|l!}B", supplier0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("Cz+)|l!}B", string7);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string8 = StringUtils.join((Object[]) charSequenceArray0, 'n', (-578), (-751));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "B>m(gWV>", (CharSequence) "B>m(gWV>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("3~i1-l", 'L');
      assertNotNull(string0);
      assertEquals("3~i1-l", string0);
      
      boolean boolean0 = StringUtils.isNumeric("3~i1-l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "z", (CharSequence) "z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1226));
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "ptf^8";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "a+( wIH>V9b&\"";
      String string3 = StringUtils.replaceEach("ptf^8", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      assertEquals("ptf^8", string3);
      
      charSequenceArray0[5] = (CharSequence) "ptf^8";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.abbreviate("B\"u{=qDMdIDpKNm", "B\"u{=qDMdIDpKNm", (-5806), 20);
      assertNotNull(string0);
      assertEquals("B\"u{=qDMdIDpKNm", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L1sNG&";
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupi", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupi", string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'y';
      charArray0[2] = 'f';
      charArray0[3] = ')';
      charArray0[4] = 'a';
      charArray0[5] = 'N';
      charArray0[6] = '*';
      charArray0[7] = ',';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'', 'y', 'f', ')', 'a', 'N', '*', ','}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "B\"u{=qDMdIDpKNm", 20);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}";
      String string0 = StringUtils.replaceEachRepeatedly("Cannot resolve Byte Buddy lookup via dispatcher", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("Cannot resolve Byte Buddy lookup via dispatcher", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ojI['ArwMf", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(treeSet0.contains('}'));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate1);
      assertNotSame(object1, object0);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotSame(object0, object1);
      assertFalse(vector0.contains(string1));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) vector0, '}', 8192, 0);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string1));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.stripEnd((String) null, "`9");
      assertNull(string6);
      
      String string7 = StringUtils.join((float[]) null, '}');
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.mid("doPrivileged", 938, 160);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd("G5`~", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("G5`~", string3);
      
      String string4 = StringUtils.strip("k^VJ:5Gi-l]{:h:e\"M", "?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: ?Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("k^VJ:5Gi-l]{:h:e\"M", string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeEnd("xto", "org.easymock.bytebuddy.asm.Advice$AssignReturned$ExceptionHandler");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("xto", string5);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '_';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'s', '_'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.mid("j3}_,D%g1!!d'%tn", 518, (-1025));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "j3}_,D%g1!!d'%tn";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("]gKF1O", string1);
      
      String string2 = StringUtils.lowerCase("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("search and replace array lengths don't match: search and replace array lengths don't match: ", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '_';
      charArray0[2] = ' ';
      charArray0[3] = '[';
      charArray0[4] = '~';
      charArray0[5] = '';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'[', '_', ' ', '[', '~', ''}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("=4");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeAll("_\",", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("_\",", string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("_\",");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, "]gKF1O");
      assertNull(string4);
      
      String string5 = StringUtils.center((String) null, (-1025));
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("j3}_,D%g1!!d'%tn", "Ez&x/K(df");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("j3}_,D%g1!!d'%tn", string6);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "?vv=L%SGJf", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string0 = StringUtils.right("] does not exist", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[0] = ';';
      charArray0[3] = ';';
      String string1 = StringUtils.join(charArray0, ';');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {';', 'f', '\u0000', ';'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(";;f;\u0000;;", string1);
      
      String string2 = StringUtils.leftPad("offset cannot be negative", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("offset cannot be negative", string2);
      
      String string3 = StringUtils.center("vj(?*>h1M,!}{QwyT#x", (-1), '(');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("vj(?*>h1M,!}{QwyT#x", string3);
      
      String string4 = StringUtils.replaceFirst("]org.junitpioneer.jupiter.IssueExtension", "114.0S0.0S114.0S114.0S-895.0S6.0", ":p4P0>");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("]org.junitpioneer.jupiter.IssueExtension", string4);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, ';');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(0, stringArray0.length);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 'k');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceChars("WHyqqTR;5K_t", "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("WHiqqTC;5K_r", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "WHyqqTR;5K_t");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.replace("exist", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-376));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("exist", string3);
      
      String string4 = StringUtils.substringAfter("WHiqqTC;5K_r", "'OI>4q>Th<qm");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "|U!Pe3eee9KS");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "org.easymock.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.replaceAll("|U!Pe3eee9KS", "9_f+BN#$n@]t", "vUHKBJ\"sK+cu6C");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("|U!Pe3eee9KS", string6);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "Locale must not be null", 2466, 2466);
      assertNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'A';
      charArray0[2] = 'Z';
      charArray0[3] = 'n';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'v', 'A', 'Z', 'n'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = "]n";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "]n", 53, 2416);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2416
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, "*n\")1T V9Y", 1455, 1455);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("*n\")1T V9Y"));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("?vv=L%SGJf", "...", 1222);
      assertNotNull(string0);
      assertEquals("?vv=L%SGJf", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("?vv=L%SGJf", "...", "?vv=L%SGJf");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((long[]) null, 'T');
      assertNull(string1);
      
      String string2 = "&:Rd@";
      String string3 = StringUtils.remove("...", "&:Rd@");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("...", string3);
      
      Vector<Object> vector0 = new Vector<Object>(1222, 1222);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(1222, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("?vv=L%SGJf"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "?vv=L%SGJf", (-3326), 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3326
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "NMH?Pr;i%].a|MO");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("\u0000");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.wrapIfMissing("NMH?Pr;i%].a|MO", "=4");
      assertNotNull(string1);
      assertEquals("=4NMH?Pr;i%].a|MO=4", string1);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk-", 372, "-");
      assertNotNull(string0);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string0);
      
      String string1 = StringUtils.uncapitalize("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) 'g';
      longArray0[2] = (long) 'g';
      longArray0[3] = (long) 372;
      longArray0[4] = (long) 372;
      longArray0[5] = (long) 'g';
      longArray0[6] = (long) 372;
      String string2 = StringUtils.join(longArray0, 'g');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {103L, 103L, 103L, 372L, 372L, 103L, 372L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("103g103g103g372g372g103g372", string2);
      
      String string3 = StringUtils.replaceOnce("103g103g103g372g372g103g372", "114.0S0.0S114.0S114.0S-895.0S6.0=4", "114.0S0.0S114.0S114.0S-895.0S6.0=4");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("103g103g103g372g372g103g372", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "103g103g103g372g372g103g372", (CharSequence) "103g103g103g372g372g103g372");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.abbreviateMiddle("-", "Minimum abbreviation width is %d", 372);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("-", string4);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", " resource lock", 1235, 1235);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.rotate("sI$jCSB?oo\"", 8);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("jCSB?oo\"sI$", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/", "Search and Replace array lengths don't match: ");
      assertEquals(0.54, double0, 0.01);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Search and Replace array lengths don't match: "));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Search and Replace array lengths don't match: "));
      
      String string5 = StringUtils.join((Iterator<?>) null, "x=SD|(#h*nM=s;Y^W!D");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.endsWith("jCSB?oo\"sI$", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "@");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], "Search and Replace array lengths don't match: ");
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.toRootUpperCase("@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@", string1);
      
      int int0 = StringUtils.ordinalIndexOf("@", "", 45);
      assertEquals(0, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(string0));
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(listIterator0);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(string0));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, 'y');
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("", "BIdG\">~AG");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(string4));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.leftPad("u!E2Lx@+Xh#b2b(={", 104, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                       u!E2Lx@+Xh#b2b(={", string0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 82);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll(":'7K(lT", (String) null, "ku&9DLDE1,!9f'^=(pu");
      assertNotNull(string2);
      assertEquals(":'7K(lT", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("O", "cvZ^nk-", (-2324));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("ku&9DLDE1,!9f'^=(pu", ":'7K(lT", (CharSequence[]) null);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ku&9DLDE1,!9f'^=(pu:'7K(lT", string3);
      
      String string4 = StringUtils.lowerCase("bg!m-}X\"oBJY19a#9");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("bg!m-}x\"objy19a#9", string4);
      
      boolean boolean1 = StringUtils.isNumeric("bg!m-}x\"objy19a#9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.leftPad("O", 51, (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("                                                  O", string5);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk-", 372, "-");
      assertNotNull(string0);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string0);
      
      String string1 = StringUtils.uncapitalize("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      objectArray0[2] = (Object) "nk-";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      String string2 = StringUtils.join(objectArray0, 'D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      assertEquals("-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-Dnk-D-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string2);
      
      String string3 = StringUtils.join((float[]) null, 'D', 6, 372);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-Dnk-D-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", 372);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new char[] {'D', 'D', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("DDD", string4);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "(o}D", 39);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'w');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((short[]) null, 'f');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("#!;KZ&sZ`U}S=t", "\u0000");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u0000#!;KZ&sZ`U}S=t\u0000", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('f'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = priorityQueue0.add(object0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('f'));
      assertTrue(priorityQueue0.contains(object0));
      assertTrue(boolean2);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('f'));
      assertTrue(priorityQueue0.contains(object0));
      
      String string4 = StringUtils.join(iterator0, 'w');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('f'));
      assertTrue(priorityQueue0.contains(object0));
      
      boolean boolean3 = StringUtils.isAsciiPrintable("$Proxy");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string5 = StringUtils.join((Object[]) null);
      assertNull(string5);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "#!;KZ&sZ`U}S=t", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string2 = StringUtils.join((Iterable<?>) list0, "");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.defaultIfBlank(" is not in the range '0' - '9'", "Z?A&b*qu+");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(" is not in the range '0' - '9'", string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, " is not in the range '0' - '9'");
      assertNull(stringArray1);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.upperCase((String) null, locale0);
      assertNull(string7);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "", stringArray0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(4, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string8);
      
      boolean boolean0 = StringUtils.equalsAny("Z?A&b*qu+", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("", 'R');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      
      String string9 = StringUtils.prependIfMissing("Z?A&b*qu+", "", charSequenceArray0);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Z?A&b*qu+", string9);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("", "Locale must not be null");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertEquals(0, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("", "&:Rd@] does not exist");
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.repeat('e', 1985);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(10, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray1, 'e', Integer.MAX_VALUE, 2735);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("nkZ(L", 1985, (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "nkZ(L");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(",<\"KU{", "^URu16IXQOPWKOga?&");
      assertNotNull(string0);
      assertEquals(",<\"KU{", string0);
      
      String string1 = StringUtils.prependIfMissing("Expected exactly one annotation to provide an ArgumentSource, found %d.", "Expected exactly one annotation to provide an ArgumentSource, found %d.", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string1);
      
      String string2 = StringUtils.substringBeforeLast("org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",<\"KU{", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(35, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = '5';
      charArray0[2] = 'm';
      charArray0[3] = ';';
      charArray0[4] = 'h';
      charArray0[5] = '@';
      charArray0[6] = '!';
      charArray0[7] = '!';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      assertArrayEquals(new char[] {'y', '5', 'm', ';', 'h', '@', '!', '!'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      charSequenceArray0[0] = (CharSequence) "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string2 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultIfBlank(" is not in the range '0' - '9'", "Z?A&b*qu+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, " is not in the range '0' - '9'");
      assertNull(stringArray1);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase((String) null, locale0);
      assertNull(string6);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "", stringArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(4, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string7);
      
      boolean boolean0 = StringUtils.equalsAny("Z?A&b*qu+", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("", 'R');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      
      String string8 = StringUtils.prependIfMissing("Z?A&b*qu+", "", charSequenceArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Z?A&b*qu+", string8);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.rightPad("", (-601), 'R');
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("", "Cannot cache the value of an abstract method: ", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9earch and Replace array lengths don't atch: ", (CharSequence) "9earch and Replace array lengths don't atch: ", 160);
      assertEquals(0, int0);
      
      String string0 = StringUtils.deleteWhitespace("9earch and Replace array lengths don't atch: ");
      assertNotNull(string0);
      assertEquals("9earchandReplacearraylengthsdon'tatch:", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9earch and Replace array lengths don't atch: ";
      stringArray0[1] = "9earch and Replace array lengths don't atch: ";
      stringArray0[2] = "9earchandReplacearraylengthsdon'tatch:";
      stringArray0[3] = "9earchandReplacearraylengthsdon'tatch:";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("9earch", string1);
      
      boolean boolean0 = StringUtils.isBlank("9earch and Replace array lengths don't atch: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = StringUtils.replaceChars("}", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.prependIfMissing("}", stringArray0[0], stringArray0);
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("VBy", "VBy");
      assertNotNull(string0);
      assertEquals("VBy", string0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", (-669), (-669));
      assertNotNull(string0);
      assertEquals("}", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}";
      charSequenceArray0[2] = (CharSequence) "}";
      charSequenceArray0[3] = (CharSequence) "}";
      charSequenceArray0[4] = (CharSequence) "}";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("}", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[0]);
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrapIfMissing("^O'UM1um%gLfs", '.');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".^O'UM1um%gLfs.", string1);
      
      int int0 = (-345);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-345);
      floatArray0[1] = (float) 'g';
      floatArray0[2] = (float) '.';
      floatArray0[3] = (float) 'g';
      floatArray0[4] = (float) (-345);
      int int1 = (-2506);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'T', (-2506), (-669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2506
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.joinWith("", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string2);
      
      String string3 = StringUtils.lowerCase("=4");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("=4", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "]gKF1O");
      assertEquals(6, int0);
      
      String string4 = StringUtils.substringAfter("-pSxd\"]Z~bb|", (-3109));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("]gKF1O"));
      
      Vector<String> vector0 = new Vector<String>(treeSet0);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(treeSet0.contains("]gKF1O"));
      assertFalse(vector0.contains("]gKF1O"));
      
      String string5 = StringUtils.join((Iterable<?>) vector0, "2!h0U>");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(treeSet0.contains("]gKF1O"));
      assertFalse(vector0.contains("]gKF1O"));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'P');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      int int1 = StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("Search and Replace array lengths don't match: ", string2);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.stripEnd("qI_kdPq", "-");
      assertNotNull(string0);
      assertEquals("qI_kdPq", string0);
      
      String string1 = StringUtils.join((short[]) null, ' ', (-470), (-470));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GX7}OjlfE|L_#f;F~";
      int int0 = StringUtils.lastIndexOfAny("GX7}OjlfE|L_#f;F~", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.replace("L;T(.5S>$-D_N", "", "");
      assertNotNull(string0);
      assertEquals("L;T(.5S>$-D_N", string0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" was expected to be static: ");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace(" was expected to be static: ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("P9L+k[Q{.2f");
      assertNotNull(string0);
      assertEquals("P9L+k[Q{.2f", string0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(", "(");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" 'AZlp3@%b,!1h'XmJ+d}y{=aAwdj3");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = "<5@RKj[/Jg\\uR";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<5@RKj[/Jg\\uR", string1);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Failed to assert access rights using security manager", "5%$Qm`[8@4%", "5%$Qm`[8@4%");
      assertNotNull(string0);
      assertEquals("Failed to assert access rights using security manager", string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to assert access rights using security manager", string2);
      
      String string3 = StringUtils.strip("Failed to assert access rights using security manager", "Failed to assert access rights using security manager");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Failed to assert access rights using security manager", string4);
      
      String string5 = StringUtils.substringAfter("", "Failed to assert access rights using security manager");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.strip("", "Handler on array requires positive index for ");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceOnce("Failed to assert access rights using security manager", "XPdu;!q[8", (String) null);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("Failed to assert access rights using security manager", string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Failed to assert access rights using security manager", (CharSequence) "Failed to assert access rights using security manager", 2285);
      assertEquals(0, int0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string8 = StringUtils.join((Iterable<?>) arrayList0, 'O');
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string8);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'P');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.remove("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string3 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'y', 'V');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String string4 = "&:Rd@";
      String string5 = "A`-Sn[bC";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("A`-Sn[bC", "[$'wdMca@*OiQ>Pi^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // [$'wdMca@*OiQ>Pi^
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'P');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ", (-713));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string1);
      
      String string2 = StringUtils.lowerCase("=4");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=4", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("]gKF1O");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeAll("=4", "DQ*KpSfr");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("=4", string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("DQ*KpSfr");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "W6@_GcYKcWK8d/rYkn", 41);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'B');
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[3] = 2705.85F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 2705.85F;
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 1723.05F;
      doubleArray0[5] = (double) (-1220.569F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      String string1 = StringUtils.join(charArray0, '?');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("p", string1);
      
      String string2 = StringUtils.reverse("vz");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("zv", string2);
      
      String string3 = StringUtils.join((short[]) null, 'J');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("zv", "p");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Strings must not be null", "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.replace("zg?Ird?}UIf0Q|", "zg?Ird?}UIf0Q|", "I/`b]\"pH", 52);
      assertNotNull(string0);
      assertEquals("I/`b]\"pH", string0);
      
      boolean boolean0 = StringUtils.endsWith("zg?Ird?}UIf0Q|", "I/`b]\"pH");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '8';
      String string1 = StringUtils.wrapIfMissing("4}6NNFW\u0006[c", "zg?Ird?}UIf0Q|");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zg?Ird?}UIf0Q|4}6NNFW\u0006[czg?Ird?}UIf0Q|", string1);
      
      String string2 = StringUtils.join(charArray0, '8');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'v', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("v888\u00008\u00008\u0000", string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("4}6NNFW\u0006[c", "zg?Ird?}UIf0Q|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.chomp("MO", "s8V'[xa");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("MO", string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("MO");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ">";
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequenceArray0[0], ">");
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.chomp("\n", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", ')');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("(Z}_WvI!2@>");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("nk-", "cvZ^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cvZ^nk-cvZ^", string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, '');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("nk-", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.chomp("]", "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("]", string3);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'G', (int) (byte)1, (int) (byte)1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("%O%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("%O%", "O");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%O%", string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.lowerCase("O", locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("o", string2);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.leftPad("BOrX(", 0, 'r');
      assertNotNull(string0);
      assertEquals("BOrX(", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "BOrX(", (CharSequence) "BOrX(");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("ox7Nu`KW/Hl}*4y", "ox7Nu`KW/Hl}*4y", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat((String) null, 142);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("BOrX(");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceAll("8", "", "(VTQvH);klTPGX");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(VTQvH);klTPGX8(VTQvH);klTPGX", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissingIgnoreCase("BOrX(", "(VTQvH);klTPGX", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("BOrX((VTQvH);klTPGX", string3);
      
      String string4 = StringUtils.lowerCase("BOrX(");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("borx(", string4);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 64);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Ky%wY`x79o[.[5}", "z4X", "z4X");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "z4X", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("4<hr:~;_QYYF{z3", "Search and Replace array lengths don't match: ", locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.chomp("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.rightPad("JkdzL+09YM[I2", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("JkdzL+09YM[I2", string1);
      
      Locale locale0 = new Locale("JkdzL+09YM[I2", "...", "cvZ^nk-");
      assertNotNull(locale0);
      assertEquals("jkdzl+09ym[i2_..._cvZ^nk-", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertEquals("cvZ^nk-", locale0.getVariant());
      assertEquals("jkdzl+09ym[i2", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("jkdzl+09ym[i2_..._cvZ^nk-", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertEquals("cvZ^nk-", locale0.getVariant());
      assertEquals("jkdzl+09ym[i2", locale0.getLanguage());
      assertEquals("...", locale1.getCountry());
      assertEquals("jkdzl+09ym[i2", locale1.getLanguage());
      assertEquals("jkdzl+09ym[i2_..._cvZ^nk-", locale1.toString());
      assertEquals("cvZ^nk-", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("...", "JkdzL+09YM[I2", locale1);
      assertEquals("jkdzl+09ym[i2_..._cvZ^nk-", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertEquals("cvZ^nk-", locale0.getVariant());
      assertEquals("jkdzl+09ym[i2", locale0.getLanguage());
      assertEquals("...", locale1.getCountry());
      assertEquals("jkdzl+09ym[i2", locale1.getLanguage());
      assertEquals("jkdzl+09ym[i2_..._cvZ^nk-", locale1.toString());
      assertEquals("cvZ^nk-", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(0, int0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, '8');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "cvZ^nk-", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = ',';
      charArray0[2] = 'm';
      charArray0[3] = 'K';
      charArray0[4] = 'G';
      charArray0[5] = 'p';
      charArray0[6] = 'q';
      String string1 = StringUtils.join(charArray0, 'K', 1665, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'u', ',', 'm', 'K', 'G', 'p', 'q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", "ORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'i', 'i');
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'i';
      charArray0[2] = '}';
      charArray0[3] = '_';
      charArray0[4] = '}';
      charArray0[5] = '}';
      String string1 = StringUtils.join(charArray0, 'W');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'p', 'i', '}', '_', '}', '}'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("pWiW}W_W}W}", string1);
      
      String string2 = StringUtils.reverse("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound$DefaultArgument");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("tnemugrAtluafeD$dnuobnU$reldnaH$rossecorPnoitageleD$redniBnevirDnoitatonnAdohteMtegraT.noitatonna.dnib.noitatnemelpmi.yddubetyb.kcomysae.gro", string2);
      
      String string3 = StringUtils.join((short[]) null, '1');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound$DefaultArgument");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 59, 59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.getDigits("doesn't match any regular expression.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 2, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.substringBetween("*,d\"Ab\u0003K1;lv{", "D#v;F![wnepys&{ax:DD#v;F![wnepys&{ax:D", (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "D#v;F![wnepys&{ax:DD#v;F![wnepys&{ax:D";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(stringArray0);
      assertEquals(55, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("9T_J", "!7#R<");
      assertNotNull(string0);
      assertEquals("!7#R<9T_J!7#R<", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "&:Rd@] does not exist", 107);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9T_J");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(55, stringArray0.length);
      assertEquals(55, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("\",p%H@Ci\"{vuq", "@l");
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "offset cannot be negative", "offset cannot be negative", (-1));
      assertNull(string2);
      
      String string3 = StringUtils.wrap("`P}", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("`P}", string3);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("]", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]", string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '<';
      longArray0[1] = (long) '<';
      longArray0[2] = (long) '<';
      longArray0[3] = (long) '<';
      String string2 = StringUtils.join(longArray0, 'g');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new long[] {60L, 60L, 60L, 60L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("60g60g60g60", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "?vv=L%SGJf");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Object varargs must not be null", "!");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("$Proxy", "Object varargs must not be null", 120);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("$Proxy", string3);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("...", "...", 2233);
      assertNotNull(string0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.lowerCase("l@kJ/GydR)");
      assertNotNull(string0);
      assertEquals("l@kj/gydr)", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("l@kJ/GydR)", "l@kj/gydr)", 1002);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("{3[]u`%BsRr2J4M}E", "-", "/`_/UH");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{3[]u`%BsRr2J4M}E", string1);
      
      String string2 = StringUtils.replace("{3[]u`%BsRr2J4M}E", "j>OM}Dtq", "nk", 1002);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{3[]u`%BsRr2J4M}E", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{3[]u`%BsRr2J4M}E", (CharSequence) "{3[]u`%BsRr2J4M}E");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replace("\n", "!8F[", "-", 32);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("{3[]u`%BsRr2J4M}E", "j>OM}Dtq");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.abbreviateMiddle("h", "m5}*5~SJ_pQ", (-711));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("h", string4);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">g[\"X~");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", "", (-84), (-1086));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", '3');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", (-2665), (-1025));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2665
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.substringBetween("3zem", "3zem", "3zem");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.substringBetween("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "}");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[1] = (Object) "}";
      objectArray0[2] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[3] = (Object) "}";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "}";
      objectArray0[7] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[3] = (Object) stringUtils0;
      String string1 = StringUtils.appendIfMissingIgnoreCase("}", "\n", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("}\n", string1);
      
      String string2 = StringUtils.lowerCase("]7Rh(=[");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("]7rh(=[", string2);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.leftPad((String) null, (-1), (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      String string1 = StringUtils.substringBetween("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "}");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[1] = (Object) "}";
      objectArray0[2] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[3] = (Object) "}";
      objectArray0[4] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "}";
      objectArray0[7] = (Object) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      objectArray0[8] = (Object) stringUtils0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "\n", (-1887), (-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1887
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "[iO,i[='k", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.removePattern("% vd#&Aw/l&}n=|4;o", "% vd#&Aw/l&}n=|4;o");
      assertNotNull(string0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.chomp("G]uDT(i");
      assertNotNull(string0);
      assertEquals("G]uDT(i", string0);
      
      int int0 = StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G]uDT(i", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace("$Proxy");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$Proxy", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Proxy";
      stringArray0[1] = "$Proxy";
      stringArray0[2] = "G]uDT(i";
      stringArray0[4] = "G]uDT(i";
      stringArray0[5] = "$Proxy";
      stringArray0[6] = "G]uDT(i";
      stringArray0[7] = "G]uDT(i";
      stringArray0[8] = "G]uDT(i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertEquals("$Proxy", string2);
      
      String[] stringArray2 = StringUtils.split("", '4');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      
      String string3 = StringUtils.removePattern((String) null, "");
      assertNull(string3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (int) '4';
      String string4 = StringUtils.join(intArray0, '6');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new int[] {(-1), 0, 52}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("-160652", string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = ')';
      charArray0[4] = '4';
      charArray0[5] = '6';
      charArray0[6] = 'r';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'6', '6', '6', ')', '4', '6', 'r'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.lowerCase("?vv", locale0);
      assertNotNull(string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("?vv", string0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", 151, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("bhcItZrWLPCc0Wc@/}4");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("BhcItZrWLPCc0Wc@/}4", string4);
      
      charSequenceArray0[4] = (CharSequence) "BhcItZrWLPCc0Wc@/}4";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.strip("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", "~R%>=&GSq,_");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", string6);
      
      charSequenceArray0[6] = (CharSequence) "org.easymock.bytebuddy.asm.Advice$OnDefaultValue";
      String string7 = StringUtils.replaceChars("~R%>=&GSq,_", 'V', 'V');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("~R%>=&GSq,_", string7);
      
      charSequenceArray0[7] = (CharSequence) "~R%>=&GSq,_";
      String string8 = StringUtils.removeFirst("[$'wdMca@*OiQ>Pi^", "File must not be null or blank");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("[$'wdMca@*OiQ>Pi^", string8);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string9 = StringUtils.stripToEmpty("");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("", string9);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "[$'wdMca@*OiQ>Pi^");
      assertEquals((-1), int0);
      
      String string10 = StringUtils.appendIfMissingIgnoreCase("File must not be null or blank", "~R%>=&GSq,_", charSequenceArray0);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("File must not be null or blank", string10);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string11 = StringUtils.strip("+i&M#a_8Ttl(eY");
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertNotNull(string11);
      assertEquals("+i&M#a_8Ttl(eY", string11);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string12 = StringUtils.lowerCase("", locale0);
      assertFalse(string12.equals((Object)string10));
      assertTrue(string12.equals((Object)string9));
      assertTrue(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertTrue(string12.equals((Object)string2));
      assertTrue(string12.equals((Object)string5));
      assertTrue(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertTrue(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertNotNull(string12);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", string12);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ojI['ArwMf", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(""));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate1);
      assertNotSame(object1, object0);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotSame(object0, object1);
      assertFalse(vector0.contains(""));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) vector0, '}', 8192, 0);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(""));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Object[]) null, '}');
      assertNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("jKDEzYTk");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("E*Shk%^\"h");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 8192;
      String string7 = StringUtils.join(intArray0, 'w');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertArrayEquals(new int[] {0, 8192}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("0w8192", string7);
      
      String string8 = StringUtils.substring("MQH;)l<", 0);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("MQH;)l<", string8);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "0w8192", (CharSequence) "MQH;)l<");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("H!D7'aLYYr2898L", supplier0);
      assertNotNull(string0);
      assertEquals("H!D7'aLYYr2898L", string0);
      
      String string1 = StringUtils.repeat("Gzl<$?H\"&z<`!wT9AE", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("Gzl<$?H\"&z<`!wT9AE", "Search and Replace array lengths don't match: ");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray0);
      
      String string3 = StringUtils.trimToNull("H!D7'aLYYr2898L");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("H!D7'aLYYr2898L", string3);
      
      String string4 = StringUtils.center((String) null, 4);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string1);
      
      String string2 = StringUtils.lowerCase("=4");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=4", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "]gKF1O");
      assertEquals(6, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "]gKF1O", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'r';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = (double) (-895);
      doubleArray0[5] = (double) 6;
      String string3 = StringUtils.join(doubleArray0, 'S');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new double[] {114.0, 0.0, 114.0, 114.0, (-895.0), 6.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0", string3);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string4 = StringUtils.wrapIfMissing("=4", "114.0S0.0S114.0S114.0S-895.0S6.0");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4114.0S0.0S114.0S114.0S-895.0S6.0", string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("114.0S0.0S114.0S114.0S-895.0S6.0");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'r', (-895), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -895
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.overlay("\r", (String) null, 851, 90);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.wrapIfMissing("\r", "5~*?|i4evp/rTZmV");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("5~*?|i4evp/rTZmV\r5~*?|i4evp/rTZmV", string2);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.getDigits("B9mhnZ}~@");
      assertNotNull(string0);
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("xHYlq0_RT\"-ytI]r_]", "The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed", 1114111, 90);
      assertNotNull(string0);
      assertEquals("xHYlq0_RT\"-ytI]r_]The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed", string0);
      
      String string1 = StringUtils.getDigits("The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.getDigits(")>%/9N}TC");
      assertNotNull(string0);
      assertEquals("9", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ")>%/9N}TC", 5, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = 'T';
      String string3 = StringUtils.join(charArray0, 'T', (-6), (-6));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("", "", (-6));
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'k');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.wrapIfMissing("", "17k)YtS=B'");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.removeStart("]gKF1O", "");
      assertNotNull(string0);
      assertEquals("]gKF1O", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '+', (-122), 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -122
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?vv=L%SGJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("yCBJ;");
      assertNotNull(string0);
      assertEquals("YCBJ;", string0);
      
      String string1 = StringUtils.unwrap("yCBJ;", '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yCBJ;", string1);
      
      String string2 = StringUtils.wrapIfMissing("...", "?vv=L%SGJf");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("?vv=L%SGJf...?vv=L%SGJf", string2);
      
      String string3 = StringUtils.substringBefore("", 75);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, '2', 1672, (-1102));
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("|`W~=!([m[9", "yCBJ;");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("|`W~=!([m[9", string5);
      
      String string6 = StringUtils.join((int[]) null, '7');
      assertNull(string6);
      
      String string7 = StringUtils.wrap("yCBJ;", "IsP;6qOuin");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("IsP;6qOuinyCBJ;IsP;6qOuin", string7);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'i', 'i');
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Never disable parameterized test method itself");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) 'i';
      floatArray0[5] = (float) 'i';
      floatArray0[6] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, 'M', 5, (-1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 105.0F, 105.0F, 105.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("", (int) 'i');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'i';
      intArray0[1] = (int) 'M';
      intArray0[2] = (int) 'i';
      intArray0[3] = (int) 'i';
      intArray0[4] = (-1);
      intArray0[5] = (-2247);
      intArray0[6] = (int) 'i';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'i', (-2247), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2247
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("}", "G5`~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("}", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 938;
      longArray0[3] = (long) 938;
      longArray0[4] = (long) 938;
      String string4 = StringUtils.normalizeSpace("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string5 = StringUtils.substringBetween("]W}JE,", "{ZC0*OBdD/o>Y", "own");
      assertNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("own", "G5`~");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("G5`~ownG5`~", string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000", (CharSequence) null, stringArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000", string7);
      
      String string8 = StringUtils.mid("{ZC0*OBdD/o>Y", 938, 8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isNumeric("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }#!;KZ&sZ`U}S=t\u0000");
      assertFalse(boolean0);
      
      String string9 = StringUtils.difference("]W}JE,", "}");
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("}", string9);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      Locale locale0 = new Locale("o9h%,-Pds3T");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("o9h%,-pds3t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("o9h%,-pds3t", locale0.getLanguage());
      
      String string0 = StringUtils.mid("o9h%,-Pds3T", (-641), (-641));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getFuzzyDistance("o9h%,-Pds3T", "", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("o9h%,-pds3t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("o9h%,-pds3t", locale0.getLanguage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) 'g';
      longArray0[2] = (long) 'g';
      longArray0[3] = (long) 'g';
      longArray0[4] = (long) 'g';
      longArray0[5] = (long) 'g';
      longArray0[6] = (long) 'g';
      longArray0[7] = (long) 'g';
      longArray0[8] = (long) 'g';
      String string1 = StringUtils.join(longArray0, '');
      assertNotNull(string1);
      assertArrayEquals(new long[] {103L, 103L, 103L, 103L, 103L, 103L, 103L, 103L, 103L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("103103103103103103103103103", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("K%O;\"", "?vv=L%SGJf");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("K%O;\"", string2);
      
      String string3 = StringUtils.mid("K%O;\"", (-2797), (-2396));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.remove("Object varargs must not be null", '<');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", "Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("(Z}_WvI!2@>");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("nk-", "cvZ^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cvZ^nk-cvZ^", string1);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.difference("", "XGW~w>@*t%50ZA!kL'_");
      assertNotNull(string0);
      assertEquals("XGW~w>@*t%50ZA!kL'_", string0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.overlay(",?n", ",?n", 5, 5);
      assertNotNull(string0);
      assertEquals(",?n,?n", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, '2');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) arrayList0;
      String string2 = StringUtils.join(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'd', 38, (-731));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.substringBefore("nk- ", 1471);
      assertNotNull(string0);
      assertEquals("nk- ", string0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("...", supplier0);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((float[]) null, 'M', 0, 0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("...", (-2));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.replaceAll("B.v<!HcLh", "B.v<!HcLh", "B.v<!HcLh");
      assertNotNull(string0);
      assertEquals("B.v<!HcLh", string0);
      
      String string1 = StringUtils.removeFirst("B.v<!HcLh", "B.v<!HcLh");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("Report entry ca", (String) null, "B.v<!HcLh");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeEndIgnoreCase("I\">G8o<lC- vN]I", "h)");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("I\">G8o<lC- vN]I", string2);
      
      String string3 = StringUtils.substringBefore("^;gGF/Wj`RV;ILO1J", 82);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("^;gGF/Wj`", string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "h)", 1626);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "p5i", (-1830), (-169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1830
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'D');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.substringBetween((String) null, "$Advice$");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("xo39>J_", 'D');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.trimToNull(">w)<{]0@Ml0\"HSB_M");
      assertNotNull(string1);
      assertEquals(">w)<{]0@Ml0\"HSB_M", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "$Advice$", "Parameter [%s] is not of the correct target type %s");
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)109;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 'D';
      doubleArray0[3] = (double) (byte)109;
      doubleArray0[4] = (double) 'D';
      String string3 = StringUtils.join(doubleArray0, 'D', (int) (byte)109, (-725));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new double[] {109.0, 1.5, 68.0, 109.0, 68.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("Parameter [%s] is not of the correct target type %s", (String[]) null, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals("Parameter [%s] is not of the correct target type %s", string4);
      
      String string5 = StringUtils.swapCase("xo39>J_");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("XO39>j_", string5);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("d -K~Nj<VW", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("d -K~Nj<VW", string0);
      
      String string1 = StringUtils.substringBefore("d -K~Nj<VW", 256);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("d -K~Nj<VW", string1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk-", 372, "-");
      assertNotNull(string0);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string0);
      
      String string1 = StringUtils.uncapitalize("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      objectArray0[2] = (Object) "nk-";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-";
      String string2 = StringUtils.join(objectArray0, 'D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      assertEquals("-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-Dnk-D-D--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string2);
      
      String string3 = StringUtils.rightPad("*P/*:q66k}*S#p", 6, 'c');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("*P/*:q66k}*S#p", string3);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'Y');
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("6| JY", (int) 'Y');
      assertNotNull(string1);
      assertEquals("                                                                                    6| JY", string1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "z", (CharSequence) "z");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "z", '0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.replace("GX7}Ojlf/L_#;F~", "GX7}Ojlf/L_#;F~", "GX7}Ojlf/L_#;F~");
      assertNotNull(string0);
      assertEquals("GX7}Ojlf/L_#;F~", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "GX7}Ojlf/L_#;F~", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.removeAll("`C#Y", "Cannot cache the value of an abstract method: ");
      assertNotNull(string0);
      assertEquals("`C#Y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "`C#Y", (CharSequence) "`C#Y");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("`C#Y", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "`C#Y";
      String string1 = StringUtils.prependIfMissingIgnoreCase("x8=:6)\".qXDMb", "`C#Y", charSequenceArray0);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("`C#Yx8=:6)\".qXDMb", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`C#Y", (CharSequence) "`C#Yx8=:6)\".qXDMb");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("`C#Y", "Cannot cache the value of an abstract method: ");
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("`C#Y", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", (String) null, "`C#Y");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", supplier0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", string5);
      
      String string6 = StringUtils.deleteWhitespace("`C#Y");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("`C#Y", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Lpin", "vUHKBJ\"sK+cu6C");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("`C#Y", "x8=:6)\".qXDMb");
      assertFalse(boolean0);
      
      String string7 = StringUtils.toRootUpperCase("vUHKBJ\"sK+cu6C");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("VUHKBJ\"SK+CU6C", string7);
      
      int int1 = StringUtils.ordinalIndexOf("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", "VUHKBJ\"SK+CU6C", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("VUHKBJ\"SK+CU6C"));
      
      boolean boolean1 = stack0.add("Cannot cache the value of an abstract method: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(stack0.empty());
      assertEquals("[Cannot cache the value of an abstract method: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Cannot cache the value of an abstract method: "));
      assertFalse(stack0.contains("VUHKBJ\"SK+CU6C"));
      assertTrue(boolean1);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals("[Cannot cache the value of an abstract method: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains("Cannot cache the value of an abstract method: "));
      assertFalse(stack0.contains("VUHKBJ\"SK+CU6C"));
      
      String string8 = StringUtils.join((Iterator<?>) listIterator0, 'y');
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertFalse(stack0.empty());
      assertEquals("[Cannot cache the value of an abstract method: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(stack0.contains(string8));
      assertFalse(stack0.contains("VUHKBJ\"SK+CU6C"));
      assertEquals("Cannot cache the value of an abstract method: ", string8);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, '\"');
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("DISPLAY", string0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, '3');
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("DISPLAY3FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Disply nme %s %s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("RObjfQ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.overlay("l@kJ/GydR)", "l@kJ/GydR)", 5, 5);
      assertNotNull(string0);
      assertEquals("l@kJ/l@kJ/GydR)GydR)", string0);
      
      String string1 = StringUtils.lowerCase("l@kJ/GydR)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("l@kj/gydr)", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("l@kJ/GydR)", "l@kj/gydr)", 1002);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing("-", "nk");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nk-nk", string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("nk-nk");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "-", 'w');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("}", "}", "}");
      assertNotNull(string0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "@", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 108);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", (String) null, (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("", "kIw|\u0000hZz]q", (-2446));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat('$', (-3319));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}";
      boolean boolean0 = StringUtils.isNumericSpace("}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "}", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.capitalize(":h,");
      assertNotNull(string0);
      assertEquals(":h,", string0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ':', 59, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char char0 = 'A';
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      String string1 = "\\vUHKBJ\"sK+cu6C";
      String string2 = StringUtils.replaceIgnoreCase("", "Minimum abbreviation width is %d", "vUHKBJ\"sK+cu6C");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("vUHKBJ\"sK+cu6C", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("vUHKBJ\"sK+cu6C", string3);
      
      String string4 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.params.DisableIfArgumentExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("vUHKBJ\"sK+cu6C", "Minimum abbreviation width is %d");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("vUHKBJ\"sK+cu6C", "vUHKBJ\"sK+cu6C");
      assertTrue(boolean0);
      
      String string5 = StringUtils.toRootUpperCase("Da!:;80\"vJ/N~");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("DA!:;80\"VJ/N~", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '`', 0, 1255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '*');
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = "~^";
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'O', 253, 3979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 253
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = "j3T{-";
      String string2 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.deleteWhitespace("j3T{-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("j3T{-", string3);
      
      String string4 = StringUtils.toRootLowerCase("org.easymock.bytebuddy.build.CachedReturnPlugin");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("org.easymock.bytebuddy.build.cachedreturnplugin", string4);
      
      Locale locale0 = Locale.forLanguageTag("| ");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("j3T{-"));
      
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.poll();
      assertNull(locale_LanguageRange0);
      assertEquals(0, linkedList0.size());
      
      String string5 = "-\\E\\oG[>F2rMG'{X}<";
      boolean boolean0 = priorityQueue0.add("-EoG[>F2rMG'{X}<");
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("j3T{-"));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertTrue(boolean0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityQueue0.contains("j3T{-"));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertFalse(list0.contains("j3T{-"));
      
      String string6 = StringUtils.upperCase("", locale0);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string6);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.easymock.bytebuddy.build.CachedReturnPlugin", "j3T{-", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '\"', (-6), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-6));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      String string3 = StringUtils.strip((String) null, "");
      assertNull(string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string4 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'k');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.leftPad("H,@Rg:", (int) '@');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("                                                          H,@Rg:", string5);
      
      String string6 = StringUtils.center("", (-6), '\\');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceFirst("\"s9\"k7_", "Failed to assert access rights using security manager", "tq&C3(ot[yJ/<;gq(");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("\"s9\"k7_", string7);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.join((Object[]) null, '\\');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("?vv=L%SGJf", "~Fc2)S?r]a8mPY@qm", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("?vv=L%SGJf", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("', has a length less than 2", "org.junitpioneer.jupiter.IssueExtension", "^;gGF/Wj`RV;ILO1J");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("', has a length less than 2", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Object varargs must not be null", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      
      String string3 = StringUtils.deleteWhitespace("~Fc2)S?r]a8mPY@qm");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("~Fc2)S?r]a8mPY@qm", string3);
      
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.jupiter.IssueExtension", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '0', 2, (-350));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.center((String) null, (-921), "~4cBK7<<3'D#x~9X}");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String string0 = StringUtils.center("zG", (-43), "zG");
      assertNotNull(string0);
      assertEquals("zG", string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.leftPad("]gKF1O", 45, '8');
      assertNotNull(string0);
      assertEquals("888888888888888888888888888888888888888]gKF1O", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "]gKF1O", (CharSequence) "]gKF1O");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("]gKF1O", "g", true);
      assertEquals((-10), int0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "wz=)xD)!@1b^g0a=y", "]gKF1O");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Object varargs must not be null", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      
      String string3 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Objectvarargsmustnotbenull", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("g", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((Object[]) null, '.', 164, 122);
      assertNull(string4);
      
      String string5 = StringUtils.center((String) null, 45, "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.center("}", 13, "}");
      assertNotNull(string0);
      assertEquals("}}}}}}}}}}}}}", string0);
      
      String string1 = StringUtils.trimToNull("lZ(W:JW^.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("lZ(W:JW^.", string1);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.removeAll("bSMPgE", "Cannot cache the value of an abstract method: ");
      assertNotNull(string0);
      assertEquals("bSMPgE", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "bSMPgE", (CharSequence) "bSMPgE");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("bSMPgE", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "bSMPgE";
      String string1 = StringUtils.prependIfMissingIgnoreCase("x8=:6)\".qXDMb", "bSMPgE", charSequenceArray0);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("bSMPgEx8=:6)\".qXDMb", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "bSMPgE", (CharSequence) "bSMPgEx8=:6)\".qXDMb");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("bSMPgE", "Cannot cache the value of an abstract method: ");
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("bSMPgE", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", (String) null, "bSMPgE");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", supplier0);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", string5);
      
      String string6 = StringUtils.deleteWhitespace("bSMPgE");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("bSMPgE", string6);
      
      boolean boolean0 = StringUtils.startsWithAny("bSMPgE", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, 'W', 533, 38);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string7);
      
      String string8 = StringUtils.center("bSMPgE", (-1800), "sfac");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("bSMPgE", string8);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", (-6));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast((String) null, 35);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '[', (-139), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -139
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      char char0 = 'k';
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = '$';
      charArray0[4] = 'k';
      charArray0[5] = '$';
      charArray0[6] = 'k';
      charArray0[7] = '$';
      int int0 = 29;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'k', (-658), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -658
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("...", supplier0);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.repeat("...", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceAll("ku&9DLDE1,!9f'^=(pu", "...", "...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("..................u", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "..................u", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("..................u", string3);
      
      String string4 = StringUtils.lowerCase("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((boolean[]) null, 'y');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.remove("Illegal range. There's no way to get from %s to %s with a step of %s.", 'W');
      assertNotNull(string0);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string0);
      
      String string1 = StringUtils.join((boolean[]) null, '.');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.truncate("No proxy target found for ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.build.Plugin$NoOp");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(12, stringArray0.length);
      assertEquals("org.easymock.bytebuddy.build.Plugin$NoOp", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      String string2 = StringUtils.join(charArray0, 'f');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'f', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("ff;", string2);
      
      String string3 = StringUtils.substringBetween("ff;", "V~", "org.easymock.bytebuddy.build.Plugin$NoOp");
      assertNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("No proxy target found for ", "}", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(12, stringArray0.length);
      assertEquals("No proxy target found for ", string4);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", (-6));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-6));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = 'T';
      String string3 = StringUtils.join(charArray0, 'T', (-6), (-6));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("", "", (-6));
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      String string4 = StringUtils.join(doubleArray0, 'k');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("0.0", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = StringUtils.startsWithAny("0.0", stringArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("l]Yv28!z", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.chomp("G]uDT(i");
      assertNotNull(string0);
      assertEquals("G]uDT(i", string0);
      
      int int0 = StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.remove("G]uDT(i", ':');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G]uDT(i", string1);
      
      int int1 = StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.stripStart("O", "O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "O", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("13", "13");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=D$a", "Minimum abbreviation width is %d");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("Minimum abbreviation width is %d", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-68), 'H');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean0 = linkedList1.add((String) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      assertTrue(boolean0);
      
      String string0 = StringUtils.lowerCase(";6hJ{?MY-#:a6le}i6n");
      assertNotNull(string0);
      assertEquals(";6hj{?my-#:a6le}i6n", string0);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, ";6hj{?my-#:a6le}i6n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("nk-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric(">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.replaceEach("$4}t1(6LD", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("$4}t1(6LD", string0);
      
      int int0 = StringUtils.lastIndexOfAny("$4}t1(6LD", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst(" to be an annotation type", "$4}t1(6LD");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // $4}t1(6LD
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '{');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("cs*:X`/J+']Dn'!Y%WH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "bg!m-}X\"oBJY19a#9";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("bg!m-}X\"oBJY19a#9", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("bg!m-}X\"oBJY19a#9");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.wrapIfMissing("&", 'x');
      assertNotNull(string1);
      assertEquals("x&x", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("bg!m-}X\"oBJY19a#9", string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.reverse("h3GtDqwt\"`@(,of");
      assertNotNull(string0);
      assertEquals("fo,(@`\"twqDtG3h", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "fo,(@`\"twqDtG3h", (-670), 1054);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("h3GtDqwt\"`@(,of", "h3GtDqwt\"`@(,of");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // h3GtDqwt\"`@(,of
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.reverse("LLLLLL");
      assertNotNull(string0);
      assertEquals("LLLLLL", string0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(stringArray0);
      assertEquals(55, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("9T_J", "!7#R<");
      assertNotNull(string0);
      assertEquals("!7#R<9T_J!7#R<", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "&:Rd@] does not exist", 107);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9T_J");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(55, stringArray0.length);
      assertEquals(55, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("\",p%H@Ci\"{vuq", "@l");
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "offset cannot be negative", "offset cannot be negative", (-1));
      assertNull(string2);
      
      String string3 = StringUtils.right((String) null, 2993);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.removeStart("'[wO>", "pF vs ");
      assertNotNull(string0);
      assertEquals("'[wO>", string0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">", ">");
      assertEquals(0, int0);
      
      String string0 = StringUtils.right(">", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ">", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.removeStart("]gKF1O", "]gKF1O");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.right("#QcU~@SgY._n=}", 1);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      charSequenceArray0[0] = (CharSequence) "}";
      String string1 = StringUtils.substringBetween("}", (String) null, ")]hd");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("yu>goUu#fk");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("yu>gouu#fk", string2);
      
      charSequenceArray0[2] = (CharSequence) "yu>gouu#fk";
      String string3 = StringUtils.leftPad(")]hd", 565, 'i');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd", string3);
      
      charSequenceArray0[3] = (CharSequence) "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)]hd";
      String string4 = StringUtils.leftPad("}", 565);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals}", string4);
      
      charSequenceArray0[4] = (CharSequence}";
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.removeStart("] doe", "}");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("] doe", string6);
      
      charSequenceArray0[6] = (CharSequence) "] doe";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string7 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, byteArray0.length);
      assertEquals("/", string7);
      
      charSequenceArray0[7] = (CharSequence) "/";
      String string8 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", 'i', 'i');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("Minimum abbreviation width with offset is %d", string8);
      
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      String string9 = StringUtils.join(booleanArray0, 'i');
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals("trueitrueitrueitrue", string9);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.truncate("No proxy target found for ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.build.Plugin$NoOp");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(12, stringArray0.length);
      assertEquals("org.easymock.bytebuddy.build.Plugin$NoOp", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      String string2 = StringUtils.join(charArray0, 'f');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'f', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("ff;", string2);
      
      String string3 = StringUtils.substringAfter("}", "ff;");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.joinWith("4}6NNFW\u0006[czg?Ird?}UIf0Q|", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(12, stringArray0.length);
      assertEquals("org4}6NNFW\u0006[czg?Ird?}UIf0Q|.4}6NNFW\u0006[czg?Ird?}UIf0Q|easymock4}6NNFW\u0006[czg?Ird?}UIf0Q|.4}6NNFW\u0006[czg?Ird?}UIf0Q|bytebuddy4}6NNFW\u0006[czg?Ird?}UIf0Q|.4}6NNFW\u0006[czg?Ird?}UIf0Q|build4}6NNFW\u0006[czg?Ird?}UIf0Q|.4}6NNFW\u0006[czg?Ird?}UIf0Q|Plugin4}6NNFW\u0006[czg?Ird?}UIf0Q|$4}6NNFW\u0006[czg?Ird?}UIf0Q|No4}6NNFW\u0006[czg?Ird?}UIf0Q|Op", string4);
      
      String string5 = StringUtils.replaceChars("ff;", "iUp8m4", "iUp8m4");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("ff;", string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("4}6NNFW\u0006[czg?Ird?}UIf0Q|", "org.easymock.bytebuddy.build.Plugin$NoOp");
      assertFalse(boolean0);
      
      String string6 = StringUtils.right(" vs ", 32);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(" vs ", string6);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("b=;b2M5UF", "b=;b2M5UF", "b=;b2M5UF");
      assertNotNull(string0);
      assertEquals("b=;b2M5UF", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "b=;b2M5UF", (CharSequence) "b=;b2M5UF", 850);
      assertEquals(0, int0);
      
      String string1 = StringUtils.upperCase("b=;b2M5UF");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("B=;B2M5UF", string1);
      
      String string2 = StringUtils.substringBefore("O", "b=;b2M5UF");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("O", string2);
      
      String string3 = StringUtils.difference("F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", "O");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("O", string3);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = "B\"u{=qDMdIDpKNm";
      String string1 = StringUtils.abbreviate("B\"u{=qDMdIDpKNm", "B\"u{=qDMdIDpKNm", (-5806), 20);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("B\"u{=qDMdIDpKNm", string1);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(stack0);
      assertNotNull(priorityQueue0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = stack0.add(locale_Category0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add(locale_Category0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[FORMAT]", stack0.toString());
      assertEquals(1, priorityQueue0.size());
      assertTrue(stack0.contains(locale_Category0));
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertTrue(boolean1);
      
      boolean boolean2 = stack0.add(locale_Category0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_Category0));
      assertTrue(boolean2);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean3 = stack0.add(locale_Category1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals("[FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertSame(locale_Category1, locale_Category0);
      assertTrue(stack0.contains(locale_Category1));
      assertTrue(boolean3);
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean4 = stack0.add(locale_Category2);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(4, stack0.size());
      assertEquals("[FORMAT, FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertTrue(stack0.contains(locale_Category2));
      assertTrue(boolean4);
      
      boolean boolean5 = priorityQueue0.remove((Object) locale_Category2);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(4, stack0.size());
      assertEquals("[FORMAT, FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertEquals(0, priorityQueue0.size());
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertTrue(stack0.contains(locale_Category2));
      assertFalse(priorityQueue0.contains(locale_Category2));
      assertTrue(boolean5);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, 'K');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(4, stack0.size());
      assertEquals("[FORMAT, FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertEquals(0, priorityQueue0.size());
      assertTrue(stack0.contains(locale_Category2));
      assertFalse(priorityQueue0.contains(locale_Category2));
      assertEquals("", string2);
      
      String string3 = "exist";
      String string4 = "'JJe']lP7O;P}N4,_^";
      String string5 = StringUtils.replace("W?d`)&1:hW)i?kzlU\"", "exist", "'JJe']lP7O;P}N4,_^", (-5806));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("W?d`)&1:hW)i?kzlU\"", string5);
      
      String string6 = StringUtils.substringAfter("'JJe']lP7O;P}N4,_^", "&:Rd@");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "B\"u{=qDMdIDpKNm", (CharSequence) "exist");
      assertEquals((-1), int0);
      
      CharSequence charSequence0 = null;
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "exist", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "SQ))sN(1:2<oos", "W?d`)&1:hW)i?kzlU\"");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // SQ))sN(1:2<oos
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "-0]?5,<R#' k=|#r~In");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.substringAfter("6){g?B#&}9azV,p3", "im@M[+A*'");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.leftPad("Object varargs must not be null", 1081);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Object varargs must not be null"));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Object varargs must not be null"));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      String string4 = StringUtils.upperCase((String) null, locale0);
      assertNull(string4);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, string2, 1081);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "5Xi16;Y#4", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("j3T{-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j3T{-", string2);
      
      String string3 = StringUtils.toRootLowerCase("org.easymock.bytebuddy.build.CachedReturnPlugin");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.easymock.bytebuddy.build.cachedreturnplugin", string3);
      
      Locale locale0 = Locale.forLanguageTag("| ");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("org.easymock.bytebuddy.build.CachedReturnPlugin"));
      
      boolean boolean0 = priorityQueue0.add("-EoG[>F2rMG'{X}<");
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("j3T{-"));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertTrue(boolean0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityQueue0.contains("j3T{-"));
      assertTrue(priorityQueue0.contains("-EoG[>F2rMG'{X}<"));
      assertFalse(list0.contains("j3T{-"));
      
      String string4 = StringUtils.upperCase("", locale0);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", string4);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.easymock.bytebuddy.build.CachedReturnPlugin", "j3T{-", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 'B';
      charArray0[5] = 's';
      charArray0[6] = 's';
      String string5 = StringUtils.join(charArray0, 'p');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertArrayEquals(new char[] {'s', 's', 's', 's', 'B', 's', 's'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("spspspspBpsps", string5);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = StringUtils.upperCase("8PIXKCJ/", locale0);
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("8PIXKCJ/", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "8PIXKCJ/", (-974), (-974));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-6));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = 'T';
      String string3 = StringUtils.leftPad("", (-6), '@');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split((String) null, "", (-6));
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'c');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean2 = linkedList0.add((Object) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add((Object) "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      assertTrue(boolean3);
      
      Stream<Object> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = linkedList0.add(object0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      assertTrue(boolean4);
      
      Object object1 = linkedList0.remove();
      assertTrue(object1.equals((Object)string0));
      assertTrue(object1.equals((Object)string4));
      assertTrue(object1.equals((Object)string1));
      assertTrue(object1.equals((Object)string3));
      assertNotNull(object1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean5 = linkedList0.add((Object) linkedList0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains('@'));
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'k', (-3005), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3005
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 82);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'y');
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("offset cannot be negative", "org.junitpioneer.jupiter.params.IntRange", "F", 82);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("offset cannot be negative", string3);
      
      String string4 = StringUtils.defaultString((String) null, "Container creation requires an assignable array as return value: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Container creation requires an assignable array as return value: ", string4);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.truncate("No proxy target found for ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.build.Plugin$NoOp");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(12, stringArray0.length);
      assertEquals("org.easymock.bytebuddy.build.Plugin$NoOp", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      String string2 = StringUtils.join(charArray0, 'f');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'f', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("ff;", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("9PJs", "9PJs", (String) null, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("9PJs", string3);
      
      String string4 = StringUtils.defaultString("", "] does not exist&:Rd@");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      String string0 = StringUtils.join(byteArray0, '+');
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("50+50", string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'D');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.substringBetween((String) null, "$Advice$");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("xo39>J_", 'D');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.trimToNull(">w)<{]0@Ml0\"HSB_M");
      assertNotNull(string1);
      assertEquals(">w)<{]0@Ml0\"HSB_M", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "$Advice$", "Parameter [%s] is not of the correct target type %s");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      String string3 = StringUtils.join(byteArray0, 'b');
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("109", string3);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase("@", "GX7}OjlfE|L_#f;F~", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("@GX7}OjlfE|L_#f;F~", string0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("7^t:I0jCABW]X@3", "@", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = "Strings must not be null";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GX7}OjlfE|L_#f;F~";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("GX7}OjlfE|L_#f;F~", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.substringBetween("(D", "(D", "(D");
      assertNull(string0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '^', 12, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 0;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '/', (-1297), 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1297
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      String string1 = StringUtils.leftPad("", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center((String) null, 2, 'm');
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst("", (String) null, "LpU:b2");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1421), "...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("?vv=L%SGJf"));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("?vv=L%SGJf"));
      
      String string0 = StringUtils.removeStart("hC&{e", "hC&{e");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("?vv=L%SGJf", "", 11);
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "5Xi16;Y#4", "_5jI:m ti^\"b)N+r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.removeStart("Object varargs must not be null", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((int[]) null, '9');
      assertNull(string5);
      
      String string6 = StringUtils.substring("#!;KZ&sZ`U}S=t\u0000", 12);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("=t\u0000", string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertEquals(0, int0);
      
      String string7 = StringUtils.unwrap("^b?\u0003U!!H/Jkr?z}", "Object varargs must not be null");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("^b?\u0003U!!H/Jkr?z}", string7);
      
      String string8 = StringUtils.rightPad("...", 86, '9');
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("...99999999999999999999999999999999999999999999999999999999999999999999999999999999999", string8);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", (String) null, "Locale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'P';
      charArray0[2] = 'b';
      charArray0[3] = 'u';
      charArray0[4] = '6';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Locale must not be null", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Z', 'P', 'b', 'u', '6'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("'zuG@?ter");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToEmpty("Locale must not be null");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "Locale must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.isAllUpperCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("", "Locale must not be null");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNumeric("");
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6);
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", (-1), 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeFirst("", "File must not be null or blank");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean7 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7);
      
      String string6 = StringUtils.stripToEmpty("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.removeStart((String) null, "org.easymock.bytebuddy.build.RepeatedAnnotationPlugin");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.abbreviate("6|_5%Fx'm\"`p7$n <", 160, 1114111);
      assertNotNull(string0);
      assertEquals("6|_5%Fx'm\"`p7$n <", string0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", 151, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("bhcItZrWLPCc0Wc@/}4");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("BhcItZrWLPCc0Wc@/}4", string4);
      
      charSequenceArray0[4] = (CharSequence) "BhcItZrWLPCc0Wc@/}4";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.strip("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", "~R%>=&GSq,_");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", string6);
      
      charSequenceArray0[6] = (CharSequence) "org.easymock.bytebuddy.asm.Advice$OnDefaultValue";
      String string7 = StringUtils.replaceChars("~R%>=&GSq,_", 'V', 'V');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("~R%>=&GSq,_", string7);
      
      charSequenceArray0[7] = (CharSequence) "~R%>=&GSq,_";
      String string8 = StringUtils.substringAfterLast("", 1155);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      charSequenceArray0[8] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string8));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string5));
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("BhcItZrWLPCc0Wc@/}4", charSequence0);
      
      boolean boolean0 = StringUtils.isBlank("BhcItZrWLPCc0Wc@/}4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.capitalize("l{DH[E`r,+L78yl)");
      assertNotNull(string0);
      assertEquals("L{DH[E`r,+L78yl)", string0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.remove("", 'l');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 50);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("DisableIfArgumentExtension");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny("Z+'u@WGwvhTkuMr h", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("Object varargs must not be null", 'P');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      int int0 = StringUtils.lastIndexOfAny("Object varargs must not be null", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.startsWithAny("Object varargs must not be null", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals(188, stringArray0.length);
      assertEquals("aa", string0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Object varargs must nEt be null");
      assertNotNull(string0);
      assertEquals("Object varargs must nEt be null", string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0&");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'i', 'i');
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Never disable parameterized test method itself");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) 'i';
      floatArray0[5] = (float) 'i';
      floatArray0[6] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, 'M', 5, (-1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 105.0F, 105.0F, 105.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("", (-642));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("xHYlq0_RT\"-ytI]r_]", "The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed", 1114111, 90);
      assertNotNull(string0);
      assertEquals("xHYlq0_RT\"-ytI]r_]The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed", string0);
      
      String string1 = StringUtils.getDigits("The `Resource` instance returned by the factory method [%s] with arguments %s was null, which is not allowed");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.unwrap("Object varargs must not be null", 'U');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.chomp("G]uDT(i");
      assertNotNull(string0);
      assertEquals("G]uDT(i", string0);
      
      int int0 = StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G]uDT(i", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("-1.0&0.0&-1.0&-1.0&-1.0&0.0&0.0&0.0", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&:Rd@] does not exist", "7a?sSO])K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.overlay((String) null, "&:Rd@] does not exist", 40, 40);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("7a?sSO])K", '7');
      assertNotNull(string1);
      assertEquals("7a?sSO])K", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("7a?sSO])K");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap((String) null, '7');
      assertNull(string2);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "[&TiOY@-=tYz+PBKw", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeEnd((String) null, "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.swapCase("1?wC{_s)0NN.l");
      assertNotNull(string0);
      assertEquals("1?Wc{_S)0nn.L", string0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate("", "5%$Qm`[8@4%", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("ZZN!m88/c", "", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("X8/SV9", 'G');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2108;
      shortArray0[1] = (short) (-1554);
      shortArray0[2] = (short)8192;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)13;
      shortArray0[5] = (short)1014;
      shortArray0[6] = (short) (-1828);
      shortArray0[7] = (short) (-2736);
      String string2 = StringUtils.join(shortArray0, 'V');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)2108, (short) (-1554), (short)8192, (short) (-1), (short)13, (short)1014, (short) (-1828), (short) (-2736)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals("2108V-1554V8192V-1V13V1014V-1828V-2736", string2);
      
      String string3 = StringUtils.swapCase("ZZN!m88/c");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("zzn!M88/C", string3);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
      
      charSequenceArray0[0] = (CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", "S!");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("$U_PGeT+yW", "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", 1072);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$U_PGeT+yW", string1);
      
      String string2 = StringUtils.left("E9va\u0001e.g*z@h3>", 9993);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("E9va\u0001e.g*z@h3>", string2);
      
      String string3 = StringUtils.difference("$U_PGeT+yW", "E9va\u0001e.g*z@h3>");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("E9va\u0001e.g*z@h3>", string3);
      
      String string4 = StringUtils.replaceChars("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/", "$U_PGeT+yW", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("his tst is disabld until %s. If xcuting it on this commit would fail, th build can't b rproducd aftr that dat.F!E.rZJ;L/", string4);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "rOPU\"dI(5$@h j/1O:C", "StdIo_System_Err");
      assertNull(stringArray0);
      
      String string5 = StringUtils.chop("vz~'Dl2(q7MT#/@/");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("vz~'Dl2(q7MT#/@", string5);
      
      boolean boolean1 = StringUtils.isEmpty("The `date` %s is after the current date %s");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("E9va\u0001e.g*z@h3>");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.rightPad("IX!?_x!eQ'vCG7},K", 13, "IX!?_x!eQ'vCG7},K");
      assertNotNull(string0);
      assertEquals("IX!?_x!eQ'vCG7},K", string0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " O", " O");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.center("?vv=L%SGJf", 100, "?vv=L%SGJf");
      assertNotNull(string0);
      assertEquals("?vv=L%SGJf?vv=L%SGJf?vv=L%SGJf?vv=L%SGJf?vv=L?vv=L%SGJf?vv=L%SGJf?vv=L%SGJf?vv=L%SGJf?vv=L%SGJf?vv=L", string0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '7', 0, 773);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("offset cannot be neative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("c@i'<Mp", 'Z');
      assertNotNull(string0);
      assertEquals("Zc@i'<MpZ", string0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("File does not exist: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", (-2161), (-2161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("...", supplier0);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string1 = StringUtils.center("Locale must not be null", (-1954), 'n');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("...", 151, (-1954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("OqWKSZsT$}!S7'Cannot cache void result for Cannot cache void result for ", "OqWKSZsT$}!S7'Cannot cache void result for Cannot cache void result for ", (-3259), (-3259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 73
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j";
      String string2 = StringUtils.appendIfMissingIgnoreCase("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", " AU=(QUO7)`B+'}#%O6ISM~;F0J", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM AU=(QUO7)`B+'}#%O6ISM~;F0J", string2);
      
      String string3 = StringUtils.lowerCase("#Q");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("#q", string3);
      
      String string4 = StringUtils.center("#!;KZ&sZ`U}S=t\u0000nk", 1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("#!;KZ&sZ`U}S=t\u0000nk", string4);
      
      String string5 = StringUtils.center("StdIo_Std_In", 3188, 'M');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) string5, (CharSequence) "#Q");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.replaceAll("wqTn", "FaY}bbz$':@F,>F", "Container creation requires an assignable array as return value: ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("wqTn", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j", (CharSequence) "wqTn", (-1304));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.replace("repeatOn", "Container creation requires an assignable array as return value: ", "C~%*o", (-1304));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("repeatOn", string7);
      
      String string8 = StringUtils.left(string5, (-1304));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      int int3 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.lang.invoke.LambdaMetafactory", '`', 'i');
      assertNotNull(string0);
      assertEquals("java.lang.invoke.LambdaMetafactory", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.invoke.LambdaMetafactory", "java.lang.invoke.LambdaMetafactory");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("IT`MWA");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("&:Rd@] does not exist", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&:Rd@] does not exist", string1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) '`';
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 'i';
      floatArray0[6] = 0.0F;
      String string2 = StringUtils.join(floatArray0, '', 3955, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new float[] {77.0F, 5.0F, 77.0F, 96.0F, 5.0F, 105.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("", 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", (-6));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = 'T';
      String string3 = StringUtils.join(charArray0, 'T', (-6), (-6));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("", "", (-6));
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'k');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.wrapIfMissing("", "17k)IMYtS=B'");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.overlay(",?n", ",?n", 5, 5);
      assertNotNull(string0);
      assertEquals(",?n,?n", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(",?n,?n", ",?n,?n", 160);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '0';
      charArray0[2] = '`';
      charArray0[3] = 'n';
      charArray0[4] = '=';
      charArray0[5] = 't';
      charArray0[6] = 'i';
      charArray0[7] = '(';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\'', '0', '`', 'n', '=', 't', 'i', '('}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("'0`n=ti(", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string0);
      
      String string1 = StringUtils.replaceAll(";O2d$)nO,7M^&3", (String) null, ";");
      assertNotNull(string1);
      assertEquals(";O2d$)nO,7M^&3", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.appendIfMissingIgnoreCase(";O2d$)nO,7M^&3", ";O2d$)nO,7M^&3", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(";O2d$)nO,7M^&3", string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "|(", (CharSequence) "|(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.lowerCase("-0]?5,<R#' k=|#r~In");
      assertNotNull(string0);
      assertEquals("-0]?5,<r#' k=|#r~in", string0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("@", "@", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue1, "Xssw+K;ATba");
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.contains("Xssw+K;ATba"));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.substringAfter("B9mhnZ}~@", (-2487));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("_]$``h7>M|lx:Ii", "_]$``h7>M|lx:Ii", (String) null);
      assertNotNull(string0);
      assertEquals("_]$``h7>M|lx:Ii", string0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-6));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      String string3 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string4 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'k');
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.leftPad("H,@Rg:", 1894);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("", (-6), '\\');
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceFirst("\"s9\"k7_", "Failed to assert access rights using security manager", "tq&C3(ot[yJ/<;gq(");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("\"s9\"k7_", string7);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.join((Object[]) null, '\\');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("ojI['ArwMf");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ojI['ArwMf", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      String string3 = StringUtils.join(iterator0, '}');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(""));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("jKDEzYTk", string4);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(predicate1);
      assertNotSame(object1, object0);
      
      Predicate<String> predicate2 = predicate0.or(predicate1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotSame(object0, object1);
      assertFalse(vector0.contains(""));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) vector0, '}', 8192, 0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(""));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Object[]) null, '}');
      assertNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("jKDEzYTk");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("E*Shk%^\"h");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      String string7 = StringUtils.replaceFirst((String) null, "%Hgg^oLQ", "Threshold must not be negative");
      assertNull(string7);
      
      boolean boolean4 = StringUtils.isAnyBlank(stringArray1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("OD{M#>B!#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "OD{M#>B!#", "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                   OD{M#>B!#", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-72);
      String string2 = StringUtils.repeat('(', (int) (byte) (-75));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited("", 'T');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfter((String) null, (int) (byte) (-75));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '%', (-1), (-1));
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("]gKF1O", "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("', has a length less than 2]gKF1O', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.chomp("YL1uE E=");
      assertNotNull(string0);
      assertEquals("YL1uE E=", string0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("}", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("D>Sd9L`EFzA", "D>Sd9L`EFzA");
      assertNotNull(string0);
      assertEquals("D>Sd9L`EFzA", string0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("L");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBetween("L", "org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider", "L");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "% vd#&Aw/l&}n=|4;o.", (CharSequence) "% vd#&Aw/l&}n=|4;o.", (-1446));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.stripAccents("7_");
      assertNotNull(string0);
      assertEquals("7_", string0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk#!;KZ&sZ`U}S=t\u0000", 2005, ")@gB^xW@}");
      assertNotNull(string0);
      
      String string1 = "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[1] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[3] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[4] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[5] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[6] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[7] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[8] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = StringUtils.joinWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(".'N,aRqu8V", 10);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#vrx{kYC7`, k{3'\"<bC", "#vrx{kYC7`, k{3'\"<bC");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'Z', (-1034), 177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1034
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String string1 = StringUtils.overlay("', has a length less than 2", "', has a length less than 2", (-3057), 3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("', has a length less than 2has a length less than 2", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("', has a length less than 2has a length less than 2", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'p', (-3057), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3057
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "bg!m-}X\"oBJY19a#9", (CharSequence) "ku&9DLDE1,!9f'^=(pu");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&:Rd@] does not exist", "7a?sSO])K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.overlay((String) null, "&:Rd@] does not exist", 40, 40);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace((String) null, (String) null, "Test marked as temporarily 'expected to fail' failed as expected", 755);
      assertNull(string1);
      
      String string2 = StringUtils.removePattern("%s requires that either `contains` or `matches` is set.", "&:Rd@] does not exist");
      assertNotNull(string2);
      assertEquals("%s requires that either `contains` or `matches` is set.", string2);
      
      String string3 = StringUtils.abbreviateMiddle("K3raRe92", "3", 16);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("K3raRe92", string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "9Y", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 17, 'K');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, (int) 'K', "\"=]yxbpg");
      assertNull(string1);
      
      Locale locale0 = new Locale("pIF]f2V+MasLSL", "org.easymock.bytebuddy.asm.Advice$OnNonDefaultValue", "8>+");
      assertNotNull(locale0);
      assertEquals("pif]f2v+maslsl", locale0.getLanguage());
      assertEquals("8>+", locale0.getVariant());
      assertEquals("ORG.EASYMOCK.BYTEBUDDY.ASM.ADVICE$ONNONDEFAULTVALUE", locale0.getCountry());
      assertEquals("pif]f2v+maslsl_ORG.EASYMOCK.BYTEBUDDY.ASM.ADVICE$ONNONDEFAULTVALUE_8>+", locale0.toString());
      
      Locale locale1 = null;
      try {
        locale1 = new Locale((String) null, (String) null, "?}UIf0Q|^p^XF\"+)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(stringArray0);
      assertEquals(55, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "!7#R<");
      assertNotNull(string0);
      assertEquals("!7#R<The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.!7#R<", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "&:Rd@] does not exist");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(55, stringArray0.length);
      assertEquals(55, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("\",p%H@Ci\"{vuq", "@l");
      assertNull(string1);
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, '6', (int) '6', (int) '6');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.DefaultTimeZoneExtension", '6');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("6org.junitpioneer.jupiter.DefaultTimeZoneExtension6", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", (-675));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("6org.junitpioneer.jupiter.DefaultTimeZoneExtension6", (-897));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("6org.junitpioneer.jupiter.DefaultTimeZoneExtension6", string4);
      
      boolean boolean0 = StringUtils.isAlpha("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Iterable<?>) null, '6');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.substringBeforeLast("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("`JeV<I0,8C[|-|", (-1), 'r');
      assertNotNull(string0);
      assertEquals("`JeV<I0,8C[|-|", string0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.rightPad(">", 32, ">");
      assertNotNull(string0);
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", value=", (CharSequence) ", value=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(linkedList0);
      assertNotNull(priorityQueue0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '{');
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      assertFalse(linkedList0.contains(string0));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[2] = 2705.85F;
      floatArray0[3] = (-1616.1832F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (-1616.1832F);
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 1723.05F;
      doubleArray0[5] = (double) (-1220.569F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      String string1 = StringUtils.join(charArray0, '?');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("p", string1);
      
      String string2 = StringUtils.reverse("vz");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("zv", string2);
      
      String string3 = StringUtils.join((short[]) null, 'J');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("zv", "p");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[0] = ';';
      charArray0[3] = ';';
      String string1 = StringUtils.join(charArray0, ';');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {';', 'f', '\u0000', ';'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(";;f;\u0000;;", string1);
      
      String string2 = StringUtils.leftPad("offset cannot be negative", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("offset cannot be negative", string2);
      
      String string3 = StringUtils.center("vj(?*>h1M,!}{QwyT#x", (-1), '(');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("vj(?*>h1M,!}{QwyT#x", string3);
      
      String string4 = StringUtils.join((int[]) null, ';');
      assertNull(string4);
      
      String string5 = StringUtils.substring("", (-1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "vj(?*>h1M,!}{QwyT#x");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("RG=:<uAlO`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "G5`~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      boolean boolean0 = StringUtils.isWhitespace("]W}JE,");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripEnd("-", "-");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((float[]) null, 'c');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.abbreviate("_8R~T*e7Pc+~t", 194);
      assertNotNull(string0);
      assertEquals("_8R~T*e7Pc+~t", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_8R~T*e7Pc+~t", (CharSequence) "_8R~T*e7Pc+~t");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-6));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = 'T';
      String string3 = StringUtils.join(charArray0, 'T', (-6), (-6));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split((String) null, "", (-6));
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'@', '$', 'k', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'c');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-6)));
      
      boolean boolean2 = linkedList0.add((Object) "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add((Object) "");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean3);
      
      Stream<Object> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = linkedList0.add(object0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean4);
      
      Object object1 = linkedList0.remove();
      assertTrue(object1.equals((Object)string1));
      assertTrue(object1.equals((Object)string0));
      assertTrue(object1.equals((Object)string3));
      assertTrue(object1.equals((Object)string4));
      assertNotNull(object1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean5 = linkedList0.add(object2);
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, linkedList0.size());
      assertNotSame(object2, object0);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-6)));
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'k', (-3005), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3005
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.overlay("", "CffS8y]a7a-#N", 3767, (-1954));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("CffS8y]a7a-#N", string2);
      
      String string3 = StringUtils.defaultIfBlank("", "");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.deleteWhitespace(",LVXRm%%");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(",LVXRm%%", string4);
      
      boolean boolean0 = StringUtils.isWhitespace("CffS8y]a7a-#N");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ",LVXRm%%", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '5', (-20), (int) '5');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -20
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Failed to assert access rights using security manager", "5%$Qm`[8@4%", "5%$Qm`[8@4%");
      assertNotNull(string0);
      assertEquals("Failed to assert access rights using security manager", string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to assert access rights using security manager", string2);
      
      String string3 = StringUtils.strip("Failed to assert access rights using security manager", "Failed to assert access rights using security manager");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Failed to assert access rights using security manager", string4);
      
      String string5 = StringUtils.substringAfter("", "Failed to assert access rights using security manager");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.strip("", "Handler on array requires positive index for ");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceChars("gfHKyNSC{oQ7S", '$', 'V');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("gfHKyNSC{oQ7S", string7);
      
      String string8 = StringUtils.removeFirst("&~ti/}n4S;R", "&:Rd@");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("&~ti/}n4S;R", string8);
      
      boolean boolean1 = StringUtils.isAlpha("&~ti/}n4S;R");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.stripToEmpty((String) null);
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string10 = StringUtils.appendIfMissingIgnoreCase("Failed to assert access rights using security manager", "[$'wdMca@*OiQ>Pi^", stringArray0);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertEquals(1, stringArray0.length);
      assertEquals("Failed to assert access rights using security manager[$'wdMca@*OiQ>Pi^", string10);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "5%$Qm`[8@4%", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.center("Parameter [%s] in %s is annotated with both @New and @Shared", (-1795));
      assertNotNull(string0);
      assertEquals("Parameter [%s] in %s is annotated with both @New and @Shared", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Parameter [%s] in %s is annotated with both @New and @Shared");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(stringArray0);
      assertEquals(55, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("9T_J", "!7#R<");
      assertNotNull(string0);
      assertEquals("!7#R<9T_J!7#R<", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "&:Rd@] does not exist", 107);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9T_J");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(55, stringArray0.length);
      assertEquals(55, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("\",p%H@Ci\"{vuq", "@l");
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "offset cannot be negative", "offset cannot be negative", (-1));
      assertNull(string2);
      
      int int1 = StringUtils.compare("!7#R<", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.substringAfter("#!;KZ&sZ`U}S=t\u0000nk", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, 883);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 365);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                    org.apache.commons.lang3.StringUtils                                                                                                                                                                     ", string0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", 151, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.strip("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", "~R%>=&GSq,_");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", string6);
      
      charSequenceArray0[6] = (CharSequence) "org.easymock.bytebuddy.asm.Advice$OnDefaultValue";
      String string7 = StringUtils.replaceChars("~R%>=&GSq,_", 'V', 'V');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("~R%>=&GSq,_", string7);
      
      charSequenceArray0[7] = (CharSequence) "~R%>=&GSq,_";
      String string8 = StringUtils.substringAfterLast("", 1155);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      charSequenceArray0[8] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string5));
      assertTrue(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string8));
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("org.easymock.bytebuddy.asm.Advice$OnDefaultValue", charSequence0);
      
      boolean boolean0 = StringUtils.isBlank("org.easymock.bytebuddy.asm.Advice$OnDefaultValue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = StringUtils.strip("'5zdd'^{t(@6\"u4P0X", "-TTxr:VkAU+p");
      assertNotNull(string0);
      assertEquals("'5zdd'^{t(@6\"u4P0X", string0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((short[]) null, 'P', (-1999), (-11));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '@');
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-123);
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-2376);
      shortArray0[6] = (short) (-563);
      shortArray0[7] = (short)2850;
      String string0 = StringUtils.join(shortArray0, '/', (int) (short)2850, (-1715));
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)8192, (short)2, (short) (-1), (short) (-123), (short)32, (short) (-2376), (short) (-563), (short)2850}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      short[] shortArray0 = new short[2];
      String string0 = StringUtils.join(shortArray0, 'T');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("0T0", string0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.rightPad("J_m&^S", (-277), "J_m&^S");
      assertNotNull(string0);
      assertEquals("J_m&^S", string0);
      
      int int0 = StringUtils.compare("J_m&^S", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.rightPad("J_m&^S", (-277), "J_m&^S");
      assertNotNull(string0);
      assertEquals("J_m&^S", string0);
      
      int int0 = StringUtils.compare("J_m&^S", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.repeat("nk- ", 76);
      assertNotNull(string0);
      assertEquals("nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- ", string0);
      
      String string1 = StringUtils.abbreviate("nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- nk- ", "1j6L,*SWVZ.S", 25, 25);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1j6L,*SWVZ.Sn1j6L,*SWVZ.S", string1);
      
      String string2 = StringUtils.substringBefore("nk- ", ">");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("nk- ", string2);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.rightPad("Nha", 7, ">*:8Q@ ");
      assertNotNull(string0);
      assertEquals("Nha>*:8", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("Nha>*:8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" to be an annotation type", "Nha");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" to be an annotation type", string1);
      
      String string2 = StringUtils.removeStart(" to be an annotation type", "d6L}['k1oaOJr+");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" to be an annotation type", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "d6L}['k1oaOJr+", (CharSequence) "Nha>*:8", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 64, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("|Sqod", (String) null);
      assertNotNull(string0);
      assertEquals("|Sqod", string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("IO", "IO", "IO");
      assertNotNull(string0);
      assertEquals("IO", string0);
      
      int int0 = StringUtils.compare("IO", "IO");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("f|Pd", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'U';
      charArray0[2] = '&';
      charArray0[3] = 'O';
      charArray0[4] = 'G';
      charArray0[5] = 'a';
      charArray0[6] = '!';
      charArray0[7] = 'Z';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "bg!m-}X\"oBJY19a#9", charArray0);
      assertArrayEquals(new char[] {'D', 'U', '&', 'O', 'G', 'a', '!', 'Z'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'k', 'V');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "doPrivileged", "doPrivileged");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "_Wb");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("F", 'k');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.removeStart("_Wb", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals("_Wb", string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, "W)<YD");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "v";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'i', 'i');
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      String string1 = StringUtils.join(doubleArray0, '1');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new double[] {105.0, 105.0, 105.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("105.01105.01105.0", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "105.01105.01105.0";
      stringArray0[1] = "";
      stringArray0[2] = "105.01105.01105.0";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "105.01105.01105.0";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, stringArray0.length);
      assertEquals("105.01105.01105.0", string2);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.replaceChars("repeatOn", 'r', 'r');
      assertNotNull(string0);
      assertEquals("repeatOn", string0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("3zem", "3zem", "3zem");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'D');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", ">w)<{]0@Ml0\"HSB_M");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'D';
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) 'D';
      longArray0[4] = (long) 'D';
      String string0 = StringUtils.join(longArray0, 'n');
      assertNotNull(string0);
      assertArrayEquals(new long[] {68L, 68L, 68L, 68L, 68L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("68n68n68n68n68", string0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ge;k\n>#v8eX*-L");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("ge;k\n>#v8eX*-L", stringArray0);
      assertEquals(13, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Strings mst no be null", "[", "Strings mst no be null");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 0
         // [
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.replaceAll("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("O", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'k';
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {107.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("107.0", string0);
      
      boolean boolean0 = StringUtils.isEmpty("107.0");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "/W#ufevs4zv|";
      stringArray0[2] = "MOs8V'[xa";
      stringArray0[3] = "/W#ufevs4zv|";
      stringArray0[4] = "107.0";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&:Rd@] does not exist");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = 0.0F;
      int int0 = StringUtils.indexOf((CharSequence) "", 1867);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      String string1 = StringUtils.substringBetween("6#{c", "&:Rd@] does not exist");
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "", (-547));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.repeat('M', 2037);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-222L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'M';
      String string1 = StringUtils.join(longArray0, 'F');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {(-222L), 1L, 77L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("-222F1F77", string1);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.upperCase(string0, locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.indexOfAny((CharSequence) string2, (String) null);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("114.0S0.0S114.0S114.0S-895.0S6.0=4", "&:Rd@");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" is not in the range '0' - '9'", "bV=2f.;0#");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("bV=2f.;0#", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.strip("|h");
      assertNotNull(string0);
      assertEquals("|h", string0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("O", "O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", "#!;KZ&sZ`U}S=t\u0000");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("O");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'w');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "#!;KZ&sZ`U}S=t\u0000";
      stringArray0[3] = "O";
      stringArray0[3] = "gy/Od<M:Lpvyy@|2m";
      stringArray0[4] = "#!;KZ&sZ`U}S=t\u0000";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals("#!;KZ&sZ`U}S=t\u0000", string2);
      
      String[] stringArray2 = StringUtils.split("", 'q');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      
      String string3 = StringUtils.leftPad("O", 9, 'w');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("wwwwwwwwO", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = '%';
      charArray0[4] = 'w';
      charArray0[5] = 'R';
      charArray0[6] = '%';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "wwwwwwwwO", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'q', '%', '\u0000', '\u0000', 'w', 'R', '%'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean2);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string4 = StringUtils.join(iterator0, 'g');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.overlay("}", "}", (-3405), (-286));
      assertNotNull(string0);
      assertEquals("}}", string0);
      
      String string1 = StringUtils.getIfBlank("X+@MT ?wrR9c:39n", (Supplier<String>) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X+@MT ?wrR9c:39n", string1);
      
      String string2 = StringUtils.normalizeSpace("X+@MT ?wrR9c:39n");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("X+@MT ?wrR9c:39n", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "}}", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("/Wq", "CartesianTest can not have an empty display name.");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'O');
      assertNull(stringArray0);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "CartesianTest can not have an empty display name.", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "z");
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviate("maxWith cannot be negative", "z", (-439), 7);
      assertNotNull(string0);
      assertEquals("maxWitz", string0);
      
      String string1 = StringUtils.trimToNull("z");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("z", string1);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'U';
      charArray0[2] = '&';
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, "bg!m-}X\"oBJY19a#9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("bg!m-}X\"oBJY19a#9");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, "");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 112, 112);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeFirst("&:Rd@] does not exist", "exist");
      assertNotNull(string1);
      assertEquals("&:Rd@] does not ", string1);
      
      boolean boolean4 = StringUtils.isAlpha("File must not be null or blank");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Failed to assert access rights using security manager", "5%$Qm`[8@4%", "5%$Qm`[8@4%");
      assertNotNull(string0);
      assertEquals("Failed to assert access rights using security manager", string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to assert access rights using security manager", string2);
      
      String string3 = StringUtils.strip("Failed to assert access rights using security manager", "Failed to assert access rights using security manager");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Failed to assert access rights using security manager", string4);
      
      boolean boolean1 = StringUtils.isNumeric("5%$Qm`[8@4%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Failed to assert access rights using security manager", "\u0000");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Failed to assert access rights using security manager", 1945, 2285);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeFirst("Failed to assert access rights using security manager", "\u0000");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Failed to assert access rights using security manager", string5);
      
      boolean boolean3 = StringUtils.isAlpha("Failed to assert access rights using security manager");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string6 = StringUtils.stripToEmpty("Failed to assert access rights using security manager");
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Failed to assert access rights using security manager", string6);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Failed to assert access rights using security manager", (CharSequence) "Failed to assert access rights using security manager");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.join((double[]) null, 'K', 0, 1945);
      assertNull(string7);
      
      String string8 = StringUtils.substringBetween("}L }9k", "kuM4]W=^p%,XlDG5Fb36.0T107.0T107.0T107.0T29.0T107.0T0.0T36.0T107.0", "Failed to assert access rights using security manager");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", (String) null, "Locale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'P';
      charArray0[2] = 'b';
      charArray0[3] = 'u';
      charArray0[4] = '6';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Locale must not be null", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Z', 'P', 'b', 'u', '6'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("'zuG@?ter");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToEmpty("Locale must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "Locale must not be null");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.isAllUpperCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("", "Locale must not be null");
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNumeric("");
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6);
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", (-1), 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeFirst("", "File must not be null or blank");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean7 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7);
      
      String string6 = StringUtils.stripToEmpty("");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n:Rx~W!>es(wBW:n");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("<d(%YXk2ir?M4db)>E");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}";
      String string0 = StringUtils.truncate("StdIoExtension is active but neither System.out or System.in are getting redirected.", 5);
      assertNotNull(string0);
      assertEquals("StdIo", string0);
      
      boolean boolean0 = StringUtils.isEmpty("StdIo");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("}", (-2487));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string0 = StringUtils.remove("Object varargs must not be null", '`');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      int int0 = StringUtils.lastIndexOfAny("Object varargs must not be null", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootUpperCase("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ke_w4w[bxT");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.truncate("{789~ Wf>]Fxko", 1953);
      assertNotNull(string0);
      assertEquals("{789~ Wf>]Fxko", string0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("sgd,0", "sgd,0", 91);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("sgd,0");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {115, 127, 103, 100, 44, 48}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 91);
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("OD{M#>B!#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "OD{M#>B!#", "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                   OD{M#>B!#", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "GJIj)q!cgR,MW}mN");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-72);
      String string2 = StringUtils.repeat('(', (int) (byte) (-75));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited("GJIj)q!cgR,MW}mN", 'T');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("GJIj)q!cgR,MW}mN", string3);
      
      String string4 = StringUtils.substringAfter((String) null, (int) (byte) (-75));
      assertNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, (int) (byte) (-75));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Ky%wY`x79o[.[5}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ';';
      boolean boolean0 = StringUtils.containsNone((CharSequence) ";z=|4X", charArray0);
      assertArrayEquals(new char[] {'\u0000', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.center(" ", 91, " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                           ", string1);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.center("#3;,r[/[le", 100, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match#3;,r[/[leSearch and Replace array lengths don't match:", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match#3;,r[/[leSearch and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match: ", 2947);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ", (-713));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("PI+z(4$x", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("PI+z(4$x", string0);
      
      boolean boolean0 = StringUtils.isBlank("PI+z(4$x");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("PI+z(4$x", "PI+z(4$x", "PI+z(4$x");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("PI+z(4$x", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)50;
      String string2 = StringUtils.join(byteArray0, 'g');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-55), (byte) (-82), (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("-11g-55g-82g50", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("qlM,:]F1");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("PI+z(4$x");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {80, 73, 43, 122, 40, 52, 36, 120}, intArray0);
      assertEquals(8, intArray0.length);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "-0]?5,<R#' k=|#r~In", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) ";z=|4X", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.leftPad(":c&w/\"%9.JWl", (-1821));
      assertNotNull(string0);
      assertEquals(":c&w/\"%9.JWl", string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("OD{M#>B!#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("OD{M#>B!#", 174);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                    OD{M#>B!#", string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "OD{M#>B!#", "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                   OD{M#>B!#", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("3zem");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", (-669), (-669));
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'o');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("}", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string2 = StringUtils.replaceOnce("f-Zo=LR{0u|M*4gRS", "}", "}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("f-Zo=LR{0u|M*4gRS", string2);
      
      String string3 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "f-Zo=LR{0u|M*4gRS", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (-669));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, 'o');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("RVOV01Q[j~\"Q4ys~\"(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.stripEnd("doPrivileged", "-8Jpb},<@h#@!k$qW$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("doPrivileged", string1);
      
      String string2 = StringUtils.abbreviate("doPrivileged", 76);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("doPrivileged", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" is not in the range '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", '>');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals(20, stringArray0.length);
      assertEquals("is", charSequence0);
      
      String string4 = StringUtils.unwrap("...", 'k');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("...", string4);
      
      String string5 = StringUtils.leftPad(" ", 93);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("                                                                                             ", string5);
      
      String string6 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-6), 'o');
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      
      String string7 = StringUtils.replaceFirst("                                                                                             ", "Uu@", "/");
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("                                                                                             ", string7);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(20, stringArray0.length);
      assertTrue(boolean1);
      
      String string8 = StringUtils.join((Object[]) stringArray0, 'x');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals(20, stringArray0.length);
      assertEquals(" xisx xnotx xinx xthex xrangex x'x0x'x x-x x'x9x'", string8);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'k';
      charArray0[2] = 'o';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'x', 'k', 'o'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.getIfBlank(" vs ", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = "...";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("...", supplier0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Collection<Locale> collection0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      int int0 = 0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.easymock.bytebuddy.description.NamedElement");
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.description.NamedElement", string0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String string0 = "9fu7]L";
      String string1 = StringUtils.deleteWhitespace("9fu7]L");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9fu7]L", string1);
      
      int int0 = 1846;
      int int1 = StringUtils.indexOf((CharSequence) "9fu7]L", 1846, 2630);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("9fu7]L", supplier0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9fu7]L", string2);
      
      String string3 = StringUtils.upperCase("9fu7]L");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9FU7]L", string3);
      
      String string4 = StringUtils.trimToNull("9FU7]L");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("9FU7]L", string4);
      
      String string5 = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string6 = "T&Il<\"AmeZk7v^";
      // Undeclared exception!
      try { 
        Charset.forName("T&Il<\"AmeZk7v^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // T&Il<\"AmeZk7v^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeIgnoreCase("j3}_,D%g1!!d'%tn", "3R\"Xwf@Pu?mUi0:U");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j3}_,D%g1!!d'%tn", string1);
      
      String string2 = StringUtils.stripEnd("j3}_,D%g1!!d'%tn", "6bPSSZ ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j3}_,D%g1!!d'%tn", string2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("j3}_,D%g1!!d'%tn"));
      
      boolean boolean0 = linkedList0.add("}*5~SJ_pQ `");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("j3}_,D%g1!!d'%tn"));
      assertTrue(linkedList0.contains("}*5~SJ_pQ `"));
      assertTrue(boolean0);
      
      String string3 = StringUtils.getDigits("}*5~SJ_pQ `");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("5", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.wrapIfMissing("j3}_,D%g1!!d'%tn", " from static ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" from static j3}_,D%g1!!d'%tn from static ", string4);
      
      String string5 = StringUtils.substring("&%bB_o<", (-249), 16);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("&%bB_o<", string5);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("&%bB_o<");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "j3}_,D%g1!!d'%tn";
      String string6 = StringUtils.join(objectArray0, 'D');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      assertEquals("j3}_,D%g1!!d'%tn", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6bPSSZ ", (CharSequence) "", 1322);
      assertEquals(7, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "&%bB_o<", 'c');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`JeV<I0,V8C[|-|", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.strip("!1#dr", "mtruo8l");
      assertNotNull(string0);
      assertEquals("!1#d", string0);
      
      String string1 = StringUtils.mid("Threshold must not be negative", (-1118), 76);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Threshold must not be negative", (CharSequence) "!1#d", 2090);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Locale must not be null", "{index}", "Locale must not be null");
      assertNotNull(string0);
      assertEquals("Locall must cot bl cull", string0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("g _F_O#OILT^N^-", "Execution of '%s' took [%d] ms.", false);
      assertEquals(34, int0);
      
      String string1 = StringUtils.unwrap("Execution of '%s' took [%d] ms.", "7nnNXkT[a[^d:rb 0=");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Execution of '%s' took [%d] ms.", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "]gKF1O", (CharSequence) "Execution of '%s' took [%d] ms.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("&vB", "kck6@ }|");
      assertNotNull(string0);
      assertEquals("&vB", string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 56);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.rotate("ks/f", (-1770));
      assertNotNull(string0);
      assertEquals("/fks", string0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'w');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("Threshold m", " from static ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" from static Threshold m from static ", string2);
      
      String string3 = StringUtils.substring("%O6IsM~;F0j", (-249), (-1439));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("%O6IsM~;F0j");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.join(charArray0, 'w', 48, (-3243));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((Object[]) null, "be negative", (-249), 1);
      assertNull(string5);
      
      String string6 = StringUtils.substringBetween("", "Threshold m", "");
      assertNull(string6);
      
      String string7 = StringUtils.abbreviate((String) null, "-i>NE#PT5i#8qRV+q", (-249));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith(" ", objectArray0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String string0 = StringUtils.rotate("IF_ANNOTATED", 178);
      assertNotNull(string0);
      assertEquals("_ANNOTATEDIF", string0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.mid("L", 967, 967);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.mid("]gKF1O", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("]gKF1O", string1);
      
      String string2 = StringUtils.lowerCase("=4");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=4", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "]gKF1O");
      assertEquals(6, int0);
      
      String string3 = StringUtils.substringAfter("-pSxd\"]Z~bb|", (-3109));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("]gKF1O"));
      
      Vector<String> vector0 = new Vector<String>(treeSet0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(treeSet0.contains("]gKF1O"));
      assertFalse(vector0.contains("]gKF1O"));
      
      String string4 = StringUtils.join((Iterable<?>) vector0, "2!h0U>");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(treeSet0.contains("]gKF1O"));
      assertFalse(vector0.contains("]gKF1O"));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.replaceChars("p0uKU", "Cannot cache the value of an abstract method: ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("p0KU", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("p0KU", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]^Y{?]MLU2$vKQ", "Failed to assert access rights using security manager");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Failed to assert access rights using security manager", "5%$Qm`[8@4%", "5%$Qm`[8@4%");
      assertNotNull(string0);
      assertEquals("Failed to assert access rights using security manager", string0);
      
      String string1 = StringUtils.substring("Failed to assert access rights using security manager", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to assert access rights using security manager", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5%$Qm`[8@4%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("Failed to assert access rights using security manager", 0, 2285);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to assert access rights using security manager", string2);
      
      String string3 = StringUtils.capitalize("Failed to assert access rights using security manager");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Failed to assert access rights using security manager", string3);
      
      String string4 = StringUtils.removeFirst("Failed to assert access rights using security manager", "d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Faile to assert access rights using security manager", string4);
      
      boolean boolean1 = StringUtils.isAlpha("]^Y{?]MLU2$vKQ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripToEmpty("Failed to assert access rights using security manager");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("Failed to assert access rights using security manager", string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Failed to assert access rights using security manager", (CharSequence) "5%$Qm`[8@4%");
      assertEquals(0, int0);
      
      String string6 = StringUtils.replaceAll("Failed to assert access rights using security manager", "]NNSYyEs!;Ro-^H", "Failed to assert access rights using security manager");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("Failed to assert access rights using security manager", string6);
      
      String string7 = StringUtils.substring("($i? vgnIo.xme", 200, (-1009));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "d", (CharSequence) "`)gIX:r*0^5XEo5?4sU");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("tdO}QVV,", "tdO}QVV,", 114);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = linkedList0.add("6.0=4");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("6.0=4"));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("Locale must not be null");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.wrapIfMissing("Locale must not be null", " from static ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" from static Locale must not be null from static ", string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" from static ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " from static ";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = object0;
      String string5 = StringUtils.join(objectArray0, '6');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " from static 66[6.0=4]666java.lang.Object@66e01e85", (CharSequence) " from static ", 25);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '!');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">", (CharSequence) ">", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "]gKF1O", (-2385));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("]gKF1O", "]gKF1O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "", "");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank("]gKF1O");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("hQC?<]>d:bC=&)1", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hQC?<]>d:bC=&)1", string1);
      
      Vector<Object> vector0 = new Vector<Object>(3111, 108);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(3111, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("Object varargs must not be null"));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1263);
      shortArray0[3] = (short) (-1263);
      shortArray0[4] = (short) (-1263);
      shortArray0[5] = (short)0;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "hQC?<]>d:bC=&)1", (CharSequence) "]gKF1O", Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Object varargs must not be null", (CharSequence) "#Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("yt", "\r");
      assertNotNull(string0);
      assertEquals("yt", string0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "[oiO,i[='k", '0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1954), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", (int) 'n', 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringAfter("", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.strip("", "~R%>=&GSq,_");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string7 = StringUtils.replaceChars("~R%>=&GSq,_", 'V', 'V');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("~R%>=&GSq,_", string7);
      
      charSequenceArray0[7] = (CharSequence) "~R%>=&GSq,_";
      String string8 = StringUtils.substringAfterLast("", 1155);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      charSequenceArray0[8] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string8));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("~R%>=&GSq,_", charSequence0);
      
      boolean boolean0 = StringUtils.isBlank("~R%>=&GSq,_");
      assertFalse(boolean0);
      
      String string9 = StringUtils.prependIfMissingIgnoreCase("", "~R%>=&GSq,_", charSequenceArray0);
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)charSequence0));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.overlay("", "NEVER", 160, 30);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NEVER", string1);
      
      String string2 = StringUtils.defaultIfBlank("[bc/'4Kmxy4wO", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[bc/'4Kmxy4wO", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.substringBetween("", "u8.r%V60G5j6D1fr#", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, "KmWaoMNh%v+ib,yydm");
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("KmWaoMNh%v+ib,yydm", "NEVER", stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(0, stringArray0.length);
      assertEquals("NEVERKmWaoMNh%v+ib,yydm", string5);
      
      String string6 = StringUtils.strip("-5hlt}8)=)");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("-5hlt}8)=)", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "-5hlt}8)=)", (CharSequence) "[bc/'4Kmxy4wO", 160);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.abbreviate("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", 16, 398);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", string7);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", "org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", stringArray0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(0, stringArray0.length);
      assertEquals("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", string8);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "-5hlt}8)=)";
      charSequenceArray0[1] = (CharSequence) "org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler";
      charSequenceArray0[2] = (CharSequence) "NEVER";
      charSequenceArray0[3] = (CharSequence) "NEVER";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "?vv=L%SGJf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "?vv=L%SGJf", (-350));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween("~Fc2)S?r]a8mPY@qm", "?vv=L%SGJf");
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase("?vv=L%SGJf");
      assertNotNull(string1);
      assertEquals("?vv=l%sgjf", string1);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'B');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("\"c.!<el@9 <wfsf|)u");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "9");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("B;dK:@");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.defaultIfBlank("", "B;dK:@");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("B;dK:@", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("B;dK:@", "swdfzv-KS7xdO");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string5 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals("B;dK:@", string5);
      
      String string6 = StringUtils.upperCase("6AAYRa", (Locale) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("6AAYRA", string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("9", "9", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals("9", string7);
      
      boolean boolean0 = StringUtils.equalsAny("B;dK:@", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertTrue(boolean0);
      
      String[] stringArray2 = StringUtils.split("", 'f');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      String string8 = StringUtils.prependIfMissing("Lj#ZcxY", "B;dK:@", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertEquals("B;dK:@Lj#ZcxY", string8);
      
      String string9 = StringUtils.right("g", (-1));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("", string9);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "9", (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("=KIiK$~7?v", (String) null);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", (-963));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "pp_'*'Re80rJI", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("pp_'*'Re80rJIAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Search and Replace array lengths don't match: ", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.overlay("", "}", 938, 938);
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.defaultIfBlank("NMH?Pr;i%].a|MO=4", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NMH?Pr;i%].a|MO=4", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("}", "NMH?Pr;i%].a|MO=4");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.deleteWhitespace("G5`~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("}");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "G5`~", charArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.unwrap("", "G5`~");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-658));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.mid("Search and Replace array lengths don't match: ", (-143), 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Search and Re", string2);
      
      int int0 = 127;
      // Undeclared exception!
      try { 
        StringUtils.truncate("Search and Re", (-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.remove(")`", 'z');
      assertNotNull(string0);
      assertEquals(")`", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissingIgnoreCase("", ")`", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(")`", string1);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.unwrap("l{DH[E`r,+L78yl)", "l{DH[E`r,+L78yl)");
      assertNotNull(string0);
      assertEquals("l{DH[E`r,+L78yl)", string0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[3] = (CharSequence) "J";
      String string0 = StringUtils.prependIfMissing("J", "J", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("J", string0);
      
      charSequenceArray0[0] = (CharSequence) "J";
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(18, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J", (CharSequence) "J");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("J", "s$De");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J", string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "s$De", charSequenceArray0[3]);
      assertTrue(int1 == int0);
      assertEquals(18, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("1*HM", "1*HM");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",", "$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",$6\",", string0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("D", "D");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("k7org.easymock.bytebuddy.asm.Advice$AssignReturned$ExceptionHandler", "k7org.easymock.bytebuddy.asm.Advice$AssignReturned$ExceptionHandler", 101);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("v<dP:", "v<dP:");
      assertNotNull(string0);
      assertEquals("v<dP:", string0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("}", "}");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[2] = 'h';
      charArray0[3] = 'g';
      charArray0[4] = 'p';
      String string0 = StringUtils.join(charArray0, '}');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'p', '\u0000', 'h', 'g', 'p'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("p}\u0000}h}g}p", string0);
      
      String string1 = StringUtils.reverse("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((short[]) null, 'g');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "p}\u0000}h}g}p", 59, 686);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("0.0", string0);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "0.0", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("0.0", charSequence0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String string0 = StringUtils.leftPad("nk-", 365, "-");
      assertNotNull(string0);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "nk-";
      String string1 = StringUtils.joinWith("nk-", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
      assertEquals("nk-nk-nk-nk-", string1);
      
      String string2 = StringUtils.difference("nk-", "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", string2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 365;
      intArray0[1] = 365;
      intArray0[2] = 365;
      intArray0[3] = 365;
      String string3 = StringUtils.unwrap("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk-", "-");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------nk", string3);
      
      boolean boolean0 = StringUtils.isNotEmpty("nk-");
      assertTrue(boolean0);
      
      String string4 = StringUtils.upperCase("N3[nf$&0ws");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("N3[NF$&0WS", string4);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String string0 = StringUtils.removeAll("`C#Y", "Cannot cache the value of an abstract method: ");
      assertNotNull(string0);
      assertEquals("`C#Y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "`C#Y", (CharSequence) "`C#Y");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("`C#Y", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "`C#Y";
      String string1 = StringUtils.prependIfMissingIgnoreCase("x8=:6)\".qXDMb", "`C#Y", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("`C#Yx8=:6)\".qXDMb", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`C#Y", (CharSequence) "`C#Yx8=:6)\".qXDMb");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("`C#Y", "Cannot cache the value of an abstract method: ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("`C#Y", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", (String) null, "`C#Y");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", supplier0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", string5);
      
      String string6 = StringUtils.deleteWhitespace("`C#Y");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("`C#Y", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Lpin", "vUHKBJ\"sK+cu6C");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("`C#Y", "x8=:6)\".qXDMb");
      assertFalse(boolean0);
      
      String string7 = StringUtils.toRootUpperCase("vUHKBJ\"sK+cu6C");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("VUHKBJ\"SK+CU6C", string7);
      
      int int1 = StringUtils.ordinalIndexOf("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", "VUHKBJ\"SK+CU6C", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("`C#Y"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("`C#Y"));
      
      String string8 = StringUtils.join((Iterator<?>) listIterator0, 'y');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("`C#Y"));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("&hD(vDSpVcbB");
      assertNotNull(string0);
      assertEquals("&HD(VDSPVCBB", string0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String string0 = StringUtils.stripEnd("]gKF1O", "Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("]gKF1O", string0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '\u0004');
      assertNotNull(string0);
      assertEquals("\u0004O\u0004", string0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.stripEnd("qI_kd;q", "qI_kd;q");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("tBzB:oo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " resource factory key>", " resource factory key>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.removeEnd("}", "}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("}", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String string0 = StringUtils.leftPad("114.0S0.0S114.0S114.0S-895.0S6.0=4", 17, 'K');
      assertNotNull(string0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "114.0S0.0S114.0S114.0S-895.0S6.0=4", (CharSequence) "114.0S0.0S114.0S114.0S-895.0S6.0=4");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("matches '%s'.", "kuM4]W=^p%,XlDG5Fb36.0T107.0T107.0T107.0T29.0T107.0T0.0T36.0T107.0", true);
      assertEquals(2, int0);
      
      String string1 = StringUtils.rightPad("K-nsX.CTNW", 17);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("K-nsX.CTNW       ", string1);
      
      Locale locale0 = new Locale("?Ik*#.J1g;=_SG4{0v", "114.0S0.0S114.0S114.0S-895.0S6.0=4", "2j!Ws-8qvf,2{_|s3?");
      assertNotNull(locale0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(boolean1 == boolean0);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertFalse(boolean1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale0.getCountry());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale0.toString());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale0.getLanguage());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale0.getVariant());
      assertEquals("114.0S0.0S114.0S114.0S-895.0S6.0=4", locale1.getCountry());
      assertEquals("2j!Ws-8qvf,2{_|s3?", locale1.getVariant());
      assertEquals("?ik*#.j1g;=_sg4{0v", locale1.getLanguage());
      assertEquals("?ik*#.j1g;=_sg4{0v_114.0S0.0S114.0S114.0S-895.0S6.0=4_2j!Ws-8qvf,2{_|s3?", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '=';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = ')';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "K-nsX.CTNW      ", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'K', '=', 'K', 'K', 'K', ')', 'K', 'K'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(1, int1);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j";
      String string2 = StringUtils.appendIfMissingIgnoreCase("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", " AU=(QUO7)`B+'}#%O6ISM~;F0J", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM AU=(QUO7)`B+'}#%O6ISM~;F0J", string2);
      
      String string3 = StringUtils.lowerCase("#Q");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("#q", string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.repeat('M', (int) 'M');
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (CharSequence) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertEquals(1, int0);
      
      String string1 = StringUtils.upperCase(" au=(Quo7)`B+'}#%O6IsM~;F0j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" AU=(QUO7)`B+'}#%O6ISM~;F0J", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " au=(Quo7)`B+'}#%O6IsM~;F0j";
      String string2 = StringUtils.defaultIfBlank("'XOUk}GT&])l[", "Minimum abbreviation width is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("'XOUk}GT&])l[", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Testmarkedas'expectedtofail'succeeded;remove@ExpectedToFailfromit", string3);
      
      boolean boolean0 = StringUtils.isWhitespace("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "NMH?Pr;i%].a|MO=4", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'M', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String string0 = StringUtils.overlay("", "P3SN7f+a?.L", 938, 938);
      assertNotNull(string0);
      assertEquals("P3SN7f+a?.L", string0);
      
      String string1 = StringUtils.defaultIfBlank("NMH?Pr;i%].a|MO=4", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NMH?Pr;i%].a|MO=4", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("P3SN7f+a?.L", "NMH?Pr;i%].a|MO=4");
      assertEquals(0.45, double0, 0.01);
      
      String string2 = StringUtils.deleteWhitespace("G5`~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("P3SN7f+a?.L");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.45;
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) '\"';
      doubleArray0[4] = (double) 938;
      doubleArray0[5] = (double) 76;
      doubleArray0[6] = (double) 938;
      doubleArray0[7] = (double) 938;
      doubleArray0[8] = (double) 5;
      String string3 = StringUtils.join(doubleArray0, 'z', (-799), (-799));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new double[] {0.45, 76.0, 5.0, 34.0, 938.0, 76.0, 938.0, 938.0, 5.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("", string3);
      
      int int0 = StringUtils.compareIgnoreCase("G5`~", " declares less then ");
      assertEquals(71, int0);
      
      String string4 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("`_(Hl");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("`_(hL", string5);
      
      boolean boolean1 = StringUtils.endsWith("NMH?Pr;i%].a|MO=4", "NMH?Pr;i%].a|MO=4");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" @?M/[f(", "K.i");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("vUHKBJ\"sK+cu6C", "Search and Replace array lengths don't match: ", "kLqj[wg66@3swv0*05{");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank("/Wq");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((long[]) null, '1');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.leftPad("...", 6378, (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("a8K/W.JX;I`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8", string1);
      
      String string2 = StringUtils.normalizeSpace(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(6378));
      
      String string3 = StringUtils.join((List<?>) stack0, "...", 6378, 6378);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("..."));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("G5`~");
      assertNotNull(string1);
      assertEquals("5", string1);
      
      String string2 = StringUtils.defaultIfBlank("8.pF!?1f", "&");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("8.pF!?1f", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) null, '=');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.repeat('M', 2037);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-222L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'M';
      String string1 = StringUtils.join(longArray0, 'F');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new long[] {(-222L), 1L, 77L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("-222F1F77", string1);
      
      String string2 = StringUtils.normalizeSpace("B*E16eU");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("B*E16eU", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "B*E16eU";
      stringArray0[2] = "-222F1F77";
      stringArray0[3] = "-222F1F77";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      String string3 = StringUtils.firstNonEmpty(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals("B*E16eU", string3);
      
      String[] stringArray2 = StringUtils.split("", 'F');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{", "@${ ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.difference("Display nme %s %s", "Display nme %s %s");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("4OZ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4OZ", string1);
      
      long[] longArray0 = new long[1];
      String string2 = StringUtils.join(longArray0, 'i');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "0", (CharSequence) "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '2', 16, 1768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replacePattern("", "7,", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("", (-1949), 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviate("", (int) 'n', 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.strip("", "7,");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.capitalize("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.split("7,", 'S');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.normalizeSpace(stringArray0[3]);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'E', 98, 98);
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 's');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("Object varargs must not be null", "j3T{-");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart("Object varargs must not be null", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      
      String string3 = StringUtils.leftPad("", 1081);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.remove("+B", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("+B", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "+B", 160);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("p<q", "p<q", "p<q");
      assertNull(stringArray0);
      
      String string0 = StringUtils.chomp("p<q", "p<q");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "w");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = "\"Yi:{s";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("\"Yi:{s", "\"Yi:{s");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // \"Yi:{s
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-8Jpb},<@h#@!k$qW$", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '%');
      assertNotNull(string0);
      assertEquals("%O%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "O";
      charSequenceArray0[7] = (CharSequence) null;
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "O", charSequenceArray0);
      assertNull(string2);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = "^yt9N~";
      String string1 = StringUtils.difference("^yt9N~", "^yt9N~");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("^yt9N~", "n]\f", locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals(1, int0);
      
      String string2 = locale1.getDisplayVariant(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("icalMarks}+", "icalMarks}+", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("Search and Replace array lengths don't match: ", "\n", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.repeat("S!", 108);
      assertNotNull(string0);
      assertEquals("S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!", string0);
      
      String string1 = StringUtils.difference("t", "S!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("S!", string1);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfterLast("S!", 1721);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removePattern("ejcE", "S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!S!");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ejcE", string3);
      
      String string4 = StringUtils.center((String) null, (-954), 'j');
      assertNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '&');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("&&&&&&&", string5);
      
      String string6 = StringUtils.repeat("t", 108);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("S!", (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]+myT+7Ct6d8<eJ", "]+myT+7Ct6d8<eJ", 91);
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("A;m2R7@r;W0la.", "A;m2R7@r;W0la.", locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String string0 = StringUtils.removeAll("|'*,&f8Jt", "|'*,&f8Jt");
      assertNotNull(string0);
      assertEquals("|'*", string0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("}", "}", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("}", string0);
      
      String string1 = StringUtils.stripEnd("}", "}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "}", "}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(""));
      assertFalse(list0.contains(""));
      
      int int0 = StringUtils.getFuzzyDistance("", charSequenceArray0[0], locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(boolean0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      String string1 = locale1.getScript();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("\u97D3\u6587", string2);
      
      String string3 = "\r";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("UAy((i-d", "UAy((i-d");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // UAy((i-d
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'S');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.overlay("', has a length less than 2", "', has a length less than 2", (-3057), 3);
      assertNotNull(string0);
      assertEquals("', has a length less than 2has a length less than 2", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("', has a length less than 2has a length less than 2", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "', has a length less than 2has a length less than 2");
      assertNotNull(charBuffer0);
      assertEquals(51, charBuffer0.remaining());
      assertEquals(51, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("', has a length less than 2has a length less than 2", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(51, charBuffer0.limit());
      assertEquals(51, charBuffer0.length());
      
      boolean boolean1 = StringUtils.isMixedCase("', has a length less than 2has a length less than 2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrapIfMissing("jM(Pm5mR ", '.');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".jM(Pm5mR .", string1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '.', (-345), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -345
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '>');
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)8192;
      short short0 = (short) (-1);
      shortArray0[2] = (short) (-1);
      char char0 = 'm';
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.substringBefore("@", "-K`tbe");
      assertNotNull(string0);
      assertEquals("@", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.removeFirst("nk- ", "nk- ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[0], "");
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '+');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Display nme %s %s", "Display nme %s %s", "wF");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("wF", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("wF", string0);
      
      boolean boolean0 = StringUtils.isNumeric("wF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("GX7}OjlfE|L_#f;F~", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("GX7}OjlfE|L_#f;F~", string0);
      
      boolean boolean0 = StringUtils.isNumeric(stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.strip("GM", "GM");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "vz");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("vz", "vz");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1220.569F);
      floatArray0[1] = 1723.05F;
      floatArray0[2] = 2705.85F;
      floatArray0[3] = (-1616.1832F);
      String string2 = StringUtils.join(floatArray0, 'g', 5, 5);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-1220.569F), 1723.05F, 2705.85F, (-1616.1832F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (-1616.1832F);
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 1723.05F;
      doubleArray0[5] = (double) (-1220.569F);
      String string3 = StringUtils.join(doubleArray0, 'g', 0, 0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new double[] {103.0, 5.0, (-1616.1832275390625), 103.0, 1723.050048828125, (-1220.5689697265625)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.swapCase("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byte byte0 = (byte)3;
      byteArray0[1] = (byte)3;
      byte byte1 = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-6);
      byte byte2 = (byte)73;
      byteArray0[7] = (byte)73;
      String string0 = "";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.upperCase("Not a valid bootstrap method ");
      assertNotNull(string0);
      assertEquals("NOT A VALID BOOTSTRAP METHOD ", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "NOT A VALID BOOTSTRAP METHOD ", (CharSequence[]) stringArray0);
      assertEquals(14, stringArray0.length);
      assertEquals(3, int0);
      
      int int1 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: ", "Minimum abbreviation width with offset is %d", 307);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("Not a valid bootstrap method "));
      
      String string1 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Call proxy for ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Minimumbbevitinwidthwithsetis%d", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Call proxy for ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("t1jy)gFHc[+X Yu[W7", "Timeout for vintage @Test must be positive.", (-658));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "NOT A VALID BOOTSTRAP METHOD ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("igHbx,+B", 'm');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("igHbx,+B", string3);
      
      String string4 = StringUtils.substringAfter("fM", "{!p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", "&:Rd@] does not exist");
      assertEquals(0, int0);
      
      String string1 = StringUtils.upperCase("&:Rd@] does not exist");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&:RD@] DOES NOT EXIST", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "&:Rd@] does not exist", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("org.easymock.bytebuddy.createJavaDispatcher", 0, "'v*^l");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.easymock.bytebuddy.createJavaDispatcher", string3);
      
      int int2 = StringUtils.compare("org.apache.commons.lang3.StringUtils", "org.easymock.bytebuddy.createJavaDispatcher");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-4), int2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertSame(charset1, charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-1);
      String string0 = StringUtils.replace("'JJe']lP7O;P}N4,_^", "'JJe']lP7O;P}N4,_^", (String) null, 93);
      assertNotNull(string0);
      assertEquals("'JJe']lP7O;P}N4,_^", string0);
      
      String string1 = StringUtils.substringAfter("l", "cvZ^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "'JJe']lP7O;P}N4,_^");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceAll("2f=nbM F#*Db", "\u0000", "*Nu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("2f=nbM F#*Db", string2);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "7M}Jwn1>_.m", 0, 0);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "Object varargs must not be null");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.upperCase("7M}Jwn1>_.m");
      assertNotNull(string1);
      assertEquals("7M}JWN1>_.M", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "7M}JWN1>_.M";
      int int2 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.removeStartIgnoreCase("2_Sn", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2_Sn", string2);
      
      String string3 = StringUtils.rightPad((String) null, (-5280), "");
      assertNull(string3);
      
      int int3 = StringUtils.compare("8s:Q^jl", (String) null);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ":p4P0>");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[2] = ';';
      charArray0[3] = ';';
      String string1 = StringUtils.join(charArray0, ';');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {';', 'f', ';', ';'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(";;f;;;;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", ",?n", ":p4P0>", (-862));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.defaultString("Failed to assert access rights using security manager", "9PJs");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Failed to assert access rights using security manager", string3);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.replace("zg?Ird?}UIf0Q|", "zg?Ird?}UIf0Q|", "I/`b]\"pH", 52);
      assertNotNull(string0);
      assertEquals("I/`b]\"pH", string0);
      
      boolean boolean0 = StringUtils.endsWith("zg?Ird?}UIf0Q|", "I/`b]\"pH");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '8';
      charArray0[2] = 'j';
      charArray0[3] = '.';
      charArray0[4] = '$';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "zg?Ird?}UIf0Q|", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'v', '8', 'j', '.', '$'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("", 'A');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" is not visible to ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd(" is not visible to ", " is not visible to ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) " is not visible to ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("p<q");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "p<q", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.leftPad("BOrX(", 0, 'r');
      assertNotNull(string0);
      assertEquals("BOrX(", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "BOrX(", (CharSequence) "BOrX(");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("ox7Nu`KW/Hl}*4y", "ox7Nu`KW/Hl}*4y", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("8", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8", string1);
      
      Locale locale0 = new Locale("BOrX(", "Minimum abbreviation width with offset is %d", "maxWith cannot be negative");
      assertNotNull(locale0);
      assertEquals("borx(_MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D_maxWith cannot be negative", locale0.toString());
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", locale0.getCountry());
      assertEquals("maxWith cannot be negative", locale0.getVariant());
      assertEquals("borx(", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("borx(_MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D_maxWith cannot be negative", locale0.toString());
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", locale0.getCountry());
      assertEquals("maxWith cannot be negative", locale0.getVariant());
      assertEquals("borx(", locale0.getLanguage());
      assertEquals("borx(_MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D_maxWith cannot be negative", locale1.toString());
      assertEquals("borx(", locale1.getLanguage());
      assertEquals("maxWith cannot be negative", locale1.getVariant());
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int1 = StringUtils.getFuzzyDistance("BOrX(", "BOrX(", locale0);
      assertFalse(int1 == int0);
      assertEquals("borx(_MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D_maxWith cannot be negative", locale0.toString());
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", locale0.getCountry());
      assertEquals("maxWith cannot be negative", locale0.getVariant());
      assertEquals("borx(", locale0.getLanguage());
      assertSame(locale0, locale1);
      assertEquals(13, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "BOrX(";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot be negative";
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, '8');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[6] = (CharSequence) "BOrX(";
      charSequenceArray0[7] = (CharSequence) "8";
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      int int2 = StringUtils.indexOfAny((CharSequence) "ox7Nu`KW/Hl}*4y", charSequenceArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String string0 = StringUtils.stripToNull("=~`_-WY+T1+NHe}_)");
      assertNotNull(string0);
      assertEquals("=~`_-WY+T1+NHe}_)", string0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.stripToNull("\r");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("", "[!c");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceIgnoreCase("[!c", "[!c", ">?'I4/RO,=EI&jm!");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">?'I4/RO,=EI&jm!", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-22), (byte) (-55), (byte)0, (byte)32, (byte) (-73), (byte)9, (byte)3, (byte)0}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(9, byteArray0.length);
      assertEquals(";\uFFFD\uFFFD\u0000 \uFFFD\t\u0003\u0000", string3);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("ReportEntry");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("", "ACCESS_CONTROLLER");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceIgnoreCase("ACCESS_CONTROLLER", "ACCESS_CONTROLLER", ">?'I4/RO,=EI&jm!");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(">?'I4/RO,=EI&jm!", string2);
      
      boolean boolean2 = StringUtils.isNotBlank("ACCESS_CONTROLLER");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.swapCase("Ngq[|^W<ov9C=");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("nGQ[|^w<OV9c=", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) ">?'I4/RO,=EI&jm!", (CharSequence) "ACCESS_CONTROLLER");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      String string0 = StringUtils.remove("doPrivileged", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertNotNull(string0);
      assertEquals("doPrivileged", string0);
      
      String string1 = StringUtils.overlay("G5`~", "maxWith cannot be negative", 160, 938);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("G5`~maxWith cannot be negative", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "G5`~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("G5`~", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("G5`~", "doPrivileged");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("]W}JE,");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("]W}JE,", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 938;
      longArray0[3] = (long) 938;
      longArray0[4] = (long) 938;
      String string4 = StringUtils.join(longArray0, '$');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new long[] {160L, 160L, 938L, 938L, 938L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("160$160$938$938$938", string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string6 = StringUtils.firstNonEmpty(stringArray1);
      assertNull(string6);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("`", 'R');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = '$';
      charArray0[6] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "doPrivileged", charArray0);
      assertArrayEquals(new char[] {'$', 'R', 'R', 'R', 'R', '$', 'R'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("0>2`e", "}", "}");
      assertNotNull(string0);
      assertEquals("0>2`e", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.trim("?");
      assertNotNull(string0);
      assertEquals("?", string0);
      
      String string1 = StringUtils.difference("?", "?");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("?");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("?", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "?", (CharSequence) "", 8);
      assertEquals(1, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("?", "?");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isWhitespace("?");
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip("A\"mN", "A\"mN");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("?", "?", "bindingMechanic");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("bindingMechanic", string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("bindingMechanic");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.removeEnd("HgT}H4rY", "[");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("HgT}H4rY", string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "A\"mN", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.repeat("?", 1);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("?", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "A\"mN";
      charSequenceArray0[1] = (CharSequence) "A\"mN";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "[";
      charSequenceArray0[4] = (CharSequence) "?";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "?";
      charSequenceArray0[7] = (CharSequence) "bindingMechanic";
      charSequenceArray0[8] = (CharSequence) "A\"mN";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.replaceChars("n@-", '#', 'i');
      assertNotNull(string0);
      assertEquals("n@-", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "n@-", "n@-");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n@-");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "n@-");
      assertNull(string1);
      
      float[] floatArray0 = new float[0];
      int int1 = 91;
      String string2 = StringUtils.join(floatArray0, '#', 91, 0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string2);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("n@-"));
      
      String string3 = StringUtils.replaceIgnoreCase("^8", "^8", "Cffjk");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Cffjk", string3);
      
      String string4 = StringUtils.lowerCase("@%7>q[-mDGOJ3|8L");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("@%7>q[-mdgoj3|8l", string4);
      
      String string5 = StringUtils.replace("n@-", "4`DfG4f<X?9_v>IY", "NEjw<`T()0+^lY\"q", 0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("n@-", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "n@-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.stripAccents("v6@4mNEiA2%3UKT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.wrapIfMissing("", "Locale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[1], "v6@4mNEiA2%3UKT");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.left("v6@4mNEiA2%3UKT", 16);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd(" vs ", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" vs", string4);
      
      int int0 = StringUtils.lastIndexOfAny(" vs", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-2286));
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBeforeLast("?v=SL%GJf", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("?v=SL%GJf", string5);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 123);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)1;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("78z5'8REb~t nX3= <W-iN6", (String) null, 2);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.wrap("O", '\u0010');
      assertEquals("\u0010O\u0010", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      boolean boolean0 = StringUtils.isWhitespace("\u0010O\u0010");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0010O\u0010", "O");
      assertEquals(2, stringArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      StringUtils.join((List<?>) vector0, "\u0010O\u0010", (-1), (-1));
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("A\"mN");
      assertEquals(4, stringArray1.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "O", (CharSequence) "O", 8192);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      String string0 = StringUtils.repeat("", 108);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Threshold must not be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'w');
      String string1 = StringUtils.reverse("\u0000");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.join((short[]) null, 'f');
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.overlay("\u0000", "\r", 64, 2051);
      assertEquals("\u0000\r", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String string0 = "bg!m-}X\"oBJY19a#9";
      String string1 = StringUtils.replace((String) null, "bg!m-}X\"oBJY19a#9", "bg!m-}X\"oBJY19a#9");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("8Pyq", 82);
      assertEquals("8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq", string2);
      
      boolean boolean0 = StringUtils.isBlank("bg!m-}X\"oBJY19a#9");
      assertFalse(boolean0);
      
      String string3 = "ku&9DLDE1,!9f'^=(pu";
      String string4 = ":'7K(lT";
      String string5 = StringUtils.replaceAll(":'7K(lT", "8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq8Pyq", "ku&9DLDE1,!9f'^=(pu");
      assertEquals(":'7K(lT", string5);
      
      CharSequence[] charSequenceArray0 = null;
      String string6 = StringUtils.appendIfMissingIgnoreCase(string3, string4, charSequenceArray0);
      assertEquals("ku&9DLDE1,!9f'^=(pu:'7K(lT", string6);
      
      String string7 = StringUtils.lowerCase(string0);
      assertEquals("bg!m-}x\"objy19a#9", string7);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = "Cannot clear and set the following entries at the same time: ";
      String string1 = null;
      StringUtils.substringBetween("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ", (String) null);
      charSequenceArray0[0] = (CharSequence) null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = (-1236);
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '6', (-1236), 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1236
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      String string0 = StringUtils.prependIfMissing("g", "g", charSequenceArray0);
      StringUtils.lastIndexOf((CharSequence) "g", (CharSequence) "g");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      String string1 = StringUtils.replaceChars("g", "", "g");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string2 = StringUtils.join(objectArray0, "contains '%s'.", 0, 0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("g");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("nk");
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      String string3 = StringUtils.replaceFirst("Search and Replace array lengths don't match: ", "nN", "nk");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      StringUtils.isAnyBlank(stringArray0);
      String string4 = StringUtils.join((Object[]) stringArray0, '9');
      assertEquals("g9g9g9", string4);
      
      String string5 = StringUtils.rightPad("nN", 31, '=');
      assertEquals("nN============================", string5);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("1;pA{K", "h[w+:W^YDd;A$345T`(", (-1188));
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'm';
      String string0 = StringUtils.join(intArray0, 'm');
      assertEquals("109", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("109", 58);
      assertNotNull(string1);
      assertEquals("                                                       109", string1);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String string0 = StringUtils.chomp("G]uDT(i");
      assertEquals("G]uDT(i", string0);
      
      StringUtils.lastIndexOfAny("G]uDT(i", (CharSequence[]) null);
      int int0 = StringUtils.indexOfDifference((CharSequence) "G]uDT(i", (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("] does not exist", "&:Rd@");
      assertEquals("&:Rd@] does not exist&:Rd@", string1);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = "META-INF/net.bytebuddy/build.plugins";
      StringUtils.replace("META-INF/net.bytebuddy/build.plugins", "META-INF/net.bytebuddy/build.plugins", "META-INF/net.bytebuddy/build.plugins", (-1053));
      StringUtils.indexOf((CharSequence) "META-INF/net.bytebuddy/build.plugins", (-1053), 1194);
      Stack<String> stack0 = new Stack<String>();
      ListIterator<String> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, '}');
      StringUtils.join((int[]) null, '}');
      String string1 = "";
      String string2 = "Bwu`fC:mBI";
      // Undeclared exception!
      try { 
        stack0.remove((-1053));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1053
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Failed to assert access rights using security manager");
      assertEquals("failed to assert access rights using security manager", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'g';
      String string1 = StringUtils.join(longArray0, 'g');
      assertEquals("103", string1);
      
      String string2 = StringUtils.replaceOnce("{3[]u`%BsRr2J4M}E", "114.0", "Locale must not be null");
      assertEquals("{3[]u`%BsRr2J4M}E", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{3[]u`%BsRr2J4M}E", (CharSequence) "Failed to assert access rights using security manager");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("{3[]u`%BsRr2J4M}E", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, 2);
      assertEquals("{3[]u`%BsRr2J4M}E", string3);
      
      StringUtils.equalsIgnoreCase("{3[]u`%BsRr2J4M}E", "{3[]u`%BsRr2J4M}E");
      String string4 = StringUtils.abbreviateMiddle("@58Xs_UjWf;\fH|", "{3[]u`%BsRr2J4M}E", 3290);
      assertEquals("@58Xs_UjWf;\fH|", string4);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("N");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p<q", "p<q");
      boolean boolean0 = StringUtils.equalsAny("p<q", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.swapCase("p<q");
      assertEquals("P<Q", string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 964);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StringUtils.join((List<?>) linkedList0, '6', (int) '6', (int) '6');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("yt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.prependIfMissing("", "", charSequenceArray0);
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      String string1 = StringUtils.join((Iterable<?>) list0, "");
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("Cannot apply skip for ", "", "Cannot apply skip for ");
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.defaultIfBlank(" is not in the range '0' - '9'", "Z?A&b*qu+");
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Cannot apply skip for ", " is not in the range '0' - '9'");
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.upperCase("Cannot apply skip for ", locale0);
      assertNotNull(string4);
      
      StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "", stringArray0);
      boolean boolean0 = StringUtils.equalsAny("Z?A&b*qu+", stringArray0);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("", 'R');
      String string5 = StringUtils.prependIfMissing("Z?A&b*qu+", "Cannot apply skip for ", charSequenceArray0);
      assertEquals("Z?A&b*qu+", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "CANNOT APPLY SKIP FOR ", (CharSequence) "Cannot apply skip for ");
      assertTrue(int1 == int0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("", "Locale must not be null");
      assertSame(stringArray3, stringArray2);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Display nme %s %s");
      assertEquals("display nme %s %s", string0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "\r", "\r");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", 0);
      StringUtils.isBlank("");
      String string1 = "l*Wp#{<Uza8!C#";
      String string2 = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "l*Wp#{<Uza8!C#", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // l*Wp#{<Uza8!C#
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      StringUtils.substringsBetween("&:Rd@] does not exist", "&:Rd@] does not exist", "&:Rd@] does not exist");
      StringUtils.wrapIfMissing((String) null, (String) null);
      StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      StringUtils.join((Object[]) null, 't');
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      StringUtils.isAllLowerCase((CharSequence) null);
      StringUtils.split((String) null);
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.replaceFirst((String) null, "ownG5`~", "_,D%g1!!d'%tn");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAnyBlank(charSequenceArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'T', (-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Duplicate handler registration for ", (CharSequence) "Duplicate handler registration for ", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("1=oEKoOLhCO0jIF");
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      StringUtils.join((Object[]) null, '\\');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'Z');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("F!E.rZJ;L/", "F!E.rZJ;L/", 38);
      String string0 = StringUtils.wrapIfMissing("F!E.rZJ;L/", "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      assertEquals("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", string0);
      
      String string1 = StringUtils.repeat("wQTnm-X*HT[Gl", 38);
      assertEquals("wQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[GlwQTnm-X*HT[Gl", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "F!E.rZJ;L/", (CharSequence) "F!E.rZJ;L/", 33);
      assertEquals(0, int0);
      
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "F!E.rZJ;L/");
      vector0.add((Object) "wQTnm-X*HT[Gl");
      vector0.add((Object) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      Object object0 = new Object();
      vector0.add(object0);
      StringUtils.join((List<?>) vector0, "<B:@Cm0?Z01+U", 42, 0);
      String string2 = StringUtils.swapCase("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.F!E.rZJ;L/This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      assertEquals("tHIS TEST IS DISABLED UNTIL %S. iF EXECUTING IT ON THIS COMMIT WOULD FAIL, THE BUILD CAN'T BE REPRODUCED AFTER THAT DATE.f!e.Rzj;l/tHIS TEST IS DISABLED UNTIL %S. iF EXECUTING IT ON THIS COMMIT WOULD FAIL, THE BUILD CAN'T BE REPRODUCED AFTER THAT DATE.", string2);
      
      boolean boolean0 = StringUtils.startsWithAny("<B:@Cm0?Z01+U", stringArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertEquals(11, stringArray0.length);
      assertTrue(boolean1);
      
      StringUtils.valueOf((char[]) null);
      StringUtils.trimToNull("wQTnm-X*HT[Gl");
      String string3 = StringUtils.trimToNull("\"?5j)++JD##:");
      assertEquals("\"?5j)++JD##:", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(">&=@F", ">&=@F", ">&=@F");
      assertEquals(">&=@F", string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', (int) 'Q');
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "0>2`e", (CharSequence) "0>2`e");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "B9mhnZ}~@", (CharSequence) "B9mhnZ}~@", (-2487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      StringUtils.substringBetween("BOrX(", "wu55;SsA V$}06<A");
      String string0 = StringUtils.lowerCase("[ZN0'7{xJ,.s?\"7");
      assertNotNull(string0);
      assertEquals("[zn0'7{xj,.s?\"7", string0);
      
      String string1 = StringUtils.leftPad("wu55;SsA V$}06<A", 0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("wu55;SsA V$}06<A", string1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '*', 0, 0);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[zn0'7{xj,.s?\"7", (CharSequence) "", 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripEnd("\n", "BOrX(");
      assertEquals("\n", string3);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      StringUtils.substring("j3}_,D%g1!!d'%tn", 0, 0);
      StringUtils.stripEnd((String) null, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      char char0 = '6';
      StringUtils.substringBefore("6.0=4", (String) null);
      StringUtils.getDigits(")-I1Aa6u $@D");
      Object object0 = new Object();
      StringUtils.isAsciiPrintable("Locale must not be null");
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, '6');
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, (-2459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'b', (-472), (-277));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      StringUtils.join((long[]) null, 'r', (-895), (-895));
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 2056);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Object varargs must not be null", "Strings must not be null", "Object varargs must not be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(";z=|4X", (String) null, 122);
      assertEquals(";z=|4X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.trim("-0]z5,<R#' k=|#S~qn");
      assertEquals("-0]z5,<R#' k=|#S~qn", string0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'h');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      StringUtils.getIfBlank("Object varargs must not be null", (Supplier<String>) null);
      String string0 = StringUtils.repeat("", 677);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween((String) null, "");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Object varargs must not be null", ' ');
      StringUtils.trimToNull((String) null);
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.repeat('M', 2037);
      StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      String string1 = StringUtils.replaceFirst(string0, "9+", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(string0);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string0);
      
      String string1 = StringUtils.substringAfter("Illegal range. There's no way to get from %s to %s @ith a step of %s.", 102);
      assertEquals("rom %s to %s @ith a step of %s.", string1);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', '", 'Y');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String string0 = StringUtils.repeat('.', (-2632));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.valueOf((char[]) null);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.removeEnd((String) null, "ZY?jV");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.remove("J", "J");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String string0 = StringUtils.replace("w2:*b>.y;62-m|5Z/.", "w2:*b>.y;62-m|5Z/.", "w2:*b>.y;62-m|5Z/.");
      assertEquals("w2:*b>.y;62-m|5Z/.", string0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Display name '%s' %s", "Display name '%s' %s", 2443);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Display name '%s' %s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.LF;
      String string1 = StringUtils.reverseDelimited("\n", '&');
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) ">", (CharSequence) ">");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", (-1084));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '=');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ge;k\n>#v8eX*-L", "ge;k\n>#v8eX*-L");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("nN[iSsv#+E!/w", "nN[iSsv#+E!/w");
      String string0 = StringUtils.joinWith("nN[iSsv#+E!/w", stringArray0);
      assertNotNull(string0);
      assertEquals("nN[iSsv#+E!/w", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "V";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{:", "{:");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%O%#!;KZ&sZ`U}S=t\u0000";
      charSequenceArray0[1] = (CharSequence) "%O%#!;KZ&sZ`U}S=t\u0000";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.substringBetween("BOrX(", "wu55;SsA V$}06<A");
      StringUtils.lowerCase("[ZN0'7{xJ,.s?\"7");
      StringUtils.startsWith((CharSequence) null, charSequenceArray0[1]);
      StringUtils.lastIndexOf((CharSequence) null, 19, 9);
      String string0 = StringUtils.wrapIfMissing((String) null, "j3}_,D%g1!!d'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      StringUtils.indexOfDifference(charSequenceArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = ',';
      charArray0[2] = 'm';
      charArray0[3] = ',';
      charArray0[4] = 'G';
      charArray0[5] = 'p';
      charArray0[6] = 'q';
      String string0 = StringUtils.join(charArray0, 'K', 1665, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String string0 = StringUtils.upperCase("p:;");
      assertNotNull(string0);
      assertEquals("P:;", string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      StringUtils.wrap("O", '%');
      StringUtils.indexOfAny((CharSequence) "O", "O");
      StringUtils.isWhitespace("%O%");
      StringUtils.stripEnd("%O%", "O");
      String string0 = StringUtils.join((float[]) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "_]$``h7>M|lx:Ii", "XU>");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">", "Test '%s' was supposed to run no longer than %d ms.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String string0 = StringUtils.repeat("", 178);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 178);
      assertEquals(0, int0);
      
      StringUtils.splitByCharacterType((String) null);
      StringUtils.defaultIfEmpty("", "");
      String string1 = StringUtils.uncapitalize("ojI['ArwMf");
      assertEquals("ojI['ArwMf", string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.iterator();
      StringUtils.join(iterator0, '}');
      String string2 = StringUtils.replaceIgnoreCase("jKDEzYTk", "Threshold must not be negative", "%Hgg^oLQ");
      assertEquals("jKDEzYTk", string2);
      
      StringUtils.join((char[]) null, '(');
      String string3 = StringUtils.reverse("}}gE2\"n$HKHW'SD(");
      assertEquals("(DS'WHKH$n\"2Eg}}", string3);
      
      StringUtils.join((short[]) null, 'p');
      boolean boolean0 = StringUtils.equalsIgnoreCase("ojI['ArwMf", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      String string0 = StringUtils.join(charArray0, '\'');
      assertNotNull(string0);
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      StringUtils.chomp("\n");
      String string0 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "O", "O");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      StringUtils.substringBetween("Zn", "Zn");
      StringUtils.remove((String) null, 'B');
      String string0 = "$k?{&_}";
      char char0 = '3';
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = '3';
      charArray0[3] = 'B';
      charArray0[4] = '1';
      StringUtils.join(charArray0, 'B');
      String string1 = "bX$XL";
      Supplier<String> supplier0 = null;
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      StringUtils.getIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", (Supplier<String>) null);
      StringUtils.indexOfAny((CharSequence) null, charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "bX$XL", (-97), 3734);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '\'');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils.substring("j3}_,D%g1!!d'%tn", 19, 19);
      StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negative");
      assertEquals(8, stringArray0.length);
      
      StringUtils.getIfBlank("", (Supplier<String>) null);
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "X+@MT ?wrR9c:39n", (CharSequence) "X+@MT ?wrR9c:39n");
      assertTrue(boolean0);
      
      StringUtils.right("uZ+V$ F9eQB;", (-3269));
      String string1 = StringUtils.abbreviate("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "vSZ7", (-439), 12);
      assertEquals("org.junivSZ7", string1);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      StringUtils.toRootLowerCase("5!");
      StringUtils.isEmpty("5!");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      StringUtils.join(charArray0, '^');
      String string0 = "";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfBlank("", supplier0);
      StringUtils.indexOfAny((CharSequence) "5!", charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "5!", (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtils.join(booleanArray0, 'A', (int) 'A', (int) 'A');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("]gKF1O", "]gKF1O", charSequenceArray0);
      assertEquals("]gKF1O", string0);
      
      String string1 = StringUtils.lowerCase("=4");
      assertEquals("=4", string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("]gKF1O");
      boolean boolean2 = StringUtils.isAlphanumericSpace("=4");
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.swapCase("]gKF1O");
      assertEquals("]Gkf1o", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "]gKF1O", (CharSequence) "]Gkf1o");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtils.join(booleanArray0, 'W');
      assertNotNull(string0);
      assertEquals("false", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, 'A', 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String string0 = StringUtils.CR;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      StringUtils.splitByCharacterTypeCamelCase("?vv=L%SGJf");
      StringUtils.indexOfDifference((CharSequence) "?vv=L%SGJf", (CharSequence) "");
      StringUtils.indexOfAny((CharSequence) "", (String) null);
      StringUtils.splitByCharacterTypeCamelCase((String) null);
      String string0 = StringUtils.wrapIfMissing((String) null, "] does not exist");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String string0 = StringUtils.overlay("}", "}", (-764), (-764));
      assertEquals("}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("H~+0i<tFMd9dll8Y'");
      assertEquals("H~+0i<tFMd9dll8Y'", string0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      StringUtils.valueOf((char[]) null);
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 108);
      assertNull(stringArray0);
      
      StringUtils.replace("", (String) null, (String) null);
      String[] stringArray1 = StringUtils.split("", "kIw|\u0000hZz]q", (-2446));
      assertEquals(0, stringArray1.length);
      
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      StringUtils.repeat('$', (-3319));
      String string0 = StringUtils.reverseDelimited(" was expected to be static: ", 'T');
      assertEquals(" was expected to be static: ", string0);
      
      String string1 = StringUtils.substringAfter("", (-1));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      StringUtils.substringBetween("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ", (String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StringUtils.remove((String) null, 'A');
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, 't');
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Cannot clear and set the following entries at the same time: ", (-1236));
      assertEquals("Cannot clear and set the following entries at the same time: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, 2, '2');
      assertNull(string3);
      
      String string4 = StringUtils.replaceFirst("", (String) null, "LpU:b2");
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      String string0 = StringUtils.remove("O):6$", 'b');
      assertEquals("O):6$", string0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      StringUtils.join(booleanArray0, 'A', 0, 0);
      StringUtils.deleteWhitespace("");
      StringUtils.isWhitespace("");
      StringUtils.stripEnd("", "-");
      String string0 = StringUtils.join((float[]) null, '-');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      int int0 = StringUtils.lastIndexOfAny("?vv=L%SGJf", stringArray0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?vv=L%SGJf", 0);
      assertEquals(0, stringArray1.length);
      
      StringUtils.wrapIfMissing("", "17k)IMYtS=B'");
      StringUtils.substringBetween("", "O{c@9$of", "KmWaoMNh%v+ib,yydm");
      String string0 = StringUtils.wrapIfMissing("mE@CgC]", "metafactory");
      assertEquals("metafactorymE@CgC]metafactory", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("metafactory", "mE@CgC]", stringArray0);
      assertEquals("mE@CgC]metafactory", string1);
      
      StringUtils.indexOf((CharSequence) "mE@CgC]metafactory", (CharSequence) "mE@CgC]metafactory", 102);
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("mE@CgC]metafactory", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.abbreviate("er", 1258, 1258);
      assertEquals("er", string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.remove("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", '.');
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\" Please remove the annotation", string0);
      
      String string1 = StringUtils.defaultIfBlank("", " ");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.";
      charSequenceArray0[0] = (CharSequence) "G5`~";
      charSequenceArray0[2] = (CharSequence) " ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '.');
      assertEquals("G5`~.. ", string2);
      
      String string3 = StringUtils.rightPad(" ", 8192, 'F');
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("J_Q `");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("?vv=L%SGJf", "");
      int int0 = StringUtils.lastIndexOfAny("?vv=L%SGJf", stringArray0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?vv=L%SGJf", 0);
      String string0 = StringUtils.replaceEach(">{??.1010qU!%J)Mt", stringArray0, stringArray1);
      assertEquals(">{??.1010qU!%J)Mt", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("}");
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("}", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String string0 = StringUtils.difference("9N_^:FMey", "9N_^:FMey");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "yt", (-3886), (-3886));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      StringUtils.join(booleanArray0, 'A', 0, 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'A';
      String string0 = StringUtils.deleteWhitespace(" to be an annotation type");
      StringUtils.getLevenshteinDistance((CharSequence) "tobeanannotationtype", (CharSequence) " to be an annotation type");
      StringUtils.substringAfter("{`$lw5^#i;*R", 5);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Vector<String> vector0 = new Vector<String>(treeSet0);
      String string1 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.remove("Duplicate handler registration for ", 'r');
      assertEquals("Duplicate handle egistation fo ", string0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("5!");
      assertNotNull(string0);
      
      StringUtils.isEmpty("5!");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("5!", (String) null, 2832, 90);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("5!");
      assertEquals("5", string2);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("s the input of another");
      assertEquals("stheinputofanother", string0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("GX7}OjlfE|L_#f;F~", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = StringUtils.difference("ym|cI", "7O++kWgk]{tPBM3P");
      assertEquals("7O++kWgk]{tPBM3P", string0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.overlay("}", "}", 16, 16);
      assertEquals("}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("1?wC{_s)M0NN.l", "1?wC{_s)M0NN.l", "1?wC{_s)M0NN.l");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // 1?wC{_s)M0NN.l
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("{:", "{:");
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("{:", "{:");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {:
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.substringBetween("fZL-?%2t", "fZL-?%2t");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      String string0 = "h3GtDqwt\"`@(,of";
      StringUtils.substringBetween("h3GtDqwt\"`@(,of", "h3GtDqwt\"`@(,of");
      StringUtils.indexOf((CharSequence) null, (-670), 1054);
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("h3GtDqwt\"`@(,of", "h3GtDqwt\"`@(,of");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // h3GtDqwt\"`@(,of
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = null;
      StringUtils.replaceChars("", (String) null, "Wx,7T43V LDT*O|<_");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      StringUtils.difference("", "");
      String string0 = StringUtils.wrapIfMissing("", '1');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      String string0 = StringUtils.join(iterator0, 'R');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      String string0 = StringUtils.join(iterator0, 'u');
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      boolean boolean0 = StringUtils.isMixedCase(charBuffer0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", '.');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      StringUtils.lowerCase("l@kJ/GydR)");
      int int0 = StringUtils.lastOrdinalIndexOf("l@kJ/GydR)", "l@kj/gydr)", 1002);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing("-", "nk");
      assertEquals("nk-nk", string0);
      
      StringUtils.isAlphanumeric("nk-nk");
      boolean boolean0 = StringUtils.isAlpha("-");
      String string1 = StringUtils.replace("\n", "qzx V", "fd-NgMAO.", (-1));
      StringUtils.equalsIgnoreCase("fd-NgMAO.", "nk-nk");
      String string2 = StringUtils.abbreviateMiddle("\n", "l@kJ/GydR)", 321);
      assertTrue(string2.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "\n");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isWhitespace("l@kj/gydr)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("The character ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("5|VcJ1^", "");
      assertEquals("5|VcJ1^", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("5|VcJ1^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("!", "!");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Rt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_c", "Rt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_cRt_c");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.countMatches((CharSequence) stringArray0[0], (CharSequence) stringArray0[2]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 15);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("\n", "\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      StringUtils.rightPad((String) null, (-1240));
      StringUtils.containsNone((CharSequence) null, (String) null);
      String string0 = "bVOi/[=rBn%.m}S/f";
      StringUtils.removeEndIgnoreCase("bVOi/[=rBn%.m}S/f", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("bVOi/[=rBn%.m}S/f", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }
}
