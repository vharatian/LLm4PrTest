/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 10:35:01 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.IllegalFormatConversionException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(39, 'V');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertEquals(78, strBuilder0.capacity());
      assertEquals(78, strBuilder1.capacity());
      assertEquals(39, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertEquals(78, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(1058L);
      assertEquals(39L, long0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertEquals(78, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0);
      assertEquals(0L, long0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, (int) '\u0000');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[8];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer0;
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(71, strBuilder0.size());
      assertEquals(142, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(142, strBuilder1.capacity());
      assertEquals(71, strBuilder1.length());
      assertEquals(71, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.hashCode();
      assertEquals(71, strBuilder0.size());
      assertEquals(142, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("G0E(");
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("6km?");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("pU'|&Z\"8(LQu/C4");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(89, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(89, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("joEp>h]", 0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('.', 0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(101, 'a');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(202, strBuilder0.capacity());
      assertEquals(101, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(101, strBuilder1.size());
      assertEquals(101, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(202, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(false);
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.size());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(202, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(202, strBuilder2.capacity());
      assertEquals(107, strBuilder2.length());
      assertEquals(107, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder1.indexOf("org.apache.commons.lang3.text.StrBuilder", 105);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.size());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(202, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(202, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('d', 1361);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(" ");
      assertTrue(boolean0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1085, '>');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1085, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2170, strBuilder0.capacity());
      assertEquals(1085, strBuilder0.size());
      assertEquals(2170, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1085, strBuilder1.size());
      assertEquals(1085, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString((-2900), 1085);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1085, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2170, strBuilder0.capacity());
      assertEquals(1085, strBuilder0.size());
      assertEquals(2170, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1085, strBuilder1.size());
      assertEquals(1085, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(24);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-1832), 2215);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-1016), 0);
      assertEquals("", string0);
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1, '9');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.rightString(1);
      assertEquals("9", string0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '_');
      assertEquals(2134, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1067, strBuilder0.size());
      assertEquals(1067, strBuilder0.length());
      assertEquals(1067, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1067, strBuilder1.size());
      assertEquals(2134, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.leftString(1067);
      assertEquals(2134, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1067, strBuilder0.size());
      assertEquals(1067, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(0);
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(".H|+o[9x]D");
      assertFalse(boolean0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z5H)K2");
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("Z5H)K2");
      assertEquals("Z5H)K2", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder0);
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("Z5H)K2", stringBuilder0.toString());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(38, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.startsWith("wB6~]@iNB*u)");
      assertFalse(boolean0);
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("Z5H)K2", stringBuilder0.toString());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(38, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nTzdex ");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(39, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('Y', 'f');
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ExceptionWasThrown");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("ExceptionWasThrown", "Illegal range. The step cannot be zero.");
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(39, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(19);
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder0);
      assertEquals(76, strBuilder0.capacity());
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(76, strBuilder2.capacity());
      assertEquals(39, strBuilder2.length());
      assertEquals(39, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll("\n");
      assertEquals(76, strBuilder0.capacity());
      assertEquals(38, strBuilder0.size());
      assertEquals(38, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(38, strBuilder3.length());
      assertEquals(76, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(38, strBuilder3.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[(dt.w,");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('r');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertEquals(39, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1, '9');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('9');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 0, ']');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((byte)0, '[');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('M', 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", (-2521));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("NGX7Tj:");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-81);
      assertEquals((-81), strBuilder1.length());
      assertEquals((-81), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      
      strBuilder1.appendTo(strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-81), strBuilder1.length());
      assertEquals((-81), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("\n", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("\n", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, 0, 0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, (int) (byte)0, (int) (byte)0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(256, 'M');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 256
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write((char[]) null, 32, 9);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 1, (int) '\u0000');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("length must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.validateIndex(6);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      strBuilder0.getChars(0, 0, charArray0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-4799), (-4799));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -4799
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[(dt.w,");
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(1004);
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertTrue(boolean0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write("Pwx@qxM", 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.validateRange((byte)0, (byte)0);
      assertEquals(0, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.validateRange(0, 61);
      assertEquals(4, int0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals("Invalid startIndex: ", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.toString();
      assertEquals("ZrI)", string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|{q+:Df");
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0);
      assertEquals("|{q+:Df", string0);
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring((int) (byte)0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) stringBuilder0, 3802, 'w');
      assertEquals(7604, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3802, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(3802, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuilder0.toString());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3802, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3802, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7604, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharSequence charSequence0 = strBuilder1.subSequence(31, 1063);
      assertEquals(7604, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3802, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(3802, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuilder0.toString());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3802, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3802, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7604, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z5H)K2");
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(6, int0);
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setNullText((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setNewLineText("");
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals("", strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1553);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1553, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setLength(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("", "");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('\"', '\"');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('n', 9);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-311);
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-311), strBuilder0.size());
      assertEquals((-311), strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-311), strBuilder1.size());
      assertEquals((-311), strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll('#', '\'');
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-311), strBuilder0.size());
      assertEquals((-311), strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertEquals((-311), strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals((-311), strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("(+)_),<>Y", (Object[]) null);
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder1.lastIndexOf("(+)_),<>Y");
      assertEquals(0, int0);
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer0;
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(85, strBuilder0.length());
      assertEquals(170, strBuilder0.capacity());
      assertEquals(85, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(170, strBuilder1.capacity());
      assertEquals(85, strBuilder1.length());
      assertEquals(85, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(14, int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(85, strBuilder0.length());
      assertEquals(170, strBuilder0.capacity());
      assertEquals(85, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('9');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('9', 256);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('G', 'Y');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('Y');
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1, '9');
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder2.lastIndexOf('9');
      assertEquals(1, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, object0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (long) 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("length must be valid");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(2, 0.0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(24, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf('6', (-481));
      assertEquals(0, int0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('>', 'Q');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf('Q');
      assertEquals(0, int0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals(2, objectArray0.length);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(138, strBuilder0.capacity());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(69, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(138, strBuilder1.capacity());
      assertEquals(69, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf('p');
      assertEquals(61, int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(138, strBuilder0.capacity());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("doEp>");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("doEp>", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("doEp>", strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.getNewLineText();
      assertEquals("doEp>", string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("doEp>", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.getNewLineText();
      assertEquals("", string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("org");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("j-{r8;e-Xnv");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('7');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt((byte)0);
      assertEquals('`', char0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(10);
      assertEquals('f', char0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals("org.apache.commons.lang3.text.StrBuilder", string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8WXQ");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null, (-1128), (-1128));
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals("", strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, "The type must not be null");
      assertEquals(1, objectArray0.length);
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterator<?>) null, "org");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) stack0, "");
      assertFalse(stack0.contains(""));
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", "");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 93, ',');
      assertEquals(186, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(93, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(93, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(93, strBuilder1.size());
      assertEquals(93, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(186, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator((String) null, (-180));
      assertEquals(186, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(93, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(93, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(186, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(93, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(93, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('I', (-2765));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('\\');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendPadding((-1957), '%');
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = new StrBuilder("ZT5F__]]Fc:xeIyv>I;");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-2067);
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-2067), strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals((-2067), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer0, (-2067), 'f');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-2067), strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals((-2067), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals((-2067), strBuilder2.length());
      assertEquals((-2067), strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1506));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, Integer.MIN_VALUE, 'a');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 2, '[');
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('\u008A', 'P');
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      TreeSet<StringBuilder> treeSet0 = new TreeSet<StringBuilder>();
      assertNotNull(treeSet0);
      
      Iterator<StringBuilder> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      ArrayDeque<StringBuilder> arrayDeque0 = new ArrayDeque<StringBuilder>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<StringBuilder> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3184));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((char[]) null, 1, (-545));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((char[]) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder0, (int) (byte)0, (int) (byte)0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, 1, 1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((byte)0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.append("", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("aAMDjm=");
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[3];
      StrBuilder strBuilder1 = strBuilder0.append("", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(24);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(24, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1832));
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 2, 2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(24, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) strBuilder0, 0, 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('h');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-147);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-147), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-147), strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-147), strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals((-147), strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) "");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-147), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-147), strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-147), strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals((-147), strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals((-147), strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals((-147), strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-3011), (-3011));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3011
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-2527));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2527
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 39;
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.toStringBuilder();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('h');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-147);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-147), strBuilder0.size());
      assertEquals((-147), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals((-147), strBuilder1.length());
      assertEquals((-147), strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder1.toStringBuffer();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 64;
      assertEquals(64, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(64, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(12, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 223;
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(223, strBuilder0.length());
      assertEquals(223, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.reverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 222
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 321;
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(321, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(321, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll("dO", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1765));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1584, 8192, 'p');
      assertEquals(8192, strBuilder0.size());
      assertEquals(8192, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16384, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16384, strBuilder1.capacity());
      assertEquals(8192, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8192, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) strBuilder1);
      assertEquals(16384, strBuilder0.size());
      assertEquals(16384, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16384, strBuilder0.capacity());
      assertEquals(16384, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16384, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(16384, strBuilder1.size());
      assertEquals(16384, strBuilder2.length());
      assertEquals(16384, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(16384, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      strBuilder1.replaceAll('p', '=');
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace(1067, 1067, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      strBuilder0.size = 285;
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(285, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(285, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom(pipedReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        strBuilder0.readFrom(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(594, '\"');
      assertEquals(1188, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(594, strBuilder0.length());
      assertEquals(594, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1188, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(594, strBuilder1.length());
      assertEquals(594, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(1188, strBuilder0.capacity());
      assertEquals(1188, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1188, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1188, strBuilder1.capacity());
      assertEquals(1188, strBuilder1.size());
      assertEquals(1188, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1188, strBuilder2.size());
      assertEquals(1188, strBuilder2.length());
      assertEquals(1188, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      strBuilder0.appendTo(strBuilder1);
      assertEquals(2376, strBuilder0.size());
      assertEquals(2376, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4752, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2376, strBuilder1.size());
      assertEquals(2376, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4752, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) strBuilder1;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "X42;82x?X<4G#");
      assertEquals(8, objectArray0.length);
      assertEquals(19151, strBuilder0.size());
      assertEquals(19151, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38198, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19151, strBuilder1.length());
      assertEquals(19151, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(38198, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19151, strBuilder2.size());
      assertEquals(19151, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(38198, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(19151, strBuilder3.size());
      assertEquals(38198, strBuilder3.capacity());
      assertEquals(19151, strBuilder3.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      strBuilder1.lastIndexOf('1');
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1032, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1032
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.append(1.0F);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.buffer = charArray0;
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(52);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(52, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 52
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(57, "end < start");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("3G{uJO?%1?");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      strBuilder0.buffer = charArray0;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, 's');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 97;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(97, strBuilder0.size());
      assertEquals(97, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#!\"X`wtSV@^?");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(10, 10, charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.ensureCapacity(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 1627;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1627, strBuilder0.length());
      assertEquals(1627, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteFirst("+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      assertEquals(72, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      strBuilder0.buffer = charArray0;
      assertEquals(9, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.contains("Array element ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%Vq (nh@u0W3E;^)jo%");
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.contains('<');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 114;
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln((char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 52;
      assertEquals(52, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        strBuilder0.appendln("rKN.h%p~N% ULt|vY", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'p'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertEquals(70, strBuilder0.size());
      assertEquals(70, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        strBuilder0.appendln("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1079, 'g');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2158, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1079, strBuilder0.length());
      assertEquals(1079, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2158, strBuilder1.capacity());
      assertEquals(1079, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1079, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.buffer = null;
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1079, strBuilder0.size());
      assertEquals(1079, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1079, strBuilder1.length());
      assertEquals(1079, strBuilder1.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("'aB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln((-3244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "aNQx)");
      assertEquals(0, objectArray0.length);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 1470;
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1470, strBuilder0.length());
      assertEquals(1470, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1470, strBuilder1.length());
      assertEquals(1470, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln('~');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        strBuilder0.appendTo(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZT5F__]]Fc:xeIyv>I;");
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-2067);
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2067), strBuilder0.length());
      assertEquals((-2067), strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendSeparator('\"', 'U');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2067
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertEquals(57, strBuilder0.size());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      strBuilder0.appendPadding(13298, 'e');
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DefaultTimeZone");
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 1585;
      assertEquals(1585, strBuilder0.length());
      assertEquals(1585, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendNewLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, Integer.MAX_VALUE, 'b');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '>');
      assertEquals(2134, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1067, strBuilder0.length());
      assertEquals(1067, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1067, strBuilder1.size());
      assertEquals(1067, strBuilder1.length());
      assertEquals(2134, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendFixedWidthPadRight(object0, Integer.MAX_VALUE, '>');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2134
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight(5, Integer.MAX_VALUE, '(');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) "K9iai3_AW/mqx\"", Integer.MAX_VALUE, '3');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      strBuilder0.size = 2763;
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2763, strBuilder0.size());
      assertEquals(2763, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft(object0, 160, 'z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[10];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "89");
      assertEquals(10, objectArray0.length);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft(2, Integer.MAX_VALUE, '?');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertEquals(5, locale_FilteringModeArray0.length);
      assertNotNull(locale_FilteringModeArray0);
      
      strBuilder0.buffer = null;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendAll(locale_FilteringModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) strBuilder0;
      strBuilder0.size = 2004;
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2004, strBuilder0.length());
      assertEquals(2004, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendAll(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      strBuilder0.size = (-48);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-48), strBuilder0.length());
      assertEquals((-48), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1067);
      assertEquals(0, charBuffer0.position());
      assertEquals(1067, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1067, charBuffer0.limit());
      assertEquals(1067, charBuffer0.length());
      assertEquals(1067, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder0 = new StrBuilder("org.junitpioneer.jupiter.params.ByteRange");
      assertEquals(73, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1067, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        strBuilder0.append(" I6#e&v[%Jy5", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'J'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("blank_blank_blank_2014");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(54, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "blank_blank_blank_2014";
      // Undeclared exception!
      try { 
        strBuilder0.append("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, 1261, '?');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1261, strBuilder0.size());
      assertEquals(1261, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2522, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2522, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1261, strBuilder1.size());
      assertEquals(1261, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      strBuilder1.buffer = charArray0;
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(1261, strBuilder0.size());
      assertEquals(1261, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.capacity());
      assertEquals(1261, strBuilder1.size());
      assertEquals(1261, strBuilder1.length());
      
      // Undeclared exception!
      try { 
        strBuilder1.append((Object) strBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 1265;
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1265, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1265, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1265, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1265, strBuilder1.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((CharSequence) strBuilder1, 19, (-11));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZT5F__]]Fc:xeIyv>I;");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-2067);
      assertEquals((-2067), strBuilder0.length());
      assertEquals((-2067), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((-2067));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1.0F);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      strBuilder1.buffer = charArray0;
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((-3432.65));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("X", 2269);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(false);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('J', 2);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('i', 32);
      assertEquals(5, int0);
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("`6", (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8'4xIQz");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("junit-pioneer", (-3400));
      assertEquals((-1), int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf("", 15);
      assertEquals(15, int0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("o", 9);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("junit-pioneer", (-3400));
      assertEquals((-1), int0);
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((String) null, (-2038));
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("", 32);
      assertEquals((-1), int0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf('n', 0);
      assertEquals((-1), int0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('h', (-1651));
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('6', (-481));
      assertEquals(1, int0);
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.delete(5, 3802);
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(1043L);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(61, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(61, strBuilder0.size());
      assertEquals(61, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(89, strBuilder1.capacity());
      assertEquals(61, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(61, "90e/A)&z.");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(70, strBuilder0.length());
      assertEquals(70, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(89, strBuilder2.capacity());
      assertEquals(70, strBuilder2.length());
      assertEquals(70, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z5H)K2");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(38, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 71, '8');
      assertEquals(170, strBuilder0.capacity());
      assertEquals(85, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(85, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(170, strBuilder1.capacity());
      assertEquals(85, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(85, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 0, '2');
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("kfE*YA@C}=dn:lw.Z");
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("1=^SG+9u#\":gB", "pit~");
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("dO", "");
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(charBuffer0.hasArray());
      assertEquals("true", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder1.readFrom(charBuffer0);
      assertEquals(4, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-2787));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -2787
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(101, '\"');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(105, strBuilder0.length());
      assertEquals(105, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(105, strBuilder1.size());
      assertEquals(105, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(210, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(105, charArray0.length);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(105, strBuilder0.length());
      assertEquals(105, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(105, strBuilder1.size());
      assertEquals(105, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(210, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 34);
      assertEquals(105, charArray0.length);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(139, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(139, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(139, strBuilder1.size());
      assertEquals(139, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(210, strBuilder1.capacity());
      assertEquals(210, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(139, strBuilder2.length());
      assertEquals(139, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 114, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 114
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 150, 150);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert((int) (byte)0, '7');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[8];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 64, 8192);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(89, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 11, (-12));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("`&X\u0013oDvK}QBe");
      assertEquals("`&X\u0013oDvK}QBe", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder0 = new StrBuilder("37xm6.A0=");
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, (-2767), 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuilder) null, (-6023), (-1468));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("NGTg:");
      assertEquals("NGTg:", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("NGTg:", stringBuilder0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(31);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuilder) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(31, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuilder0.toString());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((byte)0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) (byte)0, (int) (byte)0);
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-674));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z5H)K2");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 941);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      assertEquals(1, stringBuffer0.length());
      assertEquals("\n", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-3061), 106);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 122, 122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, (-334), (-334));
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('M', 11);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, stringBuffer0.length());
      assertEquals("M", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, stringBuffer0.length());
      assertEquals("M", stringBuffer0.toString());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(24);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(24, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(24, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals("ZrI)", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("ZrI)", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("ZrI)", "length must be valid");
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("leng", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.length());
      assertEquals(80, strBuilder1.capacity());
      assertEquals(40, strBuilder2.length());
      assertEquals(40, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(80, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("[&y7#^+kEA", 1, 0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(36, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("$m&$.^d.XhvZTI", 3, (-2065));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("~iP36", 2, 160);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("(Bh#PQ\"0'gv}p", 2, 1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("(Bh#PQ\"0'gv}p", 958, 784);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1677));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("", (-1677), (-533));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3184));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("umwn");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) "length must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ExceptionWasThrown");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.append(object0);
      assertEquals(45, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(45, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(45, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(1, 1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(3, 5, (char[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(86);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(172, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(172, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.toString();
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("P");
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring((-746), (-746));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -746
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNullText();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteCharAt(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        strBuilder0.append((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-2));
      assertEquals(0L, long0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 556);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 93, 1388);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 108, (-68));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-3313), (char[]) null, (-3313), (-3313));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3313
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.delete(1057, 1057);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[5];
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(43, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder1.equals((Object) strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("`6");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((StrBuilder) null);
      assertFalse(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L+:'#?(dC");
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("ZJD2u@WE1");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("`6");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W5c\"");
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L+:'#?(dC");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("ZJD2u@WE1");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("P");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2625);
      assertEquals(2625, charBuffer0.limit());
      assertEquals(2625, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2625, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2625, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      strBuilder0.appendTo(charBuffer0);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2625, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2624, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2625, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(2624, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      strBuilder0.appendTo(stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("end < start", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      strBuilder0.appendTo(stringBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("^;8\"He");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf("^;8\"He", 120);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_1X7hH");
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("_1X7hH", 120);
      assertEquals(0, int0);
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("Indtx: ", 5);
      assertEquals((-1), int0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", 120);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("", 40);
      assertEquals(6, int0);
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf((String) null, (-820));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("P");
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('\'');
      assertEquals((-1), int0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("P");
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("P", 51);
      assertEquals(0, int0);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('>');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf("");
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains((String) null);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('w');
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("A<v@I\u0005)%LdduCb");
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('a');
      assertTrue(boolean0);
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('w');
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^8\"He");
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-1), 4);
      assertEquals("^8\"H", string0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Index: ");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, 2682);
      assertEquals("Index: ", string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-2315), (-1744));
      assertEquals("", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(1302, 1302);
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 1490, 'a');
      assertNull(strBuilder0.getNullText());
      assertEquals(2980, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1490, strBuilder0.length());
      assertEquals(1490, strBuilder0.size());
      assertEquals(2980, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1490, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1490, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.rightString(116);
      assertNull(strBuilder0.getNullText());
      assertEquals(2980, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1490, strBuilder0.length());
      assertEquals(1490, strBuilder0.size());
      assertEquals(2980, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1490, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1490, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-944));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString((-949));
      assertEquals("", string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(103);
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(2453);
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString((-4647));
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z\"3L");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(2);
      assertEquals("z\"", string0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(6, (-1745));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1751
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(327, 327);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 327
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      CharSequence charSequence0 = strBuilder0.subSequence(0, 0);
      assertEquals("", charSequence0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("SK1_7I!?<T}");
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("n5D68/-B#");
      assertFalse(boolean0);
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("wx9nTIZR7m52AHc");
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("Indtx: ");
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrMatcher$NoMatcher");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(82, strBuilder0.capacity());
      assertEquals(50, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("org.apache.commons.lang3.text.StrMatcher$NoMatcher");
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(82, strBuilder0.capacity());
      assertEquals(50, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("s| )]&v#2\"}Ok");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A<v@I\u0005)%LdduCb");
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("=M#");
      assertFalse(boolean0);
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" ");
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("eFd < stbar4");
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("eFd < stbar4", (String) null);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(44, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("7o?}-cP|cRs}", "7o?}-cP|cRs}");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("`6", (String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ExceptionWasThrown");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("ExceptionWasThrown", "ExceptionWasThrown");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('4', '(');
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('n', 'D');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1335, 1335, '0');
      assertEquals(2710, strBuilder0.capacity());
      assertEquals(1355, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1355, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1355, strBuilder1.length());
      assertEquals(1355, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2710, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll('0', 'm');
      assertEquals(2710, strBuilder0.capacity());
      assertEquals(1355, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1355, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2710, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1355, strBuilder2.size());
      assertEquals(1355, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('`', '/');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(16);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('t', 't');
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(0, 994, (String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(32);
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replace(32, 32, "");
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.length());
      assertEquals(32, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(";");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(";", "");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(";");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(";", ";");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Invalid startIndex: ");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("`6");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '_');
      assertNull(strBuilder0.getNullText());
      assertEquals(1067, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1067, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(1067, strBuilder1.size());
      assertEquals(1067, strBuilder1.length());
      assertEquals(2134, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('_');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1066, strBuilder0.size());
      assertEquals(1066, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(1066, strBuilder2.length());
      assertEquals(1066, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2134, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('e');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 1302;
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1302, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1302, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1302, strBuilder1.length());
      assertEquals(1302, strBuilder1.size());
      
      // Undeclared exception!
      try { 
        strBuilder1.append((float) 1302);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '_');
      assertEquals(2134, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1067, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1067, strBuilder0.size());
      assertEquals(2134, strBuilder1.capacity());
      assertEquals(1067, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1067, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('_');
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(2134, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('d');
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '_');
      assertEquals(1067, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1067, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2134, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2134, strBuilder1.capacity());
      assertEquals(1067, strBuilder1.length());
      assertEquals(1067, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(1067, true);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(1071, strBuilder0.size());
      assertEquals(1071, strBuilder0.length());
      assertEquals(1071, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1071, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2134, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1071, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2134, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1071, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("s| )]&v#2\"}Ok");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(1, false);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r]eJ YFg5F/7y7at!");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1, (int) 'D');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 68
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'U');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder1.insert(1, charArray0, 1, (-985));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -985
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r]eJ YFg5F/7y7at!");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1027, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 1027
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%Vq (nh@u0W3E;^)jo%");
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, charArray0, (-3131), 156);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -3131
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r]eJ YFg5F/7y7at!");
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(1, charArray0, 1, (int) '\u0000');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#!\"X`wtSV@^?");
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.insert(10, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#!\"X`wtSV@^?");
      assertEquals(12, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(10, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(12, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(12, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F>\"2-sZij:Jgm'x\"k]");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(1, (char[]) null, 1, 1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, "");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(3, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "", 14, ')');
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(108, 15, '\u001C');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 1030, 'p');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1030, strBuilder0.length());
      assertEquals(1030, strBuilder0.size());
      assertEquals(2060, strBuilder0.capacity());
      assertEquals(1030, strBuilder1.size());
      assertEquals(2060, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1030, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("lpy ", 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", 10);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ExcepionWasThrown");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('<', '<');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%Vq (nh@u0W3E;^)jo%");
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(':');
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('u');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charArray0);
      
      strBuilder1.buffer = charArray0;
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst('k');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrMatchr$NoMatcher");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.capacity());
      assertEquals(49, strBuilder0.length());
      assertEquals(49, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("org.apache.commons.lang3.text.StrMatchr$NoMatcher");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(196, strBuilder0.capacity());
      assertEquals(98, strBuilder0.length());
      assertEquals(98, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(98, strBuilder1.length());
      assertEquals(98, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(196, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.complementOf(enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(5, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(5, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(393, strBuilder0.size());
      assertEquals(393, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(620, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, enumSet0.size());
      assertEquals(5, enumSet1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(620, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(393, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(393, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringModeArray0[0];
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) enumSet0, "");
      assertEquals(5, locale_FilteringModeArray0.length);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertEquals(82, strBuilder0.size());
      assertEquals(82, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, enumSet0.size());
      assertEquals(82, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(82, strBuilder1.length());
      assertEquals(82, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`6");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "`6");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "Sy5_|cADklP\"6px[D,~");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.substring(2, 3);
      assertEquals("l", string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 1, (-2336));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -2336
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z\"3L");
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1597), (-1597));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1597
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) locale_FilteringMode0, 3781, '');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7562, strBuilder0.capacity());
      assertEquals(3781, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3781, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7562, strBuilder1.capacity());
      assertEquals(3781, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3781, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder0, 4, 4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3785, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7562, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3785, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3785, strBuilder2.size());
      assertEquals(3785, strBuilder2.length());
      assertEquals(7562, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-1678));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1067, '_');
      assertEquals(2134, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1067, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1067, strBuilder0.size());
      assertEquals(2134, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1067, strBuilder1.size());
      assertEquals(1067, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 1067, 1067);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-47), (-47));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1), (-549));
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0, 0, 0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuilder0.toString());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0, 0, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 12, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Invalid startIndex: ");
      assertEquals("Invalid startIndex: ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0, 8, 8);
      assertEquals("Invalid startIndex: ", stringBuilder0.toString());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("Invalid startIndex: ");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Invalid startIndex: ");
      assertEquals("Invalid startIndex: ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder0);
      assertEquals("Invalid startIndex: ", stringBuilder0.toString());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "c!2;d&V");
      assertEquals("c!2;d&V", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 2, 5);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("c!2;d&V", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]0<bJ\"2");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]0<bJ\"2");
      assertEquals("]0<bJ\"2", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals("]0<bJ\"2", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(39, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1418);
      assertEquals(1418, charBuffer0.remaining());
      assertEquals(1418, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1418, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1418, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1418, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(471);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(471, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(471, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(471, charBuffer0.length());
      assertEquals(471, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 471, (-2687));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(102, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.limit());
      assertEquals(102, charBuffer0.capacity());
      assertEquals(102, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, (-553), (-553));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 25, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null, 1935, 6);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1946));
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^T)D\"8/U~,z\"W+e");
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("^T)D\"8/U~,z\"W+e", 13, 942);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append((CharSequence) stringBuilder0, 0, (-466));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null, (-1581), (-1581));
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1420);
      assertEquals(1420, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(1420, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(1420, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null, 0, 0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuffer0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add(strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll(iterator0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("0");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("0", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("0", strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&/7MQmI2c&8H<XQL^Uj");
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("QH7fAd?");
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals("QH7fAd?", strBuilder0.getNewLineText());
      assertEquals("QH7fAd?", strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder_StrBuilderTokenizer0);
      assertEquals(180, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(97, strBuilder0.size());
      assertEquals(97, strBuilder0.length());
      assertEquals("QH7fAd?", strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(97, strBuilder2.size());
      assertEquals(180, strBuilder2.capacity());
      assertEquals(97, strBuilder2.length());
      assertEquals("QH7fAd?", strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder0.readFrom(charBuffer0);
      assertEquals(0, int0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(0, int0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(31, 0, (char[]) null, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(616, 104, charArray0, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 104
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(973, (-663), charArray0, 973);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -663
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-2263), (-814), (char[]) null, (-814));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2263
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(64);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      strBuilder0.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r]eJ YFg5F/7y7at!");
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, charArray1.length);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      char[] charArray0 = strBuilder0.toCharArray(1, 1);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Indtx: ");
      char[] charArray0 = strBuilder0.toCharArray(1, 10);
      assertArrayEquals(new char[] {'n', 'd', 't', 'x', ':', ' '}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1664), 1228);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_1X7hH");
      strBuilder0.appendPadding(10, ')');
      strBuilder0.deleteCharAt(9);
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_1X7hH");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1350));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1350
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append('>');
      strBuilder1.setCharAt(0, 'm');
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'm');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-1687), '|');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1687
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1075);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1075
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]07");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1119));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1119
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_1X7hH");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(64);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      strBuilder0.appendAll((Iterable<?>) enumSet0);
      strBuilder0.setLength(0);
      assertEquals(82, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1387));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1387
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("P");
      StrBuilder strBuilder1 = strBuilder0.setNullText("P");
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      strBuilder0.asReader();
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("fz tT6+h3=f");
      assertEquals(11, strBuilder0.size());
      
      strBuilder0.clear();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1038, 3074L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1038
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln(26L);
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1), (-1), 'P');
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(8101, 8101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8101
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln(3.0);
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder0, 160, 160);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("e");
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-1.0));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln((StringBuilder) null, 2137, 2137);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(4715, (float) 4715);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4715
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ExceptionWasThrown");
      strBuilder0.getNewLineText();
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.build();
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-719), (-719), 'S');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, '\"');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('#', '#');
      int int0 = strBuilder0.length();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(29, (double) 29);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 29
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((Object) null, 2, 'o');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("I?mZ1SM");
      assertEquals(8, strBuilder0.length());
      
      strBuilder0.deleteFirst("I?mZ1SM");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\" should have a parent context.");
      strBuilder0.appendln("\" should have a parent context.", 2, 2);
      assertEquals(34, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring((-1045));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1045
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-745));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZrI)");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 1414, 1414);
      assertEquals(32, strBuilder0.capacity());
  }
}
