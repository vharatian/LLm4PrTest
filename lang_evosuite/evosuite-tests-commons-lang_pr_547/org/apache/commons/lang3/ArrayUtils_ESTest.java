/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 10:27:36 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)25255;
      intArray0[1] = (int) (short)25255;
      intArray0[2] = (int) (short)25255;
      intArray0[3] = (int) (short)25255;
      intArray0[4] = (int) (short)25255;
      ArrayUtils.swap(intArray0, 5, 102);
      assertArrayEquals(new int[] {25255, 25255, 25255, 25255, 25255}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1708;
      shortArray0[1] = (short)2103;
      shortArray0[2] = (short) (-1103);
      shortArray0[3] = (short) (-2716);
      shortArray0[4] = (short) (-1773);
      shortArray0[5] = (short)643;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1708, (short)2103, (short) (-1103), (short) (-2716), (short) (-1773), (short)643}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'g';
      charArray0[2] = '*';
      charArray0[3] = '/';
      charArray0[4] = 'p';
      charArray0[5] = '+';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'a', 'g', '*', '/', 'p', '+'}, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'r';
      charArray0[2] = 'J';
      charArray0[3] = 'H';
      charArray0[4] = 'M';
      charArray0[5] = '#';
      charArray0[6] = 'w';
      charArray0[7] = 'O';
      charArray0[8] = ',';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'u', 'r', 'J', 'H', 'M', '#', 'w', 'O', ','}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Integer[] integerArray0 = new Integer[2];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(4, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      ArrayUtils.swap(intArray0, 1, 4, 506);
      assertArrayEquals(new int[] {4, 4, 4, 4}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2258), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2258, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-355.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2827.59F;
      floatArray0[3] = 34.0F;
      floatArray0[4] = 88.971F;
      floatArray0[5] = 2314.96F;
      floatArray0[6] = (-1543.8777F);
      floatArray0[7] = (-711.4067F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 470.84045F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-355.0F), (-1.0F), 2827.59F, 34.0F, 88.971F, 2314.96F, (-1543.8777F), (-711.4067F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {470.84045F, (-355.0F), (-1.0F), 2827.59F, 34.0F, 88.971F, 2314.96F, (-1543.8777F), (-711.4067F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 88.971F, (-2593));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-355.0F), (-1.0F), 2827.59F, 34.0F, 88.971F, 2314.96F, (-1543.8777F), (-711.4067F)}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.remove(shortArray1, (int) (short)0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-65));
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 69);
      assertNull(intArray0);
      
      ArrayUtils.shift(byteArray1, (-858), 0, 0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-5344L);
      longArray0[1] = 1826L;
      longArray0[2] = 41L;
      longArray0[3] = (-2522L);
      longArray0[4] = 4698L;
      longArray0[5] = (-3546L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-5344L), 1826L, 41L, (-2522L), 4698L, (-3546L)}, longArray0);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-265);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)1108;
      shortArray0[3] = (short)115;
      shortArray0[4] = (short) (-1655);
      shortArray0[5] = (short)3440;
      shortArray0[6] = (short) (-2615);
      shortArray0[7] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-265), (short)6, (short)1108, (short)115, (short) (-1655), (short)3440, (short) (-2615), (short)59}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(shortArray0, 2, (int) (short)6, 52);
      assertArrayEquals(new short[] {(short) (-265), (short)6, (short)1108, (short)115, (short) (-1655), (short)3440, (short) (-2615), (short)59}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2;
      shortArray1[1] = (short)2346;
      shortArray1[2] = (short)2;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2346, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2346;
      doubleArray0[1] = (double) (short)2346;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (short)2346;
      doubleArray0[4] = (double) (short)2;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.0, 2118.5401558800727);
      assertArrayEquals(new double[] {2346.0, 2346.0, 2.0, 2346.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(7, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)37;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-47), (byte) (-46), (byte)37}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-67);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (byte)0;
      ArrayUtils.swap(longArray0, 1067, 2, 1067);
      assertArrayEquals(new long[] {0L, (-67L), (-1L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)117;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-67);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short)0, (short) (-1), (short) (-67)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-67), (int) (short) (-1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short)0, (short) (-1), (short) (-67)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 2, (int) (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short)0, (short) (-1), (short) (-67)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, (-67L), (-1L), (-1L), 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1067;
      doubleArray0[1] = (-2892.305611455286);
      doubleArray0[2] = (double) (short) (-67);
      doubleArray0[3] = (double) (byte) (-67);
      doubleArray0[4] = (double) (byte) (-67);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1067.0, (-2892.305611455286), (-67.0), (-67.0), (-67.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1067.0, (-2892.305611455286), (-67.0), (-67.0), (-67.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)258;
      shortArray0[2] = (short)4846;
      shortArray0[3] = (short) (-32543);
      shortArray0[6] = (short) (-3050);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)4846;
      short[] shortArray2 = ArrayUtils.insert(7, shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)258, (short)0, (short)4846, (short) (-32543), (short)0, (short)0, (short) (-3050)}, shortArray0);
      assertArrayEquals(new short[] {(short)4846}, shortArray1);
      assertArrayEquals(new short[] {(short)258, (short)0, (short)4846, (short) (-32543), (short)0, (short)0, (short) (-3050), (short)4846}, shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      Float float0 = new Float((-1958.156));
      assertEquals((-1958.156F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = 823L;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      long[] longArray1 = ArrayUtils.insert(6, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 823L, 6L, 6L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)578);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)578}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-50), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte) (-50));
      assertEquals((-50), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2318));
      assertEquals((-2318), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2318));
      assertEquals((-2318), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray1, objectArray0);
      assertSame(integerArray0, objectArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, objectArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1, 1.5);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13087;
      shortArray0[1] = (short) (-874);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1542);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)13087, (short) (-874)}, shortArray0);
      assertArrayEquals(new short[] {(short)1542, (short)13087, (short) (-874)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(18, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, (-1147), (int) (byte)77, 1572);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      ArrayUtils.swap(byteArray0, (-1147), 3, 90);
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'g';
      charArray0[2] = '(';
      charArray0[3] = 'j';
      charArray0[4] = '%';
      charArray0[5] = 'q';
      charArray0[6] = 'G';
      charArray0[7] = 'P';
      charArray0[8] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'#', 'g', '(', 'j', '%', 'q', 'G', 'P', 't'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-1683), 0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)2}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)8;
      intArray0[1] = (int) 'P';
      intArray0[2] = 0;
      intArray0[3] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 80);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {8, 80, 0, 37}, intArray0);
      assertArrayEquals(new int[] {8, 80, 0, 37, 80}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Integer integer0 = new Integer(826);
      assertEquals(826, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('u');
      assertEquals('u', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ':');
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean1;
      booleanArray2[2] = (boolean) boolean1;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = (boolean) boolean0;
      booleanArray2[5] = (boolean) boolean1;
      booleanArray2[6] = (boolean) boolean0;
      ArrayUtils.swap(booleanArray2, 7, 7, (-2872));
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-574);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, 1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-574)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-574);
      shortArray2[1] = (short) (-574);
      shortArray2[2] = (short) (-574);
      shortArray2[3] = (short) (-574);
      shortArray2[4] = (short)2351;
      ArrayUtils.shift(shortArray2, (-2197), Integer.MAX_VALUE, (int) (short) (-574));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)2351, (short) (-574), (short) (-574), (short) (-574), (short) (-574)}, shortArray2);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)2351;
      longArray0[1] = (long) 1;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {2351L, 1L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2351;
      doubleArray0[1] = (double) (short) (-574);
      doubleArray0[2] = (double) 2351L;
      doubleArray0[3] = 1150.098;
      doubleArray0[4] = (double) (short) (-574);
      doubleArray0[5] = (double) (short)2351;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 2351.0);
      assertArrayEquals(new double[] {2351.0, (-574.0), 2351.0, 1150.098, (-574.0), 2351.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (-255.621F);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, (-255.621F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-255.621F), 2.0F, (-255.621F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-3846);
      shortArray0[2] = (short) (-1097);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-3846), (short) (-1097)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1097);
      longArray0[1] = (long) (short) (-3846);
      longArray0[2] = (long) (short) (-1097);
      longArray0[3] = (-1L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2017));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2017, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.shift(objectArray0, 1974);
      assertEquals(2, objectArray0.length);
      
      String string0 = ArrayUtils.toString(objectArray0[0]);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      int int0 = 2;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (-3230L);
      ArrayUtils.swap(longArray0, 2, 2, 998);
      assertArrayEquals(new long[] {2L, (-3230L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer((short) (-1));
      assertEquals((-1), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      short[] shortArray1 = ArrayUtils.insert(2, (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer1);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short) (-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1654), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1654, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '.';
      charArray0[4] = 'N';
      charArray0[5] = '$';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'$', 'U', 'U', '.', 'N', '$'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'$', 'U', 'U', '.', 'N', '$'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, Integer.MAX_VALUE, 't');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 880);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-20L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 880);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-20L)}, longArray0);
      assertArrayEquals(new long[] {880L, (-20L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 880;
      floatArray0[1] = (float) (-20L);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {880.0F, (-20.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 880, 1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-20L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1232.2871F);
      floatArray1[1] = (float) (-1);
      floatArray1[2] = (float) 880;
      floatArray1[3] = (float) (-20L);
      floatArray1[4] = (float) 880;
      floatArray1[5] = (float) (-20L);
      ArrayUtils.shift(floatArray1, 1, 880, 890);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1232.2871F), (-1.0F), 880.0F, (-20.0F), 880.0F, (-20.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      ArrayUtils.swap((Object[]) classArray0, 1, 1, 1);
      assertEquals(6, classArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(469.55);
      assertEquals(469.55, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(469.55, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(469.55, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1372.3495914865514));
      assertEquals((-1372.3495914865514), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(433.43);
      assertEquals(433.43, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(469.55, (double)double5, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(433.43);
      assertEquals(433.43, (double)double6, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(4070.8);
      assertEquals(4070.8, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[3]);
      assertEquals((-1372.3495914865514), (double)double8, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {469.55, 469.55, 469.55, (-1372.3495914865514), 433.43, 469.55, 433.43, 4070.8, (-1372.3495914865514)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1849));
      assertEquals((-1849), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-426));
      assertEquals((-426), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf((-594));
      assertEquals((-594), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      assertEquals(5, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("java.lang.Integer");
      assertNull(integer5);
      
      integerArray0[5] = null;
      Integer integer6 = Integer.getInteger("java.lang.Integer");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer integer7 = new Integer(121);
      assertEquals(121, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-594));
      assertEquals((-594), (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1632L, (-23));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Integer integer0 = new Integer(121);
      assertEquals(121, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      Integer integer1 = new Integer(121);
      assertEquals(121, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurrences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Integer integer0 = new Integer(103);
      assertEquals(103, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(103);
      assertEquals(103, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(103);
      assertEquals(103, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)578);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)578}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      ArrayUtils.shift((boolean[]) null, 3);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      int[] intArray0 = new int[0];
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, intArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (short)578;
      longArray0[2] = (long) (short)578;
      longArray0[3] = (long) 3;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      ArrayUtils.swap(longArray0, 3, (-225), 3);
      assertArrayEquals(new long[] {3L, 1L, 1L, 3L, 578L, 578L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (short) (-336);
      longArray0[2] = (long) (short) (-336);
      longArray0[3] = (long) (short) (-336);
      longArray0[4] = (long) (short) (-336);
      longArray0[5] = (long) (short) (-336);
      longArray0[6] = (long) (short) (-336);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-336L), (-336L), (-336L), (-336L), (-336L), (-336L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)111, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = (-4807);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-4807);
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)111;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (byte)111;
      floatArray0[6] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4807), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4807, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)117;
      shortArray0[2] = (short) (byte) (-67);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)117, (short) (-67), (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)117, (short) (-67), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      ArrayUtils.shift(shortArray0, (int) (short)0, 2, (int) (short) (-67));
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)117, (short)0, (short) (-67), (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert((-1729), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = object0;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5], (-1639));
      assertEquals(1, int0);
      assertEquals(8, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1514));
      assertEquals((-1514), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 9;
      Integer integer1 = new Integer(9);
      assertEquals(9, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(657);
      assertEquals(657, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (-1514));
      assertArrayEquals(new long[] {(-1514L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 657;
      floatArray0[2] = (float) 657;
      floatArray0[3] = (float) (-1514);
      floatArray0[4] = (float) 9;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (-508.0F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 657.0F, 657.0F, (-1514.0F), 9.0F, 9.0F, (-508.0F)}, floatArray0, 0.01F);
      assertEquals(0, int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1708);
      int int0 = ArrayUtils.indexOf(intArray0, (-1708), (-1708));
      assertArrayEquals(new int[] {(-1708)}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) byteArray0, object1, (int) (byte)0);
      assertNotSame(object1, object0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(1, byteArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray2 = ArrayUtils.remove(byteArray1, (int) (byte)0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'A';
      charArray0[2] = 'q';
      charArray0[3] = 'W';
      charArray0[4] = 'n';
      ArrayUtils.shift(charArray0, (-1312), (int) (short)2311, (int) (short)2311);
      assertArrayEquals(new char[] {'n', '-', 'A', 'q', 'W'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      short short0 = (short) (-2291);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-2291);
      doubleArray0[1] = (double) (short) (-2291);
      doubleArray0[2] = (double) (short) (-2291);
      doubleArray0[3] = (double) (short) (-2291);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-2291);
      doubleArray0[6] = (double) (short) (-2291);
      doubleArray0[7] = (double) (short) (-2291);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-2291.0), (-2291.0), (-2291.0), (-2291.0), 0.0, (-2291.0), (-2291.0), (-2291.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray2);
      
      double[] doubleArray3 = ArrayUtils.addFirst((double[]) null, (-2291.0));
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2291.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      Short[] shortArray1 = new Short[9];
      try { 
        Short.valueOf("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.NumberUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int[] intArray0 = new int[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(2, int0);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3, 5, 7}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Integer integer0 = new Integer(1864);
      assertEquals(1864, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) integer0, 1);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      long[] longArray0 = new long[0];
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 484;
      intArray0[0] = 484;
      short short0 = (short)1;
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 484);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 484);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 484, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Integer integer0 = new Integer((-378));
      assertEquals((-378), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-378));
      assertEquals((-378), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-378));
      assertEquals((-378), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(92);
      assertEquals(92, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long1;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long1;
      longArray0[7] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2452L);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)33;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-9750);
      shortArray0[4] = (short)798;
      shortArray0[5] = (short) (-2680);
      shortArray0[6] = (short) (-1674);
      shortArray0[7] = (short)1607;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)1607);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)33, (short)0, (short) (-9750), (short)798, (short) (-2680), (short) (-1674), (short)1607}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)33, (short)0, (short) (-9750), (short)798, (short) (-2680), (short) (-1674), (short)1607}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Integer integer0 = new Integer((-378));
      assertEquals((-378), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-378));
      assertEquals((-378), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-378));
      assertEquals((-378), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      int int0 = 92;
      Integer integer3 = new Integer(92);
      assertEquals(92, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[1] = integer3;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-378);
      floatArray0[1] = (float) int0;
      floatArray0[2] = 320.24F;
      floatArray0[3] = (float) 92;
      ArrayUtils.shift(floatArray0, (-378), 2, int0);
      assertArrayEquals(new float[] {(-378.0F), 92.0F, 320.24F, 92.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 443, (-944), 443);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "");
      assertEquals(2, stringArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(stringArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1.0F);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-378);
      doubleArray0[1] = (-1315.5850907);
      doubleArray0[2] = (double) 92.0F;
      doubleArray0[3] = 576.125371669771;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-378.0), (-1315.5850907), 92.0, 576.125371669771}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-378.0), (-1315.5850907), 92.0, 92.0, 576.125371669771}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      
      Short short0 = new Short((short)3183);
      assertEquals((short)3183, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)111;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)1534;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short)3183;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)111, (short) (-1), (short)1534, (short) (-1), (short)3183}, shortArray0);
      assertArrayEquals(new short[] {(short)111, (short) (-1), (short)1534, (short) (-1), (short)3183, (short)111, (short) (-1), (short)1534, (short) (-1), (short)3183}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((short)3183);
      assertEquals(3183, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeAllOccurences((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse((int[]) null, (int) (byte)0, (int) (byte)0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (byte)0, (float) (byte)0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3037;
      shortArray0[1] = (short) (-2030);
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)3037, (short) (-2030), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3037, (short) (-2030), (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)59);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, int0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146274478), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146274478, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-828);
      intArray0[1] = 2324;
      intArray0[2] = 2324;
      intArray0[3] = (-137);
      intArray0[4] = 2324;
      intArray0[5] = 1;
      intArray0[6] = 2324;
      intArray0[7] = (int) ':';
      ArrayUtils.swap(intArray0, 0, (-4113), 2324);
      assertArrayEquals(new int[] {(-828), 2324, 2324, (-137), 2324, 1, 2324, 58}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift((short[]) null, 779);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.TYPE;
      assertSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      classArray0[2] = class1;
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1903);
      shortArray0[1] = (short)271;
      shortArray0[2] = (short)117;
      shortArray0[3] = (short)2357;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)880;
      shortArray0[6] = (short) (-1406);
      shortArray0[7] = (short) (-3458);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1903));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1903), (short) (-1903), (short)271, (short)117, (short)2357, (short)4, (short)880, (short) (-1406), (short) (-3458)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1903), (short)271, (short)117, (short)2357, (short)4, (short)880, (short) (-1406), (short) (-3458)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-3458);
      longArray0[1] = 2325L;
      longArray0[2] = (long) (short)271;
      longArray0[3] = (long) (short)880;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-3458L), 2325L, 271L, 880L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-3458L), 2325L, 271L, 880L}, longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-5));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) int0);
      assertTrue(int0 == int1);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray3 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = '5';
      charArray0[2] = 'L';
      charArray0[3] = 'x';
      charArray0[4] = 'y';
      charArray0[5] = 'r';
      charArray0[6] = ';';
      charArray0[7] = '1';
      charArray0[8] = 'b';
      ArrayUtils.shift(charArray0, (-1), (-1), (-1));
      assertArrayEquals(new char[] {'F', '5', 'L', 'x', 'y', 'r', ';', '1', 'b'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)55);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {55L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(3, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(3, object1);
      assertEquals(3, objectArray0.length);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      ArrayUtils.swap(objectArray0, 3, (int) (short)55, (int) (short)55);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'x';
      ArrayUtils.shift(charArray0, 401, 401, 85);
      assertArrayEquals(new char[] {'L', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)17;
      shortArray0[1] = (short) (byte)17;
      shortArray0[2] = (short) (byte)17;
      shortArray0[3] = (short) (byte)17;
      shortArray0[4] = (short) (byte)17;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)17, (short)17, (short)17, (short)17}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (int) (short)17);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L, 0L, (-1L), 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      Integer integer0 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer0);
      assertEquals(9, integerArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[5] = integerArray0[3];
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-1);
      integerArray0[8] = (Integer) (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2369), integerArray0[4], 11).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean2);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3977);
      ArrayUtils.shift(shortArray0, (-40), 1803, (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-3977), (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 880);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'U';
      charArray0[4] = 'm';
      charArray0[5] = 'q';
      charArray0[6] = 'S';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'q', 7);
      assertArrayEquals(new char[] {'U', 'd', 'd', 'U', 'm', 'q', 'S'}, charArray0);
      assertEquals(5, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3016.0F;
      floatArray0[4] = (-1438.3712F);
      floatArray0[5] = 2965.222F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1109.0F);
      floatArray0[8] = 114.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 3016.0F;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 114.0F;
      doubleArray1[1] = (-1172.6715808);
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) (-274.1607F);
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) (-1109.0F);
      doubleArray1[6] = (double) 1.0F;
      doubleArray1[7] = (double) 2965.222F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3016.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {114.0, (-1172.6715808), 1.0, (-274.16070556640625), 1.0, (-1109.0), 1.0, 2965.221923828125}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1078));
      assertEquals((-1078), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shift(floatArray0, (-1176), (-1078), (-1078));
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 3016.0F, (-1438.3712F), 2965.222F, 1.0F, (-1109.0F), 114.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = new int[1];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Integer integer0 = new Integer((-107));
      assertEquals((-107), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-107);
      intArray1[1] = (-107);
      intArray1[2] = (-107);
      intArray1[3] = (-107);
      intArray1[4] = 1136;
      intArray1[5] = (-1176);
      intArray1[6] = 1136;
      intArray1[7] = 76;
      int[] intArray2 = ArrayUtils.addAll(intArray1, (int[]) null);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-107), (-107), (-107), (-107), 1136, (-1176), 1136, 76}, intArray1);
      assertArrayEquals(new int[] {(-107), (-107), (-107), (-107), 1136, (-1176), 1136, 76}, intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-186);
      intArray3[1] = 1136;
      intArray3[2] = 1136;
      intArray3[3] = (-1176);
      boolean boolean0 = ArrayUtils.isEmpty(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {(-186), 1136, 1136, (-1176)}, intArray3);
      assertFalse(boolean0);
      assertEquals(4, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      int[] intArray4 = ArrayUtils.removeElement(intArray1, (-186));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {(-107), (-107), (-107), (-107), 1136, (-1176), 1136, 76}, intArray1);
      assertArrayEquals(new int[] {(-107), (-107), (-107), (-107), 1136, (-1176), 1136, 76}, intArray4);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray4.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotNull(intArray4);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1176);
      floatArray0[1] = (float) (-107);
      floatArray0[2] = (float) (-186);
      floatArray0[3] = (float) (-107);
      boolean boolean2 = ArrayUtils.contains(floatArray0, (float) (-107));
      assertArrayEquals(new float[] {(-1176.0F), (-107.0F), (-186.0F), (-107.0F)}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-1173);
      shortArray0[2] = (short)4163;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short)661;
      shortArray0[5] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)54);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)1136, (short) (-1173), (short)4163, (short)46, (short)661, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Integer integer0 = new Integer(2818);
      assertEquals(2818, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2818);
      assertArrayEquals(new int[] {2818}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Character character0 = new Character('c');
      assertEquals('c', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(';');
      assertEquals(';', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'c');
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, 2818, 2, 2818);
      assertEquals(1, characterArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2818}, intArray0);
      assertArrayEquals(new int[] {2818}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)67;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-22), 3305);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte)1, (byte)125, (byte)8, (byte) (-29), (byte)11, (byte)14, (byte) (-22), (byte)67}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2291);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-2291L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer((short) (-2291));
      assertEquals((-2291), (int)integer0);
      assertNotNull(integer0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Integer integer1 = new Integer(55);
      assertEquals(55, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      assertFalse(integer0.equals((Object)integer1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)106;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)99);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte)1, (byte) (-66), (byte)106}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-1), (byte)99, (byte)1, (byte) (-66), (byte)106}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (-2291L);
      floatArray0[2] = (float) (byte) (-66);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte)99;
      floatArray0[6] = (float) (byte) (-66);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-66));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-2291.0F), (-66.0F), (-1.0F), (-1.0F), 99.0F, (-66.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-66.0F), 1.0F, (-2291.0F), (-66.0F), (-1.0F), (-1.0F), 99.0F, (-66.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short) (-3632);
      shortArray0[2] = (short)5090;
      shortArray0[3] = (short) (-121);
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)462;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-33), (short) (-3632), (short)5090, (short) (-121), (short)55, (short)462}, shortArray0);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((int) (short)55, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'H', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '1';
      characterArray0[1] = (Character) 'H';
      characterArray0[2] = (Character) 'H';
      characterArray0[3] = (Character) '1';
      characterArray0[4] = (Character) 'H';
      characterArray0[5] = (Character) '1';
      characterArray0[6] = (Character) 'H';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)82;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-121);
      intArray0[1] = (int) 'H';
      intArray0[2] = (int) (short)462;
      intArray0[3] = 2428;
      intArray0[4] = (int) 'H';
      intArray0[5] = 64;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2428, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = (float) 'V';
      ArrayUtils.swap(floatArray0, 4, (-2146221164), 4);
      assertArrayEquals(new float[] {86.0F, 86.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 56L, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2514L), (int) (byte)0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (byte)0;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 3926, (-1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'D';
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {68, 2}, intArray0);
      assertArrayEquals(new int[] {68, 2, 68, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = (-212);
      Integer integer0 = new Integer(2146687623);
      assertEquals(2146687623, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 68;
      objectArray0[1] = (Object) 68;
      objectArray0[2] = (Object) 68;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 68;
      Integer integer1 = new Integer(2146687623);
      assertEquals(2146687623, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1564.18497), (double) 68);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)7;
      shortArray0[4] = (short)7;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)7;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(79);
      assertEquals(79, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap(shortArray1, (-1), (int) (short)7, (-1214));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, (Integer) null);
      assertNull(integerArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('m');
      assertEquals('m', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('b');
      assertEquals('b', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('B');
      assertEquals('B', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('u');
      assertEquals('u', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '0');
      assertArrayEquals(new char[] {',', '\"', 'm', 'b', 'B', 'u'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = '?';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3340);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3340), 0);
      assertArrayEquals(new short[] {(short) (-3340)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.TYPE;
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      classArray0[2] = class1;
      Short short0 = new Short((short)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)114, (short)114, (short)114, (short)114}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'U';
      charArray0[2] = 'x';
      charArray0[3] = 'm';
      charArray0[4] = '-';
      charArray0[5] = '?';
      charArray0[6] = '2';
      charArray0[7] = 'k';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'T', 'U', 'x', 'm', '-', '?', '2', 'k'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Integer integer0 = new Integer((-2269));
      assertEquals((-2269), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 5;
      longArray0[3] = (long) 5;
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 5L, 0L, 5L, 0L, 0L}, longArray0);
      assertTrue(boolean1);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-789));
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-789);
      doubleArray0[1] = (double) 5L;
      doubleArray0[2] = (double) 5L;
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-789.0), 5.0, 5.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)100;
      boolean boolean3 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)100}, shortArray0);
      assertTrue(boolean3);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-789), 1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 5L;
      floatArray0[1] = (float) 5L;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (-2094.9F);
      floatArray0[5] = (float) 5L;
      floatArray0[6] = (float) 1L;
      floatArray0[7] = (float) 5L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2094.9F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {5.0F, 5.0F, (-1.0F), 1.0F, 5.0F, 1.0F, 5.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5.0F, 5.0F, (-1.0F), 1.0F, (-2094.9F), 5.0F, 1.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {5.0F, 5.0F, (-1.0F), 1.0F, 5.0F, 1.0F, 5.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5.0F, 5.0F, (-1.0F), 1.0F, (-2094.9F), 5.0F, 1.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2094.9F);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 5L;
      doubleArray0[3] = (double) (-2094.9F);
      doubleArray0[4] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.insert(5, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2094.89990234375), 1.0, 5.0, (-2094.89990234375), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2094.89990234375), 1.0, 5.0, (-2094.89990234375), 1.0, (-2094.89990234375), 1.0, 5.0, (-2094.89990234375), 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Integer integer0 = new Integer((-387));
      assertEquals((-387), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-387));
      assertEquals((-387), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-387));
      assertEquals((-387), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      int int0 = 92;
      Integer integer3 = new Integer(92);
      assertEquals(92, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[1] = integer3;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2340;
      floatArray0[1] = (float) int0;
      floatArray0[2] = 320.24F;
      floatArray0[3] = (float) 92;
      ArrayUtils.shift(floatArray0, (-387), 2, int0);
      assertArrayEquals(new float[] {2340.0F, 92.0F, 320.24F, 92.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 443, (-944), 443);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "");
      assertEquals(2, stringArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(stringArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1.0F);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = Integer.valueOf(1862);
      assertEquals(1862, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(1862, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer1 = new Integer(1862);
      assertEquals(1862, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer1);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1862;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 1862.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1862;
      intArray0[1] = 1862;
      intArray0[2] = 1862;
      intArray0[3] = 0;
      intArray0[4] = (-2312);
      intArray0[5] = 1862;
      intArray0[6] = 0;
      intArray0[7] = 1862;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 14;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1296, 23);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 14}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), 0, (-1128));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 23;
      intArray2[1] = (int) (byte)0;
      intArray2[2] = 2;
      intArray2[3] = (int) (byte)0;
      ArrayUtils.shift(intArray2, 2, 3054, 5408);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {23, 0, 2, 0}, intArray2);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '#';
      charArray0[2] = 'x';
      charArray0[3] = '<';
      charArray0[4] = '7';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'l');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'`', '#', 'x', '<', '7'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1804.44F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(59, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 505L;
      longArray0[1] = 505L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {505L, 505L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)7;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-2868), 55, (-2868));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, 39);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 39;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 224.2307676;
      doubleArray0[7] = (double) 39;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2587.0298037129073);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 39.0, 0.0, 0.0, 0.0, 224.2307676, 39.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 39.0, 0.0, 0.0, 0.0, 224.2307676, 39.0, 2587.0298037129073}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) null, 866);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 866;
      intArray0[2] = 866;
      intArray0[3] = 1181;
      intArray0[4] = (-1);
      intArray0[5] = 3;
      intArray0[6] = 115;
      intArray0[7] = 866;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'Y';
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 272);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, 'D');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new char[] {'A', 'A', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 0, 'B');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'A', 'A', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'B'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray1, 'B');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertArrayEquals(new char[] {'A', 'A', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      
      char[] charArray3 = ArrayUtils.removeAll(charArray2, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'B'}, charArray2);
      assertArrayEquals(new char[] {}, charArray3);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray2.length);
      assertEquals(0, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2311;
      shortArray1[1] = (short)2311;
      shortArray1[2] = (short)2311;
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)2311, (short)2311, (short)2311}, shortArray1);
      assertArrayEquals(new short[] {(short)2311, (short)2311, (short)2311}, shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Integer integer0 = new Integer((short)2311);
      assertEquals(2311, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)2311;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) (short)2311;
      longArray0[3] = (long) (short)2311;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      boolean boolean2 = ArrayUtils.contains(longArray0, 1636L);
      assertArrayEquals(new long[] {2311L, 6L, 2311L, 2311L, 6L, 6L}, longArray0);
      assertFalse(boolean2);
      assertEquals(6, longArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 6L;
      doubleArray0[2] = (double) (-1312);
      doubleArray0[3] = (double) (short)2311;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1636L;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1312), (double) (short)2311);
      assertArrayEquals(new double[] {(-1.0), 6.0, (-1312.0), 2311.0, (-1.0), 1636.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1592);
      shortArray0[2] = (short) (-1300);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 974);
      assertArrayEquals(new short[] {(short)0, (short) (-1592), (short) (-1300)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(3, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)55);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)79, (byte) (-63), (byte)59, (byte)79}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 523);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)24);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer((byte)24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "dF'adcbM]");
      assertEquals("24", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)61;
      doubleArray0[1] = (double) (byte)24;
      doubleArray0[2] = (double) (byte)20;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (double) (byte)24;
      ArrayUtils.swap(doubleArray0, 78, 78, 1158);
      assertArrayEquals(new double[] {61.0, 24.0, 20.0, 20.0, 24.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1093.997717872));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {61.0, 24.0, 20.0, 20.0, 24.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61.0, 24.0, 20.0, 20.0, 24.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1158;
      longArray0[1] = (long) 523;
      longArray0[2] = 1188L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1188L, 1365);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {1158L, 523L, 1188L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'I', 'I', 'I'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 'I';
      doubleArray0[2] = (double) (-1772);
      doubleArray0[3] = (double) 'I';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1772), 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0, (-1772.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray0, 2, 82, (-317));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1265;
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'I';
      intArray0[4] = 2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1265, 73, 73, 73, 2}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {73.0, (-1772.0), 73.0, 73.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Byte[] byteArray0 = null;
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[15];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte) (-101));
      assertEquals((-101), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 48;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 2);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-850));
      assertEquals("-850", mutableInt0.toString());
      assertEquals((short) (-850), mutableInt0.shortValue());
      assertEquals((-850.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-850), mutableInt0.intValue());
      assertEquals((-850L), mutableInt0.longValue());
      assertEquals((-850.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-850), (int)mutableInt0.toInteger());
      assertEquals((byte) (-82), mutableInt0.byteValue());
      assertEquals((-850), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add(4899);
      assertEquals((byte) (-47), mutableInt0.byteValue());
      assertEquals(4049, (int)mutableInt0.toInteger());
      assertEquals((short)4049, mutableInt0.shortValue());
      assertEquals(4049, mutableInt0.intValue());
      assertEquals(4049.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4049.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4049L, mutableInt0.longValue());
      assertEquals("4049", mutableInt0.toString());
      assertEquals(4049, (int)mutableInt0.getValue());
      
      MutableInt mutableInt1 = new MutableInt(1);
      assertEquals(1L, mutableInt1.longValue());
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1, mutableInt1.intValue());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("1", mutableInt1.toString());
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals(1, (int)mutableInt1.getValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int1 = mutableInt1.getAndDecrement();
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(1, int1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      
      Integer integer2 = mutableInt1.toInteger();
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)integer2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-101L);
      doubleArray0[3] = (double) (-101L);
      doubleArray0[4] = (double) 4899;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1093.16795383, 1, 0.14764926053612726);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {1.0, 1.0, (-101.0), (-101.0), 4899.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      long[] longArray0 = new long[6];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1082;
      shortArray0[1] = (short)1700;
      shortArray0[2] = (short)1700;
      shortArray0[3] = (short)1700;
      shortArray0[4] = (short)1700;
      shortArray0[5] = (short)1700;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1082, (short)1700, (short)1700, (short)1700, (short)1700, (short)1700}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1700;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)1700, 1700.0);
      assertArrayEquals(new double[] {1700.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, (-1), 7, (-2127));
      assertArrayEquals(new short[] {(short)1082, (short)1700, (short)1700, (short)1700, (short)1700, (short)1700}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean1);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)56);
      assertArrayEquals(new short[] {(short)1082, (short)1700, (short)1700, (short)1700, (short)1700, (short)1700}, shortArray0);
      assertFalse(boolean2);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)59;
      longArray0[1] = (long) (short)59;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (short)59;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), (int) (byte) (-1));
      assertArrayEquals(new long[] {59L, 59L, (-1L), (-1L), (-1L), 59L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-4530.69), (int) (byte) (-1), (double) (byte) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)73;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray2, (byte)73);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-1), (byte) (-1)}, byteArray2);
      assertTrue(boolean0);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.contains(byteArray2, (byte)2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-1), (byte) (-1)}, byteArray2);
      assertFalse(boolean1);
      assertEquals(3, byteArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.swap(byteArray0, 0, (int) (byte) (-1), 1136);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 1136);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(0, int2);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ", '");
      assertNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (long) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(0, int1);
      assertEquals(5, longArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1092.77));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(1, doubleArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-913);
      int[] intArray0 = new int[7];
      intArray0[0] = 1136;
      intArray0[1] = 1136;
      intArray0[2] = (-913);
      intArray0[3] = 1136;
      intArray0[4] = (-913);
      intArray0[5] = (int) (byte)101;
      intArray0[6] = (int) (byte)101;
      ArrayUtils.shift(intArray0, 101, 1327, 1136);
      assertArrayEquals(new int[] {1136, 1136, (-913), 1136, (-913), 101, 101}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-913L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-913L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)101;
      shortArray0[1] = (short) (byte)101;
      shortArray0[2] = (short) (byte)101;
      shortArray0[3] = (short) (byte)101;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)101);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)101, (short)101, (short)101, (short)101}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1136, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2008));
      assertEquals((-1), int0);
      
      Long long0 = new Long(1108L);
      assertEquals(1108L, (long)long0);
      assertNotNull(long0);
      
      long long1 = 1L;
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long2;
      longArray0[1] = long0;
      longArray0[2] = long2;
      longArray0[3] = long2;
      Integer integer0 = Integer.getInteger("Array element ");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Short short0 = new Short((short) (-2008));
      assertEquals((short) (-2008), (short)short0);
      assertNotNull(short0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals((-2008), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-2008), (int)mutableInt0.toInteger());
      assertEquals((short) (-2008), mutableInt0.shortValue());
      assertEquals("-2008", mutableInt0.toString());
      assertEquals((-2008L), mutableInt0.longValue());
      assertEquals((-2008), mutableInt0.intValue());
      assertEquals((-2008.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2008.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-2008), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-2008), (int)mutableInt0.toInteger());
      assertEquals((short) (-2008), mutableInt0.shortValue());
      assertEquals("-2008", mutableInt0.toString());
      assertEquals((-2008L), mutableInt0.longValue());
      assertEquals((-2008), mutableInt0.intValue());
      assertEquals((-2008.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2008.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2008), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      String string1 = ArrayUtils.toString((Object) integer1, (String) null);
      assertEquals((-2008), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-2008), (int)mutableInt0.toInteger());
      assertEquals((short) (-2008), mutableInt0.shortValue());
      assertEquals("-2008", mutableInt0.toString());
      assertEquals((-2008L), mutableInt0.longValue());
      assertEquals((-2008), mutableInt0.intValue());
      assertEquals((-2008.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2008.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2008", string1);
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) long1;
      doubleArray0[1] = (double) 1108L;
      doubleArray0[2] = (-2648.99104165095);
      doubleArray0[3] = (double) long1;
      doubleArray0[4] = (double) long1;
      doubleArray0[5] = (double) long1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1108.0, (-2648.99104165095), 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1108.0, (-2648.99104165095), 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-336));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null, 7);
      assertNull(intArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-590));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-67);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[3] = (double) (-1712);
      doubleArray0[2] = (double) (-67L);
      doubleArray0[3] = (double) (-1712);
      doubleArray0[4] = (double) (-1712);
      doubleArray0[5] = (double) (-67);
      doubleArray0[6] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 474);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-67.0), (-1712.0), (-1712.0), (-67.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-5186));
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1002.5800420246592, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-67.0), (-1712.0), (-1712.0), (-67.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-67), (-590));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2696, 8);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 2372, (-1), (-884));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 491L;
      longArray0[1] = (-190L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {491L, (-190L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      ArrayUtils.swap(longArray0, (-2021), 2, (int) (byte) (-1));
      assertArrayEquals(new long[] {491L, (-190L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-15);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-15)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte) (-15);
      shortArray2[1] = (short) (byte) (-15);
      shortArray2[2] = (short)62;
      shortArray2[3] = (short)1937;
      shortArray2[4] = (short) (byte) (-15);
      shortArray2[5] = (short) (byte) (-1);
      shortArray2[6] = (short)1421;
      short[] shortArray3 = ArrayUtils.insert(0, shortArray2, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15), (short)62, (short)1937, (short) (-15), (short) (-1), (short)1421}, shortArray2);
      assertEquals(14, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(10, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      Long long0 = new Long((short)59);
      assertEquals(59L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'i';
      charArray0[2] = 'O';
      charArray0[3] = '#';
      charArray0[4] = 'N';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'_', 'i', 'O', '#', 'N', 'j'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, 55);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1495.93F);
      assertEquals(1495.93F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ArrayUtils.swap((double[]) null, (-1), (-836), 2);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 4441);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4441}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray2, (Object) integer0, 4441);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(bitSet0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String string0 = ArrayUtils.toString((Object) integer1, "J6c^3xtk|uT|Q");
      assertEquals("2", string0);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(string0);
      
      boolean[] booleanArray3 = new boolean[3];
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      boolean[] booleanArray4 = ArrayUtils.clone(booleanArray3);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray4));
      assertEquals(3, booleanArray3.length);
      assertEquals(3, booleanArray4.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertNotNull(booleanArray4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J6c^3xtk|uT|Q";
      stringArray0[1] = "2";
      stringArray0[2] = "J6c^3xtk|uT|Q";
      stringArray0[3] = ")`xDb";
      stringArray0[4] = "";
      stringArray0[5] = "J6c^3xtk|uT|Q";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 4441;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-836);
      longArray0[5] = (long) 4441;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) (-836);
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.remove(longArray0, 6);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {2L, 4441L, 2L, (-1L), (-836L), 4441L, (-836L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {2L, 4441L, 2L, (-1L), (-836L), 4441L, 2L, (-836L), (-1L)}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)521;
      shortArray0[2] = (short)355;
      shortArray0[3] = (short)661;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)521, (short)355, (short)661}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)355, (short)661}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-127), 2, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)59;
      doubleArray0[1] = (double) 1688;
      doubleArray0[2] = (double) 1688;
      doubleArray0[3] = (double) (short)59;
      ArrayUtils.shift(doubleArray0, (-1926), 3570, (-913));
      assertArrayEquals(new double[] {1688.0, 1688.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1688.0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(1688.0, object0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 1688.0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-110));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3897);
      intArray0[1] = (-1926);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1226), (int) (short)59);
      assertArrayEquals(new int[] {(-3897), (-1926)}, intArray0);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (-226L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1920L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1097L));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1097.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1, 1);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(10, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      Long long0 = new Long(2530L);
      assertEquals(2530L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short)59);
      assertEquals(59L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)59;
      longArray0[1] = 2530L;
      longArray0[2] = 2530L;
      longArray0[3] = 2530L;
      longArray0[4] = (long) (short)59;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {59L, 2530L, 2530L, 2530L, 59L}, longArray0);
      assertArrayEquals(new long[] {59L, 2530L, 2530L, 2530L, 59L, 59L, 2530L, 2530L, 2530L, 59L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.shift((short[]) null, (int) (short)59);
      Long[] longArray2 = new Long[5];
      longArray2[0] = long0;
      longArray2[1] = (Long) 2530L;
      longArray2[2] = (Long) 59L;
      longArray2[3] = long1;
      longArray2[4] = (Long) 59L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-1L));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {2530L, 2530L, 59L, 59L, 59L}, longArray3);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 376);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((byte[]) null, 3533);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '[';
      doubleArray0[1] = (double) '[';
      doubleArray0[2] = (double) 3533;
      doubleArray0[3] = (double) 3533;
      doubleArray0[4] = (double) 3533;
      doubleArray0[5] = (-685.886076036915);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 3533.0, 3533.0, 3533.0, (-685.886076036915)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 354.84046);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 3533.0, 3533.0, 3533.0, (-685.886076036915)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {354.84046, 91.0, 91.0, 3533.0, 3533.0, 3533.0, (-685.886076036915)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)9404;
      shortArray0[1] = (short)9404;
      shortArray0[2] = (short)9404;
      shortArray0[3] = (short) (-135);
      shortArray0[4] = (short)9404;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 84, (int) (short) (-135));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)9404, (short)9404, (short)9404, (short) (-135), (short)9404}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)4;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-97));
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-61), (byte)76, (byte) (-77), (byte)59, (byte) (-12), (byte)85, (byte)22, (byte)4}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "ExpectedException");
      assertEquals("ExpectedException", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)51;
      byte byte1 = (byte)115;
      byteArray0[6] = (byte)115;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-71), (byte)2, (byte) (-8), (byte) (-68), (byte)51, (byte)115}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(charArray0, (int) (byte) (-68), 1176);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-68);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)51, 274);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-68)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (byte) (-8), (int) (byte)108);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-68)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, (-1), 45, (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 37;
      intArray1[1] = 1;
      intArray1[2] = 37;
      intArray1[3] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {37, 1, 37, 0}, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Long long0 = new Long((-852L));
      assertEquals((-852L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-4092L));
      assertEquals((-4092L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 37);
      assertArrayEquals(new long[] {(-4092L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer(37);
      assertEquals(37, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {37, 1, 37, 0}, intArray1);
      assertTrue(boolean0);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integer1.equals((Object)integer0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2610;
      shortArray0[1] = (short)117;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2746;
      shortArray0[4] = (short) (-1840);
      shortArray0[5] = (short) (-1176);
      shortArray0[6] = (short)1323;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1840));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1840), (short)2610, (short)117, (short) (-1), (short)2746, (short) (-1840), (short) (-1176), (short)1323}, shortArray1);
      assertArrayEquals(new short[] {(short)2610, (short)117, (short) (-1), (short)2746, (short) (-1840), (short) (-1176), (short)1323}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'u';
      charArray0[3] = 'c';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'L', '~', 'u', 'c'}, charArray0);
      assertArrayEquals(new char[] {'L', '~', 'u', 'c', 'L', '~', 'u', 'c'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)50;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte) (-52), (byte)50}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Integer integer0 = new Integer(2176);
      assertEquals(2176, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("2176", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2176;
      longArray0[1] = (long) 2176;
      longArray0[2] = (long) 2176;
      longArray0[3] = (long) 2176;
      longArray0[4] = 1L;
      longArray0[5] = (long) 2176;
      longArray0[6] = (long) 2176;
      ArrayUtils.shift(longArray0, 2176, 2176, 2176);
      assertArrayEquals(new long[] {2176L, 2176L, 2176L, 2176L, 1L, 2176L, 2176L}, longArray0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2176;
      ArrayUtils.swap(intArray0, (-2705), (-2705), (-3362));
      assertArrayEquals(new int[] {2176}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2176L);
      assertArrayEquals(new long[] {2176L, 2176L, 2176L, 2176L, 1L, 2176L, 2176L}, longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ';';
      charArray1[1] = 'P';
      charArray1[2] = '7';
      charArray1[3] = '$';
      charArray1[4] = '\"';
      charArray1[5] = '7';
      boolean boolean2 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', 'P', '7', '$', '\"', '7'}, charArray1);
      assertFalse(boolean2);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-555.0F));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)101;
      shortArray0[1] = (short) (byte)101;
      shortArray0[2] = (short) (byte)101;
      shortArray0[3] = (short) (byte)101;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)101, (short)101, (short)101, (short)101}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)101;
      intArray0[1] = (int) (short)101;
      intArray0[2] = (int) (short)101;
      ArrayUtils.shift(intArray0, (-1147), (int) (short)101, 1572);
      assertArrayEquals(new int[] {101, 101, 101}, intArray0);
      assertEquals(3, intArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)101, (short)101, (short)101, (short)101}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)101, 2057);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1518.6833313);
      doubleArray0[1] = (double) (short)101;
      doubleArray0[2] = (double) 101;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1518.6833313), 101.0, 101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {101.0, 101.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-1087), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(10, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      Long long0 = new Long(2530L);
      assertEquals(2530L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short)59);
      assertEquals(59L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-4366L));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 0, 0);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-1486), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (byte) (-98);
      doubleArray0[2] = (double) '8';
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 'V';
      doubleArray0[5] = (double) (byte) (-98);
      doubleArray0[6] = (double) 7;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2475.76720479), (int) (byte) (-98));
      assertArrayEquals(new double[] {1.5, (-98.0), 56.0, Double.NaN, 86.0, (-98.0), 7.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 710);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 7);
      assertArrayEquals(new double[] {1.5, (-98.0), 56.0, Double.NaN, 86.0, (-98.0), 7.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 710;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 7;
      intArray0[4] = 710;
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 710, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {710, (-1), (-1), 7, 710, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (-1L);
      ArrayUtils.swap(longArray0, 1, 2, 2);
      assertArrayEquals(new long[] {1L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2699);
      shortArray0[2] = (short)3541;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short)3541}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(1513);
      assertEquals(1513, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray2 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short) (-1), (short) (-2699), (short)3541, (short)3541}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short)3541}, shortArray0);
      assertEquals(6, shortArray2.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      ArrayUtils.shift((byte[]) null, 2287);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 115;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 59, 115);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1798));
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte) (-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-111);
      shortArray0[1] = (short) (byte) (-111);
      shortArray0[2] = (short) (byte) (-111);
      shortArray0[3] = (short) (byte) (-98);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, 121);
      assertArrayEquals(new short[] {(short) (-111), (short) (-111), (short) (-111), (short) (-98)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-98), 0);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals(0, int1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)59;
      objectArray0[4] = (Object) (short) (-921);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (short) (-921), 11);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(booleanArray1, true, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(3, int0);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'3', '3', '3'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(3, characterArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      org.evosuite.runtime.Random.setNextRandom((int) character0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (char)character0;
      longArray0[3] = (long) (char)character0;
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) (char)character0;
      longArray0[6] = (long) '3';
      longArray0[7] = (long) '3';
      longArray0[8] = (long) '3';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 51L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {51L, 51L, 51L, 51L, 51L, 51L, 51L, 51L, 51L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 9, 9);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2985.50731329;
      doubleArray0[1] = 2985.50731329;
      doubleArray0[2] = 2985.50731329;
      doubleArray0[4] = 2985.50731329;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2985.50731329, (-2336), 0.0);
      assertArrayEquals(new double[] {2985.50731329, 2985.50731329, 2985.50731329, 0.0, 2985.50731329}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, (-1), 0, 0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 1040, (-718), (-11));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)58;
      shortArray0[1] = (short) (-1372);
      shortArray0[2] = (short)247;
      shortArray0[3] = (short)618;
      shortArray0[4] = (short) (-12);
      shortArray0[5] = (short)117;
      shortArray0[6] = (short)255;
      shortArray0[7] = (short) (-55);
      shortArray0[8] = (short)30;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)4031);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)58, (short) (-1372), (short)247, (short)618, (short) (-12), (short)117, (short)255, (short) (-55), (short)30}, shortArray0);
      assertArrayEquals(new short[] {(short)58, (short) (-1372), (short)247, (short)618, (short) (-12), (short)117, (short)255, (short) (-55), (short)30}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-226L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1920L);
      longArray0[4] = 3851L;
      longArray0[5] = 5110L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1431655765), 2326);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-226L), (-1L), (-1920L), 3851L, 5110L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-226L), (-1L), (-1920L), 3851L, 5110L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)90}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.flip(3, (-3056));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -3056
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte)46;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (byte)46;
      doubleArray0[7] = (double) (byte)46;
      doubleArray0[6] = (double) (byte)46;
      doubleArray0[7] = (double) (byte)46;
      doubleArray0[8] = (double) (byte)46;
      ArrayUtils.shift(doubleArray0, (-3522), (int) (byte)46, 3562);
      assertArrayEquals(new double[] {46.0, (-1.0), 46.0, 0.0, 46.0, 46.0, 46.0, 46.0, 2.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {46.0, (-1.0), 46.0, 0.0, 46.0, 46.0, 46.0, 46.0, 2.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray2, doubleArray0);
      assertSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {46.0, (-1.0), 46.0, 0.0, 46.0, 46.0, 46.0, 46.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {46.0, (-1.0), 46.0, 0.0, 46.0, 46.0, 46.0, 46.0, 2.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1012), (-1037.275908188));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, 68, (-1), (-1012));
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, (-1012), 2340, 1720);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('7');
      assertEquals('7', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('7');
      assertEquals('7', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      characterArray0[1] = character2;
      Character character3 = Character.valueOf('7');
      assertEquals('7', (char)character3);
      assertNotNull(character3);
      
      characterArray0[2] = character3;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      Character character4 = Character.valueOf('F');
      assertEquals('F', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[6] = character4;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', 'F', '7'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (-1731.207));
      assertNull(doubleArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 274, 1033);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte) (-1);
      shortArray2[1] = (short) (byte) (-1);
      shortArray2[2] = (short) (byte) (-1);
      short[] shortArray3 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-1));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(2, shortArray3.length);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-103));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0L, 0, 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(14, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[10];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(10, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1817.1729F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (-1622);
      intArray0[8] = (-1059);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-1622), (-1059)}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-1622), (-1059)}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-391.7201F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(10, objectArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '~';
      charArray0[3] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2', (int) (short)59);
      assertArrayEquals(new char[] {'2', '2', '~', '%'}, charArray0);
      assertEquals(1, int0);
      assertEquals(4, charArray0.length);
      
      Integer integer0 = new Integer(1136);
      assertEquals(1136, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1657), (int) 59);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) 1136;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1136.0, 1136.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1136.0, 1136.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'2', '2', '~', '%'}, charArray0);
      assertArrayEquals(new char[] {'2', '2', '%'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)46;
      longArray0[1] = (long) (byte)46;
      longArray0[2] = (long) (byte)46;
      longArray0[3] = (long) (byte)46;
      longArray0[4] = (long) (byte)46;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)46);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {46L, 46L, 46L, 46L, 46L}, longArray0);
      assertArrayEquals(new long[] {46L, 46L, 46L, 46L, 46L, 46L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)46;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46, (byte)2, (byte)46}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray1 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1273.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1999, 90);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-67);
      longArray0[2] = (long) 100;
      longArray0[3] = (long) 100;
      longArray0[4] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, 1067, 2, 1067);
      assertArrayEquals(new long[] {(-1L), (-67L), 100L, 100L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)117;
      shortArray0[2] = (short) (byte) (-67);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-67);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short) (-67), (short) (-1), (short) (-67)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-67), (int) (short) (-1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short) (-67), (short) (-1), (short) (-67)}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 2, (int) (short) (-67));
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)117, (short) (-1), (short) (-67), (short) (-1), (short) (-67)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-67L), 100L, 100L, (-1L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (short)117;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 1067);
      assertArrayEquals(new double[] {(-1.0), 117.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2024;
      ArrayUtils.shift(shortArray0, (-184), 2145515195, (-5));
      assertArrayEquals(new short[] {(short)2024}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2291));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2291)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2291);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-2291L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((short) (-2291));
      assertEquals((-2291), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = ':';
      charArray0[2] = '`';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', ':', '`', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer1 = new Integer((-828));
      assertEquals((-828), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = (-137);
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)24, (int) (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2291)}, shortArray1);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((-205));
      assertEquals((-205), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)7);
      assertEquals(7, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(7, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 4);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)7;
      shortArray2[1] = (short)7;
      shortArray2[2] = (short)7;
      shortArray2[3] = (short)7;
      short[] shortArray3 = ArrayUtils.removeElements(shortArray1, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray3);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = 0;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, (int[]) null);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4, 0}, intArray2);
      assertArrayEquals(new int[] {4, 0}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "A blank string is not a valid number";
      stringArray0[2] = "OG1A4{_*}1";
      stringArray0[3] = "";
      stringArray0[4] = "I/*^|";
      stringArray0[5] = "p2^T%o<q(E$(";
      stringArray0[6] = "java.lang.Boolean";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)320;
      shortArray0[2] = (short)320;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)320;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)320, (short)320, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)320}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)320, (short)0}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 5;
      longArray0[3] = (long) 5;
      int[] intArray0 = new int[19];
      intArray0[0] = 5;
      intArray0[1] = 1327;
      intArray0[2] = 5;
      intArray0[3] = 1327;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 1327;
      intArray0[7] = 5;
      intArray0[8] = 5;
      ArrayUtils.shift(intArray0, 2, 2, 5);
      assertEquals(19, intArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {5L, 0L, 5L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2', 4);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1712));
      assertEquals((-1712), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      Integer integer2 = new Integer((-457));
      assertEquals((-457), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 3892, 2763);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'K');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'2'}, charArray1);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, 124.0, 4, (-3567.25));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)48;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-51), (byte)107, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-51), (byte)48}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) (-1L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      ArrayUtils.shift((Object[]) longArray1, 1974);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-123);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-15), (byte) (-123)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean1 = Boolean.valueOf("java.lang.Long");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Long");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray1[2] = boolean3;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, (-969), 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte) (-77);
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte) (-77);
      byteArray1[6] = (byte) (-77);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray1);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = 'D';
      charArray0[5] = 'Q';
      charArray0[6] = 'Y';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'z', 'g', 's', '(', 'D', 'Q', 'Y'}, charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)55);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {55L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)84);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)55;
      intArray0[1] = (-3652);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {55, (-3652)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      Short short0 = new Short((short)68);
      assertEquals((short)68, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2139029560;
      intArray0[1] = 2139029560;
      intArray0[2] = 2139029560;
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 1, 268);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2139029560;
      doubleArray0[1] = (double) (-466);
      doubleArray0[2] = (double) (-466);
      doubleArray0[3] = 589.101701;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.13902956E9, (-466.0), (-466.0), 589.101701}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.13902956E9, (-466.0), (-466.0), 589.101701}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-1);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-1);
      intArray1[3] = (int) (byte) (-1);
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = ':';
      charArray0[2] = '<';
      charArray0[3] = 'w';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', ':', '<', 'w'}, charArray0);
      assertArrayEquals(new char[] {'@', ':', '@', ':', '<', 'w', '<', 'w'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 0);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-70), (byte) (-1), (byte)2}, byteArray0);
      assertEquals(2, int0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-70);
      longArray0[1] = (long) (byte)35;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)35;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-70L), 35L, 0L, 35L, 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-70L), 35L, 0L, 35L, 2L, 2L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'h';
      charArray0[2] = '@';
      charArray0[3] = 'p';
      charArray0[4] = '-';
      charArray0[5] = 'r';
      charArray0[6] = '4';
      boolean boolean1 = ArrayUtils.contains(charArray0, '/');
      assertArrayEquals(new char[] {'$', 'h', '@', 'p', '-', 'r', '4'}, charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 48;
      try { 
        Integer.valueOf("java.lang.Boolean", 48);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 48 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[21];
      charArray0[0] = 'k';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-791), (int) (byte)0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(21, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) byte0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1981L), 2305);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-4501));
      assertEquals((-4501), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) integerArray0[0]);
      assertSame(integerArray0, integerArray1);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, characterArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) (char)character0;
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = 31.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4501.0), 51.0, 51.0, 51.0, 31.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      assertNotNull(classArray1);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, 17);
      assertSame(integerArray0, integerArray1);
      assertFalse(boolean1);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 8, 790);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)59);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {59L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2291);
      intArray0[1] = (int) (short)59;
      ArrayUtils.shift(intArray0, (-2303), (-2291), 0);
      assertArrayEquals(new int[] {(-2291), 59}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shuffle(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      ArrayUtils.shift(shortArray0, (-1));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)59;
      floatArray0[1] = (float) (short)59;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 53.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) floatArray0[0]);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[2] = 2985.50731329;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = 2985.50731329;
      doubleArray0[6] = (double) (byte)2;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.0, (int) (byte)2, (-2475.76720479));
      assertArrayEquals(new double[] {0.0, 0.0, 2985.50731329, 2.0, 0.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, (int) (byte)2, 1568, (int) (byte)2);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, 270, (int) (byte)2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      short[] shortArray0 = new short[11];
      ArrayUtils.shift(shortArray0, (-1129));
      assertEquals(11, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) true;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotNull(objectArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1388;
      doubleArray0[1] = (double) 1388;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-320.41774));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {1388.0, 1388.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-66);
      shortArray0[2] = (short)1170;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)3790;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1611;
      shortArray0[7] = (short) (-1651);
      ArrayUtils.shift(shortArray0, (int) (short)1);
      assertArrayEquals(new short[] {(short) (-1651), (short)127, (short) (-66), (short)1170, (short)1, (short)3790, (short)2, (short)1611}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1628));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)59;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)59;
      shortArray0[5] = (short)59;
      shortArray0[6] = (short) (-942);
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2163);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)59, (short) (-1), (short)59, (short)59, (short) (-942), (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2163, (short) (-1), (short) (-1), (short)59, (short) (-1), (short)59, (short)59, (short) (-942), (short) (-1), (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)2163);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '!';
      charArray0[2] = 'y';
      charArray0[3] = 'Q';
      charArray0[4] = '\\';
      char[] charArray1 = ArrayUtils.add(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', '!', 'y', 'Q', '\\'}, charArray0);
      assertArrayEquals(new char[] {'\'', '!', 'y', 'Q', '\\', 'X'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), (-1099));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-815), (int) (byte) (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-1));
      assertEquals((-1), int0);
      
      Character character0 = Character.valueOf('\"');
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('9');
      assertEquals('9', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '0');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'9', '9', '\"', '\"'}, charArray2);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1009.0447);
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-66));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-66);
      byteArray2[1] = (byte) (-66);
      byteArray2[2] = (byte) (-66);
      int int0 = ArrayUtils.indexOf(byteArray2, (byte) (-66), (int) (byte) (-66));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte) (-66)}, byteArray2);
      assertEquals(0, int0);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      MutableInt mutableInt0 = new MutableInt((-818));
      assertEquals((-818.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-818", mutableInt0.toString());
      assertEquals((-818), (int)mutableInt0.getValue());
      assertEquals((byte) (-50), mutableInt0.byteValue());
      assertEquals((-818), (int)mutableInt0.toInteger());
      assertEquals((short) (-818), mutableInt0.shortValue());
      assertEquals((-818), mutableInt0.intValue());
      assertEquals((-818L), mutableInt0.longValue());
      assertEquals((-818.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertEquals((byte) (-51), mutableInt0.byteValue());
      assertEquals((-819.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-819", mutableInt0.toString());
      assertEquals((-819), (int)mutableInt0.getValue());
      assertEquals((-819), (int)mutableInt0.toInteger());
      assertEquals((-819.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-819), mutableInt0.intValue());
      assertEquals((short) (-819), mutableInt0.shortValue());
      assertEquals((-819L), mutableInt0.longValue());
      assertEquals((-819), int1);
      assertFalse(int1 == int0);
      
      int int2 = mutableInt0.addAndGet(0);
      assertEquals((byte) (-51), mutableInt0.byteValue());
      assertEquals((-819.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-819", mutableInt0.toString());
      assertEquals((-819), (int)mutableInt0.getValue());
      assertEquals((-819), (int)mutableInt0.toInteger());
      assertEquals((-819.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-819), mutableInt0.intValue());
      assertEquals((short) (-819), mutableInt0.shortValue());
      assertEquals((-819L), mutableInt0.longValue());
      assertEquals((-819), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = mutableInt0.addAndGet((Number) (byte) (-66));
      assertEquals((-885.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-885), mutableInt0.shortValue());
      assertEquals((-885.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-885L), mutableInt0.longValue());
      assertEquals("-885", mutableInt0.toString());
      assertEquals((-885), mutableInt0.intValue());
      assertEquals((-885), (int)mutableInt0.toInteger());
      assertEquals((byte) (-117), mutableInt0.byteValue());
      assertEquals((-885), (int)mutableInt0.getValue());
      assertEquals((-885), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        mutableInt0.compareTo((MutableInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-123));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-28));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2291));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2291)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2291);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-2291L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer((short) (-2291));
      assertEquals((-2291), (int)integer0);
      assertNotNull(integer0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1920L));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3793.4165165402037), (-1712), (double) (-1712));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)2);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-997));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-997);
      longArray0[1] = (long) (-997);
      longArray0[2] = (-1326L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (byte)2;
      ArrayUtils.swap(longArray0, (-1), (int) (byte)2, 2140496372);
      assertArrayEquals(new long[] {(-1326L), (-1L), (-1L), 2L, (-997L), (-997L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1712, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-1));
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer1, (-1));
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((-1), int2);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Integer integer0 = new Integer((-3370));
      assertEquals((-3370), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-1082));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1712);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2706.0571F));
      assertArrayEquals(new float[] {(-1712.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-2706.0571F);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-2706.0571F);
      doubleArray0[4] = (double) (-1712.0F);
      doubleArray0[5] = (double) 3639L;
      doubleArray0[6] = (double) 3639L;
      doubleArray0[7] = (double) (-1712.0F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 7);
      assertArrayEquals(new double[] {0.0, (-2706.05712890625), 0.0, (-2706.05712890625), (-1712.0), 3639.0, 3639.0, (-1712.0)}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      int[] intArray0 = null;
      ArrayUtils.reverse((int[]) null, (int) (byte)0, (int) (byte)0);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1347.741);
      doubleArray0[1] = (-3793.4165165402037);
      doubleArray0[2] = (-3793.4165165402037);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-925.9082555), 2188, 75.7255734883);
      assertArrayEquals(new double[] {(-1347.741), (-3793.4165165402037), (-3793.4165165402037)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1231.355));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1231.355)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1431L;
      int[] intArray0 = new int[1];
      intArray0[0] = 41;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1090));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((int) (byte)59, 3703);
      assertNotNull(intStream0);
      
      mockRandom0.setSeed((byte)59);
      MockRandom mockRandom1 = new MockRandom((-1097L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1090));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1090.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)59;
      shortArray0[3] = (short) (byte)59;
      shortArray0[4] = (short) (byte)59;
      shortArray0[5] = (short) (byte)59;
      shortArray0[6] = (short) (byte)59;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, (int) (short)59);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59, (short)59}, shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59, (short)59, (short)59}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1090));
      assertEquals((-1090), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals(59, (int)integer2);
      assertEquals(3, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)59);
      assertEquals(59, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (byte)59;
      longArray0[3] = (long) 1;
      longArray0[4] = (-1L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2106, 10L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2106, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2408.95319552777;
      doubleArray0[1] = (-4369.35);
      doubleArray0[2] = 2875.579525111615;
      doubleArray0[3] = 1424.77691134;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2408.95319552777, (-4369.35), 2875.579525111615, 1424.77691134}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {2408.95319552777, (-4369.35), 2875.579525111615, 1424.77691134}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1546), (-3035));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)2, (int) (byte)2, 2985.50731329);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, 2340, (-396), (-5739));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-5739), 1386, (-5739));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-4649), (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-236));
      assertEquals((-236), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1034);
      shortArray0[1] = (short) (-1034);
      shortArray0[2] = (short) (-1034);
      shortArray0[3] = (short) (-1034);
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1034), (short) (-1034), (short) (-1034), (short) (-1034)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'k';
      ArrayUtils.swap(charArray0, 127, (int) (short) (-1034));
      assertArrayEquals(new char[] {'m', 'm', 'k'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1034);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146764104, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146764104, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2057.7314F, Integer.MAX_VALUE);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = 2387.919044422691;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) 2057.7314F;
      doubleArray0[5] = (double) 2057.7314F;
      doubleArray0[6] = (double) 2057.7314F;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2.147483647E9);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, 2387.919044422691, 2.147483647E9, 2.147483647E9, 2057.7314453125, 2057.7314453125, 2057.7314453125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2387.919044422691, 2.147483647E9, 2.147483647E9, 2057.7314453125, 2057.7314453125, 2057.7314453125}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-125);
      intArray0[1] = (int) (byte)59;
      intArray0[2] = (-125);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, (-1991), 36, 32);
      assertArrayEquals(new int[] {(-125), 59, (-125), 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(booleanArray0, (-2146765067), (-125), (-2146765067));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 605);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-783), (-783), (-1679));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1679);
      floatArray0[1] = (float) (-783);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 605;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-783.0F), (-1.0F), (-1.0F), 605.0F}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {(-1679.0F), (-783.0F), (-1.0F), (-1.0F), 605.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-10);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 558, (byte) (-42));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 558, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1700;
      shortArray0[1] = (short)1700;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1700, (short)1700}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1083.0), 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1700;
      longArray0[1] = (long) (short)1700;
      longArray0[2] = (long) (short)1700;
      longArray0[3] = (long) (short)1700;
      longArray0[4] = 1452L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1700L, 1700L, 1700L, 1700L, 1452L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, (-104), Integer.MAX_VALUE, 14);
      assertArrayEquals(new short[] {(short)1700, (short)1700}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertArrayEquals(new long[] {1700L, 1700L, 1700L, 1700L, 1452L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (byte)0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (-659));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)78;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)78;
      longArray0[4] = (long) (short)1119;
      longArray0[5] = 77L;
      longArray0[6] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {78L, 0L, (-1L), 78L, 1119L, 77L, (-1L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, (int) (byte)0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean boolean3 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[2] = 'h';
      Character character0 = new Character('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'h';
      doubleArray0[1] = (double) (short)491;
      doubleArray0[2] = (-1570.89004379338);
      doubleArray0[3] = (double) 'h';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 104.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {104.0, 491.0, (-1570.89004379338), 104.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {104.0, 104.0, 491.0, (-1570.89004379338), 104.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray2[5] = boolean1;
      booleanArray2[6] = (Boolean) false;
      booleanArray2[7] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray3));
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      
      ArrayUtils.reverse(shortArray0, 0, (int) (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)491}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte byte2 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-55));
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (byte)0, (short)9);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)2, (int) (byte)2, 2985.50731329);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, 2340, (-396), (-5739));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-5739), 1386, 5);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)18;
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)18, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap((char[]) null, (int) (byte)18, 350);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)18;
      shortArray0[1] = (short) (byte)18;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1984), (int) (short)18);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)18, (short)18}, shortArray0);
      assertArrayEquals(new short[] {(short)18, (short)18}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-1984), 17);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)18, (short)18}, shortArray0);
      assertArrayEquals(new short[] {(short)18, (short)18}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Integer integer0 = new Integer(514);
      assertEquals(514, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      ArrayUtils.reverse((Object[]) null, (int) (short)18, (-1244));
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)18;
      intArray0[1] = (-2);
      intArray0[2] = (int) (short)18;
      intArray0[3] = 514;
      intArray0[4] = (int) (short)18;
      intArray0[5] = (int) (short)18;
      intArray0[6] = 5;
      intArray0[7] = 17;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-104));
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, 2, (int) (byte)97);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int2);
      assertEquals(1, intArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, object0);
      assertNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.contains((float[]) null, (float) Integer.MAX_VALUE);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-924), 2, 1456);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-1573), 4, (-1573));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1573);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 4378.7247595, (-1095.15967));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {4.0, (-1573.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1), 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 0;
      boolean boolean3 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean3);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '~';
      charArray0[2] = '+';
      charArray0[3] = 'Y';
      boolean boolean4 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'Q', '~', '+', 'Y'}, charArray0);
      assertTrue(boolean4);
      assertEquals(4, charArray0.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)121;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '+';
      boolean boolean5 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {121L, (-1L), 43L}, longArray0);
      assertTrue(boolean5);
      assertEquals(3, longArray0.length);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      byte[] byteArray3 = ArrayUtils.subarray(byteArray0, (int) integerArray0[1], (-2285));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(0, byteArray3.length);
      assertEquals(7, byteArray0.length);
      assertEquals(2, integerArray0.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ')');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.reverse(byteArray0, (int) (byte) (-3), 1824);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Character character0 = Character.valueOf('X');
      assertEquals('X', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('c');
      assertEquals('c', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('X');
      assertEquals('X', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = new Character('X');
      assertEquals('X', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('\u001F');
      assertEquals('\u001F', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      Character character5 = Character.valueOf('j');
      assertEquals('j', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      Character character6 = Character.valueOf('c');
      assertEquals('c', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-3);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte) (-3);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3), (short) (-1), (short) (-3)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3), (short) (-3)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)65;
      floatArray0[1] = (float) (byte)65;
      floatArray0[2] = (float) (byte)65;
      floatArray0[3] = (float) (byte)65;
      floatArray0[4] = (float) (byte)65;
      floatArray0[5] = (float) (byte)65;
      floatArray0[6] = (float) (byte)65;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), (float) (byte)65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'V';
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) 'V';
      floatArray0[5] = (float) 'V';
      ArrayUtils.swap(floatArray0, (-3728), 6, (-2144522091));
      assertArrayEquals(new float[] {86.0F, 86.0F, 86.0F, 86.0F, 86.0F, 86.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)484);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 751);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = Integer.getInteger("{l5EWIj@IQ0Qzn!%", (-2746));
      assertEquals((-2746), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)14;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[4] = integer0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.shift(shortArray0, (int) integerArray0[0]);
      assertArrayEquals(new short[] {(short)14, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2773.554514;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {2773.554514}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      
      Short short0 = new Short((short)17);
      assertEquals((short)17, (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1559), longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'b';
      charArray0[4] = 's';
      charArray0[5] = '-';
      charArray0[6] = 'b';
      charArray0[7] = '\"';
      charArray0[8] = '0';
      int int2 = ArrayUtils.indexOf(charArray0, 'T');
      assertArrayEquals(new char[] {'j', '4', 'T', 'b', 's', '-', 'b', '\"', '0'}, charArray0);
      assertEquals(2, int2);
      assertEquals(9, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1770);
      ArrayUtils.swap(doubleArray0, 276, (-1770), (-1770));
      assertArrayEquals(new double[] {(-1770.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) integer0, (-1770));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray2 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, false, false, false}, booleanArray2));
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 'P';
      doubleArray0[3] = (-1.0);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'P';
      doubleArray1[2] = (-1.0);
      ArrayUtils.shift(doubleArray1, (-384), 1688, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {80.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'P';
      intArray0[1] = (-337);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)8, (byte)68, (byte) (-1), (byte) (-20), (byte)42, (byte) (-88), (byte) (-24)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)8, (byte)68, (byte) (-1), (byte) (-20), (byte)42, (byte) (-88), (byte) (-24)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, (int) (short) (-32083), (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(int1 == int0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-276), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -276, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 1353);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(1688);
      assertEquals(1688, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (-1277), 4);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)1, (short) (-1), (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)1, (short) (-1), (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(byteArray1, (byte)49);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertFalse(boolean2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(3418L);
      assertEquals(3418L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = new Long(3418L);
      assertEquals(3418L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3418L;
      floatArray0[1] = (float) 3418L;
      floatArray0[2] = (float) 1650;
      floatArray0[3] = (float) 3418L;
      floatArray0[4] = (float) 1650;
      floatArray0[5] = (float) 1650;
      floatArray0[6] = (float) 1650;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 808.9261F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3418.0F, 3418.0F, 1650.0F, 3418.0F, 1650.0F, 1650.0F, 1650.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3418.0F, 3418.0F, 1650.0F, 3418.0F, 1650.0F, 1650.0F, 1650.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      assertEquals((-1772), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[3];
      booleanArray0[3] = true;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2097542167));
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      assertEquals((-1772), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1772));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[3];
      booleanArray0[3] = false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2097542167));
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(14, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 14;
      doubleArray0[2] = (double) 14;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-83.0F), 14, (-1.0));
      assertArrayEquals(new double[] {14.0, 0.0, 14.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)336;
      shortArray0[1] = (short)10938;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, (int) (short) (-32083), (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-40), (int) (byte) (-40));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Integer integer0 = new Integer((-1269));
      assertEquals((-1269), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '=';
      charArray0[2] = 'r';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', '=', 'r'}, charArray0);
      assertArrayEquals(new char[] {'g', 'g', '=', 'r', '=', 'r'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-937);
      intArray0[1] = (-937);
      intArray0[2] = 0;
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'N';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'4', 'N'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap((short[]) null, (-937), (-2401), 1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-937), (-937), 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', 'N'}, charArray0);
      assertArrayEquals(new char[] {'4', 'N', '4', 'N'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(3, int0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.hashCode(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-125);
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = 1527L;
      longArray0[4] = (long) 5;
      longArray0[5] = (long) 5;
      longArray0[6] = (-4366L);
      longArray0[7] = (-1362L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-125), 1283);
      assertArrayEquals(new long[] {(-125L), 5L, 5L, 1527L, 5L, 5L, (-4366L), (-1362L)}, longArray0);
      assertEquals(0, int0);
      assertEquals(8, longArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) 14);
      assertFalse(boolean0);
      assertEquals(0, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)14);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14, mutableInt0.intValue());
      assertEquals(14, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1583);
      assertEquals(1583, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1, 2338);
      assertEquals((-1), int1);
      assertEquals(0, integerArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertNotSame(object2, object1);
      assertSame(object2, object3);
      assertNotSame(object2, object0);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[0] = object3;
      objectArray0[1] = (Object) (-1362L);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mutableInt0;
      Integer integer2 = new Integer((-1359));
      assertEquals((-1359), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer2, 55);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, objectArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '%';
      charArray0[2] = '2';
      charArray0[3] = '%';
      charArray0[4] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2', (int) (byte)101);
      assertArrayEquals(new char[] {'-', '%', '2', '%', '%'}, charArray0);
      assertEquals(2, int0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'c';
      charArray0[2] = '!';
      charArray0[3] = '.';
      charArray0[4] = 'D';
      charArray0[5] = '8';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, 8);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', 'c', '!', '.', 'D', '8'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ';';
      longArray0[1] = (long) '!';
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) 'c';
      longArray0[5] = (long) 'c';
      longArray0[6] = (long) '.';
      int int0 = ArrayUtils.indexOf(longArray0, (-2328L));
      assertArrayEquals(new long[] {59L, 33L, 68L, 46L, 99L, 99L, 46L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer2 = new Integer(8);
      assertEquals(8, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 10, 10);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {59L, 33L, 68L, 46L, 99L, 99L, 46L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ';';
      int int1 = ArrayUtils.indexOf(floatArray0, 59.0F, (-1));
      assertArrayEquals(new float[] {59.0F}, floatArray0, 0.01F);
      assertEquals(0, int1);
      assertEquals(1, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '6';
      charArray0[2] = '3';
      charArray0[3] = 'u';
      charArray0[4] = 'd';
      charArray0[5] = 'q';
      charArray0[6] = 'S';
      charArray0[7] = 'U';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '7', 7);
      assertArrayEquals(new char[] {'8', '6', '3', 'u', 'd', 'q', 'S', 'U'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[2] = 'R';
      charArray0[4] = 'R';
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte)80;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[6] = (double) '[';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 80.0, (-1.0), 0.0, (-1.0), 0.0, 91.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', 'R', '\u0000', 'R'}, charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', 'R', '\u0000', 'R'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.shift(doubleArray0, 1062, 6, (-2146784782));
      assertArrayEquals(new double[] {0.0, 80.0, (-1.0), 0.0, (-1.0), 0.0, 91.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[5] = 1062;
      intArray0[6] = 6;
      ArrayUtils.swap(intArray0, (-2616), 0, 1);
      assertArrayEquals(new int[] {32, 82, 82, 82, 0, 1062, 6}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (-226L);
      longArray0[2] = 9L;
      longArray0[3] = (-1920L);
      longArray0[4] = 3851L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1431655765), 2326);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-226L), 9L, (-1920L), 3851L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-226L), 9L, (-1920L), 3851L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[1] = byte0;
      byteArray0[1] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1592);
      shortArray0[1] = (short) (-1592);
      shortArray0[2] = (short) (-1300);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1592), 974);
      assertArrayEquals(new short[] {(short) (-1592), (short) (-1592), (short) (-1300)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(3, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 974;
      longArray0[1] = (-2111L);
      longArray0[2] = (long) (short) (-1592);
      longArray0[3] = (long) (short) (-1300);
      longArray0[4] = (long) (short) (-1592);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1592), (int) (short) (-1300));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {974L, (-2111L), (-1592L), (-1300L), (-1592L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      try { 
        Short.valueOf(", Length: 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: 0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = '?';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'s', 'c', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-1094L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1094L), 0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1062;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-484);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-2127);
      shortArray0[6] = (short) (-5085);
      shortArray0[7] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)8, (int) (short)1, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)1062, (short)0, (short)8, (short) (-484), (short)1, (short) (-2127), (short) (-5085), (short)1}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) (-2144522091);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) (short)59;
      ArrayUtils.swap(floatArray0, (-953), (-2144522091), (-953));
      assertArrayEquals(new float[] {6.0F, (-2.14452211E9F), 1.0F, 6.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)59;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)59);
      assertArrayEquals(new short[] {(short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (short)59);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = Integer.getInteger("}", 89);
      assertEquals(89, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-818));
      assertEquals((-818), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, 0, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (-1L);
      ArrayUtils.swap(longArray0, 1, 108, 2);
      assertArrayEquals(new long[] {1L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2699);
      shortArray0[2] = (short)3541;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short)3541}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(1513);
      assertEquals(1513, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray2 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short)3541}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2699), (short) (-1), (short) (-2699), (short)3541, (short)3541}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 1);
      assertFalse(boolean0);
      assertEquals(0, integerArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1826);
      shortArray0[1] = (short)2077;
      shortArray0[2] = (short)78;
      shortArray0[3] = (short)5869;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1826), (short)2077, (short)78, (short)5869}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1826), (short) (-1826), (short)2077, (short)78, (short)5869, (short)2077, (short)78, (short)5869}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3337);
      shortArray0[1] = (short) (-496);
      shortArray0[2] = (short) (-2131);
      shortArray0[3] = (short)1700;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-3337), (short) (-496), (short) (-2131), (short)1700}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2131);
      doubleArray0[1] = (double) (short)1700;
      doubleArray0[3] = (double) (short) (-2131);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1300.3128), 0.0);
      assertArrayEquals(new double[] {(-2131.0), 1700.0, 0.0, (-2131.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1700;
      longArray0[2] = (long) (short) (-496);
      longArray0[4] = (long) (short)1700;
      longArray0[5] = (long) (short)1700;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1700L, 0L, (-496L), 0L, 1700L, 1700L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-3337), 108);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-2131), (int) (short) (-3337));
      assertArrayEquals(new short[] {(short) (-3337), (short) (-496), (short) (-2131), (short)1700}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(18, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert(2363, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2363);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = null;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5], (-2097542167));
      assertEquals(1, int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1712);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2706.0571F));
      assertArrayEquals(new float[] {(-1712.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-2706.0571F);
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[4] = (double) (-1712.0F);
      doubleArray0[5] = (double) 3639L;
      doubleArray0[6] = (double) 3639L;
      doubleArray0[5] = (double) (-1712.0F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)10, 7);
      assertArrayEquals(new double[] {0.0, (-2706.05712890625), 10.0, 0.0, (-1712.0), (-1712.0), 3639.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-3134));
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 2);
      assertArrayEquals(new double[] {0.0, (-2706.05712890625), 10.0, 0.0, (-1712.0), (-1712.0), 3639.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int2);
      assertEquals(8, doubleArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 477, 82);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2245.77F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2245.77F), 0.0F, (-2245.77F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2245.77F), 0.0F, (-2245.77F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2245.77F);
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) (-2245.77F);
      objectArray0[6] = (Object) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[5]);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, 109, 2146013960, (-6422));
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 26, (-139), 26);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = '?';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'s', 'c', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-1094L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1094L), 0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      boolean boolean2 = ArrayUtils.isSorted(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1094L), 0L}, longArray2);
      assertTrue(boolean2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse((int[]) null, 0, (int) (byte)0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.insert(2, (int[]) null, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 0, 2, (-1), 0, 0, 2}, intArray0);
      assertEquals(9, intArray0.length);
      assertNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-73));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object1, object0);
      assertSame(object0, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        BitSet.valueOf((LongBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert(36, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      ArrayUtils.shift(charArray0, 2, 1158, 17);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(4178);
      assertEquals(4178, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-71));
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 5;
      longArray0[3] = (long) 5;
      longArray0[4] = 0L;
      longArray0[5] = (long) 5;
      long[] longArray1 = ArrayUtils.insert(5, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 5L, 0L, 5L, 0L, 5L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)126);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      floatArray0[5] = 1118.434F;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1118.434F, 59.0F, (-2245.77F), 479.0F, 479.0F, 1118.434F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNull(floatArray1);
      
      Integer integer0 = new Integer(1349);
      assertEquals(1349, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer1 = new Integer(2786);
      assertEquals(2786, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Short short0 = new Short((short) (-1361));
      assertEquals((short) (-1361), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-401));
      assertEquals((short) (-401), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1257);
      assertEquals((short)1257, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-755));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-560);
      intArray0[1] = 479;
      intArray0[2] = (int) (short) (-1361);
      intArray0[3] = (int) (short)1257;
      intArray0[4] = (int) (short)59;
      intArray0[5] = 479;
      intArray0[6] = 2786;
      intArray0[7] = (int) (short) (-755);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)1257, 59);
      assertArrayEquals(new int[] {(-560), 479, (-1361), 1257, 59, 479, 2786, (-755)}, intArray0);
      assertEquals(3, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Short short0 = new Short((short) (-73));
      assertEquals((short) (-73), (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert((int) (short) (-73), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 14);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 1);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'c';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) '!';
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) ';';
      doubleArray0[5] = (double) 'c';
      doubleArray0[6] = (double) 'c';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4869.4551693003095), 2974.18901772);
      assertArrayEquals(new double[] {99.0, 33.0, 33.0, 59.0, 59.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Short short0 = new Short((short)59);
      assertEquals((short)59, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (double) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {99.0, 33.0, 33.0, 59.0, 59.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'F', (int) (short)46);
      assertArrayEquals(new char[] {';', 'c', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(6, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = new Character('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('+');
      assertEquals('+', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '+';
      doubleArray0[1] = (-1156.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4222.539));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {43.0, (-1156.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {43.0, (-1156.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer1 = new Integer(2524);
      assertEquals(2524, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2524);
      assertEquals(2524, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      ArrayUtils.swap(doubleArray1, 2524, (-872), (-872));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {43.0, (-1156.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {43.0, (-1156.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)93;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)93);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-57), (byte) (-70), (byte)91, (byte) (-102), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-53), (byte) (-57), (byte) (-70), (byte)91, (byte) (-102), (byte)93}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-174));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-885));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$', (int) (short) (-885));
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1731.207);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4869.4551693003095), (-1731.207));
      assertArrayEquals(new double[] {(-1731.207)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 35.0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-1731.207)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '4', (-722));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'D';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-815), 8);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', 'D'}, charArray0);
      assertArrayEquals(new char[] {';', 'D'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ';';
      longArray0[1] = (long) '!';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) '!';
      longArray0[4] = (long) 'c';
      longArray0[5] = (long) 'c';
      longArray0[6] = (long) 10;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertArrayEquals(new long[] {59L, 33L, 59L, 33L, 99L, 99L, 10L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      
      Integer integer0 = new Integer(1093);
      assertEquals(1093, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(619);
      assertEquals(619, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(8);
      assertEquals(8, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1601L, (-815));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {59L, 33L, 59L, 33L, 99L, 99L, 10L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.insert(8, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = '?';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'s', 'c', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      float[] floatArray0 = new float[11];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 76);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(11, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(76);
      assertEquals(76, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Long long0 = new Long((-699L));
      assertEquals((-699L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-699L);
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) 76;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2213.91), 2028.0);
      assertArrayEquals(new double[] {(-699.0), 76.0, 76.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift(floatArray0, (int) (short)46, 76, 76);
      assertEquals(11, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(11, floatArray0.length);
      assertEquals(11, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 9);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 9;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 9.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)2, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'Y';
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 272);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new char[] {':', ':', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 0, 'B');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {':', ':', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'B'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray1, 'B');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertArrayEquals(new char[] {':', ':', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(map0);
      
      ArrayUtils.shift((Object[]) integerArray0, (int) integerArray0[4], (int) integerArray0[0], 65);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[2] = 'R';
      charArray0[4] = 'R';
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte)80;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) '[';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 80.0, (-1.0), 0.0, (-1.0), 0.0, 91.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'[', '\u0000', 'R', '\u0000', 'R'}, charArray1);
      assertArrayEquals(new char[] {'[', '\u0000', 'R', '\u0000', 'R'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray1);
      
      ArrayUtils.shift(doubleArray0, 1062, 6, (-2146784782));
      assertArrayEquals(new double[] {0.0, 80.0, (-1.0), 0.0, (-1.0), 0.0, 91.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = 1062;
      intArray0[6] = 6;
      ArrayUtils.swap(intArray0, (-2616), (-1), 1);
      assertArrayEquals(new int[] {32, 82, 82, 82, (-1), 1062, 6}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 79;
      Integer integer0 = new Integer(79);
      assertEquals(79, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(512);
      assertEquals(512, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {79, 512, 1}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1897.912248;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.insert(2155, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1897.912248}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1897.912248}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, 8);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 8;
      longArray0[2] = (long) 8;
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = '|';
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) '8';
      doubleArray0[2] = (double) 8L;
      doubleArray0[3] = (double) '|';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 1);
      assertNull(intArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(2, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte) (-1), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 76);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 61, (byte)116);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-1), (byte)80, (byte) (-1)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte)80);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = 'P';
      charArray1[2] = 'R';
      charArray1[3] = 'P';
      charArray1[4] = 'R';
      char[] charArray2 = Character.toChars(16);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0010'}, charArray2);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {16.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int[] intArray0 = new int[6];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 15, 15, 15);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 382.0039F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1713.405F);
      floatArray0[3] = (-2077.0F);
      floatArray0[4] = 14.0F;
      floatArray0[5] = 1719.0F;
      floatArray0[6] = (-2663.908F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      ArrayUtils.shift(floatArray0, (-1), 10, 776);
      assertArrayEquals(new float[] {0.0F, 0.0F, 382.0039F, 1.0F, (-1713.405F), (-2077.0F), 14.0F, 1719.0F, (-2663.908F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 382.0039F, 1.0F, (-1713.405F), (-2077.0F), 14.0F, 1719.0F, (-2663.908F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 1280, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1280, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((boolean[]) null, 86, (-29), (-1312));
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1312));
      assertEquals((-1312), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, (-1312), abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1312, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      Integer integer0 = Integer.getInteger("java.lang.Boolean", 117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, 117, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'V';
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) 'V';
      floatArray0[5] = (float) 'V';
      ArrayUtils.swap(floatArray0, (-3728), 6, (-2144522091));
      assertArrayEquals(new float[] {86.0F, 86.0F, 86.0F, 86.0F, 86.0F, 86.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)484);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 751);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = Integer.getInteger("{l5EWIj@IQ0Qzn!%", (-2746));
      assertEquals((-2746), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (-1), abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(24);
      assertEquals(24, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(4183);
      assertEquals(4183, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-71));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 4183;
      intArray0[2] = (int) (byte) (-71);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 5, 5);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {(-1), 4183, (-71)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 694L;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 481;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {694L, 5L, 5L, 481L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 1388, (short)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1388, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 935);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.insert(4, floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(14, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-387.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray3 = new Float[4];
      Float float0 = new Float((double) (-387.0F));
      assertEquals((-387.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray3[1] = float0;
      Float float1 = new Float(14.0F);
      assertEquals(14.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray3[2] = float1;
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray3[3] = float2;
      float[] floatArray4 = ArrayUtils.toPrimitive(floatArray3, 14.0F);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray1);
      assertArrayEquals(new float[] {14.0F, (-387.0F), 14.0F, 1.0F}, floatArray4, 0.01F);
      assertEquals(4, floatArray3.length);
      assertEquals(4, floatArray4.length);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertNotNull(floatArray4);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-174));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-2287), 37, (-2287));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-913);
      intArray0[2] = 0;
      intArray0[3] = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-4423.871404687961));
      assertEquals((-4423.8716F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[0]);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float(91.0);
      assertEquals(91.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((float) floatArray0[1]);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) 0);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-913));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4423.8716F), 0.0F, 0.0F, 0.0F, 91.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte)0;
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, (-1), 0, 0}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      ArrayUtils.swap(longArray0, 0, (-1), 0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray2 = ArrayUtils.insert((-1), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, (-2097542167));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '&');
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 641.4286F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '&';
      intArray1[1] = (int) '&';
      intArray1[2] = (-2097542167);
      intArray1[3] = (-2097542167);
      intArray1[4] = 1;
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {38, 38, (-2097542167), (-2097542167), 1}, intArray1);
      assertArrayEquals(new int[] {38, 38, (-2097542167), (-2097542167), 1}, intArray2);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      ArrayUtils.reverse((char[]) null, (-2097542167), 37);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2346);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2346);
      doubleArray0[3] = (double) (-2346);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2346.0), 0.0, (-2346.0), (-2346.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)24;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-392), 5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-79), (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-79), (byte)24}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2346);
      doubleArray2[1] = (double) (-392);
      doubleArray2[2] = (double) (-913);
      doubleArray2[3] = (double) (-913);
      doubleArray2[4] = (double) (byte)24;
      ArrayUtils.reverse(doubleArray2, (-2346), 82);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {24.0, (-913.0), (-913.0), (-392.0), (-2346.0)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-724);
      shortArray0[1] = (short)89;
      shortArray0[2] = (short) (-392);
      shortArray0[3] = (short) (-392);
      shortArray0[4] = (short)897;
      shortArray0[5] = (short)46;
      shortArray0[6] = (short) (-392);
      shortArray0[7] = (short)940;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-234), (int) (short)89);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-724), (short)89, (short) (-392), (short) (-392), (short)897, (short)46, (short) (-392), (short)940}, shortArray0);
      assertArrayEquals(new short[] {(short) (-724), (short)89, (short) (-392), (short) (-392), (short)897, (short)46, (short) (-392), (short)940}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)46;
      floatArray0[1] = (float) (short)101;
      floatArray0[2] = (float) (short) (-392);
      floatArray0[3] = (-2706.0571F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)897);
      assertArrayEquals(new float[] {46.0F, 101.0F, (-392.0F), (-2706.0571F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 1, (-2138));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)106, (byte)114, (byte)0, (byte)63}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 101;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (byte)4, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)4, (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-913), (-913));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)4, (byte)4}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1712.0F);
      floatArray0[2] = 1070.0F;
      floatArray0[3] = (-928.698F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2788.2427F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-2.13604698E9F);
      int int0 = (-1073);
      ArrayUtils.swap(floatArray0, (-1073), (-1073), (-531));
      assertArrayEquals(new float[] {(-1.0F), (-1712.0F), 1070.0F, (-928.698F), (-1.0F), 2788.2427F, 0.0F, 1.0F, (-2.13604698E9F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-531);
      intArray0[1] = (-1073);
      intArray0[2] = (-531);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2136046931), (-531));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2136046931, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-84L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 17);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(587);
      assertEquals(587, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(587, (int)integer2);
      assertEquals(3, integerArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertEquals(587, (int)integer3);
      assertEquals(3, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ':';
      charArray0[8] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ':', ':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '6');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'6', ':', ':', ':', ':', ':', ':', ':', ':', ':'}, charArray1);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ':', ':'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap((double[]) null, (-387), 16, 0);
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 1.0);
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2145687738));
      assertEquals((-2145687738), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("Z");
      assertNull(integer1);
      
      integerArray0[1] = null;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) (-913);
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) (-913);
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '?';
      charArray0[2] = 'e';
      charArray0[3] = 'l';
      ArrayUtils.shift(charArray0, (-16), 3, (-913));
      assertArrayEquals(new char[] {'?', 'e', 'e', 'l', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Integer integer0 = new Integer(101);
      assertEquals(101, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1265);
      assertEquals(1265, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "M!mo2RN8DEj@#Xr");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 648;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 648.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 648.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)83;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-29));
      assertArrayEquals(new byte[] {(byte) (-71), (byte)83}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2, 6);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertTrue(int1 == int0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte) (-71));
      assertEquals((-71L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int2 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte) (-29));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals((-1), int2);
      assertEquals(4, booleanArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)83;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (-717.8F);
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {83.0F, (-1.0F), (-1.0F), 0.0F, (-717.8F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-29);
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 807.76369);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 648.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 648.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = ArrayUtils.insert(2, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 97;
      intArray0[2] = 97;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 97;
      ArrayUtils.swap(objectArray0, 0, 111, (-1514));
      assertEquals(1, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 97, 97}, intArray0);
      assertArrayEquals(new int[] {0, 97, 97, 0, 97, 97}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)120;
      objectArray0[1] = (Object) (byte)120;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (byte)120;
      objectArray0[4] = (Object) (byte)120;
      objectArray0[5] = (Object) (byte)120;
      objectArray0[6] = (Object) (byte)120;
      ArrayUtils.swap(objectArray0, (-2111), 1600, (-2111));
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameType(objectArray0[6], objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)120;
      intArray0[1] = (int) (byte)120;
      intArray0[4] = 2379;
      intArray0[3] = (-1514);
      intArray0[4] = (int) (byte)120;
      intArray0[5] = (int) (byte)120;
      intArray0[6] = 0;
      intArray0[7] = 2379;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2379, 0, 120, 120, (-1514), 0, 120, 120}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1388;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {1388.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1388, 2);
      assertArrayEquals(new float[] {1388.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, (int) (short) (-32083), (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Integer integer0 = new Integer((-1269));
      assertEquals((-1269), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayUtils.swap(shortArray1, (int) (short) (-1559), (-1631), (-205));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)49;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-32083), 0.0);
      assertArrayEquals(new double[] {49.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1), 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 0;
      boolean boolean3 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean3);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2514L), (int) (byte)0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3955, (-1.0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = ArrayUtils.indexOf(objectArray0, object0, (-2097542167));
      assertEquals((-1), int2);
      assertEquals(4, objectArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      assertEquals((-1772), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1772));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[3];
      booleanArray0[3] = false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2566;
      shortArray0[1] = (short)2566;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2566);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2566, (short)2566}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      boolean boolean3 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertFalse(boolean3);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, (int) (byte) (-1), (-1), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 10, 10, 398);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      char[] charArray1 = ArrayUtils.add(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'V'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      ArrayUtils.shift((Object[]) abstractMap_SimpleImmutableEntryArray0, 54);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 111;
      intArray0[1] = 3;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {111, 3, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Long[] longArray1 = new Long[6];
      Long long0 = new Long((-699L));
      assertEquals((-699L), (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long(48L);
      assertEquals(48L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((-699L));
      assertEquals((-699L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      Long long3 = new Long(3);
      assertEquals(3L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray1[3] = long3;
      Long long4 = new Long((-496L));
      assertEquals((-496L), (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray1[4] = long4;
      Long long5 = new Long(48L);
      assertEquals(48L, (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray1[5] = long5;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-699L), 48L, (-699L), 3L, (-496L), 48L}, longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      ArrayUtils.shift((Object[]) longArray1, 1650);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-913);
      int[] intArray0 = new int[4];
      intArray0[0] = (-913);
      intArray0[1] = (-827);
      intArray0[2] = 599;
      intArray0[3] = 599;
      ArrayUtils.reverse(intArray0, 599, 599);
      assertArrayEquals(new int[] {(-913), (-827), 599, 599}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, 7, (-827));
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '{');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(2461.8F);
      assertEquals(2461.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2461.8F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 9);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '3', 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'c';
      charArray0[2] = '!';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {';', 'c', '!', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (double) '!';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {33.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1265, 1265);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {33.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray0, 3169, 68, 1265);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {33.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '.';
      intArray0[1] = 68;
      intArray0[2] = (int) '!';
      intArray0[3] = (-839);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {46, 68, 33, (-839)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {33.0, 99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', 'c', '!', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {';', 'c', '!', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.shift(doubleArray0, (-839), 68, 583);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {99.0, 33.0, 99.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = (long) 5;
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(5);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 5);
      assertArrayEquals(new long[] {0L, 0L, 0L, 5L, 0L, 0L}, longArray0);
      assertEquals(5, int0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ArrayUtils.shift(objectArray0, 2187);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2187;
      intArray0[1] = 2187;
      intArray0[2] = 2187;
      intArray0[3] = 2187;
      intArray0[4] = 114;
      intArray0[5] = 2187;
      boolean boolean0 = ArrayUtils.contains(intArray0, 114);
      assertArrayEquals(new int[] {2187, 2187, 2187, 2187, 114, 2187}, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = ']';
      charArray0[2] = '8';
      charArray0[3] = 'E';
      charArray0[4] = 'j';
      charArray0[5] = 'v';
      charArray0[6] = 'm';
      charArray0[7] = 'K';
      charArray0[8] = '5';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '6');
      assertArrayEquals(new char[] {'r', ']', '8', 'E', 'j', 'v', 'm', 'K', '5'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[6];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, longArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 2187);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2187, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-35);
      ArrayUtils.shift(byteArray0, (int) (short)59);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte)53, (byte) (-35), (byte) (-35), (byte) (-35)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)20);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte)53, (byte) (-35), (byte) (-35), (byte) (-35)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte)53, (byte) (-35), (byte) (-35), (byte) (-35)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Integer integer0 = new Integer((byte) (-35));
      assertEquals((-35), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift(objectArray0, (int) (byte) (-35), (int) (short)59, 275);
      assertEquals(9, objectArray0.length);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[7];
      longArray2[0] = (long) (byte) (-35);
      longArray2[1] = (long) (byte) (-35);
      longArray2[2] = (long) (byte)20;
      longArray2[3] = (long) (byte) (-35);
      longArray2[4] = (long) (byte) (-35);
      longArray2[5] = (long) (short)59;
      longArray2[6] = (long) (byte)53;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-35);
      intArray0[1] = (int) (byte) (-35);
      intArray0[2] = (int) (short)59;
      intArray0[3] = (int) (byte) (-35);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'g';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L', (-1670));
      assertArrayEquals(new char[] {'m', 'm', 'g', 'L'}, charArray0);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      
      Float float0 = new Float((double) (-1670));
      assertEquals((-1670.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((int[]) null, (-1670), (-2086));
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 241.74636, (-2122.052001953125));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      short[] shortArray0 = new short[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) 101;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-83L), 101L, 101L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertTrue(boolean2);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Long long0 = new Long(101L);
      assertEquals(101L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 101L);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 1335.17788745);
      assertArrayEquals(new double[] {1335.17788745}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1508.36729594665), (double) 101);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2291;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2291);
      assertArrayEquals(new short[] {(short)2291}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[0] = (long) (-1);
      Integer integer0 = new Integer((-2077));
      assertEquals((-2077), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-489));
      assertEquals((-489), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2303));
      assertEquals((-2303), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short) (-235);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2.0, (-1.0), (-1.0), (-235.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      ArrayUtils.shift(byteArray0, (-2303));
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean2);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)36;
      shortArray0[1] = (short) (byte)36;
      shortArray0[2] = (short) (byte)36;
      shortArray0[3] = (short) (byte)36;
      shortArray0[4] = (short) (byte)36;
      shortArray0[5] = (short) (byte)36;
      shortArray0[6] = (short) (byte)36;
      shortArray0[7] = (short) (byte)36;
      boolean boolean3 = ArrayUtils.contains(shortArray0, (short)36);
      assertArrayEquals(new short[] {(short)36, (short)36, (short)36, (short)36, (short)36, (short)36, (short)36, (short)36}, shortArray0);
      assertTrue(boolean3);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-1);
      intArray1[1] = (int) (byte) (-1);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      
      Integer[] integerArray3 = ArrayUtils.toObject(intArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray3.length);
      assertEquals(0, intArray0.length);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(integerArray3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2475.76720479);
      doubleArray0[1] = 185.771;
      doubleArray0[2] = (-2475.76720479);
      doubleArray0[3] = 11.020111514768;
      doubleArray0[4] = (double) (-1770);
      doubleArray0[5] = 488.0;
      doubleArray0[6] = (double) (-1770);
      doubleArray0[7] = (-2475.76720479);
      doubleArray0[8] = (double) (-1770);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 1);
      assertArrayEquals(new double[] {(-2475.76720479), 185.771, (-2475.76720479), 11.020111514768, (-1770.0), 488.0, (-1770.0), (-2475.76720479), (-1770.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 11.020111514768;
      objectArray0[1] = (Object) (-1770.0);
      objectArray0[2] = (Object) (-2475.76720479);
      objectArray0[3] = (Object) (-2475.76720479);
      objectArray0[4] = (Object) 488.0;
      objectArray0[5] = (Object) (-1770.0);
      objectArray0[6] = (Object) (-1770.0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1770);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      boolean boolean3 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertFalse(boolean3);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean4);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Integer integer0 = new Integer(115);
      assertEquals(115, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(115);
      assertEquals(115, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(115);
      assertEquals(115, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 115);
      assertFalse(boolean0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1068);
      shortArray0[2] = (short) (-1068);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)24019, (-122));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1068), (short) (-1068)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1068), (-1902));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(int1 == int0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer2));
      assertNotNull(integerArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2250.0F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2250.0F);
      floatArray1[1] = (-2250.0F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-2250.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2250.0F), (-2250.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '2';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-617);
      shortArray0[1] = (short)16;
      shortArray0[2] = (short) (-773);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-617), (short)16, (short) (-773)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.swap((char[]) null, (int) (short) (-773), 1397);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(2237, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      float[] floatArray0 = null;
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      int int0 = 14;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1407), booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1407, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Integer integer0 = Integer.getInteger("java.lang.Boolean", 117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1382.378403;
      doubleArray0[1] = (double) (-2346);
      doubleArray0[2] = (double) (-15);
      doubleArray0[3] = (double) (-913);
      doubleArray0[4] = (double) (-913);
      doubleArray0[5] = (double) (-913);
      doubleArray0[6] = 1567.665;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1382.378403, (-2346.0), (-15.0), (-913.0), (-913.0), (-913.0), 1567.665}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (-1749));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(doubleArray1, 0, (-1749));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'P', 'P', 'P'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-913), 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray1, (-1764), 0, (-1764));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-337);
      intArray0[1] = 1265;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-337);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-337), 1265, (-1), 0, (-337)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray1);
      
      ArrayUtils.shift(doubleArray1, (-1), (-337), (-1764));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2995L;
      longArray0[2] = (-85L);
      longArray0[3] = (-2275L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1504L;
      longArray0[7] = (-705L);
      longArray0[8] = (-1336L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2275L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2995L, (-85L), (-2275L), 1L, 1L, 1504L, (-705L), (-1336L)}, longArray0);
      assertArrayEquals(new long[] {(-2275L), 0L, 2995L, (-85L), (-2275L), 1L, 1L, 1504L, (-705L), (-1336L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 71, 34, 34);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 34;
      intArray0[3] = 71;
      intArray0[4] = 71;
      intArray0[5] = 34;
      intArray0[6] = 71;
      intArray0[7] = 71;
      intArray0[8] = 71;
      int[] intArray1 = ArrayUtils.remove(intArray0, 5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {71, 71, 34, 71, 71, 34, 71, 71, 71}, intArray0);
      assertArrayEquals(new int[] {71, 71, 34, 71, 71, 71, 71, 71}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)59;
      intArray0[1] = (int) (short)59;
      intArray0[2] = (int) (short)59;
      intArray0[3] = (int) (short)59;
      intArray0[4] = 0;
      ArrayUtils.swap(objectArray0, 0, (-1514), (-2111));
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1514);
      longArray0[1] = (long) 2379;
      longArray0[2] = (long) (-2111);
      longArray0[3] = (long) (short)59;
      boolean boolean0 = ArrayUtils.isSameType(59, 59);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 59);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1514L), 2379L, (-2111L)}, longArray1);
      assertArrayEquals(new long[] {(-1514L), 2379L, (-2111L), 59L}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = new Byte((byte)2);
      assertEquals((byte)2, int0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2514L);
      int int1 = ArrayUtils.indexOf(longArray0, (-2514L));
      assertArrayEquals(new long[] {(-2514L)}, longArray0);
      assertEquals(0, int1);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ')';
      Integer integer0 = new Integer('c');
      assertEquals(99, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(65);
      assertEquals(65, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1712));
      assertEquals((-1712), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray1, 18);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1712));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray2 = ArrayUtils.insert((-1), integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      
      org.evosuite.runtime.Random.setNextRandom((-2121610350));
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '8', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, (-137));
      assertFalse(boolean1);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short) (-1068));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-83L), 0L, (-83L)}, longArray1);
      assertArrayEquals(new long[] {(-83L), 0L, (-83L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', '8', '|'}, charArray0);
      assertFalse(boolean2);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1, 2);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertTrue(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, object0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean3 = ArrayUtils.contains((float[]) null, (-2516.0F));
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int2 = ArrayUtils.lastIndexOf(charArray0, '8');
      assertArrayEquals(new char[] {'8', '8', '|'}, charArray0);
      assertEquals(1, int2);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2773.554514;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {2773.554514}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      
      Short short0 = new Short((short)19);
      assertEquals((short)19, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3237.8872733940016, (double) (byte)0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {2773.554514}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'D';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      int int2 = ArrayUtils.lastIndexOf(charArray0, '-', (int) (byte)0);
      assertArrayEquals(new char[] {'J', 'D', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertEquals((-1), int2);
      assertEquals(7, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1019);
      assertEquals(1019, (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1245, (-2143526187));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '=', 7);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shift(longArray0, 1073741824, 2, (-913));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-678));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, 0, 2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals((-1), int1);
      assertEquals(0, intArray1.length);
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (-1), (-678), 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(0, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer0 = new Integer(2263);
      assertEquals(2263, (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      
      int[] intArray2 = ArrayUtils.insert((-1), intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-913), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-913), 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      int int3 = ArrayUtils.lastIndexOf(charArray0, 'e');
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{'}, charArray0);
      assertEquals((-1), int3);
      assertEquals(5, charArray0.length);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[9];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'W';
      charArray0[2] = 'f';
      charArray0[3] = 'l';
      charArray0[4] = 'O';
      charArray0[5] = ';';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C');
      assertArrayEquals(new char[] {'C', 'W', 'f', 'l', 'O', ';'}, charArray0);
      assertEquals(0, int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2183;
      shortArray0[1] = (short)3320;
      shortArray0[2] = (short)797;
      shortArray0[3] = (short)2225;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-461), 2);
      assertArrayEquals(new short[] {(short)2183, (short)3320, (short)797, (short)2225}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer((-583));
      assertEquals((-583), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short) (-461));
      assertEquals((-461), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1555);
      assertEquals(1555, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-122));
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1068), (int) (short)797);
      assertArrayEquals(new short[] {(short)2183, (short)3320, (short)797, (short)2225}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-461), (-461), 1555, (-583), 1555, 1555}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, (int) (short)3320, (-1));
      assertArrayEquals(new int[] {(-461), (-461), 1555, (-583), 1555, 1555}, intArray0);
      assertEquals((-1), int2);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[3]);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shift(longArray0, 1073741824, 2, (-913));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-678));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1), (-678), 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'w');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'o');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      Short[] shortArray0 = new Short[0];
      org.evosuite.runtime.Random.setNextRandom(893);
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertNotNull(map0);
      
      org.evosuite.runtime.Random.setNextRandom(893);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 893, 893);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, (-1712), (-1712));
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte byte0 = (byte)14;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byteArray0[8] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)6, (byte)14, (byte)6, (byte)6, (byte)6, (byte)14, (byte)14, (byte)6, (byte)14}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 2141167519, (short) (byte)116);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2141167519, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)59;
      intArray0[1] = (int) (short)59;
      intArray0[2] = (int) (short)59;
      intArray0[3] = (int) (short)59;
      intArray0[4] = 0;
      ArrayUtils.reverse(intArray0, 599, 59);
      assertArrayEquals(new int[] {59, 59, 59, 59, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short)2465;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)2465}, shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)2465}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) (short)59;
      longArray0[2] = (long) 59;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {59L, 59L, 59L}, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 59);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 866.0, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-274.1607F);
      floatArray0[2] = 53.0F;
      floatArray0[3] = 3016.0F;
      floatArray0[4] = (-1438.3712F);
      floatArray0[5] = 2965.222F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1109.0F);
      floatArray0[8] = 114.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 114.0F;
      doubleArray0[1] = (double) 3016.0F;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 114.0F;
      doubleArray1[1] = (-1172.6715808);
      doubleArray1[2] = (double) 53.0F;
      doubleArray1[3] = (double) 53.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) (-1109.0F);
      doubleArray1[6] = (double) 1.0F;
      doubleArray1[7] = (double) 2965.222F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {114.0, 3016.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {114.0, (-1172.6715808), 53.0, 53.0, 1.0, (-1109.0), 1.0, 2965.221923828125}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)59;
      Double double0 = new Double((-913.0));
      assertEquals((-913.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)59);
      assertEquals(59.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)66;
      longArray0[1] = (long) (short)59;
      longArray0[2] = 4496L;
      longArray0[3] = (long) (-2995);
      longArray0[4] = (-696L);
      longArray0[5] = (long) 3889;
      longArray0[6] = (-4241L);
      ArrayUtils.shift(longArray0, (-2995), (int) (short)59, 2519);
      assertArrayEquals(new long[] {59L, 4496L, (-2995L), (-696L), 3889L, (-4241L), 66L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4496L;
      doubleArray1[1] = (double) 59L;
      doubleArray1[2] = (double) (byte)66;
      doubleArray1[3] = (double) (short)59;
      doubleArray1[4] = (-1062.84);
      doubleArray1[5] = (double) (short)59;
      doubleArray1[6] = (double) (byte)66;
      doubleArray1[7] = (-913.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4496.0, 59.0, 66.0, 59.0, (-1062.84), 59.0, 66.0, (-913.0)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      byte[] byteArray0 = null;
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (byte)66;
      doubleArray0[2] = (double) (byte)66;
      doubleArray0[3] = (double) (byte)66;
      doubleArray0[4] = (double) (byte)66;
      doubleArray0[5] = 1039.726508107655;
      doubleArray0[6] = (double) (byte)66;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 66.0);
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 6}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertArrayEquals(new double[] {Double.NaN, 66.0, 66.0, 66.0, 66.0, 1039.726508107655, 66.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      int[] intArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Object object0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 3499, (-755));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.set((-755), (-755), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -755
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)87;
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)87);
      assertEquals((short)87, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1431));
      assertEquals((short) (-1431), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2564));
      assertEquals((short) (-2564), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)974);
      assertEquals((short)974, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      Short short5 = new Short((short)9);
      assertEquals((short)9, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.reverse(intArray0, (-2128), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {87.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) short3;
      objectArray0[2] = (Object) short2;
      objectArray0[3] = (Object) short4;
      objectArray0[4] = (Object) 87.0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) short5;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {87.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift(objectArray0, (int) (short) (-1), (int) (byte)0, (int) (short)974);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 59.0;
      doubleArray0[1] = (-1731.207);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2213.91), 2214.057649260536);
      assertArrayEquals(new double[] {59.0, (-1731.207)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      Short[] shortArray2 = new Short[2];
      short short0 = (short)46;
      Short short1 = new Short((short)46);
      assertEquals((short)46, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray2[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)46, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray2[1] = short2;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)46, (short)46}, shortArray3);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2926.70345);
      doubleArray0[1] = 1.932734072018E9;
      doubleArray0[2] = 3894.202522453;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-4062.5738);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3340);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-3340);
      floatArray0[4] = (float) (-3340);
      ArrayUtils.shift(floatArray0, (-396), 2340, 2340);
      assertArrayEquals(new float[] {(-3340.0F), 0.0F, 1.0F, (-3340.0F), (-3340.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-696), 1, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (float) (short)59;
      floatArray0[3] = 59.0F;
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertArrayEquals(new float[] {(-85.0F), 59.0F, 0.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, (-85));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'q';
      ArrayUtils.shift(charArray0, (-16), (int) (short)59, (-85));
      assertArrayEquals(new char[] {'q', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Integer integer0 = new Integer(644);
      assertEquals(644, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2485));
      assertEquals((-2485), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "M!mo2RN8DEj@#Xr");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2485);
      intArray0[1] = 0;
      intArray0[2] = (-2485);
      intArray0[3] = (int) 'q';
      intArray0[4] = 63;
      intArray0[5] = (int) 'q';
      intArray0[6] = (-85);
      intArray0[7] = (-85);
      intArray0[8] = (int) 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      shortArray0[3] = (short) (-901);
      byte[] byteArray0 = new byte[5];
      objectArray0[7] = (Object) (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (short) (-901), 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (byte)4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (short) (-16);
      doubleArray1[5] = (double) (short) (-16);
      doubleArray1[6] = (double) (short) (-901);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4.0, 0.0, (-16.0), (-16.0), (-901.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, (-16.0), (-16.0), (-901.0)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1522;
      intArray0[1] = (int) (short) (-901);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1522, (-901)}, intArray0);
      assertArrayEquals(new int[] {1522, (-901)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-16), (int) (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)0, (byte)4}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-1700L), 1522);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap((double[]) null, 16, (-2136046931), 16);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) (-2136046931);
      doubleArray0[4] = (double) '\"';
      doubleArray0[5] = (double) 53;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 53);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {53.0, 16.0, 16.0, (-2.136046931E9), 34.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {16.0, 16.0, (-2.136046931E9), 34.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2018;
      ArrayUtils.shift(shortArray0, 1136);
      assertArrayEquals(new short[] {(short)2018}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Long long0 = new Long(5);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {5L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-703);
      shortArray0[1] = (short)246;
      shortArray0[2] = (short) (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short)246);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.contains(charArray0, '2');
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long((short) (-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-461);
      shortArray0[1] = (short) (-461);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-14), (int) (short) (-461));
      assertArrayEquals(new short[] {(short) (-461), (short) (-461)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1.5);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short) (-461);
      longArray0[2] = (long) (short) (-461);
      longArray0[3] = (long) (short) (-461);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1322L);
      assertArrayEquals(new long[] {(-1L), (-461L), (-461L), (-461L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      boolean boolean1 = ArrayUtils.contains(charArray0, '(');
      assertArrayEquals(new char[] {'='}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) (-1L);
      longArray1[1] = (Long) (-461L);
      longArray1[2] = (Long) (-461L);
      Long long0 = new Long(1783L);
      assertEquals(1783L, (long)long0);
      assertNotNull(long0);
      
      longArray1[3] = long0;
      longArray1[4] = (Long) (-461L);
      longArray1[5] = (Long) (-1L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-1L), (-461L), (-461L), 1783L, (-461L), (-1L)}, longArray2);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isEquals((Object) null, integer0);
      assertFalse(boolean2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'D';
      objectArray0[5] = (Object) 2140496372;
      intArray0[2] = 2140496372;
      intArray0[4] = (int) 'D';
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {68, 0, 2140496372, 0, 68, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)48;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray1);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 557.5107F;
      floatArray0[1] = (float) (short)59;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      short short0 = (short)59;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)59;
      intArray0[1] = (int) (short)59;
      intArray0[2] = 1008;
      intArray0[3] = 1008;
      intArray0[4] = 1008;
      intArray0[5] = 1008;
      intArray0[6] = 1008;
      intArray0[7] = 1008;
      intArray0[8] = (-544);
      ArrayUtils.swap(intArray0, (-544), 1008, 2885);
      assertArrayEquals(new int[] {59, 59, 1008, 1008, 1008, 1008, 1008, 1008, (-544)}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer integer0 = new Integer((-544));
      assertEquals((-544), (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(objectArray0[7]);
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-544);
      longArray0[1] = (long) 1008;
      longArray0[2] = (long) (short)59;
      longArray0[3] = (long) 1008;
      longArray0[4] = (long) 59;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1008, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-913);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-913.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)83;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-29));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)83}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2, 6);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertTrue(int1 == int0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte) (-66));
      assertEquals((-66L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int2 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-29));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(0, int2);
      assertEquals(4, booleanArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)83;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-717.8F);
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {83.0F, (-1.0F), (-1.0F), 0.0F, (-717.8F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)83;
      intArray1[1] = (-913);
      intArray1[2] = 6;
      intArray1[3] = 6;
      int[] intArray2 = ArrayUtils.add(intArray1, 0, (-1537));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {83, (-913), 6, 6}, intArray1);
      assertArrayEquals(new int[] {(-1537), 83, (-913), 6, 6}, intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '|', (-83));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new char[] {'8', '|', '|'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      Short[] shortArray1 = new Short[4];
      Short short0 = new Short((short) (-106));
      assertEquals((short) (-106), (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)1861);
      assertEquals((short)1861, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short)1671);
      assertEquals((short)1671, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)1671);
      assertEquals((short)1671, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray1[3] = short3;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[2]);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-106), (short)1861, (short)1671, (short)1671}, shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      int[] intArray0 = new int[8];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(945, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-1);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-1);
      intArray1[3] = (int) (byte) (-1);
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray2 = ArrayUtils.insert((-1), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '-';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = '[';
      charArray0[7] = '[';
      int int0 = ArrayUtils.indexOf(charArray0, '[', 0);
      assertArrayEquals(new char[] {'-', '[', '[', '-', 'h', 'h', '[', '['}, charArray0);
      assertEquals(1, int0);
      assertEquals(8, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '[', '[', '-', 'h', 'h', '[', '['}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.reverse((double[]) null, 1, 78);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      ArrayUtils.reverse((double[]) null, 100, 100);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Integer integer0 = new Integer(3786);
      assertEquals(3786, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer(3786);
      assertEquals(3786, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 14);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "xleG3Ogye>+";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 32);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 837, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-453));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, (-453));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -453, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short) (-712);
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, 16, (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(26, byteArray1.length);
      assertEquals(13, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int0);
      assertEquals(13, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-58.641831559246555);
      doubleArray0[1] = (double) 484;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-1), (double) 484);
      assertArrayEquals(new double[] {(-58.641831559246555), 484.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short) (-32083));
      assertEquals((-32083), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 484;
      integerArray0[2] = (Integer) 484;
      integerArray0[3] = (Integer) 484;
      integerArray0[4] = (Integer) 484;
      integerArray0[5] = (Integer) 484;
      integerArray0[6] = (Integer) 484;
      Integer integer1 = new Integer(3494);
      assertEquals(3494, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) 484;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (int) integerArray0[4]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 484, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1916);
      ArrayUtils.shift(intArray0, (-125), 0, 2);
      assertArrayEquals(new int[] {(-1916)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-70);
      shortArray0[1] = (short)474;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-70), (short)474}, shortArray0);
      assertArrayEquals(new short[] {(short) (-70), (short)474}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 435L;
      longArray0[1] = (long) (short)474;
      longArray0[2] = (long) (short) (-70);
      longArray0[3] = (long) (short) (-70);
      longArray0[4] = (long) (short) (-70);
      longArray0[5] = (long) (-1916);
      longArray0[6] = (long) (-1916);
      longArray0[7] = (long) (short) (-70);
      longArray0[8] = (long) 2;
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (long) (short) (-70));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {435L, 474L, (-70L), (-70L), (-70L), (-70L), (-1916L), (-1916L), (-70L), 2L}, longArray1);
      assertArrayEquals(new long[] {435L, 474L, (-70L), (-70L), (-70L), (-1916L), (-1916L), (-70L), 2L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shift(byteArray0, 1, (-2138), (-2138));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, (-698), (-387), (-1156));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1156);
      floatArray0[1] = (float) (-387);
      floatArray0[2] = (float) (-387);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1156.0F), (-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-865.8317F));
      assertArrayEquals(new float[] {(-1156.0F), (-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3690);
      shortArray0[1] = (short) (-472);
      shortArray0[2] = (short)1260;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-122), 8);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3690), (short) (-472), (short)1260}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3690), (short) (-472), (short)1260}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'g';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L', (-1670));
      assertArrayEquals(new char[] {'m', 'm', 'g', 'L'}, charArray0);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      
      Float float0 = new Float((double) (-1670));
      assertEquals((-1670.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((int[]) null, (-1670), (-2086));
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'g';
      longArray0[1] = (-298L);
      longArray0[2] = 4272L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 4272L, 1279);
      assertArrayEquals(new long[] {103L, (-298L), 4272L}, longArray0);
      assertEquals(2, int1);
      assertEquals(3, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-3439.7473F));
      assertEquals((-3439.7473F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)59;
      longArray0[1] = (long) '5';
      longArray0[2] = (long) 'Q';
      longArray0[3] = (-437L);
      longArray0[4] = (long) (short)59;
      longArray0[5] = (long) 'Q';
      longArray0[6] = (long) '5';
      longArray0[7] = (long) '?';
      longArray0[8] = (long) '?';
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {59L, 53L, 81L, (-437L), 59L, 81L, 53L, 63L, 63L}, longArray0);
      assertTrue(boolean2);
      assertEquals(9, longArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (-83), (-83), (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)116);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-83), (short) (byte)14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -83, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int[] intArray0 = new int[2];
      shortArray0[0] = (short)0;
      ArrayUtils.shift(shortArray0, 0, 0, 0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2183;
      shortArray0[1] = (short)3320;
      shortArray0[2] = (short)797;
      shortArray0[3] = (short)2225;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-461), 2);
      assertArrayEquals(new short[] {(short)2183, (short)3320, (short)797, (short)2225}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((-1443.03691553962));
      assertEquals((-1443.03691553962), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1260L;
      longArray0[1] = (long) (short) (-461);
      longArray0[2] = (long) (short)797;
      longArray0[3] = (long) (short)2225;
      longArray0[4] = (long) (short)2183;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (short)2183;
      longArray0[7] = (long) (short)2183;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-3446L));
      assertArrayEquals(new long[] {1260L, (-461L), 797L, 2225L, 2183L, 2L, 2183L, 2183L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(8, longArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 557.5107F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)2183, 781);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 557.5107F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 89, 89);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("Cannot store ", integer0);
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1878);
      shortArray0[1] = (short)11;
      shortArray0[2] = (short) (-4424);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-4424), (-1395));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short) (-1878), (short)11, (short) (-4424)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[3] = false;
      booleanArray0[2] = false;
      booleanArray0[0] = true;
      booleanArray0[0] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(34, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 3383L);
      assertArrayEquals(new long[] {3383L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), 1, 34);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.insert(138, arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[33];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(33, booleanArray0.length);
      assertEquals(33, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertEquals(33, booleanArray0.length);
      assertEquals(33, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (int) (byte) (-11));
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short) (-712);
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-712), (short) (-1559)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short) (-32083));
      assertEquals((-32083), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)49);
      assertEquals(49, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 484;
      Integer integer2 = Integer.getInteger("tT7<<p/2sNO`28_MH", integer0);
      assertEquals((-32083), (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 484;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 484;
      integerArray0[6] = integer0;
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean1);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(2, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-984), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -984, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '5';
      ArrayUtils.reverse(charArray0, 0, (int) '5');
      assertArrayEquals(new char[] {'5', 'k'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1055), 0, 1066);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)87;
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)87);
      assertEquals((short)87, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1431));
      assertEquals((short) (-1431), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2564));
      assertEquals((short) (-2564), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '4';
      charArray0[2] = 'l';
      charArray0[3] = 'V';
      charArray0[4] = 'j';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 3}", bitSet0.toString());
      assertArrayEquals(new char[] {'V', '4', 'l', 'V', 'j'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)87;
      floatArray0[1] = (-2667.4F);
      floatArray0[2] = (float) 'V';
      floatArray0[3] = (float) 'j';
      floatArray0[4] = (float) (short) (-2564);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 86.0F);
      assertArrayEquals(new float[] {87.0F, (-2667.4F), 86.0F, 106.0F, (-2564.0F)}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1312.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 64, 64, 64);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)58;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {58, 0}, intArray0);
      assertArrayEquals(new int[] {58, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (-1749));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, 58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, (-1712), (-1712));
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-1712));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 5);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1000);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)345;
      shortArray0[4] = (short)291;
      shortArray0[5] = (short) (-2505);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3788);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-1000), (short)0, (short) (-1), (short)345, (short)291, (short) (-2505)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)102;
      shortArray0[6] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (short)102);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) byte0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.swap(intArray0, 564, (int) byte0, (int) (short) (-96));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean boolean1 = ArrayUtils.contains(shortArray1, (short)3016);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)43;
      ArrayUtils.shift(byteArray0, (-6), 885, (int) (byte)57);
      assertEquals(15, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int0 = (-1);
      ArrayUtils.swap(booleanArray1, (-1), 120);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 120;
      floatArray0[1] = (float) 120;
      floatArray0[2] = (float) 120;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 120;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (-363.3F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-593));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -593, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1104L;
      longArray0[2] = (-3851L);
      longArray0[3] = (-1L);
      ArrayUtils.swap(longArray0, (-85), 1245, (-256));
      assertArrayEquals(new long[] {1L, 1104L, (-3851L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-15), 2809);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1245;
      intArray0[1] = (-1);
      intArray0[2] = 910;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte) (-15);
      intArray0[5] = (int) (byte) (-15);
      intArray0[6] = (-1);
      intArray0[7] = (int) (byte) (-15);
      intArray0[8] = (int) (byte) (-15);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1245, (-1), 910, (-1), (-15), (-15), (-1), (-15), (-15)}, intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-15);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-15);
      floatArray0[3] = (float) 1245;
      floatArray0[4] = (-3400.0F);
      floatArray0[5] = (float) (-15);
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) (-15);
      ArrayUtils.swap(floatArray0, (-1), 36, 910);
      assertArrayEquals(new float[] {(-15.0F), (-1.0F), (-15.0F), 1245.0F, (-3400.0F), (-15.0F), (-1.0F), (-15.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'i';
      charArray0[2] = '/';
      charArray0[3] = ')';
      charArray0[4] = '\\';
      charArray0[5] = '`';
      charArray0[6] = 'i';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'E', 'i', '/', ')', '\\', '`', 'i'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 2141277047);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1172), 45, (int) (byte) (-12));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) 59;
      longArray0[2] = (long) (-48);
      longArray0[3] = (long) (-48);
      longArray0[4] = 2336L;
      longArray0[5] = (long) (-387);
      ArrayUtils.shift(longArray0, 4635, 3107, (-48));
      assertArrayEquals(new long[] {59L, 59L, (-48L), (-48L), 2336L, (-387L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 59L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 7.0, (-48), (double) 3107);
      assertArrayEquals(new double[] {59.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-2016), (-1121.9373742064));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.reverse(intArray0, (-913), 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, 885, (int) (byte)0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0, (byte)57, (byte)57, (byte)57, (byte)57, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2365;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1749);
      floatArray0[4] = (float) (-1749);
      ArrayUtils.swap(floatArray0, (-32083), (-32083), 15);
      assertArrayEquals(new float[] {2365.0F, 0.0F, (-1.0F), (-1749.0F), (-1749.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'Q';
      charArray0[2] = '\\';
      int int0 = ArrayUtils.indexOf(charArray0, '<');
      assertArrayEquals(new char[] {'_', 'Q', '\\'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[2] = 'h';
      Integer integer0 = new Integer(2139029560);
      assertEquals(2139029560, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-317));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-317);
      doubleArray0[1] = (double) (short)491;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 2139029560;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-317), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -317, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (float) (short)59;
      floatArray0[3] = 59.0F;
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertArrayEquals(new float[] {(-85.0F), 59.0F, 0.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, (-85));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)3);
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2459;
      shortArray1[1] = (short)2792;
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2792, (short)2459}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift((int[]) null, 32);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2792;
      doubleArray0[1] = (double) (short)2792;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) (-85.0F);
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2792.0, 2792.0, 32.0, (-85.0)}, doubleArray0, 0.01);
      assertTrue(boolean3);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, (int) (short) (-32083), (int) (short) (-32083), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Integer integer0 = new Integer((short)49);
      assertEquals(49, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, (-1712), (-1712));
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-1712));
      assertFalse(boolean0);
      
      Short short0 = new Short((short) (-1001));
      assertEquals((short) (-1001), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2155);
      assertEquals((short)2155, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short short2 = (short)1;
      Short short3 = new Short((short)1);
      assertEquals((short)1, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short short4 = new Short((short)1);
      assertEquals((short)1, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      Short short5 = new Short((short)1);
      assertEquals((short)1, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short2));
      assertNotNull(short5);
      
      Short short6 = new Short((short)1);
      assertEquals((short)1, (short)short6);
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short4));
      assertNotNull(short6);
      
      Short[] shortArray0 = new Short[5];
      Short short7 = new Short((short)7);
      assertEquals((short)7, (short)short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short5));
      assertNotNull(short7);
      
      shortArray0[0] = short7;
      shortArray0[1] = short4;
      shortArray0[2] = short1;
      shortArray0[3] = short5;
      shortArray0[4] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 't';
      charArray0[2] = 'U';
      charArray0[3] = 'y';
      charArray0[4] = ':';
      charArray0[5] = 'X';
      charArray0[6] = 'N';
      ArrayUtils.swap(charArray0, (int) (short)7, (int) short2, 2);
      assertArrayEquals(new char[] {'0', 't', 'U', 'y', ':', 'X', 'N'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-387.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)2, (boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNull(booleanArray1);
      
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      ArrayUtils.shuffle(floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(14, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 14;
      doubleArray0[2] = (double) 14;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 14, (-3182));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-83.0F), 14, (-1.0));
      assertArrayEquals(new double[] {14.0, 0.0, 14.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-2457L);
      longArray0[1] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2475.76720479);
      doubleArray0[1] = 185.771;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-387), (-1749), (-387));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)57);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short)57);
      assertEquals(57, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(57, (int)integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 2;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {81L, 81L, 2L}, longArray0);
      assertTrue(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(46);
      assertEquals(46, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 115;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 115}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 115, Integer.MAX_VALUE, 115}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 115;
      objectArray0[1] = (Object) 115;
      objectArray0[2] = (Object) 115;
      ArrayUtils.swap(objectArray0, 10, (-1514), 2379);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 115;
      longArray0[2] = 100L;
      longArray0[3] = (long) 115;
      longArray0[4] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {115L, 115L, 100L, 115L, 2147483647L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)583);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 1411);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 3473, 1411);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-359));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-82), (-82));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(shortArray0, 387, (-2369), (-1833));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (-3585.4802F);
      floatArray0[3] = (-3585.4802F);
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertArrayEquals(new float[] {(-85.0F), (-3585.4802F), 0.0F, (-3585.4802F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, (-85));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = ']';
      charArray0[3] = '.';
      charArray0[4] = 'U';
      charArray0[5] = 'D';
      charArray0[6] = '{';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'K', '>', ']', '.', 'U', 'D', '{'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      objectArray0[2] = (Object) true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-3013), (-866));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-2303), 29);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 380, 380);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '(';
      charArray0[2] = 'a';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Q', '(', 'a'}, charArray0);
      assertArrayEquals(new char[] {'Q', '(', 'a'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short)940;
      shortArray0[2] = (short)897;
      shortArray0[3] = (short) (-713);
      shortArray0[4] = (short)101;
      shortArray0[5] = (short)46;
      shortArray0[6] = (short)89;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (-392);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)89, (int) (short)101);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)89, (short)940, (short)897, (short) (-713), (short)101, (short)46, (short)89, (short) (-1), (short) (-392)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) 'Q';
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) 'Q';
      floatArray0[5] = (float) (short)897;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-1));
      assertArrayEquals(new float[] {97.0F, 40.0F, 81.0F, 97.0F, 81.0F, 897.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte) (-101);
      ArrayUtils.shift(booleanArray0, (-1), (-7), 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 2813, 997, 1);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer((-981));
      assertEquals((-981), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2813);
      assertEquals(2813, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer2 = new Integer(4363);
      assertEquals(4363, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2813);
      assertEquals(2813, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer1);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer4 = new Integer(2813);
      assertEquals(2813, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer4, integer1);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer4;
      integerArray0[3] = integer4;
      integerArray0[4] = integer4;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[2]);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-953));
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((-953.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-953", mutableInt0.toString());
      assertEquals((-953), (int)mutableInt0.toInteger());
      assertEquals((-953), (int)mutableInt0.getValue());
      assertEquals((-953.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-953), mutableInt0.intValue());
      assertEquals((-953L), mutableInt0.longValue());
      assertEquals((short) (-953), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer5 = mutableInt0.toInteger();
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((-953.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-953", mutableInt0.toString());
      assertEquals((-953), (int)mutableInt0.toInteger());
      assertEquals((-953), (int)mutableInt0.getValue());
      assertEquals((-953.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-953), mutableInt0.intValue());
      assertEquals((-953L), mutableInt0.longValue());
      assertEquals((short) (-953), mutableInt0.shortValue());
      assertEquals((-953), (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) abstractMap_SimpleImmutableEntry0, 1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertEquals((-1), int0);
      assertEquals(7, integerArray0.length);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(14, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 14;
      doubleArray0[2] = (double) 14;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      ArrayUtils.shift(booleanArray0, 53, 14, 1114);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      Character[] characterArray0 = new Character[17];
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-723);
      intArray0[2] = (-1170);
      intArray0[3] = (-1414);
      intArray0[4] = 89;
      intArray0[5] = 1439;
      intArray0[6] = 7;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-1623));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {2, (-723), (-1170), (-1414), 89, 1439, 7}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)67);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(17, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)48);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1323));
      assertEquals((short) (-1323), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-40));
      assertArrayEquals(new short[] {(short) (-40), (short) (-40), (short) (-40)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1439), shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1439, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1592);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1300);
      longArray0[1] = (long) (short) (-1592);
      longArray0[2] = (long) (short) (-1592);
      longArray0[3] = (long) (short) (-1300);
      longArray0[4] = (long) (short) (-1592);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-1300));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1300L), (-1592L), (-1592L), (-1300L), (-1592L)}, longArray0);
      assertArrayEquals(new long[] {(-1300L), (-1300L), (-1592L), (-1592L), (-1300L), (-1592L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-2514L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1300L), (-1592L), (-1592L), (-1300L), (-1592L)}, longArray0);
      assertArrayEquals(new long[] {(-1300L), (-1300L), (-1592L), (-1592L), (-1300L), (-1592L)}, longArray1);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (byte)48, (int) (byte)61);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      ArrayUtils.shift(charArray0, (-2879));
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2287;
      doubleArray0[1] = (double) (short) (-3562);
      doubleArray0[2] = (double) 2287;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2287.0, (-3562.0), 2287.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2287.0, (-3562.0), 2287.0, 2287.0, (-3562.0), 2287.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1533L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1533L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Double double0 = new Double((-1040.154));
      assertEquals((-1040.154), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[5];
      Double double3 = new Double(799.0);
      assertEquals(799.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[0] = double3;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 46.575);
      assertArrayEquals(new double[] {799.0, 0.0, (-1040.154), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 1914);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = 1914;
      intArray0[4] = (-1975);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2900), (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-1), 1, (-1), 1914, (-1975), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-1), 1, (-1), 1914, (-1975), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-67);
      ArrayUtils.shift(shortArray0, 1367);
      assertArrayEquals(new short[] {(short) (-67), (short)9}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1367;
      longArray0[1] = (long) (short) (-67);
      longArray0[2] = (long) (short)9;
      longArray0[3] = (long) (short)9;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {9L, 9L, (-67L), 1367L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)9);
      assertEquals(9.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2770.3586362888);
      assertEquals(2770.3586362888, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(9L);
      assertEquals(9.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 799.0);
      assertArrayEquals(new double[] {9.0, 2770.3586362888, 9.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(doubleArray1, (int) (short)9);
      assertArrayEquals(new double[] {9.0, 2770.3586362888, 9.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift(shortArray0, 349);
      assertArrayEquals(new short[] {(short)9, (short) (-67)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-35);
      ArrayUtils.shift(byteArray0, 9);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte) (-35), (byte) (-1), (byte)53, (byte) (-35)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)20);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte) (-35), (byte) (-1), (byte)53, (byte) (-35)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-35), (byte) (-35), (byte) (-1), (byte)53, (byte) (-35)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 5);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)3;
      floatArray0[1] = (float) (short)3;
      floatArray0[2] = (float) (short)3;
      floatArray0[3] = (float) (short)3;
      floatArray0[4] = (float) (short)3;
      floatArray0[5] = (float) (short)3;
      floatArray0[6] = (float) (short)3;
      floatArray0[7] = (-9.71F);
      floatArray0[8] = (float) (short)3;
      ArrayUtils.shift(floatArray0, (int) (short)3, (int) (short)3, 1552);
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, 3.0F, 3.0F, 3.0F, 3.0F, (-9.71F), 3.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, floatArray0.length);
      assertNotNull(map0);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 2340;
      ArrayUtils.shift(floatArray1, (-232), 2340, 86);
      assertArrayEquals(new float[] {2340.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, int0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 866;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      ArrayUtils.shift(floatArray0, 1, 2, (int) (short)0);
      assertArrayEquals(new float[] {866.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {866.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)1605;
      shortArray0[2] = (short) (-1156);
      shortArray0[3] = (short)114;
      shortArray0[4] = (short)262;
      shortArray0[5] = (short)3788;
      shortArray0[6] = (short)349;
      intArray0[0] = (int) (short) (-2994);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2994));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)45, (short)1605, (short) (-1156), (short)114, (short)262, (short)3788, (short)349, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)45, (short)1605, (short) (-1156), (short)114, (short)262, (short)3788, (short)349, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'h', (int) (short)45);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2311;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)2311}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)2311;
      objectArray0[1] = (Object) (short)2311;
      objectArray0[3] = (Object) (short)2311;
      objectArray0[3] = (Object) (short)2311;
      objectArray0[4] = (Object) (short)2311;
      objectArray0[5] = (Object) (short)2311;
      objectArray0[6] = (Object) (short)2311;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)2311;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (short)2311;
      doubleArray0[1] = (double) (short)2311;
      doubleArray0[2] = 2311.0;
      doubleArray0[3] = (double) (short)2311;
      doubleArray0[4] = (double) (short)2311;
      doubleArray0[5] = (double) (short)2311;
      doubleArray0[6] = (double) (short)2311;
      doubleArray0[7] = (double) (short)2311;
      doubleArray0[8] = (double) (short)2311;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2311.0, 2311.0, 2311.0, 2311.0, 2311.0, 2311.0, 2311.0, 2311.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      ArrayUtils.shift(byteArray0, 2146914928);
      assertArrayEquals(new byte[] {(byte)0, (byte)36}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(247);
      assertEquals(247, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("java.lang.Integer", 116);
      assertEquals(116, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      assertEquals(3, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(226);
      assertEquals(226, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.insert((int) 2, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2365;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)2365;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (short)2365;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2365.0F, 2.14748365E9F, 2365.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)81;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)82, (byte) (-36), (byte)35, (byte) (-1), (byte)19, (byte) (-67), (byte)81}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Integer.valueOf("V(*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"V(*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '<');
      assertNull(charArray0);
      
      Integer integer0 = new Integer((-2954));
      assertEquals((-2954), (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)109;
      shortArray0[3] = (short)76;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1055);
      shortArray0[6] = (short)1031;
      shortArray0[7] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals("{1, 4, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)109, (short)76, (short) (-1), (short) (-1055), (short)1031, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.swap(doubleArray0, (int) (short)59, 474, 382);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 474);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-99), (byte) (-1), (byte)0, (byte)45}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'E';
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ')');
      assertArrayEquals(new char[] {')'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Character character0 = new Character('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('7');
      assertEquals('7', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('7');
      assertEquals('7', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('7');
      assertEquals('7', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[1] = character3;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertArrayEquals(new char[] {'\\', '7', '7'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (double) character0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)87;
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)87);
      assertEquals((short)87, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1431));
      assertEquals((short) (-1431), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2564));
      assertEquals((short) (-2564), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)974);
      assertEquals((short)974, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      Short short5 = new Short((short)9);
      assertEquals((short)9, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      
      Short short6 = new Short((byte)0);
      assertEquals((short)0, (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertNotNull(short6);
      
      Short short7 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short7);
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short4));
      assertNotNull(short7);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)87;
      ArrayUtils.reverse(byteArray0, (int) (byte)2, 1729);
      assertArrayEquals(new byte[] {(byte)2, (byte)87, (byte)87, (byte)87, (byte)87, (byte)0, (byte)87, (byte)57, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('>');
      assertEquals('>', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('>', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('>', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertEquals('>', (char)character3);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('w');
      assertEquals('w', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character3);
      assertEquals('>', (char)character5);
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('>');
      assertEquals('>', (char)character6);
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertArrayEquals(new char[] {'>', '>', '>', '>', 'w', '>', '>'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(50, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-875.9294), 178);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 328;
      intArray0[2] = 178;
      intArray0[3] = 1;
      intArray0[4] = 178;
      ArrayUtils.shift(intArray0, (-2443), 90, 1);
      assertArrayEquals(new int[] {178, (-1), 328, 178, 1}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 3L, (-2443));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 328, (-2146732093));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4599;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2108), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2108, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4888.635118449167);
      doubleArray1[1] = (-4888.635118449167);
      doubleArray1[2] = (-4888.635118449167);
      doubleArray1[3] = (double) (-913);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-4888.635118449167), (-4888.635118449167), (-4888.635118449167), (-913.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4888.635118449167), (-4888.635118449167), (-4888.635118449167), (-913.0), (-4888.635118449167), (-4888.635118449167), (-4888.635118449167), (-913.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 587L, (-4556));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.insert(46, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[5];
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2665, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2665, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)111, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(4, byteArray0.length);
      assertTrue(int1 == int0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-30));
      assertEquals((-30), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)120;
      doubleArray1[2] = (double) (byte)120;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (byte)1;
      char[] charArray0 = ArrayUtils.insert((int) (byte)111, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)120, (-1164.022453712185));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(0, doubleArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)120;
      shortArray0[1] = (short) (-787);
      shortArray0[2] = (short)56;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(125, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(128);
      assertEquals(128, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      ArrayUtils.shift((Object[]) integerArray0, Integer.MAX_VALUE, (int) integerArray0[0], 128);
      assertEquals(8, integerArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1217L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(128, (int)integer1);
      assertEquals(8, integerArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1, (int) integerArray0[1]);
      assertEquals((-1), int1);
      assertEquals(8, integerArray0.length);
      assertTrue(int1 == int0);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      ArrayUtils.shift((boolean[]) null, 1, (int) integerArray0[0], (int) integerArray0[0]);
      assertEquals(8, integerArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-20));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-913);
      intArray0[0] = (-913);
      MutableInt mutableInt0 = new MutableInt((Number) (-913));
      assertEquals((-913.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-913L), mutableInt0.longValue());
      assertEquals((-913.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-913", mutableInt0.toString());
      assertEquals((-913), mutableInt0.intValue());
      assertEquals((short) (-913), mutableInt0.shortValue());
      assertEquals((-913), (int)mutableInt0.getValue());
      assertEquals((byte)111, mutableInt0.byteValue());
      assertEquals((-913), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-913.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-913L), mutableInt0.longValue());
      assertEquals((-913.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-913", mutableInt0.toString());
      assertEquals((-913), mutableInt0.intValue());
      assertEquals((short) (-913), mutableInt0.shortValue());
      assertEquals((-913), (int)mutableInt0.getValue());
      assertEquals((byte)111, mutableInt0.byteValue());
      assertEquals((-913), (int)mutableInt0.toInteger());
      assertEquals((-913), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-913), (-913));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-913), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      Integer integer1 = new Integer(669);
      assertEquals(669, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = (-15);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2114), 727);
      assertArrayEquals(new int[] {5, 5, (-15), 0, 0, 5}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'r';
      charArray0[2] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\\');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k', 'r', '\\'}, charArray0);
      assertArrayEquals(new char[] {'k', 'r'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-996.5611F));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5, 5, (-15), 0, 0, 5}, intArray0);
      assertArrayEquals(new int[] {5, 5, (-15), 0, 0, 5}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)14;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[1]);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1, 1);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), int1);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[5];
      ArrayUtils.shift(objectArray0, (-26));
      assertEquals(5, objectArray0.length);
      
      Integer integer0 = Integer.getInteger(" is not a valid number.", (-26));
      assertEquals((-26), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertFalse(boolean0);
      assertEquals(5, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'q', (-26));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)7, (byte)28, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)7, (byte)28}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, 3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1, 1);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1092L, (-125));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-5655));
      assertEquals((-5655), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "&4");
      assertNull(stringArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2, (-4510));
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-125));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -125, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'Y';
      charArray0[3] = 'b';
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)56;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) (short)2;
      longArray0[3] = 1L;
      longArray0[4] = (long) 'Y';
      longArray0[5] = (long) (short)56;
      longArray0[6] = (long) 'b';
      longArray0[7] = (long) (short) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, 89L);
      assertArrayEquals(new long[] {58L, 89L, 2L, 1L, 89L, 56L, 98L, (-1L)}, longArray0);
      assertEquals(1, int0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      Boolean[] booleanArray2 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf("S");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray2[0] = boolean1;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean2);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      Double double0 = new Double((-913.0));
      assertEquals((-913.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)59);
      assertEquals(59.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)9;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(objectArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)9);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)66);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {66L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[29];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 481);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(29, objectArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(29, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4294);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2995);
      longArray0[1] = (long) (-2995);
      longArray0[2] = (long) 3889;
      longArray0[3] = (long) (-2995);
      longArray0[4] = (long) 2473;
      longArray0[5] = (-401L);
      longArray0[6] = (long) (-2995);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-4733L), (-2097542167));
      assertArrayEquals(new long[] {(-2995L), (-2995L), 3889L, (-2995L), 2473L, (-401L), (-2995L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-4294), (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'V';
      ArrayUtils.swap(floatArray0, 4, (-2146221164), 4);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 86.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, (-698), (-387), (-1156));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1156);
      floatArray0[1] = (float) (-387);
      floatArray0[2] = (float) (-387);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1156.0F), (-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-865.8317F));
      assertArrayEquals(new float[] {(-1156.0F), (-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (-1156), (-698));
      assertArrayEquals(new float[] {(-1156.0F), (-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap(booleanArray0, 19, 19);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, (-698), (-387), (-1156));
      ArrayUtils.swap(booleanArray0, 19, 19);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      assertEquals((-1772), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1772));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[3];
      booleanArray0[3] = false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2097542167));
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2311;
      longArray0[2] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2311L, 6L, 6L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {2311L, 6L, 6L, 0L, 0L, 2311L, 6L, 6L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-1312), (int) (byte)0, 6);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-11));
      assertEquals((short) (-11), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-11));
      assertArrayEquals(new short[] {(short) (-11), (short) (-11), (short) (-11), (short) (-11)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertArrayEquals(new short[] {(short) (-11), (short) (-11), (short) (-11), (short) (-11)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte) (-11), (int) (byte) (-11), (int) (byte) (-11));
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)330;
      shortArray0[3] = (short)1633;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)4;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)0, (short)330, (short)1633, (short)3, (short)4}, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)14, (int) (short)14);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)48;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertSame(byteArray1, objectArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, int0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 557.5107F;
      floatArray0[1] = (float) (short)59;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2746, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {557.5107F, 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(doubleArray0, 16);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-39), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2475.76720479);
      doubleArray0[1] = 185.771;
      doubleArray0[2] = (-2475.76720479);
      doubleArray0[3] = 11.020111514768;
      doubleArray0[4] = (double) (-1770);
      doubleArray0[5] = 488.0;
      doubleArray0[6] = (double) (-1770);
      doubleArray0[7] = (-2475.76720479);
      doubleArray0[8] = (double) (-1770);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 1);
      assertArrayEquals(new double[] {(-2475.76720479), 185.771, (-2475.76720479), 11.020111514768, (-1770.0), 488.0, (-1770.0), (-2475.76720479), (-1770.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 11.020111514768;
      objectArray0[1] = (Object) (-1770.0);
      objectArray0[2] = (Object) (-2475.76720479);
      objectArray0[3] = (Object) (-2475.76720479);
      objectArray0[4] = (Object) 488.0;
      objectArray0[5] = (Object) (-1770.0);
      objectArray0[6] = (Object) (-1770.0);
      objectArray0[7] = (Object) (-2475.76720479);
      objectArray0[8] = (Object) 185.771;
      ArrayUtils.shift(objectArray0, 1, 111, 111);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.indexOf(floatArray1, (float) (-1770), (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.insert((-1269), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer(516);
      assertEquals(516, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1883));
      assertEquals((-1883), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) map0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 1069);
      assertEquals((-1), int1);
      assertEquals(2, objectArray0.length);
      assertTrue(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 474;
      objectArray0[1] = (Object) 474;
      ArrayUtils.swap(doubleArray0, 474, 474, 474);
      assertArrayEquals(new double[] {474.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 78);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte)14);
      assertEquals(14, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0, 69);
      assertEquals((-1), int0);
      assertEquals(4, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(69);
      assertEquals(69, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("ip=?", integer1);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)integer4);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'Y';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1119;
      shortArray0[1] = (short)1119;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1119);
      assertArrayEquals(new short[] {(short)1119, (short)1119}, shortArray0);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'Y';
      longArray0[1] = (long) 1;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {89L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, 1835, 17);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {89L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1092L, (-125));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.contains(intArray0, (-125));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(6, booleanArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf((short[]) null, (short)1119);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-125), (-125));
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      String string0 = "";
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 9, (-1094));
      assertNull(longArray0);
      
      Double double0 = new Double(910.238375546497);
      assertEquals(910.238375546497, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Double.valueOf((double) 807);
      assertEquals(807.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(807);
      assertEquals(807.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      try { 
        Double.valueOf("Index: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(17, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, 17, 17, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.insert((-128), intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      short[] shortArray0 = new short[11];
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 91, 91);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '}';
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)73);
      assertNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray((byte[]) null, (int) (byte)73, (int) (byte)73);
      assertNull(byteArray2);
      
      boolean boolean5 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean5);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'S');
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 484, 484, 484);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (byte)58;
      ArrayUtils.swap(floatArray0, 0, 1, 2365);
      assertArrayEquals(new float[] {58.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '_';
      charArray0[2] = ';';
      charArray0[3] = '<';
      charArray0[4] = '/';
      charArray0[5] = '}';
      charArray0[6] = 'l';
      charArray0[7] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '\\');
      assertArrayEquals(new char[] {'\\', '_', ';', '<', '/', '}', 'l', '!'}, charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 0L;
      objectArray0[8] = (Object) 0L;
      ArrayUtils.swap(objectArray0, (-3495), (-3495), 1822);
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(2, (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer1, objectArray0[4]);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1859L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (-61));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, (-61), (-61), (-61));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Character character0 = new Character('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      char char0 = '[';
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1010.439377353);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer(char0);
      assertEquals(91, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2139029560));
      assertEquals((-2139029560), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) (short)59;
      intArray0[4] = (int) '[';
      intArray0[5] = (int) '+';
      ArrayUtils.swap((Object[]) characterArray0, 0, (-1240));
      assertSame(characterArray0, characterArray1);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      short short0 = (short)98;
      Short short1 = new Short((short)98);
      assertEquals((short)98, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      shortArray0[7] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-3728));
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(shortArray1, (-396), 463, (int) short0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-67);
      ArrayUtils.shift(shortArray0, 1358);
      assertArrayEquals(new short[] {(short)9, (short) (-67)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1358;
      longArray0[1] = (long) (short) (-67);
      longArray0[2] = (long) (short)9;
      longArray0[3] = (long) (short) (-67);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-67L), 9L, (-67L), 1358L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short) (-67));
      assertEquals((-67.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2770.3586362888);
      assertEquals(2770.3586362888, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(9L);
      assertEquals(9.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 799.0);
      assertArrayEquals(new double[] {(-67.0), 2770.3586362888, 9.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      double[] doubleArray1 = new double[16];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4893.1713926);
      doubleArray1[1] = (-4893.1713926);
      doubleArray1[2] = (-4893.1713926);
      doubleArray1[3] = (double) (-913);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(16, doubleArray1.length);
      assertEquals(32, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(intArray0, 2036, (int) (short)2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double double0 = new Double(253.017194019);
      assertEquals(253.017194019, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, (int) (short)2, 1265);
      assertEquals(15, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(14, booleanArray1.length);
      assertEquals(15, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (short)59;
      intArray0[2] = (int) (short)59;
      intArray0[3] = (int) (byte)46;
      ArrayUtils.swap(intArray0, (-875), (-2830));
      assertArrayEquals(new int[] {4, 59, 59, 46}, intArray0);
      assertEquals(4, intArray0.length);
      
      Double double0 = new Double(2691.98597531);
      assertEquals(2691.98597531, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 59, 87);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, (-515));
      assertArrayEquals(new int[] {4, 59, 59, 46}, intArray0);
      assertFalse(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)46;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.swap(booleanArray0, (-530), (-3404), (-2510));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1712);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)0;
      longArray0[6] = 3639L;
      longArray0[7] = 3639L;
      longArray0[8] = (long) (-1712);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1712L));
      assertEquals((-1712.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 1, (-1), (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      Double double0 = new Double((-913.0));
      assertEquals((-913.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)59);
      assertEquals(59.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (int) (short) (-16), (-1), 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-913);
      intArray0[2] = 0;
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '^';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[3] = (short)1257;
      shortArray0[4] = (short)1257;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (-913));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'^', '6'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(intArray0, (int) (short)1257, 2700);
      assertArrayEquals(new int[] {(-913), (-913), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-700.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1257;
      longArray0[1] = (long) (-913);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '6';
      longArray0[4] = (long) (-913);
      longArray0[5] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1257L, (-913L), 0L, 54L, (-913L), 1L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-7);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), (-655));
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-1), (byte) (-7)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-12);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-12)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte) (-12));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-12)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-455), 2340, 2340);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Character character0 = new Character('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      char char0 = '[';
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1010.439377353);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer(char0);
      assertEquals(91, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2139029560));
      assertEquals((-2139029560), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) (short)59;
      intArray0[4] = (int) '[';
      intArray0[5] = (int) '+';
      intArray0[6] = (-2139029560);
      intArray0[7] = (int) char0;
      intArray0[8] = (int) char0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {43, 43, 43, 59, 91, 43, (-2139029560), 91, 91}, intArray0);
      assertFalse(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      char[] charArray0 = new char[10];
      ArrayUtils.shift(charArray0, 0, 1, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)116);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 2, (short) (byte)14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-65));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)111, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(4, byteArray0.length);
      assertTrue(int1 == int0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-30));
      assertEquals((-30), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)120;
      doubleArray1[2] = (double) (byte)120;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (byte)1;
      boolean boolean2 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 120.0, 120.0, (-1.0), 1.0}, doubleArray1, 0.01);
      assertFalse(boolean2);
      assertEquals(5, doubleArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift((Object[]) characterArray0, 1, 997, (-981));
      assertEquals(0, characterArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((byte)120);
      assertEquals(120, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer3 = new Integer((-30));
      assertEquals((-30), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2, 2, (-2146437116));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2146437116);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2146437116);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-2146437116L), 101L, (-2146437116L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2484.102F;
      floatArray0[1] = (float) (-2146437116);
      floatArray0[3] = (float) 101L;
      floatArray0[3] = 2484.102F;
      floatArray0[4] = (float) 101L;
      floatArray0[5] = (float) 2;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-2.14643712E9F), 0.0F, 2484.102F, 101.0F, 2.0F, 2484.102F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 101;
      intArray0[3] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146437116));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 101, 2}, intArray0);
      assertArrayEquals(new int[] {0, 0, 101, 2}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1265, 1265);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) (-1764);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) (-1764);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (double) 1265;
      doubleArray2[7] = 0.0;
      ArrayUtils.shift(doubleArray2, 85, (-1764), 917);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1764.0), 1.0, 0.0, (-1764.0), 1.0, 1265.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 85;
      floatArray0[1] = (float) 1265;
      floatArray0[2] = (float) 85;
      floatArray0[3] = (float) (-1764);
      floatArray0[4] = (float) 1265;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 1265;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {85.0F, 1265.0F, 85.0F, (-1764.0F), 1265.0F, 1.0F, 1265.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {85.0F, 1265.0F, 85.0F, (-1764.0F), 1265.0F, 1.0F, 1265.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(114);
      assertEquals(114, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {114}, intArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('%');
      assertEquals('%', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-98));
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertNotSame(charArray0, charArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((byte) (-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3322));
      assertEquals((-3322), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2228));
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[1];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-98));
      assertArrayEquals(new double[] {(-3322.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1.0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {(-3322.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      ArrayUtils.swap(charArray1, (int) integerArray0[0], (-1221), (int) (byte) (-98));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) integerArray0[1]);
      assertEquals((-1), int0);
      assertEquals(1, characterArray0.length);
      assertEquals(4, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ')';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 488.0, 799);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(65);
      assertEquals(65, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1712));
      assertEquals((-1712), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray1, 18);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1712));
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1054.281F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1054.281F);
      assertArrayEquals(new float[] {1054.281F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      Integer integer0 = new Integer(479);
      assertEquals(479, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer1 = new Integer(2786);
      assertEquals(2786, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Short short0 = new Short((short) (-1361));
      assertEquals((short) (-1361), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-401));
      assertEquals((short) (-401), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1257);
      assertEquals((short)1257, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-755));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 124.0, (-1639));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 479.0F);
      assertArrayEquals(new float[] {1118.434F, 59.0F, (-2245.77F), 479.0F, 479.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 9.443F;
      floatArray0[1] = 9.443F;
      floatArray0[2] = 9.443F;
      floatArray0[3] = 9.443F;
      floatArray0[4] = 9.443F;
      floatArray0[5] = 9.443F;
      floatArray0[6] = 9.443F;
      ArrayUtils.shift((float[]) null, 5, 0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-75);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byte[] byteArray2 = ArrayUtils.insert(0, byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-75), (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-75), (byte)1, (byte)1, (byte)1, (byte) (-75), (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-75), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)917;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-147);
      shortArray0[4] = (short) (-408);
      shortArray0[5] = (short) (-1357);
      shortArray0[6] = (short) (-2186);
      shortArray0[7] = (short) (-3512);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3512));
      assertArrayEquals(new short[] {(short)0, (short)917, (short)5, (short) (-147), (short) (-408), (short) (-1357), (short) (-2186), (short) (-3512)}, shortArray0);
      assertEquals(7, int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1357);
      doubleArray0[1] = (double) (short) (-3512);
      doubleArray0[2] = (double) (short) (-147);
      doubleArray0[3] = (double) (short) (-408);
      doubleArray0[4] = (double) (short) (-408);
      doubleArray0[5] = (double) (short)917;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1357.0), (-3512.0), (-147.0), (-408.0), (-408.0), 917.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)112;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-114);
      doubleArray0[1] = (double) (byte) (-114);
      doubleArray0[2] = (double) (byte)112;
      doubleArray0[3] = (double) (byte) (-114);
      doubleArray0[4] = (double) (byte)112;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-114.0), (-3921.2344));
      assertArrayEquals(new double[] {(-114.0), (-114.0), 112.0, (-114.0), 112.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-114.0), (-114.0), 112.0, (-114.0), 112.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-883);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-883));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = Float.valueOf((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((float) floatArray0[2]);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "0BB2");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 143.5157F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'B', 'B', ':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\"');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'B', 'B', ':'}, charArray0);
      assertArrayEquals(new char[] {'\"', 'B', 'B', ':'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(doubleArray0, (-2136046931), 53, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1489;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 'B';
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-2136046931));
      assertArrayEquals(new float[] {1489.0F, 53.0F, 53.0F, 66.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      ArrayUtils.reverse(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-3392);
      longArray0[1] = (long) (-3392);
      longArray0[2] = 2368L;
      longArray0[3] = (long) (-3392);
      longArray0[4] = (long) (-3392);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2368L, (-1));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-3392L), (-3392L), 2368L, (-3392L), (-3392L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      String string0 = "l:20yl%XD=4]h";
      String string1 = "xleG3Ogye>+";
      int int0 = ArrayUtils.indexOf(doubleArray0, 11.020111514768, 732);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0.0;
      int int1 = 1036;
      Integer integer0 = new Integer(1036);
      assertEquals(1036, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int int2 = 68;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1254.0), 68);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 6;
      ArrayUtils.swap(floatArray0, (-2144522091), (-2141), 6);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1569);
      assertEquals((-1), int0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 285;
      intArray0[1] = 14;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {285, 14}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      long[] longArray0 = new long[1];
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)55;
      doubleArray0[1] = (double) (short)55;
      ArrayUtils.swap(doubleArray0, (-836), (int) (short)55, 7);
      assertArrayEquals(new double[] {55.0, 55.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) null, 7);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-84L));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) integer0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) integer1);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, longArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)86);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1943));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1943));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[20];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (-1943);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(20, longArray0.length);
      assertEquals(20, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      short short0 = (short)2;
      Short short1 = new Short((byte)33);
      assertEquals((short)33, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)2);
      assertEquals((short)2, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = (Short) short0;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (short)2, 11, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer integer0 = new Integer(120);
      assertEquals(120, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(120, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) stringArray0, object0);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 33L, (int) (byte)33, (double) short0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 2078);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[8];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)63;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (byte)120, 1, (int) (byte)63);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-2145237325);
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)63;
      intArray0[6] = (int) (byte)63;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-3098), (-1011), (-1011));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '5';
      ArrayUtils.reverse(charArray0, 0, (-1021));
      assertArrayEquals(new char[] {'k', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1055), 0, 1066);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)58;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 58.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)58, 479, (int) (byte)2);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2, (byte)58, (byte)33, (byte)0, (byte)2}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2095105998;
      ArrayUtils.swap(intArray0, (-2141451389), 2095105998);
      assertArrayEquals(new int[] {2095105998}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 484;
      doubleArray0[1] = (double) 484;
      doubleArray0[2] = (double) 484;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 484;
      doubleArray0[5] = (double) 484;
      doubleArray0[6] = (double) 484;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {484.0, 484.0, 484.0, 9.0, 484.0, 484.0, 484.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(intArray0, (-1), 9);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.reverse((boolean[]) null, (-1), 484);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2036;
      boolean boolean1 = ArrayUtils.contains(intArray1, 2036);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2036}, intArray1);
      assertTrue(boolean1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      
      Short short0 = new Short((short)5);
      assertEquals((short)5, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)5);
      assertEquals((short)5, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1305));
      assertEquals((short) (-1305), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      ArrayUtils.reverse((short[]) null, (-2051), (-2910));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertFalse(boolean2);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 799;
      doubleArray0[1] = (double) 1388;
      doubleArray0[2] = (double) 799;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4062.5738), 598);
      assertArrayEquals(new double[] {799.0, 1388.0, 799.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      Integer integer1 = new Integer(65);
      assertEquals(65, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(598);
      assertEquals(598, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 598);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse((long[]) null, 3181, 1681);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      ArrayUtils.shift(intArray0, (-125), Integer.MAX_VALUE, 1273);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-913);
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 1273;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) (-125);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2147483647L, 848);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-913L), 2147483647L, 1273L, 2147483647L, (-125L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse(longArray0, (-125), 101);
      assertArrayEquals(new long[] {(-125L), 2147483647L, 1273L, 2147483647L, (-913L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-810);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-810)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-810)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      float[] floatArray0 = new float[11];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 76);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(11, floatArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(floatArray0, (-3221), 76, 101);
      assertEquals(11, floatArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (-3221);
      objectArray0[2] = (Object) 76;
      objectArray0[4] = (Object) (-3221);
      objectArray0[5] = (Object) 101;
      objectArray0[6] = (Object) bitSet0;
      objectArray0[7] = (Object) (-3221);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ArrayUtils.swap(intArray0, 54, 54);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert((-5088), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1092L, (-125));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '3';
      charArray0[2] = 'W';
      charArray0[3] = 'r';
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-125));
      assertEquals((-125), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("Arguments cannot both be null", 1092);
      assertEquals(1092, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-125));
      assertEquals((-125), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2110458067);
      assertEquals(2110458067, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2110458067);
      assertEquals(2110458067, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(493);
      assertEquals(493, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt(97);
      assertEquals(97.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(97, (int)mutableInt0.getValue());
      assertEquals((byte)97, mutableInt0.byteValue());
      assertEquals(97, (int)mutableInt0.toInteger());
      assertEquals("97", mutableInt0.toString());
      assertEquals(97L, mutableInt0.longValue());
      assertEquals(97.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(97, mutableInt0.intValue());
      assertEquals((short)97, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer6 = mutableInt0.toInteger();
      assertEquals(97.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(97, (int)mutableInt0.getValue());
      assertEquals((byte)97, mutableInt0.byteValue());
      assertEquals(97, (int)mutableInt0.toInteger());
      assertEquals("97", mutableInt0.toString());
      assertEquals(97L, mutableInt0.longValue());
      assertEquals(97.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(97, mutableInt0.intValue());
      assertEquals((short)97, mutableInt0.shortValue());
      assertEquals(97, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      assertEquals(493, (int)integer7);
      assertEquals(9, integerArray0.length);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1);
      assertEquals(1, (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertNotNull(integer8);
      
      Integer integer9 = Integer.getInteger("Arguments cannot both be null", integer8);
      assertEquals(1, (int)integer9);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer3));
      assertNotNull(integer9);
      
      integerArray0[8] = integer9;
      boolean boolean2 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean2);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3793.4165165402037);
      doubleArray0[2] = 861.09579695;
      int int1 = new Integer((byte)0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      MockRandom mockRandom0 = new MockRandom((byte)2);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = int0;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int2 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int2);
      assertEquals(2, intArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) (byte)0;
      boolean boolean2 = ArrayUtils.contains(longArray0, (-1144L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean2);
      assertEquals(4, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'w';
      charArray0[2] = '\'';
      charArray0[3] = ':';
      charArray0[4] = 'N';
      charArray0[5] = 'f';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'w', '\'', ':', 'N', 'f'}, charArray1);
      assertArrayEquals(new char[] {'#', 'w', '\'', ':', 'N', 'f'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 'C';
      doubleArray0[2] = (double) '9';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 57.0);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 67.0, 57.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'K';
      intArray0[1] = 1;
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) '@';
      intArray0[4] = (-1196);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 7, 4362);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {75, 1, 75, 64, (-1196), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '+');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y', 'y'}, charArray0);
      assertArrayEquals(new char[] {'y', 'y'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 484);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap(charArray0, 832, Integer.MAX_VALUE);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'y', 'y'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)12;
      shortArray0[4] = (short)1929;
      shortArray0[5] = (short)34;
      shortArray0[6] = (short)2411;
      shortArray0[7] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)54, (-59));
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short) (-1), (short)54, (short)1, (short)12, (short)1929, (short)34, (short)2411, (short)1}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-98);
      ArrayUtils.swap(byteArray0, Integer.MAX_VALUE, 1936);
      assertArrayEquals(new byte[] {(byte)22, (byte)113, (byte) (-98)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)58;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'G');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'G');
      assertNull(charArray0);
      
      Integer integer0 = Integer.valueOf(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'G');
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = (float) 'G';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {71.0F, 71.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 71.0F);
      assertArrayEquals(new float[] {71.0F, 71.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(169);
      assertEquals(169, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(54);
      assertEquals(54, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-143));
      assertEquals((-143), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) null, 17, 111, 17);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.swap(intArray0, 54, 54);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift((short[]) null, 451, 54, (-1));
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((byte[]) null, 451, (-1));
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1943));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1943));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[20];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (-1943);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(20, longArray0.length);
      assertEquals(20, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Short short0 = new Short((byte)33);
      assertEquals((short)33, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)33);
      assertEquals((short)33, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      Short short3 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)2700);
      assertEquals((short)2700, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      Short short5 = new Short((short) (-1299));
      assertEquals((short) (-1299), (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      
      Short short6 = new Short((byte)33);
      assertEquals((short)33, (short)short6);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short1));
      assertNotNull(short6);
      
      Short short7 = new Short((short)4676);
      assertEquals((short)4676, (short)short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertNotNull(short7);
      
      Short short8 = new Short((short)837);
      assertEquals((short)837, (short)short8);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short4));
      assertNotNull(short8);
      
      Short short9 = new Short((short)2700);
      assertEquals((short)2700, (short)short9);
      assertFalse(short9.equals((Object)short6));
      assertTrue(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short5));
      assertNotNull(short9);
      
      Short[] shortArray1 = new Short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = short4;
      shortArray1[1] = short7;
      shortArray1[2] = short6;
      shortArray1[3] = short5;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2700, (short)4676, (short)33, (short) (-1299)}, shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      ArrayUtils.swap(byteArray0, 0, (-1));
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)33;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Short[] shortArray1 = new Short[9];
      shortArray1[0] = (Short) (short) (-4383);
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray1[2] = (Short) (short) (-4383);
      shortArray1[3] = (Short) (short) (-4383);
      shortArray1[5] = (Short) (short) (-4383);
      shortArray1[6] = (Short) (short) (-4383);
      shortArray1[7] = (Short) (short) (-4383);
      shortArray1[8] = (Short) (short) (-4383);
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) shortArray1[5]);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte) (-1));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)59);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-31));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('%');
      assertEquals('%', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-98));
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) character1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-98);
      shortArray0[1] = (short)704;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short) (byte) (-98);
      shortArray0[4] = (short) (byte) (-70);
      ArrayUtils.swap(shortArray0, 1258, (-168), (-2509));
      assertArrayEquals(new short[] {(short) (-98), (short)704, (short)1136, (short) (-98), (short) (-70)}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.valueOf(1728);
      assertEquals(1728, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) integer0, 1728);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, int0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1473.4F, 1728);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 799;
      doubleArray0[1] = (double) 1388;
      doubleArray0[2] = (double) 799;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4062.5738), 598);
      assertArrayEquals(new double[] {799.0, 1388.0, 799.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      int int1 = 65;
      Integer integer1 = new Integer(65);
      assertEquals(65, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(598);
      assertEquals(598, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 598);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) int1, int1);
      assertEquals(5, int2);
      assertEquals(6, integerArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, (int) (short) (-32083), (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Integer integer0 = new Integer((-1269));
      assertEquals((-1269), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3467), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3467, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 97;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(97, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)59;
      shortArray0[2] = (short)59;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '}';
      charArray0[2] = ':';
      charArray0[3] = 'U';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'p', '}', ':', 'U'}, charArray0);
      assertArrayEquals(new char[] {'p', '}', ':', 'U', 'p', '}', ':', 'U'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)1, (byte)123, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)1}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) '}';
      intArray0[2] = (int) ':';
      intArray0[3] = (int) 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(98, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[0] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(34, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1700.0, 2801.577938602);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)81, 2147483646);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)36, (byte) (-1), (byte) (-74), (byte)2, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Integer integer0 = new Integer(103);
      assertEquals(103, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(103);
      assertEquals(103, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-610));
      assertEquals((-610), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object[] objectArray0 = new Object[0];
      Integer integer3 = new Integer(1174);
      assertEquals(1174, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer3, (-610));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ArrayUtils.swap((double[]) null, (-1), (-836), 2);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2L, mutableInt0.longValue());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) integer0, 1);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-605.5904178719);
      doubleArray0[2] = (-3505.22159244282);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 678.92515;
      doubleArray0[5] = 37.0;
      doubleArray0[6] = (-3474.5);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2399.8243744);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-605.5904178719), (-3505.22159244282), Double.NaN, 678.92515, 37.0, (-3474.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-605.5904178719), (-3505.22159244282), Double.NaN, 678.92515, 37.0, (-3474.5)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-605.5904178719), (-3505.22159244282), Double.NaN, 678.92515, 37.0, (-3474.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-605.5904178719), (-3505.22159244282), Double.NaN, 678.92515, 37.0, (-3474.5)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, (-605.5904178719), (-3505.22159244282), Double.NaN, 678.92515, 37.0, (-3474.5)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, (-15));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1605;
      shortArray0[3] = (short)642;
      shortArray0[4] = (short)7;
      shortArray0[5] = (short) (-1514);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-651));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1605, (short)642, (short)7, (short) (-1514), (short) (-651)}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1605, (short)642, (short)7, (short) (-1514)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-387.0F);
      floatArray0[1] = (-387.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-387.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F)}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = (-387.0F);
      floatArray3[1] = (-387.0F);
      floatArray3[2] = (-387.0F);
      floatArray3[3] = (-387.0F);
      floatArray3[4] = (-387.0F);
      floatArray3[5] = (-387.0F);
      floatArray3[6] = (-387.0F);
      floatArray3[7] = 2766.334F;
      floatArray3[8] = 124.5F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray2, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F), (-387.0F), 2766.334F, 124.5F}, floatArray3, 0.01F);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertEquals(9, floatArray3.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-15);
      intArray0[5] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 91, 5);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, (-15), 5, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 's';
      charArray0[3] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'r');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', 's', '\\'}, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', 's', '\\'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3490.5F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, (-15), 5, 0}, intArray0);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, (-15), 5, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(charArray0, (-1021), (-1513));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\\', '\\', 's', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      short[] shortArray0 = new short[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-83);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-83L), 101L, (-83L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Character character0 = new Character('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('*');
      assertEquals('*', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      Character character2 = Character.valueOf('\'');
      assertEquals('\'', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-83L));
      assertNull(doubleArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-38);
      Byte byte1 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-38), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-83));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[6] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('A');
      assertEquals('A', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 5647;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)564, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)564;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 1, (-1072));
      assertArrayEquals(new float[] {564.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) Integer.MAX_VALUE;
      floatArray1[1] = (float) 1;
      floatArray1[2] = (float) (-555);
      floatArray1[3] = (-397.0F);
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 0, 2294);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {2.14748365E9F, 1.0F, (-555.0F), (-397.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 1.0F, (-555.0F), (-397.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray2.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = '=';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', '='}, charArray0);
      assertArrayEquals(new char[] {'O', '=', 'O', '='}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 5L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 5;
      floatArray0[5] = 2152.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {5.0F, 1.0F, 5.0F, 1.0F, 5.0F, 2152.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2365);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)2365;
      intArray0[2] = (int) (short)2365;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1);
      intArray0[6] = 2132;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2132);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 2365, 2365, 1, 1, (-1), 2132, 1, 1}, intArray0);
      assertArrayEquals(new int[] {(-1), 2365, 2365, 1, 1, (-1), 1, 1}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      Character character0 = new Character('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1010.439377353);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer((int) character1);
      assertEquals(91, (int)integer0);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2139029560));
      assertEquals((-2139029560), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      intArray0[2] = (int) (char)character0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('A');
      assertEquals('A', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {65.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)2252);
      assertEquals(2252, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer((-2147038758));
      assertEquals((-2147038758), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-913);
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)127;
      Byte byte1 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)127}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((long[]) null, (-913), (int) (byte)127, (-913));
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.shift((long[]) null, 1, (-57), (-913));
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) (-913);
      floatArray0[3] = (float) (-995);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-913.0F), (-995.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-913.0F), (-995.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer integer0 = new Integer((-106));
      assertEquals((-106), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-913));
      assertEquals((-913), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray1, comparator0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)127}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-913.0F), (-995.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-913.0F), (-995.0F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[6] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)0, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)0, (short) (-96)}, shortArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) byte0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)0, (short) (-96)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.swap(intArray0, 564, (int) byte0, (int) (short) (-96));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer((-841));
      assertEquals((-841), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-841), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2202);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)0, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)0, (short) (-96)}, shortArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift((boolean[]) null, 88, (-29), (-1312));
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      longArray0[2] = (long) '9';
      charArray0[2] = '9';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'u', '\u0000', '9'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'u', '\u0000', '9'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)20;
      shortArray0[2] = (short)1045;
      shortArray0[3] = (short)512;
      shortArray0[4] = (short)3881;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)20, (short)1045, (short)512, (short)3881, (short)512}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)52;
      ArrayUtils.shift(byteArray0, 374, (-1508), 2146470684);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)3, (byte)8, (byte) (-46), (byte) (-1), (byte)42, (byte) (-51), (byte)52}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)55);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {55L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) (short)55);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {55L, 0L}, longArray1);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 76.40430924;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 76.40430924, 57, (double) 57);
      assertArrayEquals(new double[] {76.40430924}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 57;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 57;
      intArray0[5] = 57;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 51);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0, 57, 0, 0, 57, 57}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 57;
      integerArray0[1] = (Integer) 57;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 57;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 57;
      integerArray0[6] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2146365748));
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = '7';
      charArray0[2] = ';';
      charArray0[3] = 'Q';
      charArray0[4] = ']';
      charArray0[5] = 'i';
      MockRandom mockRandom0 = new MockRandom((-1456L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'7', ';', 'Q', ']', 'i', 'J'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, (-453), (-4029));
      byte[] byteArray0 = new byte[5];
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-4029));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2905));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 7, 3609, (-753));
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'X';
      charArray0[2] = 'G';
      charArray0[3] = 'e';
      charArray0[4] = 'y';
      charArray0[5] = 'f';
      charArray0[6] = 'Q';
      charArray0[7] = '`';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', 'X', 'G', 'e', 'y', 'f', 'Q', '`'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', 'X', 'G', 'e', 'y', 'f', 'Q', '`'}, charArray2);
      assertArrayEquals(new char[] {'I', 'X', 'G', 'e', 'y', 'f', 'Q', '`'}, charArray0);
      assertEquals(8, charArray2.length);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = '(';
      charArray0[5] = 'Y';
      charArray0[6] = '3';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'u', 'u', 'j', 'M', '(', 'Y', '3'}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertArrayEquals(new char[] {'u', 'u', 'j', 'M', 'Y', '3'}, charArray2);
      assertEquals(7, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(6, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2291));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-2291)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2291);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-2291L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((short) (-2291));
      assertEquals((-2291), (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer1 = new Integer((-828));
      assertEquals((-828), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = (-137);
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)24, (int) (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-2291)}, shortArray1);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      long[] longArray0 = new long[14];
      ArrayUtils.shift(longArray0, (-1), 10, 10);
      assertEquals(14, longArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte)13, (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, 1882);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      boolean boolean3 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertFalse(boolean3);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1770);
      doubleArray0[1] = (double) Float.NaN;
      ArrayUtils.swap(doubleArray0, 102, 6, 18688);
      assertArrayEquals(new double[] {(-1770.0), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1608.1566F));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      ArrayUtils.shift(charArray0, (-792));
      assertArrayEquals(new char[] {':', '*', 'Y', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '*';
      doubleArray0[1] = (double) 'b';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1), (-235), (-2313));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (-235);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-235);
      floatArray0[6] = (float) 'Y';
      int int0 = ArrayUtils.indexOf(floatArray0, 9.443F, 114);
      assertArrayEquals(new float[] {42.0F, 42.0F, 42.0F, (-235.0F), (-1.0F), (-235.0F), 89.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {42.0F, 42.0F, 42.0F, (-235.0F), (-1.0F), (-235.0F), 89.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1424.2815715666804));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-83));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-387);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-1);
      intArray1[3] = (int) (byte) (-1);
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-387), (-1), (-1), (-1)}, intArray2);
      assertArrayEquals(new int[] {(-387), (-1), (-1), (-1)}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, (-387), (-1), (-387));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((-387));
      assertEquals((-387), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1358.9);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-387));
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1.0), (-1358.9), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[0] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)74}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)74);
      assertArrayEquals(new byte[] {(byte)0, (byte)74}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4893.1713926);
      doubleArray1[1] = (-4893.1713926);
      doubleArray1[2] = (-4893.1713926);
      doubleArray1[3] = (double) (-913);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0), (-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(intArray0, 2036, (int) (short)2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double double0 = new Double(253.017194019);
      assertEquals(253.017194019, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray3 = new Double[0];
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray3, (-807.9020600116482));
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "&Qxo");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)73;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)62;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte)93, (byte) (-33), (byte)73}, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)62, (byte)93, (byte)62}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      short short0 = (short)59;
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      byte byte0 = (byte)46;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3756.2504;
      doubleArray0[1] = (double) (byte)46;
      doubleArray0[2] = (double) (byte)46;
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)46;
      doubleArray0[7] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1999), (-1750));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3756.2504, 46.0, 46.0, 59.0, 4.0, (-1.0), 46.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (int) (byte) (-1), 1529);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean3);
      assertEquals(0, longArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      Short[] shortArray1 = new Short[9];
      Short short1 = new Short((byte)46);
      assertEquals((short)46, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[0] = short1;
      try { 
        Short.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 609);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2146613664, 2008);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 0L);
      assertNull(longArray0);
      
      ArrayUtils.swap((char[]) null, (-25), (-25), (-1147));
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 0L);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)97;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-430);
      intArray0[2] = (-430);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-430), (-430)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-430);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) (-430.0F);
      floatArray1[2] = (Float) (-430.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-430.0F), (-430.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      ArrayUtils.reverse(intArray0, (-430), 24);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-430), (-430), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-712);
      shortArray0[3] = (short) (-1);
      Integer integer0 = new Integer(1882);
      assertEquals(1882, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short) (-1));
      assertNull(longArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1361, 1882, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer integer1 = Integer.getInteger("The Array must not be null");
      assertNull(integer1);
      
      Integer integer2 = new Integer((-937));
      assertEquals((-937), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(1882, object0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer2));
      assertNotNull(object0);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer3);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-60));
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      ArrayUtils.reverse(shortArray0, (-815), (-937));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-712), (short) (-1), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 90.0F;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short) (-1);
      floatArray0[7] = (float) 0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 90.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (-12);
      longArray0[3] = (long) (-12);
      longArray0[4] = 0L;
      longArray0[5] = (long) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-12), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -12, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 102;
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int0 = new Integer('8');
      assertEquals(56, int0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', 'm'}, charArray0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-913.0);
      doubleArray0[1] = (double) '|';
      doubleArray0[2] = (double) '|';
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 102L;
      doubleArray0[5] = (double) 102;
      doubleArray0[6] = (double) '8';
      doubleArray0[7] = (double) (-83L);
      doubleArray0[8] = (double) 'h';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2271.5463852), 1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-913.0), 124.0, 124.0, 2.0, 102.0, 102.0, 56.0, (-83.0), 104.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(11, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-913);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, (-913.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-913);
      doubleArray1[2] = (-1.0);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 0, 1265);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(doubleArray2, (-1764), 1167, 0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1265;
      intArray0[1] = 0;
      intArray0[2] = (-1764);
      intArray0[3] = (int) 'P';
      intArray0[4] = (-1);
      intArray0[5] = 1167;
      intArray0[6] = (-913);
      intArray0[7] = (-337);
      intArray0[8] = (-1764);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1265, 0, (-1764), 80, (-1), 1167, (-913), (-337), (-1764)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, (Integer) 0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap(shortArray1, (-13), (-1), Integer.MAX_VALUE);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-577L);
      longArray0[1] = (-833L);
      longArray0[2] = 1008L;
      longArray0[3] = 837L;
      longArray0[4] = 2120L;
      longArray0[5] = 1918L;
      longArray0[6] = (-3791L);
      longArray0[7] = (-393L);
      longArray0[8] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2120L);
      assertArrayEquals(new long[] {(-577L), (-833L), 1008L, 837L, 2120L, 1918L, (-3791L), (-393L), 1L}, longArray0);
      assertEquals(4, int0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1587);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1300), 10);
      assertArrayEquals(new short[] {(short) (-1587)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      Character character0 = new Character('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('%');
      assertEquals('%', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 483.0;
      doubleArray0[2] = (double) 'D';
      doubleArray0[3] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) character0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.5, 483.0, 68.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 483.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) character0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, 483.0, 68.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Integer integer0 = new Integer((short) (-1587));
      assertEquals((-1587), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = 10;
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (char)character0;
      intArray0[5] = (int) (short) (-1300);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Double double0 = new Double(1388.0);
      assertEquals(1388.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2651, 1388);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)102;
      shortArray0[6] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '?', (int) (short) (-96));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1312);
      floatArray0[1] = (float) (short)2311;
      floatArray0[2] = (float) (-1312);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1312.0F), 2311.0F, (-1312.0F)}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)76);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)76}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)47;
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)47;
      int int0 = ArrayUtils.indexOf(shortArray2, (short)47, (-555));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)47, (short)0, (short)47}, shortArray2);
      assertEquals(0, int0);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1173);
      floatArray0[1] = (float) (short)76;
      objectArray0[0] = (Object) 0;
      floatArray0[2] = (float) (-555);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1751.77F), 1);
      assertArrayEquals(new float[] {(-1173.0F), 76.0F, (-555.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2144239713), (-1173));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1173.0F), 76.0F, (-555.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)54);
      assertEquals((short)54, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)54}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)116);
      assertEquals((short)116, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2681));
      assertEquals((short) (-2681), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)116);
      assertEquals((short)116, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)704);
      assertEquals((short)704, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)229);
      assertEquals((short)229, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)2832);
      assertEquals((short)2832, (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)1);
      assertEquals((short)1, (short)short7);
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)116, (short) (-2681), (short)1, (short)116, (short)704, (short)229, (short)2832, (short)1}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3793.4165165402037), (int) (byte)2, 2985.50731329);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      float float0 = mockRandom1.nextFloat();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shift((long[]) null, (int) (byte)2, 64, (-2995));
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = new Boolean("/g9+$");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("/g9+$");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      DoubleStream doubleStream0 = mockRandom1.doubles((-3793.4165165402037), (-2973.780419312));
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      long long0 = mockRandom1.nextLong();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(1L, long0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      ArrayUtils.shift(floatArray0, 64);
      assertArrayEquals(new float[] {0.0F, 64.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      ArrayUtils.shift(intArray0, 5, 0, 481);
      assertArrayEquals(new int[] {5}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '?';
      charArray0[2] = 'a';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '&';
      charArray0[6] = '?';
      ArrayUtils.swap(charArray0, 14, 1649);
      assertArrayEquals(new char[] {'I', '?', 'a', '?', '?', '&', '?'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      long[] longArray1 = ArrayUtils.insert(1474, longArray0, (long[]) null);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {14L, 14L}, longArray1);
      assertArrayEquals(new long[] {14L, 14L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(2170, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, (-1), (-2147042012));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 1, (-1216), (-2147042012));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '\\';
      charArray0[2] = 'm';
      charArray0[3] = 'C';
      charArray0[4] = '@';
      charArray0[5] = 'D';
      charArray0[6] = 'l';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'h', '\\', 'm', 'C', '@', 'D', 'l'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.shift(longArray0, 152);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertEquals(20, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', '.', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ')';
      Integer integer0 = new Integer('.');
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(75);
      assertEquals(75, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1712));
      assertEquals((-1712), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray1, 18);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      ArrayUtils.swap((Object[]) integerArray1, 11, 11, 4514);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, (-1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 59, (-1556));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) (-913);
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) (-913);
      ArrayUtils.swap(objectArray0, 1489, 497);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 2140204042, (-1012), 2140204042);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)95;
      byteArray0[4] = (byte)100;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0, (byte)0, (byte)100}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 91;
      intArray0[3] = (int) (byte)95;
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {0, 91, 0, 95}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.swap((Object[]) integerArray0, 2186, (-4596));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)95;
      longArray0[1] = (long) (byte)100;
      ArrayUtils.shift(longArray0, (-963), 0, (-2090));
      assertArrayEquals(new long[] {95L, 100L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-11));
      assertEquals((short) (-11), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-11));
      assertArrayEquals(new short[] {(short) (-11), (short) (-11), (short) (-11), (short) (-11)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-11);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte) (-11);
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-11.0), 2.0, (-11.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-11.0), 2.0, (-11.0), 2.0, (-11.0), (-11.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 961);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 314;
      intArray0[1] = 855;
      intArray0[2] = (-1385);
      intArray0[3] = 58;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 52, (-1385));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {314, 855, (-1385), 58}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 314;
      floatArray0[1] = (float) 58;
      floatArray0[2] = (float) 855;
      floatArray0[3] = (float) (-1385);
      floatArray0[4] = (float) 58;
      floatArray0[5] = (float) 52;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)59;
      byte byte0 = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      ArrayUtils.shift(byteArray0, (int) (byte)32);
      assertArrayEquals(new byte[] {(byte)111, (byte)32, (byte)59, (byte) (-74)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)59);
      assertNull(byteArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-74);
      ArrayUtils.shift(intArray0, 1178);
      assertArrayEquals(new int[] {(-74)}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      byteArray0[0] = (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {0, (-1), (-1), 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(10, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1119);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      float[] floatArray0 = new float[11];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 76);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(11, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(76);
      assertEquals(76, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertEquals((short)76, mutableInt0.shortValue());
      assertEquals(76, (int)mutableInt0.getValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals(76, (int)mutableInt0.toInteger());
      assertEquals(76.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(76L, mutableInt0.longValue());
      assertEquals(76.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("76", mutableInt0.toString());
      assertEquals(76, mutableInt0.intValue());
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((short)76, mutableInt0.shortValue());
      assertEquals(76, (int)mutableInt0.getValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals(76, (int)mutableInt0.toInteger());
      assertEquals(76.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(76L, mutableInt0.longValue());
      assertEquals(76.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("76", mutableInt0.toString());
      assertEquals(76, mutableInt0.intValue());
      assertEquals(76, (int)integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer3);
      assertEquals((short)76, mutableInt0.shortValue());
      assertEquals(76, (int)mutableInt0.getValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals(76, (int)mutableInt0.toInteger());
      assertEquals(76.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(76L, mutableInt0.longValue());
      assertEquals(76.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("76", mutableInt0.toString());
      assertEquals(76, mutableInt0.intValue());
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer4 = new Integer(59);
      assertEquals(59, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Long long0 = new Long(59);
      assertEquals(59L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift((Object[]) null, 76);
      int[] intArray0 = new int[7];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[2] = 76;
      intArray0[3] = (-2250);
      intArray0[4] = 59;
      intArray0[5] = 0;
      intArray0[6] = (-2794);
      ArrayUtils.shift(intArray0, 0, 0, (-322));
      assertArrayEquals(new int[] {76, 76, 76, (-2250), 59, 0, (-2794)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-11));
      assertEquals((short) (-11), (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte) (-11));
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-2995);
      longArray0[2] = (long) (-2995);
      ArrayUtils.shift(longArray0, 3889, (-678), (-2995));
      assertArrayEquals(new long[] {0L, (-2995L), (-2995L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.shift((Object[]) stringArray0, 3889);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 179.79711631;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1795.6590814997614);
      doubleArray0[4] = (-1306.0);
      doubleArray0[5] = (-1795.6590814997614);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 449.0209;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 179.79711631, 0.0, (-1795.6590814997614), (-1306.0), (-1795.6590814997614), 1.0, 449.0209}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 179.79711631, 0.0, (-1795.6590814997614), (-1306.0), (-1795.6590814997614), 1.0, 449.0209}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-34.8225918436118));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-34.8225918436118), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-51.0), Integer.MAX_VALUE, (-34.8225918436118));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-368);
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-368));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-34.8225918436118), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-34.8225918436118), 0.0, 0.0, 0.0, 0.0, (-34.8225918436118), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)949;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)949}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(7, booleanArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2743);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2743, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 'O';
      ArrayUtils.reverse(objectArray0, (-1), (int) (short)2743);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      ArrayUtils.shift(intArray0, (-125), 9, 0);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'O';
      charArray0[2] = ',';
      charArray0[3] = 'A';
      charArray0[4] = 'X';
      charArray0[5] = ';';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-125), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -125, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'g';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L', (-1670));
      assertArrayEquals(new char[] {'m', 'm', 'g', 'L'}, charArray0);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert((-1670), charArray0, (char[]) null);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'m', 'm', 'g', 'L'}, charArray1);
      assertArrayEquals(new char[] {'m', 'm', 'g', 'L'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1670), 0.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      floatArray0[5] = 1118.434F;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1118.434F, 59.0F, (-2245.77F), 479.0F, 479.0F, 1118.434F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNull(floatArray1);
      
      Integer integer0 = new Integer(1349);
      assertEquals(1349, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer1 = new Integer(2786);
      assertEquals(2786, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Short short0 = new Short((short) (-1361));
      assertEquals((short) (-1361), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-401));
      assertEquals((short) (-401), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1257);
      assertEquals((short)1257, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-755));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'u';
      charArray0[2] = '@';
      charArray0[3] = '/';
      charArray0[4] = '@';
      charArray0[5] = '9';
      charArray0[6] = 'I';
      charArray0[7] = 'Q';
      charArray0[8] = 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1119, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1119, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) '.';
      doubleArray0[4] = (double) ')';
      doubleArray0[5] = (double) (-1712);
      doubleArray0[6] = (double) '.';
      doubleArray0[7] = (double) 'B';
      doubleArray0[8] = (double) '.';
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'B';
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {66.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {46.0, 99.0, 46.0, 41.0, (-1712.0), 46.0, 66.0, 46.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {46.0, 99.0, 66.0, 46.0, 41.0, (-1712.0), 46.0, 66.0, 46.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertArrayEquals(new int[] {(-1712)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte) (-63));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray0);
      assertTrue(boolean2);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (-3585.4802F);
      floatArray0[3] = (-3585.4802F);
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertArrayEquals(new float[] {(-85.0F), (-3585.4802F), 0.0F, (-3585.4802F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, (-85));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = ']';
      charArray0[3] = '.';
      charArray0[4] = 'U';
      charArray0[5] = 'D';
      charArray0[6] = '{';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'K', '>', ']', '.', 'U', 'D', '{'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Integer integer1 = new Integer(121);
      assertEquals(121, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer1);
      assertEquals(1, integerArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((short[]) null, (-2146732093), (-2254), (-4395));
      ArrayUtils.reverse((short[]) null, 1217, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q', 2);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'Q';
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = (int) 'Q';
      intArray0[7] = 1;
      intArray0[8] = (int) 'Q';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {81, 81, 81, 81, 2, 2, 81, 1, 81}, intArray1);
      assertArrayEquals(new int[] {81, 81, 81, 81, 2, 2, 81, 1, 81}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 81, 2142690157);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2142690157;
      intArray2[1] = (int) (byte)1;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = (int) 'Q';
      int int0 = ArrayUtils.indexOf(intArray2, 2, 1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2142690157, 1, 2, 2, 81}, intArray2);
      assertEquals(2, int0);
      assertEquals(5, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1770);
      doubleArray0[1] = (double) Float.NaN;
      ArrayUtils.swap(doubleArray0, 102, 6, 18688);
      assertArrayEquals(new double[] {(-1770.0), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ArrayUtils.reverse(byteArray0, 366, 6);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)102;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)102);
      assertArrayEquals(new short[] {(short)102}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)102}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 114.0F;
      floatArray0[1] = 369.79F;
      floatArray0[2] = 0.0F;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 745);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1407, 3841);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2614);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1693);
      ArrayUtils.swap(shortArray0, (int) (short)3, 745, 1847);
      assertArrayEquals(new short[] {(short) (-2614), (short)3, (short)0, (short) (-1693)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      Integer integer0 = new Integer(1623);
      assertEquals(1623, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4510;
      shortArray0[1] = (short)2;
      ArrayUtils.swap(shortArray0, (-661), (int) (short)2, (int) (short)2);
      assertArrayEquals(new short[] {(short)4510, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, 893, (int) (short)4510);
      assertArrayEquals(new short[] {(short)4510, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)58;
      double[] doubleArray0 = new double[0];
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(76.0F);
      assertEquals(76.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3096.263609796221);
      assertEquals(3096.2637F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2105.577F);
      assertEquals(2105.577F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (byte)58);
      assertEquals(58.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {76.0F, 3096.2637F, 2105.577F, 58.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((int[]) null, (int) (byte)58, 7);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 3018.1176397476997);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)58);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      double[] doubleArray0 = new double[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)66);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 1684L);
      assertArrayEquals(new long[] {1684L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      ArrayUtils.shuffle((Object[]) byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Integer integer0 = Integer.getInteger(">Ka^)nxH]");
      assertNull(integer0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      shortArray0[3] = (short) (-941);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (short) (-941), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)4;
      doubleArray1[1] = (double) (byte)4;
      doubleArray1[2] = (double) (byte)4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (short) (-16);
      doubleArray1[5] = (double) (short) (-16);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 0.0, (-16.0), (-16.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, (-16.0), (-16.0)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1522;
      intArray0[1] = (int) (short) (-941);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-16), (int) (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) null);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      ArrayUtils.reverse(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 1407);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1770), Integer.MAX_VALUE);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1407;
      intArray2[1] = (-1859);
      intArray2[2] = Integer.MAX_VALUE;
      intArray2[3] = Integer.MAX_VALUE;
      intArray2[4] = (-1770);
      intArray2[5] = 1407;
      intArray2[6] = 1407;
      intArray2[7] = (-1770);
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, (int[]) null);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {1407, (-1859), Integer.MAX_VALUE, Integer.MAX_VALUE, (-1770), 1407, 1407, (-1770)}, intArray2);
      assertFalse(boolean0);
      assertEquals(8, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-16);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-63), (byte) (-16)}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2514L), (int) (byte)0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3955, (-1.0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2566);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)0, (short) (-1)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-125), 1114);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = '~';
      charArray0[2] = 'W';
      charArray0[3] = 'D';
      charArray0[4] = 'T';
      charArray0[5] = 'r';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', 1114);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'r', '~', 'W', 'D', 'T', 'r'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-30);
      ArrayUtils.swap(byteArray0, (-1274), (-1274), 451);
      assertArrayEquals(new byte[] {(byte)90, (byte)23, (byte) (-23), (byte)38, (byte)22, (byte) (-30)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1257, (short) (-1), (short)0, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1257, (short) (-1), (short)0, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = '6';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'P', 'P', '6', 'P'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) 'P';
      intArray0[2] = (-2346);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) '6';
      intArray0[5] = (-2346);
      ArrayUtils.swap(intArray0, 898, 1706);
      assertArrayEquals(new int[] {0, 80, (-2346), 0, 54, (-2346)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      shortArray0[3] = (short) (-941);
      byte[] byteArray0 = new byte[5];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (short) (-16);
      doubleArray1[5] = (double) (short) (-16);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-16.0), (-16.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-16.0), (-16.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1522;
      intArray0[1] = (int) (short) (-941);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-16), (int) (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short)1, (short) (-1559)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, 16, (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Integer integer0 = new Integer((-1269));
      assertEquals((-1269), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray3);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '5';
      Integer integer0 = new Integer(1070);
      assertEquals(1070, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(4183);
      assertEquals(4183, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '5');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new char[] {'?', '?', '5'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4183;
      intArray0[1] = 1377;
      intArray0[2] = 1070;
      intArray0[3] = 1070;
      intArray0[4] = (int) (byte)120;
      intArray0[5] = 1070;
      intArray0[6] = (int) '?';
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1070, (int) (byte)120);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new int[] {4183, 1377, 1070, 1070, 120, 1070, 63}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-80), '5');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -80, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(56);
      assertEquals(56, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) integer0);
      assertSame(shortArray0, shortArray1);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[9];
      longArray1[0] = 1388L;
      longArray1[1] = 1388L;
      longArray1[2] = 1L;
      longArray1[3] = 74L;
      longArray1[4] = 1L;
      longArray1[5] = (-1053L);
      longArray1[6] = 2095L;
      longArray1[7] = 2365L;
      longArray1[8] = (-913L);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, 1L, (-1053L), 2095L, 2365L, (-913L)}, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, 1L, (-1053L), 2095L, 2365L, (-913L)}, longArray2);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1859;
      intArray0[1] = (-286);
      ArrayUtils.shift((char[]) null, (-286), 50, 92);
      Integer integer0 = new Integer((-428));
      assertEquals((-428), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2723);
      assertEquals(2723, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "Array and element cannot both be null");
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((short) (-1695));
      assertEquals((short) (-1695), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1695), (short)short1);
      assertEquals(9, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-3));
      assertEquals((short) (-3), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1695), (short)short3);
      assertEquals(9, shortArray0.length);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[1]);
      assertEquals((short) (-1695), (short)short4);
      assertEquals(9, shortArray0.length);
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)108);
      assertEquals((short)108, (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)108);
      assertEquals((short)108, (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short) (-4640));
      assertEquals((short) (-4640), (short)short7);
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      Short short8 = new Short((short)84);
      assertEquals((short)84, (short)short8);
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short3));
      assertNotNull(short8);
      
      shortArray0[8] = short8;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 125;
      ArrayUtils.shift(intArray0, (-117), 125, (-117));
      assertArrayEquals(new int[] {125, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3561));
      assertEquals((-3561), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3561), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3561, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray2, (-83.0F));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((-334));
      assertEquals((-334.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-334", mutableInt0.toString());
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-334), (int)mutableInt0.getValue());
      assertEquals((-334), (int)mutableInt0.toInteger());
      assertEquals((-334.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-334), mutableInt0.intValue());
      assertEquals((short) (-334), mutableInt0.shortValue());
      assertEquals((-334L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-334.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-334", mutableInt0.toString());
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-334), (int)mutableInt0.getValue());
      assertEquals((-334), (int)mutableInt0.toInteger());
      assertEquals((-334.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-334), mutableInt0.intValue());
      assertEquals((short) (-334), mutableInt0.shortValue());
      assertEquals((-334L), mutableInt0.longValue());
      assertEquals((-334), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertEquals((-334.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-334", mutableInt0.toString());
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-334), (int)mutableInt0.getValue());
      assertEquals((-334), (int)mutableInt0.toInteger());
      assertEquals((-334.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-334), mutableInt0.intValue());
      assertEquals((short) (-334), mutableInt0.shortValue());
      assertEquals((-334L), mutableInt0.longValue());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertEquals((-334.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-334", mutableInt0.toString());
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-334), (int)mutableInt0.getValue());
      assertEquals((-334), (int)mutableInt0.toInteger());
      assertEquals((-334.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-334), mutableInt0.intValue());
      assertEquals((short) (-334), mutableInt0.shortValue());
      assertEquals((-334L), mutableInt0.longValue());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-334), abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -334, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      char[] charArray0 = new char[9];
      ArrayUtils.shift(charArray0, 3366, 36, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = new Integer((-400));
      assertEquals((-400), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-913));
      assertEquals((-913), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = ArrayUtils.insert(3366, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(84);
      assertEquals(84, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(84, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '9';
      charArray0[8] = '%';
      int int0 = 0;
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '9', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer2 = new Integer(int0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[6] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1770);
      doubleArray0[1] = (double) Float.NaN;
      ArrayUtils.swap(doubleArray0, 102, 6, 18688);
      assertArrayEquals(new double[] {(-1770.0), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ArrayUtils.reverse(byteArray0, 366, 6);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-857);
      intArray0[1] = 19;
      ArrayUtils.shift(intArray0, (-2145278839), (-2145461534), (-576));
      assertArrayEquals(new int[] {(-857), 19}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)22;
      shortArray0[1] = (short)22;
      shortArray0[2] = (short)47;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)22, (short)22, (short)47}, shortArray0);
      assertArrayEquals(new short[] {(short)22, (short)22, (short)47}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-857);
      integerArray0[1] = (Integer) 19;
      integerArray0[2] = (Integer) (-857);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-857), 19, (-857)}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integerArray0[0], intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Integer integer0 = new Integer(97);
      assertEquals(97, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {97}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(13, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(13, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertEquals(27, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(14, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 14;
      doubleArray0[2] = (double) 14;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(13, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertEquals(27, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = 1094;
      intArray0[2] = (-124);
      intArray0[3] = 19;
      intArray0[4] = 3945;
      ArrayUtils.shift(intArray0, 17, 3945, 17);
      assertArrayEquals(new int[] {17, 1094, (-124), 19, 3945}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)22;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)22}, shortArray0);
      assertArrayEquals(new short[] {(short)22}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 19;
      integerArray0[1] = (Integer) 1094;
      integerArray0[2] = (Integer) 3945;
      integerArray0[3] = (Integer) 3945;
      integerArray0[4] = (Integer) 19;
      integerArray0[5] = (Integer) 1094;
      integerArray0[6] = (Integer) 3945;
      integerArray0[7] = (Integer) 3945;
      integerArray0[8] = (Integer) 3945;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {19, 1094, 3945, 3945, 19, 1094, 3945, 3945, 3945}, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integerArray0[3], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-913);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, (-913.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-913);
      doubleArray1[2] = (-1.0);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 0, 1265);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(doubleArray2, (-1764), 1167, 0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-913.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1265;
      intArray0[1] = 0;
      intArray0[2] = (-1764);
      intArray0[3] = (int) 'P';
      intArray0[4] = (-1);
      intArray0[5] = 1167;
      intArray0[6] = (-913);
      intArray0[7] = (-337);
      intArray0[8] = (-1764);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1265, 0, (-1764), 80, (-1), 1167, (-913), (-337), (-1764)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2995), 3889, 115);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, (-1), 10, 10);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      ArrayUtils.shift(charArray0, (-792));
      assertArrayEquals(new char[] {':', '*', 'Y', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '*';
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)69;
      Byte byte1 = new Byte((byte)69);
      assertEquals((byte)69, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)69);
      assertEquals((byte)69, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)69, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)69, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)35, (byte)69, (byte)69, (byte)35}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)35, (byte)69, (byte)69, (byte)35}, byteArray1);
      assertFalse(boolean0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(4423);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      ArrayUtils.shift((char[]) null, Integer.MAX_VALUE, 2146628417, 2146628417);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "w");
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[9];
      longArray1[0] = 1388L;
      longArray1[1] = 1388L;
      longArray1[2] = 1L;
      longArray1[3] = 74L;
      longArray1[4] = (-1L);
      longArray1[5] = (-1053L);
      longArray1[6] = 2095L;
      longArray1[7] = 2365L;
      longArray1[8] = (-913L);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, (-1L), (-1053L), 2095L, 2365L, (-913L)}, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, (-1L), (-1053L), 2095L, 2365L, (-913L)}, longArray2);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1859;
      intArray0[1] = (-286);
      ArrayUtils.shift((char[]) null, (-286), 50, 92);
      Integer integer0 = new Integer((-428));
      assertEquals((-428), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2723);
      assertEquals(2723, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "Array and element cannot both be null");
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-261.2247589438077));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, (-1712), 0);
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-1712));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-2078.979202573727));
      assertNull(doubleArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 603);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-125), 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 484;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {484L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 2741);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2741, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte)13, (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = 'm';
      charArray0[6] = '\\';
      charArray0[7] = '=';
      int int0 = ArrayUtils.indexOf(charArray0, '[', (-1));
      assertArrayEquals(new char[] {'\\', '\\', '\\', '=', '=', 'm', '\\', '='}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((int[]) null, 76, (-400));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)13;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)13);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1330);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte)13;
      longArray0[5] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L, (-1L), (-1L), (-1L), 13L, 1L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '\u0019';
      charArray0[2] = 'Y';
      charArray0[3] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', '\u0019', 'Y', 'b', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {':', '\u0019', 'Y', 'b', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shuffle(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) '\u0019';
      longArray0[3] = (long) 'Y';
      longArray0[4] = (long) '\u0019';
      longArray0[5] = (long) 'b';
      longArray0[6] = (long) '\u0019';
      longArray0[7] = (long) 'Y';
      longArray0[8] = (long) ':';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {98L, 98L, 25L, 89L, 25L, 98L, 25L, 89L, 58L}, longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1054.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1054.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-87));
      assertArrayEquals(new short[] {(short) (-4383), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, 54, (-1803), (-210));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-87);
      floatArray0[1] = (-1721.8326F);
      floatArray0[2] = (float) (short) (-87);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-87.0F), (-1721.8326F), (-87.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-87);
      floatArray1[1] = (-2995.0F);
      floatArray1[2] = (float) (-1803);
      floatArray1[3] = (float) (-1803);
      floatArray1[4] = (float) (-1803);
      floatArray1[5] = (float) (short) (-4383);
      floatArray1[6] = (-865.8317F);
      floatArray1[7] = (float) (-698);
      int int1 = ArrayUtils.indexOf(floatArray1, (-1803.0F));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-87.0F), (-2995.0F), (-1803.0F), (-1803.0F), (-1803.0F), (-4383.0F), (-865.8317F), (-698.0F)}, floatArray1, 0.01F);
      assertEquals(2, int1);
      assertEquals(8, floatArray1.length);
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '6';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {54.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {54.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 88.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 88.0F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 7, 4362);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1336.6794914;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-635.501), (-1792.5791722295003));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1.0), Double.NaN, 1336.6794914}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = '2';
      charArray0[2] = '{';
      charArray0[3] = 'h';
      charArray0[4] = '5';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '{';
      intArray0[1] = (-112);
      intArray0[2] = (int) '2';
      intArray0[3] = (int) '{';
      intArray0[4] = (int) 'h';
      intArray0[5] = 160;
      intArray0[6] = (int) 'h';
      intArray0[7] = (int) '2';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-95));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-95);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = '*';
      charArray0[2] = 'b';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = '*';
      charArray0[6] = 'Y';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'b', '*', 'b', 'Y', 'Y', '*', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'b', '*', 'b', 'Y', 'Y', '*', 'Y'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)40, (byte)byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)40, (byte)byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)53, (byte)40, (byte)40}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf((int[]) null, 1, 53);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '#';
      charArray0[2] = 'U';
      charArray0[3] = '#';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = 'I';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, 4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'U', '#', 'U', '#', '7', 'U', 'I', '7'}, charArray0);
      assertArrayEquals(new char[] {'U', '#', 'U', '#'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-104));
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) Integer.MAX_VALUE;
      integerArray0[1] = (Integer) Integer.MAX_VALUE;
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = ')';
      charArray0[2] = '7';
      charArray0[3] = 'U';
      charArray0[4] = 'S';
      charArray0[5] = 'u';
      charArray0[6] = 'G';
      charArray0[7] = 'I';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 742);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'#', ')', '7', 'U', 'S', 'u', 'G', 'I'}, charArray1);
      assertArrayEquals(new char[] {'#', ')', '7', 'U', 'S', 'u', 'G', 'I'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) (byte)5;
      floatArray0[2] = 575.655F;
      floatArray0[3] = (float) (int)integerArray0[1];
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 'I';
      floatArray0[6] = 1.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 5.0F, 575.655F, 2.14748365E9F, (-1.0F), 73.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)65);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)46, (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)65;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-391), (int) (byte)65);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {65.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)4;
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short) (byte)46;
      shortArray0[3] = (short) (byte)65;
      shortArray0[4] = (short) (byte)46;
      shortArray0[5] = (short) (byte)46;
      ArrayUtils.reverse(shortArray0, 1330, (-566));
      assertArrayEquals(new short[] {(short)4, (short)65, (short)46, (short)65, (short)46, (short)46}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)46;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {46}, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '~';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '5');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'1', '~'}, charArray0);
      assertArrayEquals(new char[] {'1', '~'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      floatArray0[5] = 1118.434F;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1118.434F, 59.0F, (-2245.77F), 479.0F, 479.0F, 1118.434F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNull(floatArray1);
      
      Integer integer0 = new Integer(1349);
      assertEquals(1349, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer1 = new Integer(2786);
      assertEquals(2786, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-421));
      assertEquals((-421), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      MockRandom mockRandom0 = new MockRandom(92L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)59;
      shortArray0[2] = (short)59;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 805.0;
      doubleArray1[1] = (double) (short)59;
      doubleArray1[2] = (double) (short)59;
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) (short)59);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {805.0, 59.0, 59.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, 805.0, 59.0, 59.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 'I';
      doubleArray0[2] = (double) 'I';
      doubleArray0[3] = (double) (-1);
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertArrayEquals(new char[] {'I', 'I'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(484);
      assertEquals(484, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[0]);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-34.8225918436118));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-34.8225918436118), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-51.0), Integer.MAX_VALUE, 2849.4249898843);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-368);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-1);
      intArray0[4] = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[0];
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) Integer.MAX_VALUE;
      integerArray0[1] = (Integer) Integer.MAX_VALUE;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) Integer.MAX_VALUE;
      integerArray0[4] = (Integer) (-1);
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      byteArray0[0] = (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {0, (-1), (-1), 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = true;
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte) (-1);
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = (Byte) (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, (-51), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'R';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = '>';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'O', '6', '6', 'y', 'y', '>'}, charArray1);
      assertArrayEquals(new char[] {'O', '6', '6', 'R', 'y', 'y', '>'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-12L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-12L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)48;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-3391), (int) (byte)61, (-866));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((short[]) null, (-2029), (-2029), (-2029));
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      shortArray0[3] = (short) (-941);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (short) (-941), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)4;
      doubleArray1[1] = (double) (byte)4;
      doubleArray1[2] = (double) (byte)4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (short) (-16);
      doubleArray1[5] = (double) (short) (-16);
      doubleArray1[6] = (double) (short) (-941);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 0.0, (-16.0), (-16.0), (-941.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, (-16.0), (-16.0), (-941.0)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1522;
      intArray0[1] = (int) (short) (-941);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray0);
      assertArrayEquals(new int[] {1522, (-941)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-16), (int) (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Integer integer0 = new Integer((short) (-336));
      assertEquals((-336), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '\\';
      int int0 = ArrayUtils.indexOf(charArray0, '=', (-913));
      assertArrayEquals(new char[] {'=', '=', '=', '\\'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      Float float0 = new Float(484.0);
      assertEquals(484.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float float1 = new Float(121.0F);
      assertEquals(121.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float float2 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[7] = float2;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {484.0F, 484.0F, 121.0F, 484.0F, 484.0F, 484.0F, 484.0F, Float.NaN, 484.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(intArray0, 0, (-1670));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 304.6226);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-20L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-20L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-20L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-20L)}, longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[0] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)74}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)52);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)74}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)74}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)74;
      longArray0[1] = (long) (byte)52;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {74L, 52L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)33;
      ArrayUtils.shift(floatArray0, (-478));
      assertArrayEquals(new float[] {33.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '&';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '&';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '9';
      charArray0[8] = '~';
      ArrayUtils.swap(charArray0, 10, (int) (byte)33, (-478));
      assertArrayEquals(new char[] {'~', '&', '~', '~', '&', '~', '~', '9', '~'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', '&', '~', '~', '&', '~', '~', '9', '~'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)14);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      ArrayUtils.shift(charArray0, (-792));
      assertArrayEquals(new char[] {':', '*', 'Y', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '*';
      doubleArray0[1] = (double) 'b';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {42.0, 98.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {42.0, 98.0, 42.0, 98.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1), (-235), (-2313));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer((-2077));
      assertEquals((-2077), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-489));
      assertEquals((-489), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2303));
      assertEquals((-2303), (int)integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1914;
      shortArray0[1] = (short)1303;
      shortArray0[2] = (short)1303;
      shortArray0[3] = (short) (-235);
      shortArray0[4] = (short) (-80);
      shortArray0[5] = (short) (-235);
      shortArray0[6] = (short) (-235);
      shortArray0[7] = (short)6;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-235), (-3062));
      assertArrayEquals(new short[] {(short)1914, (short)1303, (short)1303, (short) (-235), (short) (-80), (short) (-235), (short) (-235), (short)6}, shortArray0);
      assertEquals(3, int2);
      assertEquals(8, shortArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-235);
      doubleArray0[1] = (double) (short) (-235);
      doubleArray0[2] = 239.0890693606179;
      doubleArray0[3] = (double) (-489);
      doubleArray0[4] = (double) (-489);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)1914, (-2423.0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-235.0), (-235.0), 239.0890693606179, (-489.0), (-489.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2926.70345);
      doubleArray0[1] = 1.932734072018E9;
      doubleArray0[2] = 3894.202522453;
      doubleArray0[3] = 1700.0;
      doubleArray0[6] = (-1.0);
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (-2818);
      intArray0[4] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-2818), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)109, 2146687623);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray1, (-2818));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2818, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3867, (int) (byte) (-95));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-95);
      byteArray2[1] = (byte) (-95);
      byteArray2[2] = (byte) (-95);
      byteArray2[3] = (byte) (-95);
      byteArray2[4] = (byte) (-95);
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95), (byte) (-95)}, byteArray2);
      assertEquals(5, byteArray3.length);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      Byte[] byteArray3 = new Byte[6];
      byte byte0 = (byte)12;
      Byte byte1 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray3[0] = byte1;
      Byte byte2 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray3[1] = byte2;
      Byte byte3 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray3[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)12, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray3[3] = byte4;
      Byte byte5 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray3[4] = byte5;
      Byte byte6 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray3[5] = byte6;
      Byte[] byteArray4 = ArrayUtils.nullToEmpty(byteArray3);
      assertSame(byteArray4, byteArray3);
      assertSame(byteArray3, byteArray4);
      assertEquals(6, byteArray4.length);
      assertEquals(6, byteArray3.length);
      assertNotNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3337);
      shortArray0[1] = (short) (-496);
      shortArray0[2] = (short) (-2131);
      shortArray0[3] = (short)1700;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-3337), (short) (-496), (short) (-2131), (short)1700}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2131);
      doubleArray0[1] = (double) (short)1700;
      doubleArray0[2] = (double) (short)1700;
      doubleArray0[3] = (double) (short) (-2131);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1300.3128), 0.0);
      assertArrayEquals(new double[] {(-2131.0), 1700.0, 1700.0, (-2131.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1700;
      longArray0[1] = (long) (short)1700;
      longArray0[2] = (long) (short) (-496);
      longArray0[3] = (long) (short) (-3337);
      longArray0[4] = (long) (short)1700;
      longArray0[5] = (long) (short)1700;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 745L);
      assertArrayEquals(new long[] {1700L, 1700L, (-496L), (-3337L), 1700L, 1700L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      int[] intArray0 = new int[7];
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      ArrayUtils.shift(byteArray0, (int) (byte) (-66));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)81);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shuffle(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer((byte)81);
      assertEquals(81, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) (byte) (-66);
      objectArray0[3] = (Object) (byte) (-66);
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) (byte) (-66);
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) (byte) (-66);
      ArrayUtils.shift(objectArray0, (int) (byte)81, (-913), (int) (byte)81);
      assertEquals(8, objectArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-3021L));
      assertEquals((-3021L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(275);
      assertEquals(275L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[6];
      longArray2[0] = (-3021L);
      longArray2[1] = (long) (-913);
      longArray2[2] = (-3021L);
      longArray2[3] = (-3021L);
      longArray2[4] = (long) longArray0[1];
      longArray2[5] = (long) (byte) (-66);
      long[] longArray3 = ArrayUtils.removeAll(longArray2, intArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertArrayEquals(new long[] {(-913L), (-3021L), (-3021L), 275L, (-66L)}, longArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {(-3021L), (-913L), (-3021L), (-3021L), 275L, (-66L)}, longArray2);
      assertEquals(5, longArray3.length);
      assertEquals(7, intArray0.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[9];
      longArray1[0] = 1388L;
      longArray1[1] = 1388L;
      longArray1[2] = 1L;
      longArray1[3] = 74L;
      longArray1[4] = (-1L);
      longArray1[5] = (-1053L);
      longArray1[6] = 2095L;
      longArray1[7] = 2365L;
      longArray1[8] = (-913L);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, (-1L), (-1053L), 2095L, 2365L, (-913L)}, longArray1);
      assertArrayEquals(new long[] {1388L, 1388L, 1L, 74L, (-1L), (-1053L), 2095L, 2365L, (-913L)}, longArray2);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1859;
      intArray0[1] = (-286);
      intArray0[2] = 974;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-286), 974, 1859}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-286);
      doubleArray0[1] = (double) (-286);
      doubleArray0[2] = (double) (-1053L);
      doubleArray0[3] = (double) 2095L;
      doubleArray0[4] = (double) 1388L;
      doubleArray0[5] = (double) 2095L;
      doubleArray0[6] = (double) 1388L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1L), (double) 2095L);
      assertArrayEquals(new double[] {(-286.0), (-286.0), (-1053.0), 2095.0, 1388.0, 2095.0, 1388.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      ArrayUtils.shift((byte[]) null, 2287);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '(');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, Float.NaN);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)304;
      shortArray0[1] = (short)100;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)304, (short)100}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3112.882F), (int) (short)304);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2378.7F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {2378.7F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 1699;
      intArray0[1] = (-2436);
      intArray0[2] = (-2147052555);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1424.2815715666804));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-117);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 0, 2, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q', 2);
      assertNotSame(charArray0, charArray1);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 2;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {81L, 81L, 2L}, longArray0);
      assertTrue(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(18, booleanArray0.length);
      assertEquals(36, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray2 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(boolean2);
      assertEquals(0, floatArray2.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2365);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      long[] longArray0 = new long[6];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1587);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1300), 10);
      assertArrayEquals(new short[] {(short) (-1587)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 548;
      doubleArray0[2] = (double) (short) (-1587);
      doubleArray0[3] = (double) 10;
      Double double0 = new Double((-3474.23929256));
      assertEquals((-3474.23929256), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 10.0;
      doubleArray1[1] = (Double) 0.0;
      ArrayUtils.shift(doubleArray0, 3256);
      assertArrayEquals(new double[] {0.0, 548.0, (-1587.0), 10.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1587)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-1587);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 2151, 2151);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 125, 125);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)74;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)74;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {74, 0}, intArray0);
      assertArrayEquals(new int[] {74, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 74, (int) (byte)74);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)74, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(10, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      Long long0 = new Long(2530L);
      assertEquals(2530L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short)59);
      assertEquals(59L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-4366L));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short)1, 7);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-2601L));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1514));
      assertEquals((-1514), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(9);
      assertEquals(9, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 111;
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'D';
      charArray0[3] = 'P';
      charArray0[4] = 'x';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'D', 'P', 'x'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'T', 111);
      assertArrayEquals(new char[] {'F', 'T', 'D', 'P', 'x'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'D', 'P', 'x'}, charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      int int0 = 1;
      ArrayUtils.swap((float[]) null, 2139029579, 2139029579, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(969);
      assertEquals(969, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1712));
      assertEquals((-1712), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer3;
      Integer integer5 = new Integer(int0);
      assertEquals(1, (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) int0;
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1303;
      shortArray0[1] = (short) (-235);
      int int2 = ArrayUtils.indexOf(shortArray0, (short)1914, 128);
      assertArrayEquals(new short[] {(short)1303, (short) (-235)}, shortArray0);
      assertEquals((-1), int2);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
      
      ArrayUtils.shift(longArray0, 1, 1328, (int) integerArray0[0]);
      assertArrayEquals(new long[] {1L, 1L, 969L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 481);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(18, objectArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(18, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4294);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      BitSet bitSet2 = ArrayUtils.indexesOf(byteArray0, (byte)121, (-793));
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(4, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertEquals("{0, 2, 3, 5}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(6, bitSet2.length());
      assertArrayEquals(new byte[] {(byte)121, (byte)34, (byte)121, (byte)121, (byte)34, (byte)121, (byte)34, (byte)34}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      short short0 = (short) (-301);
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Integer integer0 = new Integer((-786));
      assertEquals((-786), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-786), (double) (-786));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int1 = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2946.5208F));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, int1, 2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(int1 == int0);
      assertNotNull(integerArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3370);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      Integer integer0 = new Integer((-3370));
      assertEquals((-3370), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(85);
      assertEquals(85, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[0], 85);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[4] = (long) 2015;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 2015;
      longArray0[7] = (long) 2015;
      ArrayUtils.shift(longArray0, (-57), 2015, 1611);
      assertArrayEquals(new long[] {0L, 2015L, 2015L, 0L, 0L, 0L, 0L, 2015L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, (-1712), (-1712));
      assertArrayEquals(new float[] {1255.3032F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1712));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2365;
      shortArray0[1] = (short) (-246);
      shortArray0[2] = (short)2365;
      shortArray0[3] = (short)2365;
      shortArray0[4] = (short)2365;
      shortArray0[5] = (short)2365;
      shortArray0[6] = (short)2365;
      shortArray0[7] = (short)2365;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2365);
      assertArrayEquals(new short[] {(short)2365, (short) (-246), (short)2365, (short)2365, (short)2365, (short)2365, (short)2365, (short)2365, (short)0}, shortArray0);
      assertEquals(7, int1);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[10];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(10, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1119);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-67), (int) (byte) (-67));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', (-1066));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'Y';
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {89.0, 89.0, 89.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {89.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {89.0, 89.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)121;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1966), (int) (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)7, (byte)121}, byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)7, (byte)121}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-91));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 75;
      intArray0[1] = 811;
      intArray0[2] = (-387);
      intArray0[3] = 59;
      intArray0[4] = 2213;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {75, 811, (-387), 59, 2213, 1, 0, 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-51));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -51, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-453));
      assertEquals((-453), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-453));
      assertEquals((-453), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 1);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      int int0 = 1;
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(969);
      assertEquals(969, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1712));
      assertEquals((-1712), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer((-1));
      assertEquals((-1), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer(2139029560);
      assertEquals(2139029560, (int)integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 2);
      assertTrue(boolean0);
      assertEquals(8, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 3680L;
      longArray0[1] = 515L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {3680L, 515L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int int0 = 1;
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(969);
      assertEquals(969, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1712));
      assertEquals((-1712), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertEquals(1, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (int)integerArray0[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1L, 969L, (-1712L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1303;
      shortArray0[1] = (short) (-235);
      int int2 = ArrayUtils.indexOf(shortArray0, (short)1914, 128);
      assertArrayEquals(new short[] {(short)1303, (short) (-235)}, shortArray0);
      assertEquals((-1), int2);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', '{', 'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-654));
      assertEquals((-654), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1378));
      assertEquals((-1378), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-654));
      assertEquals((-654), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(2569);
      assertEquals(2569, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer3);
      assertEquals((-1378), mutableInt0.intValue());
      assertEquals((-1378), (int)mutableInt0.getValue());
      assertEquals((byte) (-98), mutableInt0.byteValue());
      assertEquals((-1378), (int)mutableInt0.toInteger());
      assertEquals((-1378.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1378.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1378), mutableInt0.shortValue());
      assertEquals((-1378L), mutableInt0.longValue());
      assertEquals("-1378", mutableInt0.toString());
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer5));
      assertNotNull(mutableInt0);
      
      Integer integer7 = mutableInt0.toInteger();
      assertEquals((-1378), mutableInt0.intValue());
      assertEquals((-1378), (int)mutableInt0.getValue());
      assertEquals((byte) (-98), mutableInt0.byteValue());
      assertEquals((-1378), (int)mutableInt0.toInteger());
      assertEquals((-1378.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1378.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1378), mutableInt0.shortValue());
      assertEquals((-1378L), mutableInt0.longValue());
      assertEquals("-1378", mutableInt0.toString());
      assertEquals((-1378), (int)integer7);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      Integer integer8 = Integer.getInteger("LHw|~^\"", integer1);
      assertEquals((-654), (int)integer8);
      assertTrue(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer7));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertNotNull(integer8);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer5;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer6;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer7);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals((-1378), mutableInt0.intValue());
      assertEquals((-1378), (int)mutableInt0.getValue());
      assertEquals((byte) (-98), mutableInt0.byteValue());
      assertEquals((-1378), (int)mutableInt0.toInteger());
      assertEquals((-1378.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1378.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1378), mutableInt0.shortValue());
      assertEquals((-1378L), mutableInt0.longValue());
      assertEquals("-1378", mutableInt0.toString());
      assertEquals(6, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals(1, int0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.swap((byte[]) null, 2792, (int) (byte)5, (int) (byte)97);
      ArrayUtils.reverse((byte[]) null, (int) (byte)113, 0);
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      ArrayUtils.swap(charArray0, 1, 15, 0);
      assertArrayEquals(new char[] {'7', 'k'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 91;
      intArray0[2] = 512;
      intArray0[3] = 78;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 59, 78);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 91, 512, 78}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 78, 91);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (double) 78;
      doubleArray0[3] = 41.0;
      doubleArray0[4] = (double) 512;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) 59;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {91.0, 78.0, 78.0, 41.0, 512.0, 2.147483647E9, 59.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 17, (double) 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 2078);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)63;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (byte)120, 1, (int) (byte)63);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-2145237325);
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)63;
      intArray0[6] = (int) (byte)63;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1549L);
      assertArrayEquals(new long[] {1549L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = ':';
      charArray0[4] = 'd';
      charArray0[5] = 'q';
      charArray0[6] = ':';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|', 'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray1);
      assertArrayEquals(new char[] {'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(doubleArray0, (-2136046931), (-2136046931), 1489);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) (-2136046931);
      longArray0[2] = (long) 'q';
      longArray0[3] = 1L;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) 'q';
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {66L, (-2136046931L), 113L, 1L, 1L, 113L, 1L}, longArray1);
      assertArrayEquals(new long[] {66L, (-2136046931L), 113L, 1L, 1L, 113L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      assertEquals((-1772), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[12];
      booleanArray0[3] = true;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2097542167));
      assertEquals(0, int0);
      assertEquals(12, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted((Integer[]) null, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L, 0L, (-1L), (-1L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      Integer integer0 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer0);
      assertEquals(9, integerArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-1);
      integerArray0[8] = (Integer) (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean2);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-85);
      shortArray0[1] = (short) (-1454);
      shortArray0[2] = (short) (-1132);
      shortArray0[3] = (short)336;
      shortArray0[4] = (short)10938;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short) (-1454));
      assertEquals((-1454), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-85));
      assertEquals((-85), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short) (-1132));
      assertEquals((-1132), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      Integer integer4 = new Integer((short) (-85));
      assertEquals((-85), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer((short)10938);
      assertEquals(10938, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[6] = integer5;
      Integer integer6 = new Integer((short)10938);
      assertEquals(10938, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      integerArray0[7] = integer6;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      String string0 = ArrayUtils.toString((Object) integer3, "no");
      assertEquals("-1132", string0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(string0);
      
      Integer[] integerArray2 = ArrayUtils.toArray(integerArray1);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-123));
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[3] = (long) (-1);
      longArray0[2] = (long) (-1);
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(14, byteArray0.length);
      
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[10];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(10, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1119);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte) (-101);
      longArray0[4] = (long) (byte) (-101);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-101L), 116);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer(4122);
      assertEquals(4122, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1865;
      intArray0[2] = 84;
      intArray0[3] = (-1253);
      ArrayUtils.swap(intArray0, 110, 84);
      assertArrayEquals(new int[] {(-1), 1865, 84, (-1253)}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)112;
      MockRandom mockRandom0 = new MockRandom((byte)17);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)112, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) (byte)17;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) (byte) (-114);
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) (byte)112;
      objectArray0[7] = (Object) (byte)17;
      objectArray0[8] = (Object) (byte) (-114);
      ArrayUtils.shift(objectArray0, (-3548));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.swap((Object[]) integerArray1, 3302, 1257);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-879));
      assertArrayEquals(new int[] {(-879)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(128);
      assertEquals(128, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.swap((Object[]) null, 1, 10);
      ArrayUtils.shift((long[]) null, 10, Integer.MAX_VALUE, (-963));
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1L, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 50, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 412;
      intArray0[1] = 0;
      ArrayUtils.reverse(intArray0, 166, 1);
      assertArrayEquals(new int[] {412, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)564, 1);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)564;
      floatArray0[1] = (float) 2294;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {564.0F, 2294.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Double double0 = new Double((-539.28));
      assertEquals((-539.28), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 82);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.swap((boolean[]) null, (-29), (-29), (-29));
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2145730703));
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2995L;
      longArray0[2] = (-85L);
      longArray0[3] = (-2275L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1504L;
      longArray0[7] = (-705L);
      longArray0[8] = (-1336L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2275L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2995L, (-85L), (-2275L), 1L, 1L, 1504L, (-705L), (-1336L)}, longArray0);
      assertArrayEquals(new long[] {(-2275L), 0L, 2995L, (-85L), (-2275L), 1L, 1L, 1504L, (-705L), (-1336L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2062));
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)885;
      shortArray0[1] = (short) (-1933);
      int[] intArray0 = new int[2];
      intArray0[0] = 3098;
      intArray0[1] = int0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3098, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)4;
      ArrayUtils.shift(byteArray0, 0, 885, (int) (byte)57);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)4, (byte)57, (byte)43, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)43;
      floatArray0[1] = (float) (byte)57;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte)4;
      ArrayUtils.reverse(floatArray0, (int) (byte)2, 4);
      assertArrayEquals(new float[] {43.0F, 57.0F, 0.0F, 0.0F, 0.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, (-387), (-1529), 1454);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2123.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, 3065, (-698));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-387), (-1156));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift((byte[]) null, 2689, (int) (short) (-16), 2689);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1456);
      floatArray0[4] = (float) 2715;
      floatArray0[5] = (float) (short) (-941);
      floatArray0[6] = (float) (byte)4;
      ArrayUtils.swap(floatArray0, (-358), 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1456.0F), 2715.0F, (-941.0F), 4.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-16);
      shortArray0[1] = (short)59;
      shortArray0[3] = (short) (-941);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (short) (-941), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte)4, booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false, false}, booleanArray2));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)59;
      floatArray0[1] = (float) (short) (-16);
      floatArray0[2] = (float) (byte)4;
      ArrayUtils.swap(floatArray0, (-1456), 2715);
      assertArrayEquals(new float[] {59.0F, (-16.0F), 4.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      ArrayUtils.reverse((byte[]) null);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'T', 1388);
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) Integer.MAX_VALUE);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) Integer.MAX_VALUE);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'T';
      longArray0[2] = (long) 1388;
      longArray0[3] = (long) 1388;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-577L), (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-1L), 84L, 1388L, 1388L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 103);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-125), 94, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(65, (byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[1] = 'P';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[3] = (short)1257;
      shortArray0[4] = (short)1257;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (-913));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(intArray0, (int) (short)1257, 2700);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) (short)1257;
      longArray0[2] = 0L;
      longArray0[3] = (long) (-913);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-913L), 0L, 1257L, 80L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 8, (-2287));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (-2287);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (-2287);
      longArray0[4] = (long) (-2287);
      ArrayUtils.swap(longArray0, (int) (short)2, 785, (-2287));
      assertArrayEquals(new long[] {2L, (-2287L), 2L, (-2287L), (-2287L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      int int0 = ArrayUtils.indexOf(charArray0, 'A', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'A', 'A', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-4028.3145F));
      assertEquals((-4028.3145F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 'A');
      assertEquals(65.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) (byte)59;
      longArray0[2] = (long) 'A';
      longArray0[3] = (long) 'A';
      longArray0[4] = (long) 'A';
      longArray0[5] = 0L;
      longArray0[6] = (long) 'A';
      ArrayUtils.swap(longArray0, (-1), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {65L, 59L, 65L, 65L, 65L, 0L, 65L}, longArray0);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)59);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertEquals(16, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = 308.11533;
      doubleArray0[2] = (double) (-4028.3145F);
      doubleArray0[3] = (double) 'A';
      doubleArray0[4] = (double) (byte)59;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 308.11533);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0, 308.11533, (-4028.314453125), 65.0, 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {65.0, (-4028.314453125), 65.0, 59.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, 1489, 1489);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.TYPE;
      assertSame(class2, class1);
      assertNotSame(class2, class0);
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.equals((Object)class0));
      assertNotNull(class2);
      
      classArray0[2] = class2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)118;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte) (-52), (byte)118}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte)2, (byte) (-52), (byte)118}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((float[]) null, (int) (byte) (-52));
      double[] doubleArray2 = ArrayUtils.insert(2, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(14, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      ArrayUtils.shift(charArray0, (-1353), 0, 0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = new Integer((short) (-3562));
      assertEquals((-3562), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1470);
      assertEquals(1470, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      ArrayUtils.swap(longArray0, 4416, 4416, (-2788));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Integer integer3 = new Integer((-2243));
      assertEquals((-2243), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      String string0 = ArrayUtils.toString((Object) integer3);
      assertEquals("-2243", string0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(string0);
      
      ArrayUtils.swap(longArray0, (-2123), (int) (short) (-3562));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'O';
      boolean boolean0 = ArrayUtils.contains(charArray1, 'O');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O'}, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-1147), (int) (byte)101, 1572);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)101;
      longArray0[1] = (long) 1572;
      longArray0[2] = (long) 1572;
      ArrayUtils.swap(longArray0, 69, 69, 69);
      assertArrayEquals(new long[] {101L, 1572L, 1572L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-83);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '|';
      charArray0[2] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '|', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-83);
      floatArray0[1] = (float) (-83L);
      floatArray0[2] = (float) (-83L);
      floatArray0[3] = (float) '|';
      floatArray0[4] = (float) (-83L);
      floatArray0[5] = (float) (-83L);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), 124.0F, (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)84;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)113, (byte) (-52), (byte)92, (byte)1, (byte)3, (byte) (-11), (byte)54, (byte)84}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)113, (byte) (-52), (byte)92, (byte)1, (byte)3, (byte) (-11), (byte)54, (byte)84}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      short[] shortArray0 = new short[1];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "Array and element cannot both be null");
      assertEquals(3, stringArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      short[] shortArray0 = new short[1];
      long[] longArray0 = new long[3];
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', '8', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, (-137));
      assertFalse(boolean1);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short) (-1068));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[2];
      byte byte0 = (byte) (-70);
      Byte byte1 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-70), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray2[1] = byte2;
      byte[] byteArray3 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-70), (int) (byte) (-70), (int) (byte) (-70));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (byte) (-70);
      doubleArray0[3] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-70.0), (int) (byte) (-70), 53.0);
      assertArrayEquals(new double[] {52.0, (-70.0), (-70.0), (-70.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1300);
      shortArray0[1] = (short) (-1300);
      shortArray0[2] = (short)54;
      shortArray0[3] = (short) (-1300);
      shortArray0[4] = (short) (-1300);
      shortArray0[5] = (short) (-1300);
      shortArray0[6] = (short) (-1300);
      shortArray0[7] = (short) (-1300);
      shortArray0[8] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2183, (int) (short) (-1300));
      assertArrayEquals(new short[] {(short) (-1300), (short) (-1300), (short)54, (short) (-1300), (short) (-1300), (short) (-1300), (short) (-1300), (short) (-1300), (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)34;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-85), (byte)34, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-340), (-340), 10);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-85), (byte)34, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)102;
      shortArray0[6] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (short)102);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) byte0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96), (short) (-96), (short)102, (short) (-96)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.swap(intArray0, 564, (int) byte0, (int) (short) (-96));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer((-841));
      assertEquals((-841), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-841), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '}';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '8';
      ArrayUtils.shift(longArray0, 1451);
      assertArrayEquals(new long[] {56L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.shift(floatArray0, 4240);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3793.4165165402037), (int) (byte)2, 2985.50731329);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      float float0 = mockRandom1.nextFloat();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shift((long[]) null, (int) (byte)2, 64, (-2995));
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = new Boolean("/g9+$");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("/g9+$");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      DoubleStream doubleStream0 = mockRandom1.doubles((-3793.4165165402037), (-2973.780419312));
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      ArrayUtils.shift(floatArray0, 64);
      assertArrayEquals(new float[] {0.0F, 64.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)97);
      assertArrayEquals(new short[] {(short)97}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1450.23534);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, (-387));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals((-1), int1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-387);
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-387);
      integerArray0[4] = (Integer) (-387);
      integerArray0[5] = (Integer) (-387);
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 481);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(18, objectArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(18, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4294);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-301);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-4294), (short)2, (short) (-301)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4294), (short)2, (short) (-301), (short) (-4294), (short)2, (short) (-301)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '}';
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)73);
      assertNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)73);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)73;
      doubleArray0[1] = (double) 2691.0F;
      doubleArray0[2] = (double) (byte)73;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = (double) '}';
      doubleArray0[5] = (double) 2691.0F;
      doubleArray0[6] = (double) 2691.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 4392);
      assertArrayEquals(new double[] {73.0, 2691.0, 73.0, 125.0, 125.0, 2691.0, 2691.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)57;
      doubleArray0[2] = (double) (byte)57;
      doubleArray0[3] = (double) (byte)43;
      doubleArray0[4] = (double) (byte)43;
      doubleArray0[5] = (double) (byte)57;
      doubleArray0[6] = (double) 474;
      ArrayUtils.swap(doubleArray0, 64, 115, (-1417));
      assertArrayEquals(new double[] {4.0, 57.0, 57.0, 43.0, 43.0, 57.0, 474.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'G');
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((int[]) null, (-2086), (-2086));
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-111), (int) (byte) (-111));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      longArray0[1] = (long) (-387);
      longArray0[2] = (long) (-48);
      longArray0[3] = 4496L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)34, (-220));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)34;
      intArray1[1] = (-1770);
      intArray1[2] = (-1770);
      intArray1[3] = (-387);
      intArray1[4] = (-1770);
      intArray1[5] = 3889;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3889, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[3] = (short)1257;
      shortArray0[4] = (short)1257;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (-913));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[4];
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'q', 5114);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) doubleArray0, object0, (-913));
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1608.1566F);
      floatArray0[1] = (-1691.4242F);
      floatArray0[2] = (float) (byte) (-101);
      floatArray0[3] = (-1691.4242F);
      floatArray0[4] = (float) (byte) (-101);
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 9.443F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1608.1566F), (-1691.4242F), (-101.0F), (-1691.4242F), (-101.0F), (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-101);
      intArray0[1] = (int) (byte) (-101);
      intArray0[2] = (int) (byte) (-101);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-101), (-101), (-101)}, intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1365);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-101), (-101), (-101)}, intArray0);
      assertArrayEquals(new int[] {1365, (-101), (-101), (-101)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer integer0 = new Integer((-752));
      assertEquals((-752), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-101);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2108), (int)  (-101));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (-752), (-2879), (double) (byte) (-101));
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.insert(59, booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, 32);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '8';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'C';
      charArray0[6] = 'Q';
      charArray0[7] = 'Q';
      ArrayUtils.swap(charArray0, (-6607), 55, 37);
      assertArrayEquals(new char[] {'Q', '8', 'Q', 'Q', 'Q', 'C', 'Q', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Q', '8', 'Q', 'Q', 'Q', 'C', 'Q', 'Q'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (-1L);
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) (-2052);
      ArrayUtils.shift(longArray0, 2033);
      assertArrayEquals(new long[] {(-2052L), 81L, (-1L), 67L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3756.2504;
      doubleArray0[1] = (double) (byte)46;
      doubleArray0[2] = (double) (byte)46;
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)46;
      doubleArray0[7] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1999), (-1750));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3756.2504, 46.0, 46.0, 59.0, 4.0, (-1.0), 46.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (int) (byte) (-1), 1529);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean3);
      assertEquals(0, longArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long[] longArray0 = new long[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean3);
      assertEquals(0, longArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-91));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Integer integer0 = new Integer((-419));
      assertEquals((-419), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-419);
      floatArray0[1] = (-1188.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-419);
      floatArray0[4] = (float) (-419);
      floatArray0[5] = (float) (-419);
      floatArray0[6] = 4193.964F;
      ArrayUtils.shift(floatArray0, (-419));
      assertArrayEquals(new float[] {4193.964F, (-419.0F), (-1188.0F), 1.0F, (-419.0F), (-419.0F), (-419.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '~';
      charArray0[2] = '9';
      ArrayUtils.swap(charArray0, 10, (-419), (-1));
      assertArrayEquals(new char[] {'&', '~', '9'}, charArray0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'&', '~', '9'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)84;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-82));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)84}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)84}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, 2743, 5, (-101));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1113L);
      assertArrayEquals(new long[] {1113L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-54);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-12), (byte) (-125), (byte)118, (byte) (-108), (byte) (-54)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, (-550), (int) (byte) (-125));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom(5);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-83.0F);
      floatArray0[1] = (-83.0F);
      floatArray0[2] = (-83.0F);
      floatArray0[3] = (-83.0F);
      floatArray0[4] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (-83.0F);
      objectArray0[2] = (Object) false;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 2933);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray1, (-668), (-1554), 444);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 5;
      boolean[] booleanArray0 = new boolean[2];
      long[] longArray0 = new long[3];
      longArray0[0] = 1322L;
      longArray0[1] = (long) 1388;
      longArray0[2] = (long) 5;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1322L);
      assertArrayEquals(new long[] {1322L, 1388L, 5L}, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      
      Long long0 = new Long(5);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      Integer integer1 = new Integer(101);
      assertEquals(101, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(14, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 14;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 14, (int) (byte)2, (-3793.4165165402037));
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-530L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {2, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2622);
      assertArrayEquals(new int[] {2, (-1)}, intArray0);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3793.4165165402037);
      doubleArray0[2] = 861.09579695;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1188.071, (int) (byte) (-1), 1.0);
      assertArrayEquals(new double[] {0.0, (-3793.4165165402037), 861.09579695}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      
      MockRandom mockRandom0 = new MockRandom((byte)2);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = int0;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int2 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertEquals(1, int2);
      assertEquals(2, intArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) (byte)0;
      boolean boolean2 = ArrayUtils.contains(longArray0, (-1144L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean2);
      assertEquals(4, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1712);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)0;
      longArray0[6] = 3639L;
      longArray0[7] = 3639L;
      longArray0[8] = (long) (-1712);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1712L), 0L, 0L, 0L, 0L, 0L, 3639L, 3639L, (-1712L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2423));
      assertEquals((-2423), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2590));
      assertArrayEquals(new int[] {(-2423), Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2423);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1398.1, (-2590), (double) integerArray0[0]);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {1.0, (-2423.0)}, doubleArray0, 0.01);
      assertEquals(3, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      int int0 = 1;
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-751));
      assertEquals((-751), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(int0);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("");
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = new Integer((-751));
      assertEquals((-751), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 85);
      assertArrayEquals(new int[] {1, 15, (-751), 1, 85, (-751), 2}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1478.814027806751);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1478.814027806751), 74, 571.54);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-1478.814027806751)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1373);
      assertEquals(1373, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {1373}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short) (-745);
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '\\', (int) (short) (-745));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      Float float0 = new Float((double) (-205));
      assertEquals((-205.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float float1 = new Float((double) (short) (-1559));
      assertEquals((-1559.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float float2 = new Float((double) (short) (-32083));
      assertEquals((-32083.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[7] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-205.0F), (-205.0F), (-205.0F), (-1559.0F), (-205.0F), (-205.0F), (-205.0F), (-32083.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((int[]) null, (int) (short) (-745), (-2510));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-32083);
      longArray0[1] = (long) (short) (-745);
      longArray0[2] = (long) (short) (-745);
      longArray0[3] = (long) (short) (-1559);
      longArray0[4] = (long) (short)49;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short) (-32083);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-32083L), (-745L), (-745L), (-1559L), 49L, 1L, (-32083L)}, longArray1);
      assertArrayEquals(new long[] {(-32083L), (-745L), (-745L), (-1559L), 49L, 1L, (-32083L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 5;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 5L}, longArray0);
      assertArrayEquals(new long[] {0L, 5L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[1] = (short)320;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)320;
      doubleArray0[1] = (-78.262);
      doubleArray0[2] = (double) (short)320;
      doubleArray0[3] = (double) (short)320;
      doubleArray0[4] = (double) (short)320;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {320.0, (-78.262), 320.0, 320.0, 320.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 9.620153548370743, 9.620153548370743);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2311;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)2311}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (int) (byte)2, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)2);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Q';
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {81}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-1755));
      assertArrayEquals(new int[] {81}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-815), (int) (byte) (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-1));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)57;
      ArrayUtils.shift(byteArray0, 832, (int) (byte)43, 105);
      assertArrayEquals(new byte[] {(byte)4, (byte)57}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte)57;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)57;
      longArray0[1] = (long) (-2995);
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 832;
      longArray0[4] = (long) 105;
      longArray0[5] = 4496L;
      longArray0[6] = (long) (-2995);
      ArrayUtils.shift(longArray0, 533, (-387), (int) (byte)4);
      assertArrayEquals(new long[] {57L, (-2995L), 12L, 832L, 105L, 4496L, (-2995L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      longArray0[1] = (long) (-387);
      longArray0[2] = (long) (-48);
      longArray0[3] = 4496L;
      ArrayUtils.shift(longArray0, (-2995), 3889, (-48));
      assertArrayEquals(new long[] {(-48L), (-387L), (-48L), 4496L}, longArray0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-577L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-48L), (-387L), (-48L), 4496L}, longArray1);
      assertArrayEquals(new long[] {(-48L), (-387L), (-48L), 4496L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1489, 1.0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(1489);
      assertEquals(1489, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1489);
      assertEquals(1489, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-412));
      assertEquals((-412), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(91);
      assertEquals(91, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals((-412), (int)integer4);
      assertEquals(3, integerArray0.length);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer4);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Integer[] integerArray2 = new Integer[7];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = integer0;
      integerArray2[1] = integer1;
      integerArray2[2] = integer4;
      integerArray2[3] = integer4;
      integerArray2[4] = integer2;
      integerArray2[5] = integer4;
      integerArray2[6] = integer0;
      Integer[] integerArray3 = ArrayUtils.removeElements(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray2.length);
      assertEquals(0, integerArray3.length);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      
      String string0 = ArrayUtils.toString((Object) integer4, ":#^/d}-KPenBTT");
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals("-412", string0);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '\u008D';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      int int0 = 0;
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u008D', 'Z', 'K', '\u0000', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2243));
      assertEquals((-2243), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      ArrayUtils.swap((long[]) null, 0, 0, (-2243));
      String string0 = ArrayUtils.toString((Object) int0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      ArrayUtils.swap((long[]) null, int0, 70);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      int int0 = 0;
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2243));
      assertEquals((-2243), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      ArrayUtils.swap((long[]) null, 0, 0, (-2243));
      String string0 = ArrayUtils.toString((Object) int0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      ArrayUtils.swap((long[]) null, int0, 70);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[29];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 481);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(29, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2473;
      intArray0[3] = 481;
      intArray0[4] = 481;
      ArrayUtils.reverse(intArray0, (-1696), (-2354));
      assertArrayEquals(new int[] {0, 0, 2473, 481, 481}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)14, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 2473, (int) (short)14);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 481, (-1072));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 2473, 481, 481}, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      ArrayUtils.swap((float[]) null, 2143181311, 2143181311, 43);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      int int0 = 1;
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(969);
      assertEquals(969, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1712));
      assertEquals((-1712), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertEquals(1, (int)integer5);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertEquals(1, (int)integer6);
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[0]);
      assertEquals(969, (int)mutableInt0.getValue());
      assertEquals(969, (int)mutableInt0.toInteger());
      assertEquals(969.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-55), mutableInt0.byteValue());
      assertEquals(969L, mutableInt0.longValue());
      assertEquals("969", mutableInt0.toString());
      assertEquals(969.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(969, mutableInt0.intValue());
      assertEquals((short)969, mutableInt0.shortValue());
      assertEquals(8, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer7 = mutableInt0.toInteger();
      assertEquals(969, (int)mutableInt0.getValue());
      assertEquals(969, (int)mutableInt0.toInteger());
      assertEquals(969.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-55), mutableInt0.byteValue());
      assertEquals(969L, mutableInt0.longValue());
      assertEquals("969", mutableInt0.toString());
      assertEquals(969.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(969, mutableInt0.intValue());
      assertEquals((short)969, mutableInt0.shortValue());
      assertEquals(969, (int)integer7);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertNotNull(integer7);
      
      Integer integer8 = Integer.getInteger("LHw|~^\"", integer7);
      assertEquals(969, (int)mutableInt0.getValue());
      assertEquals(969, (int)mutableInt0.toInteger());
      assertEquals(969.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-55), mutableInt0.byteValue());
      assertEquals(969L, mutableInt0.longValue());
      assertEquals("969", mutableInt0.toString());
      assertEquals(969.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(969, mutableInt0.intValue());
      assertEquals((short)969, mutableInt0.shortValue());
      assertEquals(969, (int)integer8);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      
      integerArray0[7] = integer8;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer5);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integer5.equals((Object)integer7));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer8));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer6));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('A');
      assertEquals('A', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-1770);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 3851L, 0);
      assertArrayEquals(new long[] {0L, (-1770L), 1L, 1L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Character character0 = new Character('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('\"');
      assertEquals('\"', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character character4 = new Character('h');
      assertEquals('h', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      Character character5 = Character.valueOf('-');
      assertEquals('-', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-788.6));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 723);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1414));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = ':';
      charArray0[4] = 'd';
      charArray0[5] = 'q';
      Integer[] integerArray0 = new Integer[2];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 1, 3565.436687913133);
      assertEquals(6, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-2710));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "w";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "w");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Mz8)h0SUlLJ%//");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "w");
      assertEquals(19, booleanArray0.length);
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 0, 9, 1711);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Comparator should not be null.");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-2879);
      floatArray0[1] = (float) '{';
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) 'Z';
      floatArray0[4] = (float) '{';
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) '{';
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 123.0F, 1.0F, 123.0F, 90.0F, 90.0F, 123.0F, (-2879.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-41));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)95, (byte)7}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)792;
      shortArray0[1] = (short)1;
      short short0 = (short) (-2763);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (-2245.77F);
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = 1600.1459F;
      floatArray0[4] = (float) (short)792;
      floatArray0[5] = (-2245.77F);
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-2245.77F), 1.0F, 1600.1459F, 792.0F, (-2245.77F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Integer integer0 = new Integer((-87));
      assertEquals((-87), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertNotNull(object2);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-2763);
      intArray0[2] = 370;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)792;
      intArray0[5] = (int) (short)792;
      intArray0[6] = 1349;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)31;
      intArray0[1] = (int) (byte)31;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {31, 31}, intArray0);
      assertArrayEquals(new int[] {31, 31, 31, 31}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = 'Z';
      charArray0[2] = '=';
      charArray0[3] = '';
      charArray0[4] = 'n';
      charArray0[5] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, '_');
      assertArrayEquals(new char[] {'8', 'Z', '=', '', 'n', 'D'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, Double.NaN);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      ArrayUtils.shift(intArray0, 5, 1388, 481);
      assertArrayEquals(new int[] {5}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 481);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertArrayEquals(new int[] {5}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1388;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 481, 1109, (-911.2863737954));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {1388.0, 5.0, 5.0, 5.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-87));
      assertArrayEquals(new short[] {(short) (-4383), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = '8';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'm';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {':', '\\', '8', 'u', '|', 'm'}, charArray0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1793.017091));
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      ArrayUtils.shift(intArray0, (-125), 9, 0);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.contains(intArray0, 704);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte byte2 = (byte)71;
      Byte byte3 = new Byte((byte)71);
      assertEquals((byte)71, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray1.length);
      assertEquals(3, classArray0.length);
      assertNotNull(classArray1);
      
      Short short0 = new Short((short)121);
      assertEquals((short)121, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short(byte2);
      assertEquals((short)71, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertFalse(byte2 == byte0);
      assertNotNull(short1);
      
      Short short2 = new Short((short)92);
      assertEquals((short)92, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)264);
      assertEquals((short)264, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1372);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)71;
      doubleArray0[2] = (double) (byte)71;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 304, 394.51938146);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 304, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)7;
      shortArray0[1] = (short)7;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)7;
      shortArray0[7] = (short)7;
      shortArray0[8] = (short)7;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)0, (short)7, (short)7, (short)7, (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)7, (short)7, (short)7, (short)7, (short)0, (short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Integer integer0 = new Integer(2428);
      assertEquals(2428, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("2428", string0);
      assertNotNull(string0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Integer integer0 = Integer.valueOf(88);
      assertEquals(88, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(121);
      assertEquals(121, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry7, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry3);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, (-1), (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte)0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[2] = byte1;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int[] intArray0 = new int[3];
      intArray0[0] = 617;
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      ArrayUtils.shift(intArray0, 64, Integer.MAX_VALUE, (-2493));
      assertArrayEquals(new int[] {617, 81, 81}, intArray0);
      assertEquals(3, intArray0.length);
      
      String string1 = ArrayUtils.toString((Object) integer0, "iAAm!#6M<!p:@J5z-`");
      assertEquals("1388", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse((int[]) null, (int) (byte)0, (int) (byte)0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'G';
      longArray0[1] = (-913L);
      longArray0[2] = (long) 'G';
      longArray0[3] = (long) 'G';
      ArrayUtils.shift(longArray0, (-3425), 2538, 2538);
      assertArrayEquals(new long[] {71L, 71L, 71L, (-913L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-913L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1450.23534;
      doubleArray0[3] = 1450.23534;
      doubleArray0[4] = (double) 'G';
      doubleArray0[5] = 253.017194019;
      doubleArray0[6] = (double) (-3425);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 71L);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-913.0), 0.0, 1450.23534, 1450.23534, 253.017194019, (-3425.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-913.0), 0.0, 1450.23534, 1450.23534, 71.0, 253.017194019, (-3425.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {71L, 71L, 71L, (-913L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)74);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(abstractMap_SimpleImmutableEntryArray0, 30);
      assertFalse(boolean0);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)58;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)58, 58);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer((-2802));
      assertEquals((-2802), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1868);
      assertEquals(1868, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1868);
      assertEquals(1868, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 58;
      integerArray0[4] = integer1;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, 58);
      assertFalse(boolean1);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.shift((boolean[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((boolean[]) null);
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (-316));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer('Q');
      assertEquals(81, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      ArrayUtils.swap((boolean[]) null, (-3297), (-316), (-2588));
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 488.0;
      doubleArray0[1] = 488.0;
      doubleArray0[2] = (double) 799;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 799, 2139029560);
      assertArrayEquals(new double[] {488.0, 488.0, 799.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid((Integer[]) null, 2139029560);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertEquals(3, int1);
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, 1227.4734F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(432.9444191);
      assertEquals(432.9444191, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1767.1042973327);
      assertEquals(1767.1042973327, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32325;
      shortArray0[1] = (short)32325;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)32325, (short)32325}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '_';
      charArray0[2] = 'm';
      charArray0[3] = 'U';
      charArray0[4] = '.';
      charArray0[5] = '?';
      ArrayUtils.swap(charArray0, (-1048), (-2146365748), 2569);
      assertArrayEquals(new char[] {'I', '_', 'm', 'U', '.', '?'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short)32325);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      byteArray0[0] = (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = true;
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte)0;
      intArray0[3] = (int) (byte)0;
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = (Byte) (byte)0;
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[5] = byte1;
      byteArray1[6] = (Byte) byte0;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray1.length);
      assertEquals(2, classArray0.length);
      assertNotNull(classArray1);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short)0, (short)short3);
      assertEquals(6, shortArray0.length);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-2), (short)0, (short)1, (short)1}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '?';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {63}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)59;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)120);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)59, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)120, (short) (-1), (short)59, (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)59, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)120, (short) (-1), (short)59, (short) (-1)}, shortArray1);
      assertFalse(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 101, (byte) (-91));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)792;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (-2245.77F);
      floatArray0[2] = (float) (short)1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2245.77F);
      doubleArray0[1] = (double) (short)792;
      doubleArray0[2] = (double) (short)792;
      doubleArray0[3] = (double) (-2245.77F);
      doubleArray0[4] = 792.0;
      doubleArray0[5] = (double) (short)792;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-2245.77001953125), 792.0, 792.0, (-2245.77001953125), 792.0, 792.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, (int) (short)792);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2245.77001953125), 792.0, 792.0, (-2245.77001953125), 792.0, 792.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {792.0, (-2245.77001953125), 792.0, 792.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray0, 2, (int) (short) (-2763), 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2245.77001953125), 792.0, 792.0, (-2245.77001953125), 792.0, 792.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)83;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-29));
      assertArrayEquals(new byte[] {(byte) (-66), (byte)83}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertTrue(int1 == int0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte) (-66));
      assertEquals((-66L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)83);
      assertEquals(83L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[1]);
      assertArrayEquals(new long[] {(-66L), 83L}, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (long)longArray0[0];
      doubleArray2[1] = (double) (-1);
      ArrayUtils.shift(doubleArray2, (int) (byte)83, 2146534274, 2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-66.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 84);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray0, (-5319), (-1), 2007);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 2007;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1920L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-5319);
      doubleArray0[4] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)0);
      assertArrayEquals(new double[] {(-1920.0), (-1.0), (-1.0), (-5319.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, 352);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2007, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2007, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      long[] longArray0 = new long[16];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(16, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.swap(floatArray0, 69, 85, 69);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[0] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(10, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1119);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) byte0;
      shortArray1[1] = (short) (byte)102;
      shortArray1[2] = (short) byte0;
      shortArray1[3] = (short) byte0;
      short[] shortArray2 = ArrayUtils.removeAll(shortArray1, intArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-96), (short)102, (short) (-96), (short) (-96)}, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-96), (short) (-96)}, shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, intArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)102);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-561L));
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray2, (short)599, 62);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-96), (short)102, (short) (-96), (short) (-96)}, shortArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-96), (short) (-96)}, shortArray2);
      assertEquals((-1), int0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, intArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-376));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = '>';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '6');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y', '>', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y', '>', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 104.0;
      doubleArray0[1] = (double) 'y';
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 1388;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (-641.1962797255604);
      doubleArray0[6] = (double) '>';
      ArrayUtils.swap(doubleArray0, (int) (short)0, (-436), (-436));
      assertArrayEquals(new double[] {104.0, 121.0, 0.0, 1388.0, 0.0, (-641.1962797255604), 62.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-387);
      int int1 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-387);
      ArrayUtils.reverse((int[]) null, (-762), (-387));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-387);
      doubleArray0[2] = (double) (int)integerArray0[2];
      doubleArray0[3] = (double) (-387);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) int1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-387.0), (-387.0), (-387.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-387.0), (-387.0), (-387.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 599;
      intArray0[1] = (-1393);
      intArray0[2] = (-1292);
      intArray0[3] = 1;
      intArray0[4] = 1409;
      intArray0[5] = 1;
      intArray0[6] = 7;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {599, (-1393), (-1292), 1, 1409, 1, 7, (-1)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-125), 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(480.61F);
      assertEquals(480.61F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(480.61F);
      assertEquals(480.61F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals(480.61F, (float)float2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 4193.964F;
      floatArray0[1] = 4193.964F;
      floatArray0[2] = 4193.964F;
      floatArray0[3] = 4193.964F;
      floatArray0[4] = 4193.964F;
      floatArray0[5] = 4193.964F;
      floatArray0[6] = 4193.964F;
      floatArray0[7] = 4193.964F;
      floatArray0[8] = 4193.964F;
      ArrayUtils.shift(floatArray0, 2);
      assertArrayEquals(new float[] {4193.964F, 4193.964F, 4193.964F, 4193.964F, 4193.964F, 4193.964F, 4193.964F, 4193.964F, 4193.964F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'9', 'u', 'u'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'9', 'u', 'u'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2365;
      shortArray0[2] = (short)2365;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)2365, (short)0, (short)2365}, shortArray0);
      assertEquals(1, int0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 20;
      floatArray0[1] = (-491.3F);
      floatArray0[2] = (float) (short)2365;
      floatArray0[3] = (-2123.0F);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (short)2365;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (-2123.0F);
      ArrayUtils.shift(floatArray0, (-4957), 866, (-3340));
      assertArrayEquals(new float[] {2.14748365E9F, 2365.0F, 2.14748365E9F, (-2123.0F), 20.0F, (-491.3F), 2365.0F, (-2123.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-913);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[4];
      int int0 = 68;
      Integer integer0 = new Integer(68);
      assertEquals(68, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(68, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(68);
      assertEquals(68, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) (byte)97;
      floatArray0[2] = (float) (byte)97;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) (byte)113;
      floatArray0[5] = (float) (byte)97;
      floatArray0[6] = (float) int0;
      ArrayUtils.shift(floatArray0, 99);
      assertArrayEquals(new float[] {68.0F, 68.0F, 97.0F, 97.0F, 2.14748365E9F, 113.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.swap((int[]) null, (-1312), 6);
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short)2311);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2311;
      longArray0[2] = (long) 6;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2311);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(longArray0, (-1762), (-374), 2140598286);
      assertArrayEquals(new long[] {2311L, 0L, 6L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1312), (-1312));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-125));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 484;
      doubleArray0[3] = (-1542.1460325433366);
      doubleArray0[5] = (double) 484;
      doubleArray0[6] = (double) (-125);
      doubleArray0[7] = (double) 2287;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.0, 484.0, (-1542.1460325433366), 0.0, 484.0, (-125.0), 2287.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)699;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)699}, shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-85);
      shortArray0[1] = (short) (-1454);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'M';
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = (int) 'M';
      intArray0[2] = (int) '\"';
      intArray0[3] = (int) 'M';
      intArray0[4] = (int) 'M';
      intArray0[5] = (int) 'M';
      ArrayUtils.shift(intArray0, 4, 77, 654);
      assertArrayEquals(new int[] {4, 77, 34, 77, 77, 77}, intArray0);
      assertEquals(6, intArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2243));
      assertEquals((-2243), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      ArrayUtils.swap((long[]) null, 0, 0, (-2243));
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap((long[]) null, (-698), (-387), (-1156));
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-34.8225918436118));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-34.8225918436118), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-51.0), Integer.MAX_VALUE, 2849.4249898843);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-368);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-1);
      intArray0[4] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-368), Integer.MAX_VALUE, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-368), Integer.MAX_VALUE, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      int[] intArray0 = new int[1];
      intArray0[0] = 599;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 599);
      assertArrayEquals(new int[] {599}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 599, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      ArrayUtils.shift(booleanArray1, 2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'e';
      Character character0 = Character.valueOf('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('e', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('e');
      assertEquals('e', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('a');
      assertEquals('a', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character2);
      assertEquals('e', (char)character4);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('G');
      assertEquals('G', (char)character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'a', 'e', 'G'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, 1073741824, 1073741824);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 1255.3032F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) 1255.3032F;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) 2.0F;
      doubleArray0[5] = (double) 1388;
      doubleArray0[6] = (double) 2.0F;
      doubleArray0[7] = (double) 1073741824;
      doubleArray0[8] = (double) (short)2;
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'd';
      charArray0[3] = '-';
      charArray0[4] = '~';
      int int0 = ArrayUtils.indexOf(charArray0, '~', (-1854));
      assertArrayEquals(new char[] {'-', '-', 'd', '-', '~'}, charArray0);
      assertEquals(4, int0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '-', 'd', '-', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.swap(charArray0, 4, (int) (short)2, (-410));
      assertArrayEquals(new char[] {'-', '-', 'd', '-', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-59);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)14, (byte) (-50), (byte)8, (byte)37, (byte)25, (byte)71}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '[';
      charArray0[2] = 'h';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'h';
      doubleArray0[1] = (double) 'C';
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) 'h';
      doubleArray0[4] = (double) 'C';
      doubleArray0[5] = (double) 'C';
      doubleArray0[6] = (double) 'h';
      doubleArray0[7] = (double) (short)491;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 185.771);
      assertArrayEquals(new double[] {104.0, 67.0, 104.0, 104.0, 67.0, 67.0, 104.0, 491.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)491);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)491;
      longArray0[1] = (long) '[';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) '[';
      longArray0[4] = (long) '[';
      longArray0[5] = (long) '[';
      longArray0[6] = (long) 'h';
      longArray0[7] = (long) (short)491;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-17), 219L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -17, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 13);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((char[]) null, (-1049), 0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1943));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1943));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (-1943);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {33L, (-1943L)}, longArray0);
      assertArrayEquals(new long[] {33L, (-1943L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((char[]) null, (-3017), (-1684));
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[8] = (double) (short)59;
      ArrayUtils.swap(doubleArray0, (int) (short)59, 474, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, (-1612.614), 59.0, 59.0, 59.0, 0.0, 0.0, 59.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3793.4165165402037), (int) (byte)2, 2985.50731329);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      float float0 = mockRandom1.nextFloat();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (-1));
      assertArrayEquals(new int[] {2, (-1)}, intArray0);
      assertEquals(1, int1);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(9, doubleArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(51);
      assertEquals(51, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.decode("java.lang.Integer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Integer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'v';
      charArray0[2] = 'S';
      charArray0[3] = 'z';
      charArray0[4] = 'C';
      charArray0[5] = 'Q';
      charArray0[6] = 'I';
      charArray0[7] = 'J';
      charArray0[8] = '9';
      char[] charArray1 = ArrayUtils.add(charArray0, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', 'v', 'S', 'z', 'C', 'Q', 'I', 'J', '9'}, charArray0);
      assertArrayEquals(new char[] {'K', 'v', 'S', 'z', 'C', 'Q', 'I', 'J', '9', 'v'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7Ioho%Hu7XS>RuMNh?";
      stringArray0[1] = "";
      stringArray0[2] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray0[3] = "X@}.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)55;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-12), (byte)42, (byte)8, (byte) (-1), (byte)78, (byte)104, (byte)55}, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      floatArray0[5] = 1118.434F;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1118.434F, 59.0F, (-2245.77F), 479.0F, 479.0F, 1118.434F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNull(floatArray1);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[2] = 'h';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (short)491;
      doubleArray0[2] = (double) (short)491;
      doubleArray0[3] = (double) 'h';
      doubleArray0[4] = (double) (short)491;
      doubleArray0[5] = (double) (short)491;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 491.0, 491.0, 104.0, 491.0, 491.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse(charArray0, (-1513), (int) (short)491);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'h', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2475.76720479);
      doubleArray0[1] = 185.771;
      doubleArray0[2] = (-2475.76720479);
      doubleArray0[3] = 11.020111514768;
      doubleArray0[4] = (double) (-1770);
      doubleArray0[5] = 488.0;
      doubleArray0[6] = (double) (-1770);
      doubleArray0[7] = (-2475.76720479);
      doubleArray0[8] = (double) (-1770);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 1);
      assertArrayEquals(new double[] {(-2475.76720479), 185.771, (-2475.76720479), 11.020111514768, (-1770.0), 488.0, (-1770.0), (-2475.76720479), (-1770.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 11.020111514768;
      objectArray0[1] = (Object) (-1770.0);
      objectArray0[2] = (Object) (-2475.76720479);
      objectArray0[3] = (Object) (-2475.76720479);
      objectArray0[4] = (Object) 488.0;
      objectArray0[5] = (Object) (-1770.0);
      objectArray0[6] = (Object) (-1770.0);
      objectArray0[7] = (Object) (-2475.76720479);
      objectArray0[8] = (Object) 185.771;
      ArrayUtils.shift(objectArray0, 1, 111, 111);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'r';
      charArray0[2] = 'T';
      charArray0[3] = '!';
      charArray0[4] = 'p';
      charArray0[5] = 'c';
      charArray0[6] = '>';
      charArray0[7] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', '>', 'c', 'p', '!', 'T', 'r', 'J'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-83.0F);
      floatArray0[1] = (-83.0F);
      floatArray0[2] = (-83.0F);
      floatArray0[3] = (-83.0F);
      floatArray0[4] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[0] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true}, booleanArray0));
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Integer integer0 = new Integer((short)2311);
      assertEquals(2311, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, 1612, (-972), 83);
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2311;
      floatArray0[1] = (float) 83;
      floatArray0[2] = (float) (short)2311;
      floatArray0[3] = (float) (-972);
      floatArray0[4] = (float) 1612;
      floatArray0[5] = (float) (-972);
      floatArray0[6] = 333.9F;
      floatArray0[7] = (float) (-972);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 83.0F);
      assertArrayEquals(new float[] {2311.0F, 83.0F, 2311.0F, (-972.0F), 1612.0F, (-972.0F), 333.9F, (-972.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'S';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 3, '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1358;
      longArray0[1] = (long) (short)9;
      longArray0[2] = (long) (short)9;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 9L, 9L, 1358L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'P';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[3] = (short)1257;
      shortArray0[4] = (short)1257;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (-913));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(intArray0, (int) (short)1257, 2700);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) (short)1257;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1257L, 80L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-912);
      intArray0[1] = (-2356);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-912), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-912), (-912), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-700.13738);
      doubleArray0[6] = (-2475.76720479);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, (-700.13738), (-2475.76720479)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1963));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1136;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)1136);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(doubleArray0, (int) (short)0, 2110458067, 1637);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, (-700.13738), (-2475.76720479)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)32;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)9, (byte)24, (byte)59, (byte)83, (byte)49}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2987));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      Integer integer0 = new Integer((short)491);
      assertEquals(491, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(booleanArray0, 1729, 1729, (int) (short) (-2987));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-958), 2156);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2987);
      floatArray0[1] = (float) (-958);
      floatArray0[2] = (float) (short) (-2987);
      floatArray0[3] = (float) (-958);
      floatArray0[4] = (-2207.179F);
      floatArray0[5] = (float) 2156;
      floatArray0[6] = (float) (-958);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2156);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2156, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[0] = 'i';
      charArray0[2] = 'F';
      charArray0[3] = 'i';
      charArray0[5] = 'j';
      charArray0[5] = 'F';
      charArray0[6] = 'i';
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[12];
      intArray0[0] = (int) 'i';
      charArray0[3] = 'F';
      intArray0[2] = (int) 'F';
      intArray0[3] = (int) 'F';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) 'F';
      ArrayUtils.shift(intArray0, 0, 91, 91);
      assertEquals(12, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 1349, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 1349;
      doubleArray0[3] = (double) 'F';
      doubleArray0[4] = (double) 'i';
      doubleArray0[5] = (double) 70;
      doubleArray0[6] = (double) 'i';
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 70;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4423, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {70.0, 105.0, 1349.0, 70.0, 105.0, 70.0, 105.0, (-1.0), 70.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2146232928);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ArrayUtils.shift(intArray0, 0, 705, (-2146232928));
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 0, 0, (-2146232928), 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'o');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'S');
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(doubleArray0, 2146613664, 0, 2146613664);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-127), 53, 67);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1450.23534;
      doubleArray0[1] = (-834.94427167);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-2123);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1450.23534, (-834.94427167), 0.0, 0.0, 0.0, 0.0, (-2123.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1450.23534, (-834.94427167), (-2123.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1428));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      shortArray0[2] = (short)60;
      shortArray0[3] = (short)59;
      shortArray0[4] = (short)59;
      shortArray0[5] = (short)59;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)83);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)60, (short)59, (short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)60, (short)59, (short)59, (short)59, (short)83}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)59, (-555));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)60, (short)59, (short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)60, (short)59, (short)59, (short)59, (short)83}, shortArray1);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-555);
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (float) (short)59;
      floatArray0[3] = (float) (-555);
      floatArray0[4] = (float) (short)59;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)59, 0);
      assertArrayEquals(new float[] {(-555.0F), 59.0F, 59.0F, (-555.0F), 59.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '6';
      charArray0[2] = '3';
      charArray0[3] = 'u';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-14.283469F), 2);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-75);
      ArrayUtils.swap(byteArray0, 666, (int) (byte) (-62), 2761);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-29), (byte)118, (byte) (-1), (byte) (-75)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-5319);
      doubleArray0[1] = (double) (byte) (-29);
      doubleArray0[2] = (double) (byte) (-29);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-29);
      doubleArray0[5] = (double) 2761;
      doubleArray0[6] = (double) (byte)118;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-5319.0), (-29.0), (-29.0), (-1.0), (-29.0), 2761.0, 118.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 666;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (byte) (-75);
      floatArray0[3] = (float) (-5319);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = 5366.0F;
      floatArray0[6] = (float) (byte)118;
      float[] floatArray1 = ArrayUtils.insert(3, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {666.0F, 3.0F, (-75.0F), (-5319.0F), (-1.0F), 5366.0F, 118.0F}, floatArray0, 0.01F);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-83.0F);
      floatArray0[1] = (-83.0F);
      floatArray0[2] = (-83.0F);
      floatArray0[3] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F), (-83.0F), (-1.0F), (-83.0F), (-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(17, booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-83.0F);
      doubleArray0[1] = (double) (-83.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 523, 523);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-83.0), (-83.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[2] = byte1;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer1 = new Integer(122);
      assertEquals(122, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-85);
      shortArray0[1] = (short) (-1454);
      shortArray0[2] = (short) (-1132);
      shortArray0[3] = (short)336;
      shortArray0[4] = (short)10938;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short) (-1454));
      assertEquals((-1454), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-85));
      assertEquals((-85), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short) (-1132));
      assertEquals((-1132), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short) (-1454));
      assertEquals((-1454), (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((short) (-85));
      assertEquals((-85), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((short)10938);
      assertEquals(10938, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((short)10938);
      assertEquals(10938, (int)integer7);
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      String string0 = ArrayUtils.toString((Object) integer3, "no");
      assertEquals("-1132", string0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer5));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = 1L;
      longArray0[6] = (-646L);
      longArray0[7] = 0L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2879);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = 0;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-135), 1688, 1688);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1570.89);
      doubleArray0[1] = (-1720.4);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 4366.58165864;
      doubleArray0[4] = 2987.50731329;
      ArrayUtils.shift(doubleArray0, 1, 1, 1);
      assertArrayEquals(new double[] {(-1570.89), (-1720.4), (-1.0), 4366.58165864, 2987.50731329}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 111, (-2145477651), 46);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)61);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-1), (byte) (-1), (byte)26, (byte)61, (byte) (-106), (byte)25, (byte)7, (byte) (-96)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)26, (byte)61, (byte) (-106), (byte)25, (byte)7, (byte) (-96)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 52, 52);
      assertNull(charArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(52);
      assertEquals(52, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (-1), 2311);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-77);
      doubleArray0[1] = (double) (short) (-77);
      doubleArray0[2] = (double) (short) (-77);
      doubleArray0[3] = (double) (short) (-77);
      doubleArray0[4] = (-107.0);
      doubleArray0[5] = (double) (short) (-77);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-107.0));
      assertArrayEquals(new double[] {(-77.0), (-77.0), (-77.0), (-77.0), (-107.0), (-77.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte) (-31);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)107);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-121), (byte) (-31), (byte) (-31)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-121), (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-190));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-913);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4048.1619673265);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4048.1619673265), (-364), (double) (-364));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-4048.1619673265)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.swap(intArray0, (int) (byte) (-1), (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      long[] longArray0 = new long[5];
      longArray0[0] = 2365L;
      longArray0[1] = 74L;
      longArray0[2] = 74L;
      longArray0[3] = 74L;
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2365L, 74L, 74L, 74L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {2365L, 74L, 74L, 74L, (-1L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1859;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1859}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1L), (double) 974);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2840L);
      ArrayUtils.reverse((short[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[4] = 'k';
      charArray0[5] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'k', 'A', 'A'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = 'N';
      charArray1[2] = 'A';
      charArray1[3] = 'N';
      ArrayUtils.shift(charArray1, 1538, 3550, 1538);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'A', 'N', 'A', 'N'}, charArray1);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'P';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1257;
      shortArray0[1] = (short)1257;
      shortArray0[2] = (short)1257;
      shortArray0[3] = (short)1257;
      shortArray0[4] = (short)1257;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (-913));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)1257, (short)1257, (short)1257, (short)1257, (short)1257, (short)1257}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'P', '6'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(intArray0, (int) (short)1257, 2700);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2356);
      intArray0[2] = (-2356);
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2356), (-2356));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-913), (-913), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[8] = (double) (short)59;
      ArrayUtils.swap(doubleArray0, (int) (short)59, 474, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, (-1612.614), 59.0, 59.0, 59.0, 0.0, 0.0, 59.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-4), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1705);
      shortArray0[3] = (short)3235;
      shortArray0[4] = (short)3550;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1257, (short)3550, (short)3235, (short) (-1705), (short) (-1), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2857, (int) (short)3550);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short)1257, (short)3550, (short)3235, (short) (-1705), (short) (-1), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = ArrayUtils.insert((int) (byte)10, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1489, 1.0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer(1489);
      assertEquals(1489, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1489);
      assertEquals(1489, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-412));
      assertEquals((-412), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(91);
      assertEquals(91, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals((-412), (int)integer4);
      assertEquals(3, integerArray0.length);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer4);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((Object[]) classArray0, 603, 162);
      assertEquals(5, classArray0.length);
      
      Integer integer5 = new Integer((-98));
      assertEquals((-98), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer5, (Object) integer3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1489, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-383L));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1625);
      assertEquals(1625, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1489);
      assertEquals(1489, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-412));
      assertEquals((-412), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-412));
      assertEquals((-412), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      integerArray0[3] = integer2;
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[3]);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)33;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 250);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {33}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 250);
      assertArrayEquals(new int[] {33}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 250;
      longArray0[1] = (long) 250;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {250L, 250L}, longArray0);
      assertArrayEquals(new long[] {250L, 250L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-913);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.swap((short[]) null, (-597), 0, 0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 4901.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, 0.0, 4901.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-1.0), 80.0, 0.0, 0.0, 4901.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      ArrayUtils.shift(intArray0, 5, 0, 481);
      assertArrayEquals(new int[] {5}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 481);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertArrayEquals(new int[] {5}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(5);
      assertEquals(5.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3316.0);
      assertEquals(3316.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1423.683221);
      assertEquals(1423.683221, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3515.5468065336));
      assertEquals((-3515.5468065336), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)24, 5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray2, true, 717);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertEquals(1, int1);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)330;
      shortArray0[3] = (short)1633;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)4;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)0, (short)330, (short)1633, (short)3, (short)4}, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = 'D';
      charArray0[2] = 'W';
      charArray0[3] = 'p';
      charArray0[4] = 'W';
      charArray0[5] = 'T';
      charArray0[6] = 'r';
      charArray0[7] = '4';
      charArray0[8] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?', (int) (short)4);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'!', 'D', 'W', 'p', 'W', 'T', 'r', '4', '~'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)60;
      ArrayUtils.shift(byteArray0, 832, (int) (byte)43, 105);
      assertArrayEquals(new byte[] {(byte)4, (byte)60}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte)60;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)60;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 12);
      assertNull(longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2146926149;
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) (byte)43;
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = 1L;
      longArray0[6] = (-646L);
      longArray0[7] = 0L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2879);
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (short)1;
      intArray0[2] = 0;
      doubleArray0[3] = (double) (-383L);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (-383L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (short)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5.0, 1.0, 0.0, (-383.0), 1.0, (-383.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) 1L);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {5.0, 1.0, 0.0, (-383.0), 1.0, (-383.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0, 1.0, 0.0, (-383.0), 1.0, (-383.0), 1.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-2879));
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2287;
      doubleArray0[1] = (double) (short) (-3562);
      doubleArray0[2] = (double) 2287;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2287.0, (-3562.0), 2287.0, 2287.0, (-3562.0), 2287.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2287.0, (-3562.0), 2287.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertEquals(9, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Integer integer0 = new Integer(1136);
      assertEquals(1136, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 1136);
      assertNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift((long[]) null, (-1037));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) integer0;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[4]);
      assertTrue(boolean2);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2146941080, 2146941080);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (-67);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-67);
      longArray0[5] = (long) 24;
      longArray0[6] = (long) (-67);
      ArrayUtils.shift(longArray0, (-67));
      assertArrayEquals(new long[] {0L, 24L, (-67L), 0L, (-67L), 0L, (-67L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 24L, (-67L), 0L, (-67L), 0L, (-67L)}, longArray0);
      assertArrayEquals(new long[] {0L, 24L, (-67L), 0L, (-67L), 0L, (-67L)}, longArray1);
      assertEquals(0, intArray0.length);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      long[] longArray0 = new long[14];
      ArrayUtils.shift(longArray0, 9, 10, 10);
      assertEquals(14, longArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'Q';
      charArray0[2] = '8';
      ArrayUtils.swap(charArray0, (int) (short)2252, 55, (int) (short)0);
      assertArrayEquals(new char[] {':', 'Q', '8', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {':', 'Q', '8', '\u0000'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)2252;
      longArray0[1] = (long) 1388;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)2252;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = 0L;
      longArray0[7] = (long) ':';
      ArrayUtils.shift(longArray0, (int) (short) (-1));
      assertArrayEquals(new long[] {1388L, 0L, 2252L, 0L, 0L, 0L, 58L, 2252L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-387);
      floatArray0[1] = (float) (-387);
      floatArray0[2] = (float) (-1770);
      floatArray0[3] = (float) (-1770);
      ArrayUtils.shift(floatArray0, 2, (-387), 127);
      assertArrayEquals(new float[] {(-387.0F), (-387.0F), (-1770.0F), (-1770.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.shift(floatArray0, (-455), (-455), (-455));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 3129);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-257));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -257, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)58;
      shortArray0[1] = (short) (byte)58;
      shortArray0[2] = (short) (byte)58;
      shortArray0[3] = (short) (-16);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)33;
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short) (-16);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)58, (short)58, (short)58, (short) (-16), (short)0, (short)2, (short)33, (short)2, (short) (-16)}, shortArray0);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, (int) (byte)33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'y');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)88;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 'y';
      floatArray0[5] = (float) (short) (-1);
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-807.99212);
      doubleArray0[1] = (-1878.501668461499);
      doubleArray0[2] = (-51.0);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 59.0;
      doubleArray0[6] = (-2254.34466);
      doubleArray0[7] = (-4824.915832845856);
      doubleArray0[8] = 740.673156013;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2446.7));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-807.99212), (-1878.501668461499), (-51.0), Double.NaN, 1.0, 59.0, (-2254.34466), (-4824.915832845856), 740.673156013}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2446.7), (-807.99212), (-1878.501668461499), (-51.0), Double.NaN, 1.0, 59.0, (-2254.34466), (-4824.915832845856), 740.673156013}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 740.673156013, 9, 1292.2807754594749);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-807.99212), (-1878.501668461499), (-51.0), Double.NaN, 1.0, 59.0, (-2254.34466), (-4824.915832845856), 740.673156013}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = (-836);
      ArrayUtils.swap((double[]) null, (-1), (-836), 2);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      int int2 = 4441;
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 4441);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4441}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray2, (Object) integer0, 4441);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(bitSet0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      byteArray0[0] = (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {0, (-1), (-1), 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = true;
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte) (-1);
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = (Byte) (byte) (-1);
      boolean boolean3 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray2);
      
      ArrayUtils.shift(intArray0, 99);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-35);
      ArrayUtils.shift(byteArray0, (int) (byte) (-35));
      assertArrayEquals(new byte[] {(byte) (-35), (byte)53}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-35));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 5);
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (byte)53, (long) (byte) (-35));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(19, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(19, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray0, (-5319), (-1), 2007);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 2007;
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1920L);
      doubleArray0[5] = (double) 2007;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1.0, (-1.0), (-1920.0), 2007.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 2007, (-1), 0}, intArray1);
      assertArrayEquals(new int[] {(-1), 2007, (-1), 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('%');
      assertEquals('%', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-107));
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertNotSame(charArray0, charArray1);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = (float) (byte) (-107);
      floatArray0[2] = (float) (byte) (-107);
      floatArray0[3] = (float) (char)character1;
      floatArray0[4] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-107.0F), (-107.0F), (-107.0F), 37.0F, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-107.0F), (-107.0F), (-107.0F), 37.0F, Float.NaN}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-107.0F), (-107.0F), (-107.0F), 37.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      ArrayUtils.shift((Object[]) floatArray2, (-1512), (-1512), (-2746));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-107.0F), (-107.0F), (-107.0F), 37.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 11.020111514768;
      doubleArray2[1] = 11.020111514768;
      doubleArray2[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray2, 0.0, 0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {11.020111514768, 11.020111514768, 0.0}, doubleArray2, 0.01);
      assertEquals(2, int0);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "l:20yl%XD=4]h";
      objectArray0[1] = (Object) 11.020111514768;
      ArrayUtils.shift(objectArray0, 76, (-313), (-313));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 484;
      doubleArray0[1] = (-2475.76720479);
      doubleArray0[2] = (-3793.4165165402037);
      doubleArray0[3] = (double) 484;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1.0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 101.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1691.4242F));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 484;
      intArray0[1] = 484;
      intArray0[2] = 484;
      intArray0[3] = 484;
      intArray0[4] = 484;
      intArray0[5] = 484;
      intArray0[6] = 484;
      intArray0[7] = 484;
      intArray0[8] = 484;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {484, 484, 484, 484, 484, 484, 484, 484, 484}, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-220));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-220), 484, 484, 484, 484, 484, 484, 484, 484, 484}, intArray1);
      assertArrayEquals(new int[] {484, 484, 484, 484, 484, 484, 484, 484, 484}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer integer0 = Integer.getInteger("]zq", (-220));
      assertEquals((-220), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 594.69616;
      doubleArray0[1] = 1902.625994322178;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2467.4180392408794);
      doubleArray0[4] = 4061.5738;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-441.50249513903253);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), Integer.MAX_VALUE, 1902.625994322178);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, 0.0, (-2467.4180392408794), 4061.5738, (-1.0), 0.0, 0.0, (-441.50249513903253)}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, 0.0, (-2467.4180392408794), 4061.5738, (-1.0), 0.0, 0.0, (-441.50249513903253)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, (-2467.4180392408794), 4061.5738, (-1.0), (-441.50249513903253)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(57);
      assertEquals(57, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = 14;
      Integer integer1 = new Integer(14);
      assertEquals(14, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(8);
      assertEquals(8, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(91);
      assertEquals(91, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) int1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(int1 == int0);
      assertNotNull(integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2559.0, (-2300.219523984059));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, 0.0, (-2467.4180392408794), 4061.5738, (-1.0), 0.0, 0.0, (-441.50249513903253)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)2090;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-2220);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)4);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)4, (short)2090, (short)2, (short) (-2220)}, shortArray0);
      assertArrayEquals(new short[] {(short)4, (short)2, (short)4, (short)2090, (short)2, (short) (-2220)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.valueOf("Ws'!/,T{");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Cvh<)2F&dC");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 1L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2307));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert(2140496372, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1030);
      assertNotSame(intArray0, intArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, (-2097542167));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 484;
      doubleArray0[1] = (-2475.76720479);
      doubleArray0[2] = (-3793.4165165402037);
      doubleArray0[3] = (double) 484;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 484;
      doubleArray0[8] = (double) 484;
      int int0 = ArrayUtils.indexOf(doubleArray0, 11.020111514768, 1);
      assertArrayEquals(new double[] {484.0, (-2475.76720479), (-3793.4165165402037), 484.0, 0.0, 1.0, (-1.0), 484.0, 484.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 484.0;
      objectArray0[3] = (Object) 484.0;
      objectArray0[4] = (Object) (-2475.76720479);
      objectArray0[5] = (Object) (-3793.4165165402037);
      objectArray0[6] = (Object) 484.0;
      objectArray0[7] = (Object) 0.0;
      objectArray0[8] = (Object) 484.0;
      ArrayUtils.shift(objectArray0, 1, 1, 1068);
      assertEquals(9, objectArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = (long) 484;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {484L, 484L}, longArray0);
      assertArrayEquals(new long[] {484L, 484L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[7], 484);
      assertEquals((-1), int1);
      assertEquals(9, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2825L);
      longArray0[1] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      ArrayUtils.shift(longArray0, 0, (-2414), (-2126));
      assertArrayEquals(new long[] {(-2825L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2213.91), 1505.0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1731.207), 1.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1312.0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      int int0 = (-1577);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1577), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1577, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = 56;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(56, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 594.69616;
      double double0 = 1902.625994322178;
      doubleArray0[1] = 1902.625994322178;
      doubleArray0[2] = 594.69616;
      doubleArray0[3] = (-2467.4180392408794);
      double double1 = 4061.5738;
      doubleArray0[4] = 4061.5738;
      doubleArray0[5] = (-1.0);
      int int0 = 232;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(232, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 232, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1767.1042973327);
      assertEquals(1767.1042973327, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) boolean0;
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertSame(integerArray0, objectArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '|';
      charArray0[2] = 'P';
      charArray0[3] = '6';
      charArray0[4] = 'P';
      charArray0[5] = '6';
      charArray0[6] = '6';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'P', '|', 'P', '6', 'P', '6', '6'}, charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (-2786.5893);
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)59;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {59.0, 0.0, 80.0, (-2786.5893), 54.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean boolean2 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-913);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-913));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (-913);
      floatArray0[2] = (float) (-913);
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-913);
      intArray1[1] = (-913);
      intArray1[2] = (-913);
      intArray1[3] = Integer.MAX_VALUE;
      intArray1[4] = (-913);
      intArray1[5] = Integer.MAX_VALUE;
      intArray1[6] = Integer.MAX_VALUE;
      intArray1[7] = Integer.MAX_VALUE;
      intArray1[8] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 97;
      ArrayUtils.shift(intArray0, (-125), 146, 0);
      assertArrayEquals(new int[] {0, 97, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)58;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 58);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new int[] {58}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)58);
      assertArrayEquals(new int[] {58}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)58;
      longArray0[1] = (long) (byte)33;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)58;
      longArray0[4] = (long) (byte)58;
      longArray0[5] = (long) 58;
      longArray0[6] = (long) (byte)33;
      longArray0[7] = (long) (byte)33;
      longArray0[8] = (long) (byte)58;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {58L, 33L, 0L, 58L, 58L, 58L, 33L, 33L, 58L}, longArray1);
      assertArrayEquals(new long[] {58L, 33L, 0L, 58L, 58L, 58L, 33L, 33L, 58L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = 'R';
      charArray0[2] = '?';
      ArrayUtils.swap(charArray0, (-1261), (-1261), (-1261));
      assertArrayEquals(new char[] {'[', 'R', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'B';
      charArray0[2] = 'd';
      charArray0[3] = ':';
      charArray0[4] = 'd';
      charArray0[5] = 'q';
      charArray0[6] = ':';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|', 'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray1);
      assertArrayEquals(new char[] {'R', 'B', 'd', ':', 'd', 'q', ':', ':'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(doubleArray0, (-2136046931), (-2136046931), 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      charArray0[3] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', '*', 'Y', 'b'}, charArray0);
      assertArrayEquals(new char[] {':', '*', 'Y', 'b'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-27659);
      shortArray0[1] = (short)1088;
      shortArray0[2] = (short)1261;
      shortArray0[3] = (short) (-2140);
      shortArray0[4] = (short)16;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 111);
      assertArrayEquals(new short[] {(short) (-27659), (short)1088, (short)1261, (short) (-2140), (short)16}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      charArray0[5] = '6';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', '6', '6'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.swap((short[]) null, (int) (short)59, 0, (-2401));
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'P';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'6', 'P'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) (-2346);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 'P';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 'P';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {80.0, 0.0, 0.0, 80.0, 0.0, (-2346.0), 54.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.swap((short[]) null, (-913), (-2401), 1);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2365);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1040;
      shortArray0[1] = (short)1040;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1072, 1072, 3341);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)28;
      longArray0[2] = (long) (short)1040;
      longArray0[3] = (long) (short)1040;
      longArray0[4] = (long) (short)1040;
      longArray0[5] = 3819L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {28L, 1040L, 1040L, 1040L, 3819L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-2473));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 484);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2094.0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2094.0;
      objectArray0[1] = (Object) 2094.0;
      ArrayUtils.swap((double[]) null, Integer.MAX_VALUE, 56, 2146981077);
      boolean[] booleanArray0 = new boolean[0];
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'Q';
      charArray0[2] = '8';
      charArray0[3] = ':';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {':', 'Q', '8', ':'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2252, (short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2252, (short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (Random) mockRandom0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      ArrayUtils.shift((Object[]) booleanArray0, 3688);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'L';
      charArray0[3] = '{';
      charArray0[4] = 't';
      charArray0[5] = '{';
      charArray0[6] = 'j';
      charArray0[7] = 't';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'t', 't', 'L', '{', 't', '{', 'j', 't'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 484;
      intArray0[1] = 484;
      intArray0[2] = 64;
      intArray0[3] = (int) '{';
      ArrayUtils.shift(intArray0, 18688, 64, 11);
      assertArrayEquals(new int[] {484, 484, 64, 123}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'L';
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 123;
      longArray0[4] = (long) '{';
      longArray0[5] = (long) 484;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {76L, 106L, 106L, 123L, 123L, 484L}, longArray0);
      assertArrayEquals(new long[] {76L, 106L, 106L, 123L, 123L, 484L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)59;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59, (byte)78, (byte)59}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, (-1637));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)78}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = ArrayUtils.indexOf((char[]) null, '~', 51);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)78;
      objectArray0[1] = (Object) (byte)59;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      Long long0 = new Long((byte)59);
      assertEquals(59L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      Long long1 = new Long((byte)78);
      assertEquals(78L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long long2 = new Long((-1289L));
      assertEquals((-1289L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[4] = long2;
      longArray0[5] = long0;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)59);
      assertArrayEquals(new long[] {59L, 78L, 59L, 59L, (-1289L), 59L, 59L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1963L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray0, (-5319), (-1), 2007);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-645), 'E');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -645, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 1, 'F');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'x');
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap((double[]) null, (-524), 48, 53);
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-523.794401009));
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 48.886F, 98);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 98;
      intArray0[1] = 98;
      intArray0[2] = 98;
      intArray0[3] = 98;
      intArray0[4] = 98;
      intArray0[5] = 98;
      intArray0[6] = 98;
      ArrayUtils.swap(intArray0, 98, 98, 2753);
      assertArrayEquals(new int[] {98, 98, 98, 98, 98, 98, 98}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-2162.0F);
      floatArray0[2] = (-2162.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-2162.0F), (-2162.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, (-1), (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[2] = byte1;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (byte) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[0]);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3707);
      assertArrayEquals(new short[] {(short)3707, (short)3707, (short)3707}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      byteArray0[0] = (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = true;
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = (Byte) (byte)0;
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[5] = byte1;
      byteArray1[6] = (Byte) byte0;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray1.length);
      assertEquals(2, classArray0.length);
      assertNotNull(classArray1);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short)0, (short)short3);
      assertEquals(4, shortArray0.length);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-2), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-41));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2310.71012296314);
      doubleArray0[1] = (double) (-913);
      ArrayUtils.swap(doubleArray0, (-442), 2, 2449);
      assertArrayEquals(new double[] {(-2310.71012296314), (-913.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "uX`cs7m^P}UE>\"";
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 205, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 205, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-330), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -330, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-2201), (-2201));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shift(booleanArray0, 13);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'O');
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf((char[]) null, '\"', (-1770));
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-663));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'K');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (byte)4);
      assertNull(floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)46;
      intArray0[2] = (int) (byte) (-101);
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)46;
      intArray0[5] = (int) (byte)47;
      intArray0[6] = (int) '1';
      intArray0[7] = (int) ';';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {4, 46, (-101), 2, 46, 47, 49, 59}, intArray0);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {4, 46, (-101), 2, 46, 47, 49, 59}, intArray0);
      assertTrue(boolean2);
      assertEquals(8, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      int[] intArray0 = new int[1];
      intArray0[0] = 599;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 599);
      assertArrayEquals(new int[] {599}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 599, (byte) (-91));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 599, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)25254);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)25254}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 1258;
      intArray0[2] = 844;
      intArray0[3] = 17;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 307);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {17, 1258, 844, 17}, intArray0);
      assertArrayEquals(new int[] {17, 1258, 844, 17}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, 'D', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-4028.3145F));
      assertEquals((-4028.3145F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-4028.3145F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'D';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 82, 82, 68}, intArray1);
      assertArrayEquals(new int[] {(-1), 82, 82, 68}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2840L);
      ArrayUtils.reverse((short[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1257, 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'N';
      charArray0[4] = 'k';
      charArray0[5] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'N', 'k', 'A', 'A'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2840L);
      ArrayUtils.reverse((short[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1257, 1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)52, 128);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-274.1607F);
      floatArray0[2] = 53.0F;
      floatArray0[3] = 3016.0F;
      floatArray0[4] = (-1438.3712F);
      floatArray0[5] = 2965.222F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1109.0F);
      floatArray0[8] = 114.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 2965.222F;
      floatArray1[2] = 114.0F;
      floatArray1[3] = 3016.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-274.1607F), 53.0F, 3016.0F, (-1438.3712F), 2965.222F, 1.0F, (-1109.0F), 114.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2965.222F, 114.0F, 3016.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-274.1607F), 53.0F, (-1438.3712F), 1.0F, (-1109.0F)}, floatArray2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "w";
      objectArray0[1] = (Object) "w";
      objectArray0[2] = (Object) "w";
      objectArray0[3] = (Object) "w";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "w");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1035.8588F);
      floatArray0[1] = 2007.2899F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-184.7F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1035.8588F), 2007.2899F, (-1.0F), (-184.7F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1035.8588F), 2007.2899F, (-1.0F), (-184.7F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)57;
      ArrayUtils.shift(byteArray0, (int) (byte)116, 0, (-610));
      assertArrayEquals(new byte[] {(byte)116, (byte)57}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)58;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 58.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2293);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Integer integer0 = new Integer(121);
      assertEquals(121, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 121;
      longArray0[1] = (long) 121;
      longArray0[2] = (long) 121;
      longArray0[3] = (long) 121;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 121L, (-396));
      assertArrayEquals(new long[] {121L, 121L, 121L, 121L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1092L, (-125));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '3';
      charArray0[2] = 'W';
      charArray0[3] = 'r';
      charArray0[4] = 'W';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?', 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'~', '3', 'W', 'r', 'W'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)55);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-1225), booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2094.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-913));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2094.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), 2094.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-923.0));
      assertEquals((-923.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1844.0);
      assertEquals(1844.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 2094.0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = (Double) 2094.0;
      doubleArray2[6] = double1;
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)24, (int) (byte)24);
      assertArrayEquals(new byte[] {(byte)24, (byte)24}, byteArray0);
      assertEquals(1, int0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-1712));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 379.00643;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {379.00643}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {379.00643}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)17, (int) (byte)17);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3337);
      shortArray0[1] = (short) (-3337);
      shortArray0[2] = (short) (-3337);
      shortArray0[3] = (short)1700;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-3337), (short) (-3337), (short) (-3337), (short)1700}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1700;
      longArray0[1] = (long) (short)1700;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-3337);
      floatArray0[1] = (float) 1700L;
      floatArray0[2] = (float) (short)1700;
      floatArray0[3] = (float) (short) (-3337);
      floatArray0[4] = (float) (short)1700;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-3337);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-3337.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3337.0F), 1700.0F, 1700.0F, (-3337.0F), 1700.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, (-453), (-4029));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)62;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-112), (byte) (-78), (byte)101, (byte)62}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 18);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (int) (byte) (-78));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -78, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 89, 89, 89);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)111, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, (-430), (-4029));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)62;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)86);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-112), (byte) (-27), (byte)101, (byte)62}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 18);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (int) (byte) (-27));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)57;
      ArrayUtils.shift(byteArray0, 832, (int) (byte)43, 105);
      assertArrayEquals(new byte[] {(byte)4, (byte)57}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte)57;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 12);
      assertNull(longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2146926149;
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) (byte)43;
      doubleArray0[3] = (double) 105;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 2146926149;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 105, (int) (byte)57);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.146926149E9, 54.0, 43.0, 105.0, 4.0, 12.0, 2.146926149E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 484;
      doubleArray0[1] = (double) 484;
      doubleArray0[2] = (double) 484;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 484;
      doubleArray0[5] = (double) 484;
      doubleArray0[6] = (double) 484;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {484.0, 484.0, 484.0, 9.0, 484.0, 484.0, 484.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(intArray0, (-1), 9);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.reverse((boolean[]) null, (-1), 484);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2036;
      boolean boolean1 = ArrayUtils.contains(intArray1, 2036);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2036}, intArray1);
      assertTrue(boolean1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)5);
      assertEquals((short)5, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)5);
      assertEquals((short)5, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1305));
      assertEquals((short) (-1305), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)5, (short) (-1305)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((short[]) null, (-2051), (-2910));
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'F';
      charArray0[3] = 'i';
      charArray0[5] = 'j';
      charArray0[5] = 'F';
      charArray0[6] = 'i';
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[15];
      intArray0[0] = (int) 'i';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) 'F';
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 't';
      intArray0[5] = (int) 'F';
      ArrayUtils.shift(intArray0, 70, 91, 91);
      assertEquals(15, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 1349, 105);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 1349;
      doubleArray0[3] = (double) 'F';
      doubleArray0[4] = (double) 'i';
      doubleArray0[5] = (double) 105;
      doubleArray0[6] = (double) 'i';
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 105;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4423, 70);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {70.0, 105.0, 1349.0, 70.0, 105.0, 105.0, 105.0, (-1.0), 105.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)58;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'G');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 3, (-1));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 3694, 1346);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-700.13738);
      doubleArray0[6] = (-2475.76720479);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, (-700.13738), (-2475.76720479)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1963));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1136;
      shortArray0[4] = (short) (-941);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)386, (short)0, (short)1136, (short)0, (short) (-941), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'O';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 115, (int) (short)386);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'|', 'O', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3793.4165165402037), (-1712), (double) (-1712));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)2);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-997), (-1712));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'-', 'X'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray0 = new long[1];
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean2);
      assertEquals(1, longArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1450.23534);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-476L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-476L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)4777;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1428);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1428));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)4777, (short) (-1), (short) (-1428)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)4777, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      long long0 = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 687.0F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = 2105.577F;
      floatArray0[3] = (float) (-2123);
      floatArray0[4] = (float) 0;
      floatArray0[5] = 687.0F;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 687.0F, 0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertArrayEquals(new float[] {687.0F, 0.0F, 2105.577F, (-2123.0F), 0.0F, 687.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-31), 2078);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)63;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (byte)120, 1, (int) (byte)63);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 1;
      ArrayUtils.shift(objectArray0, (int) (byte) (-31), 1, (-116));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle");
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.shift((Object[]) stringArray0, (-715), 559, 10);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-3793.4165165402037);
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) 1.0;
      objectArray0[3] = (Object) (-24.59176857964122);
      objectArray0[4] = (Object) 484;
      objectArray0[5] = (Object) 484;
      objectArray0[6] = (Object) 1.0;
      objectArray0[7] = (Object) (-24.59176857964122);
      objectArray0[8] = (Object) (-3793.4165165402037);
      ArrayUtils.shift(objectArray0, 1, 1, 1077);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) null, 2, (-1), 111);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      ArrayUtils.shift((Object[]) doubleArray0, (-146));
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ArrayUtils.shift((Object[]) booleanArray0, 2145954427);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3469;
      intArray0[1] = (-1021);
      intArray0[2] = 1239;
      intArray0[3] = 3;
      intArray0[4] = 506;
      intArray0[5] = 4901;
      intArray0[6] = 1908;
      intArray0[7] = (-1);
      intArray0[8] = (-1833);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {3469, (-1021), 1239, 3, 506, 4901, 1908, (-1), (-1833)}, intArray0);
      assertFalse(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1015), (-1358));
      assertArrayEquals(new int[] {3469, (-1021), 1239, 3, 506, 4901, 1908, (-1), (-1833)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      Integer integer0 = new Integer((-746));
      assertEquals((-746), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-746));
      assertEquals((-746), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integerArray0[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      long[] longArray0 = new long[15];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(15, longArray0.length);
      assertEquals(15, longArray1.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-104));
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-104), 2792);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) Integer.MAX_VALUE;
      integerArray0[1] = (Integer) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean1);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-124));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)2, (byte)2, (byte)47, (byte) (-1), (byte)4, (byte)46, (byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)2, (byte)2, (byte)47, (byte) (-1), (byte)4, (byte)46}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte) (-101);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-101);
      intArray0[4] = (int) (byte) (-124);
      intArray0[5] = (int) (byte)4;
      intArray0[6] = (int) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {2, (-101), (-1), (-101), (-124), 4, 2}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (-2937.327628370227);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (-101);
      doubleArray0[5] = (double) (byte)47;
      doubleArray0[6] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2868);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, (-2937.327628370227), (-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray1, 2868);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, (-2937.327628370227), (-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-101.0), 47.0, 2.0, (-1.0), 2.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, 880);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2, 2, (-83));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-83);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-83L), 101L, (-83L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertTrue(boolean2);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Long long0 = new Long(3400L);
      assertEquals(3400L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 101L);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) 'w');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1653.985444);
      assertEquals(1653.985444, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {1653.985444}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2;
      intArray0[1] = 2036;
      ArrayUtils.swap(intArray0, 2036, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {2, 2036}, intArray0);
      assertEquals(2, intArray0.length);
      
      Double double0 = new Double((-2144.48485));
      assertEquals((-2144.48485), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (-807.9092032502035));
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-262.8542969865567));
      assertArrayEquals(new double[] {(-262.8542969865567)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-85);
      shortArray0[1] = (short) (-1454);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-85), (short) (-1454), (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short) (-85);
      intArray0[3] = (int) (short) (-85);
      ArrayUtils.swap(intArray0, (int) (short) (-1454), (-2874));
      assertArrayEquals(new int[] {2, 2, (-85), (-85)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Double double0 = new Double((-43.87287977143));
      assertEquals((-43.87287977143), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[6];
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double2 = new Double(197.3346342344865);
      assertEquals(197.3346342344865, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[3] = double2;
      Double double3 = new Double((short) (-85));
      assertEquals((-85.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[4] = double3;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short) (-85));
      assertArrayEquals(new double[] {0.0, (-43.87287977143), (-43.87287977143), 197.3346342344865, (-85.0), (-85.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[10];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      Double[] doubleArray1 = new Double[5];
      Double double0 = Double.valueOf((-704.59897));
      assertEquals((-704.59897), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-3926.302902591914));
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-704.59897), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(10, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1201;
      shortArray0[1] = (short)3757;
      shortArray0[2] = (short)2126;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1977);
      assertArrayEquals(new short[] {(short)1201, (short)3757, (short)2126}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-262.357999543));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-32083);
      shortArray0[2] = (short) (-745);
      shortArray0[3] = (short) (-1559);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray0);
      assertArrayEquals(new short[] {(short)49, (short)1, (short) (-32083), (short) (-745), (short) (-1559)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-205);
      longArray0[1] = (long) (short)1;
      ArrayUtils.shift(longArray0, 16, (-1269), (-289));
      assertArrayEquals(new long[] {(-205L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)1, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      Double double2 = new Double((-4330.765));
      assertEquals((-4330.765), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4330.765), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 491.0, 70, (-1178.77478));
      assertArrayEquals(new double[] {0.0, (-4330.765), 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)52);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-387), (-913), (double) (-2346));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2346);
      longArray0[1] = (long) (-2346);
      longArray0[2] = (long) (-913);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-2346L), (-2346L), (-913L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1428);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1428);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)4761;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1428), (short) (-1428), (short)4761}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1428), (short) (-1), (short) (-1428), (short) (-1), (short) (-1), (short) (-1), (short)4761}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)55;
      doubleArray0[1] = (double) (short)55;
      ArrayUtils.swap(doubleArray0, (-836), (int) (short)55, 7);
      assertArrayEquals(new double[] {55.0, 55.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)55;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {55.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {55.0F, 55.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(899);
      assertEquals(899, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-700.13738);
      doubleArray0[6] = (-2475.76720479);
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'q';
      charArray0[2] = '|';
      charArray0[3] = 'd';
      charArray0[4] = '`';
      charArray0[5] = 'r';
      charArray0[6] = 'B';
      charArray0[7] = '|';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {':', 'q', '|', 'd', '`', 'r', 'B', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'l');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l', ':', 'q', '|', 'd', '`', 'r', 'B', '|'}, charArray1);
      assertArrayEquals(new char[] {':', 'q', '|', 'd', '`', 'r', 'B', '|'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(doubleArray0, (-2790), 4046, 4046);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, (-700.13738), (-2475.76720479)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.insert(Integer.MAX_VALUE, (float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (double) (-387));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2459;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)594);
      assertArrayEquals(new short[] {(short)2459}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2459}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(intArray0, 1136);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-387), 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2311;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)2311}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)2311;
      objectArray0[1] = (Object) (short)2311;
      objectArray0[2] = (Object) (short)2311;
      objectArray0[3] = (Object) (short)2311;
      objectArray0[4] = (Object) (short)2311;
      objectArray0[5] = (Object) (short)2311;
      objectArray0[6] = (Object) (short)2311;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)2311;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (short)2311;
      doubleArray0[1] = (double) (short)2311;
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)2311;
      doubleArray0[4] = (double) (short)2311;
      doubleArray0[5] = (double) (short)2311;
      doubleArray0[6] = (double) (short)2311;
      doubleArray0[7] = (double) (short)2311;
      doubleArray0[8] = (double) (short)2311;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2311.0, (-1612.614), 2311.0, 2311.0, 2311.0, 2311.0, 2311.0, 2311.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      ArrayUtils.shift(byteArray0, 2146914928);
      assertArrayEquals(new byte[] {(byte)0, (byte)36}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte) (-90));
      assertNull(byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)36;
      intArray0[1] = (int) (byte)36;
      intArray0[2] = (int) (byte) (-90);
      intArray0[3] = (int) (byte)36;
      intArray0[4] = (int) (byte) (-90);
      intArray0[5] = (int) (byte) (-90);
      ArrayUtils.shift(intArray0, 3);
      assertArrayEquals(new int[] {36, (-90), (-90), 36, 36, (-90)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2459;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)594);
      assertArrayEquals(new short[] {(short)2459}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2459}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(intArray0, 1136);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-387), 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-387);
      intArray1[1] = (-627);
      intArray1[2] = (-1283);
      intArray1[3] = 1136;
      intArray1[4] = Integer.MAX_VALUE;
      intArray1[5] = (int) (short)2459;
      intArray1[6] = (int) (short)2459;
      intArray1[7] = (int) (short)594;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-387), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-627), (-1283), 1136, Integer.MAX_VALUE, 2459, 2459, 594}, intArray2);
      assertArrayEquals(new int[] {(-387), (-627), (-1283), 1136, Integer.MAX_VALUE, 2459, 2459, 594}, intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(7, intArray2.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.shift(intArray0, 0, (int) (byte)75, 1578);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '5';
      ArrayUtils.shift(charArray0, 1377, (int) (byte)63, 1377);
      assertArrayEquals(new char[] {'?', '?', '5'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer integer0 = new Integer(1070);
      assertEquals(1070, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)63);
      assertEquals(63, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(4183);
      assertEquals(4183, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '5');
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'?', '?', '5'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(2145846613, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2987));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)491, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      Integer integer0 = new Integer((short)491);
      assertEquals(491, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)491);
      assertEquals(491, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-69));
      assertEquals((-69), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'u');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-1);
      byteArray0[7] = (byte)36;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte) (-67));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)118, (byte)92, (byte)2, (byte) (-52), (byte) (-1), (byte)0, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)81, (byte)118, (byte)92, (byte)2, (byte) (-52), (byte) (-1), (byte)0, (byte)36}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shift(longArray0, 1073741824, 2, (-913));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-678));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-678);
      floatArray0[1] = (float) 1073741824;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-913);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-913.0F), (-1.0F), 1.07374182E9F, (-678.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.swap(intArray1, 1500, (-1148), 0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 561, 561);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-87));
      assertArrayEquals(new short[] {(short) (-4383), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-4383);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-4383L)}, longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap((int[]) null, 54, (-1));
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-4383L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '\"';
      doubleArray1[1] = (-4893.1713926);
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {34.0, (-4893.1713926), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {34.0, (-4893.1713926), 0.0, 34.0, (-4893.1713926), 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)699;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)32325;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)699, (short) (-1), (short)32325, (short)2, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3385;
      intArray0[1] = (int) '\"';
      ArrayUtils.swap(intArray0, (int) (short)699, 453);
      assertArrayEquals(new int[] {3385, 34}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'F';
      charArray0[3] = 'i';
      charArray0[5] = 'j';
      charArray0[5] = 'F';
      charArray0[6] = 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 't');
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'i', 'i', 'F', 'i', '\u0000', 'F', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[15];
      intArray0[0] = (int) 'i';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) 'F';
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 't';
      intArray0[5] = (int) 'F';
      ArrayUtils.shift(intArray0, 70, 91, 91);
      assertEquals(15, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 70);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)1972;
      shortArray0[3] = (short)1438;
      shortArray0[4] = (short)3579;
      shortArray0[5] = (short)74;
      shortArray0[6] = (short)1182;
      shortArray0[7] = (short)105;
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-819), (int) (short)7);
      assertArrayEquals(new short[] {(short)14, (short)7, (short)1972, (short)1438, (short)3579, (short)74, (short)1182, (short)105, (short)2}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-308.3894F));
      assertEquals((-308.3894F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-308.3894F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[1] = (short)320;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)320, (short)733);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 320, Length: 11
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      int int0 = 76;
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[15];
      longArray0[0] = 1902L;
      longArray0[1] = (long) 76;
      longArray0[2] = 2120L;
      longArray0[3] = 2120L;
      longArray0[4] = 2120L;
      longArray0[5] = 2120L;
      longArray0[6] = 2120L;
      longArray0[7] = (long) 76;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 76L);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{1, 7}", bitSet0.toString());
      assertEquals(15, longArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{1, 7}", bitSet0.toString());
      assertEquals(2, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{1, 7}", bitSet1.toString());
      assertEquals(8, bitSet1.length());
      assertEquals(15, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 76, (short)1028);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-174));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-412), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -412, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('y');
      assertEquals('y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'y', '?'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)11;
      byteArray0[4] = (byte)107;
      ArrayUtils.shift(byteArray0, (int) (byte) (-90));
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-70), (byte)11, (byte)0, (byte)107}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'y', '?'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2123.0F);
      floatArray0[1] = (float) (byte) (-90);
      floatArray0[2] = (float) (byte) (-98);
      floatArray0[3] = (float) (byte) (-70);
      ArrayUtils.shift(floatArray0, (int) character1, (-279), (int) (byte)11);
      assertArrayEquals(new float[] {(-2123.0F), (-90.0F), (-98.0F), (-70.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-98), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -98, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1379.25057436773;
      doubleArray0[2] = 0.0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1040;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)28;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)28);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1040, (short)0, (short)28}, shortArray0);
      assertArrayEquals(new short[] {(short)28, (short)1040, (short)0, (short)28}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1040, (short)0, (short)28}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)1040;
      longArray0[2] = (long) (short)28;
      longArray0[3] = (long) (short)1040;
      longArray0[4] = (-546L);
      ArrayUtils.shift(longArray0, (-1311), (-1311), (-205));
      assertArrayEquals(new long[] {0L, 1040L, 28L, 1040L, (-546L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-40);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1040, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1040, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'K';
      charArray0[2] = '&';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '<';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'1', 'K', '&', '|', '|', '|', '<'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) '&';
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) '|';
      objectArray0[4] = (Object) '|';
      objectArray0[5] = (Object) 0L;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '}';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'P';
      charArray0[5] = '<';
      charArray0[6] = '6';
      boolean boolean5 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', '}', 'Y', 'Y', 'P', '<', '6'}, charArray0);
      assertFalse(boolean5);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) '}';
      doubleArray0[3] = (double) '6';
      doubleArray0[4] = (double) 'Y';
      doubleArray0[5] = (-1272.794);
      doubleArray0[6] = (double) '}';
      doubleArray0[7] = (double) '}';
      doubleArray0[8] = (double) 'Y';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {89.0, 125.0, 125.0, (-1272.794), 89.0, 54.0, 125.0, 54.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2682.5F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2682.5F, 76);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 76;
      longArray0[1] = (long) 76;
      longArray0[2] = (long) 76;
      longArray0[3] = (long) 76;
      longArray0[4] = (long) 76;
      longArray0[5] = (long) 76;
      longArray0[6] = (long) 76;
      longArray0[7] = (long) 76;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3851L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, (-1365), Integer.MAX_VALUE, 76);
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1808;
      shortArray0[1] = (short)3257;
      shortArray0[2] = (short)3820;
      shortArray0[3] = (short)1020;
      shortArray0[4] = (short)1808;
      shortArray0[5] = (short) (-584);
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-425), 10);
      assertArrayEquals(new short[] {(short)1808, (short)3257, (short)3820, (short)1020, (short)1808, (short) (-584), (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short) (-584));
      assertEquals((-584), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer[] integerArray0 = new Integer[12];
      Integer integer0 = new Integer(1168);
      assertEquals(1168, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(1168, (int)integer1);
      assertEquals(12, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(12, integerArray0.length);
      assertEquals(12, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      ArrayUtils.shift(intArray0, (-125), 9, 0);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertArrayEquals(new int[] {484, 9}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 9);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertArrayEquals(new int[] {484, 9}, intArray1);
      assertArrayEquals(new int[] {484}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2682.5F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2682.5F, 76);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 76;
      longArray0[1] = (long) 76;
      longArray0[2] = (long) 76;
      longArray0[3] = (long) 76;
      longArray0[4] = (long) 76;
      longArray0[5] = (long) 76;
      longArray0[6] = (long) 76;
      longArray0[7] = (long) 76;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3851L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, (-1365), Integer.MAX_VALUE, 76);
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1808;
      shortArray0[1] = (short)3257;
      shortArray0[2] = (short)3820;
      shortArray0[3] = (short)1020;
      shortArray0[4] = (short)1808;
      shortArray0[5] = (short) (-584);
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-425), 10);
      assertArrayEquals(new short[] {(short)1808, (short)3257, (short)3820, (short)1020, (short)1808, (short) (-584), (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)127;
      Byte byte1 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (-913);
      doubleArray0[2] = (double) (-2346);
      doubleArray0[3] = (double) (byte)127;
      doubleArray0[4] = (double) (byte)127;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) (-2346);
      doubleArray0[7] = (-1621.3324003037803);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {127.0, (-913.0), (-2346.0), 127.0, 127.0, 127.0, (-2346.0), (-1621.3324003037803)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1379.25057436773;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3793.4165165402037);
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'F');
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)88;
      shortArray0[5] = (short)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'y');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)88;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 'y';
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {88.0F, 0.0F, 0.0F, 121.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 0.0F, 0.0F, 121.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(365L);
      assertEquals(365L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {365L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Long long0 = new Long((-688L));
      assertEquals((-688L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(68L);
      assertEquals(68L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-688L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-84L));
      assertArrayEquals(new long[] {(-84L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, 'D', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[25];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long1;
      longArray0[4] = long1;
      longArray0[5] = long1;
      longArray0[6] = (Long) long0;
      longArray0[7] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertEquals(25, longArray1.length);
      assertEquals(25, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-2643), 101, (-83));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2643);
      longArray0[3] = (long) (-83);
      longArray0[2] = (long) (-2643);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-83L), 101L, (-2643L), (-83L), 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'x';
      charArray0[2] = 'q';
      charArray0[3] = 'Z';
      charArray0[4] = '%';
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertTrue(boolean2);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Long[] longArray1 = new Long[1];
      Long long0 = new Long(101);
      assertEquals(101L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 101);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {101L}, longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-511);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-511), (-511));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new int[] {(-511)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-124));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap((char[]) null, 1711, (-502), 846);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-124));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) (short)59;
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (-1621.3324003037803);
      doubleArray0[3] = (-1621.3324003037803);
      doubleArray0[5] = (-1621.3324003037803);
      doubleArray0[6] = (-1621.3324003037803);
      doubleArray0[7] = (-1621.3324003037803);
      doubleArray0[8] = (-1621.3324003037803);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(24, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      doubleArray0[7] = (double) (short)59;
      floatArray0[1] = (float) (short)59;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)59, 2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(24, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray1, (-1764), (int) (short)59, 102);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(24, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-1764);
      intArray0[2] = (int) (short)59;
      intArray0[3] = 102;
      intArray0[4] = (-1764);
      intArray0[5] = 102;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, (-1764), 59, 102, (-1764), 102}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-122);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-122), (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-122)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.shift((double[]) null, 13);
      ArrayUtils.shift((boolean[]) null, (-1055), (int) (byte)2, (int) (byte)2);
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '/';
      charArray0[2] = 'S';
      charArray0[3] = 'D';
      char[] charArray1 = new char[23];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'D';
      charArray1[1] = '/';
      charArray1[2] = 'D';
      charArray1[3] = 'S';
      charArray1[4] = 'K';
      charArray1[5] = '/';
      charArray1[6] = '/';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', '/', 'S', 'D'}, charArray0);
      assertEquals(27, charArray2.length);
      assertEquals(4, charArray0.length);
      assertEquals(23, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-122)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-122), (byte)2, (byte)2, (byte) (-122)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-104));
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte)97}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.swap((byte[]) null, 2792, (int) (byte) (-104), (int) (byte)97);
      ArrayUtils.reverse((byte[]) null, (int) (byte)113, Integer.MAX_VALUE);
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      ArrayUtils.swap(charArray0, (-1), 15, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'7', 'k'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)58, (byte)33, (byte)0, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)58;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 58.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)58, 479, (int) (byte)2);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 1118.434F);
      assertNull(floatArray0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2293);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1712);
      ArrayUtils.swap(intArray0, (-1712), (-1712));
      assertArrayEquals(new int[] {(-1712)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'.', 'c', ')', 'B'}, charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ')';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 488.0, 799);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(65);
      assertEquals(65, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1712));
      assertEquals((-1712), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray1, 18);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('y');
      assertEquals('y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'y', '?'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)28;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add((float[]) null, (-1.0F));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Integer integer0 = new Integer(1349);
      assertEquals(1349, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(objectArray0[6]);
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 479;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      ArrayUtils.shift(booleanArray1, (-273), 1, 3034);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)263);
      assertArrayEquals(new short[] {(short)263}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-4188), (-4188), (-4188));
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      Integer integer0 = new Integer(97);
      assertEquals(97, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 2160.6969416);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      char[] charArray0 = new char[5];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 45;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 45;
      doubleArray0[5] = (double) 45;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 45.0);
      assertArrayEquals(new double[] {0.0, 45.0, 0.0, 0.0, 45.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-243.2491);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-243.2491));
      assertArrayEquals(new double[] {(-243.2491)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 570;
      intArray0[3] = 0;
      intArray0[4] = 55;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 570, 0, 55, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0, 55, (-2558));
      ArrayUtils.shift((long[]) null, (-1147), 0, (-1146));
      int[] intArray2 = ArrayUtils.add(intArray0, 37);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 570, 0, 55, 0, 0, 0, 0, 37}, intArray2);
      assertArrayEquals(new int[] {0, 0, 570, 0, 55, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray2.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2295;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1540;
      shortArray0[4] = (short) (-2414);
      shortArray0[5] = (short)510;
      shortArray0[6] = (short) (-2218);
      shortArray0[7] = (short)1848;
      shortArray0[8] = (short)2076;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-2218), (-1816));
      assertArrayEquals(new short[] {(short)2295, (short) (-1), (short)0, (short)1540, (short) (-2414), (short)510, (short) (-2218), (short)1848, (short)2076}, shortArray0);
      assertEquals(6, int1);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2052.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, (-3176));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-2052.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((Object[]) null, (-3176), 262, 262);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals(2, bitSet1.length());
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-83.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, (-83.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, (-83.0)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 16;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 571.54;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 571.54;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-441.50249513903253);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-441.50249513903253);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 2, 4061.5738);
      assertArrayEquals(new double[] {571.54, (-1.0), (-1.0), 571.54, 0.0, (-441.50249513903253), 0.0, 0.0, (-441.50249513903253)}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 4061.5738);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {571.54, (-1.0), (-1.0), 571.54, 0.0, (-441.50249513903253), 0.0, 0.0, (-441.50249513903253)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {571.54, (-1.0), (-1.0), 571.54, 0.0, (-441.50249513903253), 0.0, 0.0, (-441.50249513903253)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3.9301078F));
      assertArrayEquals(new float[] {(-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F), (-3.9301078F)}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ArrayUtils.swap(charArray0, 165, 165, (-1));
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.shift(charArray0, (-1), 45, (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-99);
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-83.0F);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-83.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-83.0), 1.0, 1.0, (-83.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 1136, 1136, (-1597));
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)127;
      Byte byte1 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)74);
      assertArrayEquals(new byte[] {(byte)127}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((long[]) null, (-2346), (int) (byte)127, (-913));
      boolean[] booleanArray0 = ArrayUtils.insert(110, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double[] doubleArray0 = new Double[9];
      double double0 = (-1.0);
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(590.248069885);
      assertEquals(590.248069885, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[1] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(590.248069885, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((-305.91103387622));
      assertEquals((-305.91103387622), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[3] = double4;
      Double double5 = new Double((-2346));
      assertEquals((-2346.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[4] = double5;
      Double double6 = new Double(byte0);
      assertEquals(127.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(1);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[6] = double7;
      Double double8 = new Double((double) doubleArray0[3]);
      assertEquals((-305.91103387622), (double)double8, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      
      doubleArray0[7] = double8;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(121, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (-3585.4802F);
      floatArray0[3] = (-3585.4802F);
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertEquals(19, floatArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)59);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)59}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)10, (-1385));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)59, (-2341));
      assertEquals((-1), int1);
      assertEquals(19, floatArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 11, (-2341));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(19, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-261.2247589438077));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      long[] longArray0 = new long[6];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'G');
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = 1L;
      longArray0[6] = (-646L);
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, 0);
      assertArrayEquals(new long[] {(-383L), 1L, 0L, (-1L), (-1L), 1L, (-646L), 0L, 0L}, longArray0);
      assertEquals(1, int0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'F';
      charArray0[2] = 'i';
      charArray0[3] = 'S';
      charArray0[4] = 'U';
      charArray0[5] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'S');
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'{', 'F', 'i', 'S', 'U', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1300), 10);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (short) (-1300);
      doubleArray1[3] = (-253.017194019);
      doubleArray1[4] = 796.07;
      doubleArray1[5] = (double) (short) (-1587);
      doubleArray1[6] = 796.07;
      doubleArray1[7] = 796.07;
      doubleArray1[8] = 796.07;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3206.0);
      doubleArray0[1] = 2458.3338218404;
      doubleArray0[2] = 2458.3338218404;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 19.0);
      assertArrayEquals(new double[] {(-3206.0), 2458.3338218404, 2458.3338218404}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-625), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 594.69616;
      doubleArray0[1] = 1902.625994322178;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2467.4180392408794);
      doubleArray0[4] = 4061.5738;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      longArray0[1] = (-2596L);
      longArray0[2] = (long) (-48);
      longArray0[3] = (long) (-48);
      ArrayUtils.shift(longArray0, (-1311), (-995), (-205));
      assertArrayEquals(new long[] {(-48L), (-2596L), (-48L), (-48L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-48);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-48.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-48.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-205), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)66, 36);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-123));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 4380.93F;
      floatArray0[1] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom((-783L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-1.0F), 4380.93F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) (short)59;
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (-1621.3324003037803);
      doubleArray0[3] = (-1621.3324003037803);
      doubleArray0[4] = 594.69616;
      doubleArray0[5] = (-1621.3324003037803);
      doubleArray0[6] = (-1621.3324003037803);
      doubleArray0[7] = (-1621.3324003037803);
      doubleArray0[8] = (-1621.3324003037803);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(24, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)59;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (float) (short)59;
      floatArray0[3] = (float) (short)59;
      floatArray0[4] = (float) (short)59;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F, 59.0F, 59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, int0);
      assertEquals(9, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = 'O';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 8, (byte) (-91));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1767.1042973327);
      assertEquals(1767.1042973327, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)74, (-1), (int) (byte)74);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1414);
      ArrayUtils.shift(longArray0, (-1414), 97, (-1414));
      assertArrayEquals(new long[] {(-1414L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-125), 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 484;
      integerArray0[1] = (Integer) 0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-816));
      assertEquals((-816), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-816)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-816);
      doubleArray0[1] = (double) (-816);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -816, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-265.94215263487513);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1373.65);
      doubleArray0[4] = 997.782193019616;
      int[] intArray0 = new int[6];
      intArray0[0] = 97;
      intArray0[1] = (-921);
      intArray0[2] = (-846);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1084;
      intArray0[1] = 3550;
      intArray0[2] = 2672;
      intArray0[3] = (-1);
      intArray0[4] = 4;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4, (-2787));
      assertArrayEquals(new int[] {1084, 3550, 2672, (-1), 4}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte) (-98));
      assertEquals((-98), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-98);
      shortArray0[1] = (short) (byte) (-111);
      shortArray0[2] = (short) (byte) (-111);
      shortArray0[3] = (short) (byte) (-98);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-111), 121);
      assertArrayEquals(new short[] {(short) (-98), (short) (-111), (short) (-111), (short) (-98)}, shortArray0);
      assertEquals(2, int0);
      assertEquals(4, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-98), 0);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertEquals(0, int1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = ',';
      charArray0[2] = 'Z';
      charArray0[3] = '(';
      charArray0[4] = 'e';
      charArray0[5] = '`';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'9', ',', 'Z', '(', 'e', '`'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short)3050;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)114;
      shortArray0[5] = (short) (-62);
      shortArray0[6] = (short)2763;
      shortArray0[7] = (short)211;
      shortArray0[8] = (short)566;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)53, (short)3050, (short)1, (short)114, (short) (-62), (short)2763, (short)211, (short)566}, shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)53, (short)3050, (short)1, (short)114, (short) (-62), (short)2763, (short)211, (short)566}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)59);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 651.37917;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)69;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-79), (byte) (-101), (byte)64, (byte) (-107), (byte)105, (byte)76, (byte)69}, byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-79), (byte) (-101), (byte)64, (byte) (-107), (byte)105, (byte)76, (byte)69}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean1);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2792, 4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 651.37917, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(charArray1, (-1), (-62), (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1773.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1379.25057436773;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-3793.4165165402037);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 4430.597785290082;
      doubleArray0[7] = (-1.0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2015;
      longArray0[1] = (long) 2015;
      longArray0[2] = 1L;
      longArray0[3] = (long) 2015;
      longArray0[4] = (long) 2015;
      ArrayUtils.shift(longArray0, 2015, 2015, (-1351));
      assertArrayEquals(new long[] {2015L, 2015L, 1L, 2015L, 2015L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte)13, (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, 1882);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean2);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)4;
      ArrayUtils.shift(byteArray0, 0, 885, (int) (byte)57);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)4, (byte)57, (byte)43, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)2;
      byteArray1[1] = (Byte) (byte)2;
      byteArray1[2] = (Byte) (byte)57;
      byteArray1[3] = (Byte) (byte)43;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)4;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      byteArray0[2] = (byte)0;
      intArray1[2] = 0;
      intArray1[3] = (int) (byte)57;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 57}, intArray1);
      assertTrue(boolean1);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      boolean boolean0 = ArrayUtils.contains(charArray0, '1');
      assertArrayEquals(new char[] {'1', 'B', ';', ';', ';'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-1691.4242F));
      assertNull(floatArray0);
      
      Class<?>[] classArray2 = ArrayUtils.nullToEmpty(classArray1);
      assertSame(classArray2, classArray1);
      assertSame(classArray1, classArray2);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray2.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray2);
      
      int int0 = 885;
      ArrayUtils.shift((byte[]) null, 1489, 885, (-1266));
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      try { 
        Integer.valueOf(" in an array of ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" in an array of \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (int) (byte)106, (int) (byte)106, (-2109));
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-125), 146, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-2922), 450, (-2922));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-703);
      shortArray0[1] = (short) (-127);
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-127);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-127);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-104));
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)113, (byte) (-127)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-104), 2792);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2346);
      doubleArray0[1] = (double) (-2346);
      doubleArray0[2] = 2399.9827;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2346);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2346.0), (-2346.0), 2399.9827, 0.0, (-2346.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2346.0), (-2346.0), 2399.9827, 0.0, (-2346.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)113);
      assertArrayEquals(new byte[] {(byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      char[] charArray0 = new char[18];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j');
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(18, charArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'L';
      intArray0[1] = (-1770);
      ArrayUtils.shift(intArray0, 91, 2129735849, (-1770));
      assertArrayEquals(new int[] {76, (-1770)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (int) (byte)77, (int) (byte)77, 1572);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-401L), (-125));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Integer integer1 = new Integer((-125));
      assertEquals((-125), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-1)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Short short0 = new Short((short)37);
      assertEquals((short)37, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'F';
      charArray0[3] = 'i';
      charArray0[5] = 'j';
      charArray0[5] = 'F';
      charArray0[6] = 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 't');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'i', 'i', 'F', 'i', '\u0000', 'F', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'i';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) 'F';
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 't';
      intArray0[5] = (int) 'F';
      ArrayUtils.shift(intArray0, 70, 91, 91);
      assertArrayEquals(new int[] {105, 70, 70, 105, 116, 70}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.shift((boolean[]) null, Integer.MAX_VALUE);
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = ArrayUtils.insert((-749), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-703);
      shortArray0[1] = (short)246;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)246;
      doubleArray0[2] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray1, 2146333292, (float) 2146333292);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146333292, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)69);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'D';
      charArray0[2] = '&';
      charArray0[3] = '}';
      charArray0[4] = 'D';
      charArray0[5] = '-';
      charArray0[6] = '-';
      charArray0[7] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, 'q', (int) (short)69);
      assertArrayEquals(new char[] {'-', 'D', '&', '}', 'D', '-', '-', 'D'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "w");
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(845, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "OOU?tH;9^8W<`fy";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1691.4242F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1691.4242F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[1] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-124));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)47, (byte)2, (byte)0, (byte) (-1), (byte)4, (byte)46, (byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)47, (byte)2, (byte)0, (byte) (-1), (byte)4, (byte)46}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte) (-101);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-101);
      intArray0[4] = (int) (byte) (-124);
      intArray0[5] = (int) (byte)4;
      intArray0[6] = (int) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {2, (-101), (-1), (-101), (-124), 4, 2}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (-2937.327628370227);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (-101);
      doubleArray0[5] = (double) (byte)47;
      doubleArray0[6] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2868);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, (-2937.327628370227), (-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2.0, (-2937.327628370227), (-1.0), 2.0, (-101.0), 47.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, (-2937.327628370227), (-1.0), 2.0, (-101.0), 47.0, 2.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)65);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte)46, (byte) (-1), (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte)46, (byte) (-1), (byte)46}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)46;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte)46;
      doubleArray0[5] = (double) (byte)4;
      doubleArray0[6] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1999), (-997));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.0, (-1.0), 46.0, (-1.0), 46.0, 4.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)65;
      shortArray0[1] = (short) (byte)46;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)46;
      shortArray0[7] = (short) (byte) (-1);
      ArrayUtils.reverse(shortArray0, 1711, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)65, (short)46, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short)46, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1943));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1943));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (-1943);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {33L, (-1943L)}, longArray0);
      assertArrayEquals(new long[] {33L, (-1943L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Short short0 = new Short((byte)33);
      assertEquals((short)33, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short)shortArray0[0];
      doubleArray0[2] = 41.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1072, (-1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 33.0, 41.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((short[]) null, 1603, 1072);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {33L, (-1943L)}, longArray0);
      assertTrue(boolean2);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.shift((char[]) null, 1869, (int) shortArray0[0], 1869);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'a'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-913), 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(charArray0, (-913), 0, 1158);
      assertArrayEquals(new char[] {'a', 'a', 'a'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 1158);
      assertNull(floatArray0);
      
      Short short0 = new Short((short)37);
      assertEquals((short)37, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1798);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1798, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 5510.6F);
      assertArrayEquals(new float[] {5510.6F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-563.0F);
      floatArray0[1] = 120.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2221.8848F);
      floatArray0[4] = (-1691.4242F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2221.8848F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-563.0F), 120.0F, 0.0F, (-2221.8848F), (-1691.4242F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-563.0F), 120.0F, 0.0F, (-2221.8848F), (-1691.4242F), (-2221.8848F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2459);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2459, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[8] = (double) (short)59;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 59.0, (-1612.614), 59.0, 59.0, 59.0, 0.0, 0.0, 59.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (short)59, 474, (int) (short)59);
      assertArrayEquals(new double[] {0.0, 59.0, (-1612.614), 59.0, 59.0, 59.0, 0.0, 0.0, 59.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)9404;
      shortArray0[1] = (short)9404;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-82));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)9404, (short)9404}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(shortArray1, (-5), 2, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)9404, (short)9404}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 9;
      ArrayUtils.shift(intArray0, (-125), 9, 0);
      assertArrayEquals(new int[] {484, 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 484;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (-125);
      doubleArray0[3] = (double) 484L;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 159.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {484.0, 9.0, (-125.0), 484.0, 9.0, 159.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 9, 0, 2672);
      assertArrayEquals(new double[] {484.0, 9.0, (-125.0), 484.0, 9.0, 159.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-2643), 101, (-83));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-83);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2643);
      longArray0[3] = (long) (-83);
      longArray0[4] = (long) (-2643);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-83L), 101L, (-2643L), (-83L), (-2643L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'x';
      charArray0[2] = 'q';
      charArray0[3] = 'Z';
      charArray0[4] = '%';
      charArray0[5] = 'P';
      charArray0[6] = 'y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'q');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'6', 'x', 'Z', '%', 'P', 'y'}, charArray1);
      assertArrayEquals(new char[] {'6', 'x', 'q', 'Z', '%', 'P', 'y'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-748.91064F);
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) 'y';
      floatArray0[3] = (float) 101;
      floatArray0[4] = (float) 'Z';
      floatArray0[5] = (float) 'x';
      floatArray0[6] = (float) 'Z';
      floatArray0[7] = (float) 'Z';
      floatArray0[8] = (float) 'Z';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-83L));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-748.91064F), 54.0F, 121.0F, 101.0F, 90.0F, 120.0F, 90.0F, 90.0F, 90.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-748.91064F), 54.0F, 121.0F, 101.0F, 90.0F, 120.0F, 90.0F, 90.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2459);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift((int[]) null, (-2123));
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {(-387), 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(10, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 2);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) null, (-1654));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = 'O';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-91));
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2235);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      Integer integer0 = new Integer(2473);
      assertEquals(2473, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4294);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[12] = (short) (-2997);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(19, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(20, bitSet0.length());
      assertEquals(20, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1225;
      shortArray0[1] = (short)1225;
      shortArray0[2] = (short)1225;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1225);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1225, (short)1225, (short)1225, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)1225;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short)1225;
      doubleArray0[4] = (double) 1388;
      doubleArray0[5] = (double) 1388;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 1225.0, (-1.0), 1225.0, 1388.0, 1388.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[1] = (-1L);
      longArray0[3] = 1L;
      longArray0[6] = (-646L);
      longArray0[7] = 0L;
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2879);
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = (int) (short) (-2879);
      intArray0[2] = 0;
      intArray0[3] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2879, Length: 20
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2050);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2050, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)59}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)59;
      objectArray0[2] = (Object) (short)59;
      shortArray0[0] = (short)59;
      objectArray0[4] = (Object) (short)59;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('y');
      assertEquals('y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'y', '?'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (char)character1;
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) (short)59;
      doubleArray0[3] = (double) (char)character1;
      doubleArray0[4] = (double) (char)character2;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[6] = (double) 'y';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)59);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {63.0, 63.0, 59.0, 63.0, 121.0, 59.0, 121.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {63.0, 63.0, 63.0, 121.0, 121.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shift(byteArray0, 5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2293), (-2293));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2293);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2293), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2293, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray0, (-2059), 2033, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1815), (int) (byte)74, (-1815));
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2997));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      int int0 = 1388;
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string0);
      
      short short0 = (short)246;
      short short1 = (short)621;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)621);
      assertNull(shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "1388";
      objectArray0[1] = (Object) integer0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "1388";
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)246;
      doubleArray0[1] = (double) (short)246;
      doubleArray0[2] = (double) 1388;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {246.0, 246.0, 1388.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1), 17, 17);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1449);
      ArrayUtils.shift(longArray0, (-1449), 74, (-1449));
      assertArrayEquals(new long[] {0L, (-1449L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1), 10, 10);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2840L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2414));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 14);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      boolean boolean0 = ArrayUtils.contains(charArray0, '1');
      assertArrayEquals(new char[] {'1', 'B', ';', ';', ';'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-1691.4242F));
      assertNull(floatArray0);
      
      Class<?>[] classArray2 = ArrayUtils.nullToEmpty(classArray1);
      assertSame(classArray2, classArray1);
      assertSame(classArray1, classArray2);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray2.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray2);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) 'B';
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {97.0, 66.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer> class2 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class2;
      classArray0[2] = class1;
      classArray0[4] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      Character character0 = new Character('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) ';';
      longArray0[2] = (long) 'a';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) 'a';
      longArray0[5] = (long) 1489;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {59L, 97L, 59L, 97L, 1489L, 97L}, longArray0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.swap(charArray0, (-1113), 1460);
      assertArrayEquals(new char[] {'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-125), 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 76L);
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte byte1 = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      char[] charArray0 = new char[6];
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      int int0 = (-317);
      int int1 = (-3331);
      ArrayUtils.shift(charArray0, (-1758), (-317), (-3331));
      assertArrayEquals(new char[] {'\u0000', '%', '%', '%', '%', '%'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Integer integer0 = new Integer((-3331));
      assertEquals((-3331), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)46);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray1, (int) (byte)47, (int) (byte)47, (int) '%');
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-101);
      objectArray0[1] = (Object) (byte)46;
      objectArray0[2] = (Object) '%';
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) (byte)47;
      objectArray0[5] = (Object) (byte)4;
      objectArray0[6] = (Object) (byte) (-101);
      objectArray0[7] = (Object) '%';
      Integer integer1 = new Integer(18688);
      assertEquals(18688, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        LongBuffer.wrap((long[]) null, (-2146560933), (int) (byte) (-101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapLongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 4038.0);
      assertArrayEquals(new double[] {4038.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-28.427887731879498);
      doubleArray0[4] = 523.1993475810729;
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 605);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(doubleArray0, 1, (-1), 605);
      assertArrayEquals(new double[] {0.0, 1.0, (-28.427887731879498), 523.1993475810729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, (-2), (-2));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2);
      floatArray0[1] = (float) (-2);
      floatArray0[2] = (float) (-2);
      floatArray0[3] = (float) (-2);
      floatArray0[4] = (-3725.61F);
      floatArray0[5] = (float) (-2);
      floatArray0[6] = (float) (-2);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-2.0F), (-2.0F), (-2.0F), (-2.0F), (-3725.61F), (-2.0F), (-2.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = 'O';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      charArray0[8] = 'd';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|', 'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray1);
      assertArrayEquals(new char[] {'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 'd';
      doubleArray0[6] = (-2772.6);
      ArrayUtils.swap(doubleArray0, (-2790), (-1), (-2123));
      assertArrayEquals(new double[] {124.0, 58.0, 0.0, 82.0, (-1.0), 100.0, (-2772.6)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Character character0 = new Character('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '+', (-1096));
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2293));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 37);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l:20yl%XD=4]h";
      stringArray0[1] = "xleG3Ogye>+";
      stringArray0[2] = "T*-~RQ5]K+Ai";
      stringArray0[3] = "OOU?tH;9^8W<`fy";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-941);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-941);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-941), (short)0, (short)0, (short)0, (short)0, (short) (-941)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-941);
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2822));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {0, 0, 0, (-941), 2, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      doubleArray0[1] = (double) (-913);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-913);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-66);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-104), (byte)113, (byte)97, (byte)97, (byte) (-66)}, byteArray0);
      assertEquals(3, int0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (byte) (-66), (-2591));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-913.0), (-913.0), 2.147483647E9, (-913.0), 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2, (int) (byte) (-104));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte) (-101);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-339));
      assertEquals((-339), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-101));
      assertEquals((-101), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-339));
      assertEquals((-339), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[1]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(integerArray0[2], integer2);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[5] = object0;
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 1217);
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 2139029560, 76, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Integer integer1 = new Integer(76);
      assertEquals(76, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-387.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-387.0F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(899);
      assertEquals(899, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '}');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1712);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2706.0571F));
      assertArrayEquals(new float[] {(-1712.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-2706.0571F);
      doubleArray0[3] = (double) (-2706.0571F);
      doubleArray0[4] = (double) (-1712.0F);
      doubleArray0[5] = (double) 3639L;
      doubleArray0[6] = (double) 3639L;
      doubleArray0[7] = (double) (-1712.0F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 7);
      assertArrayEquals(new double[] {0.0, (-2706.05712890625), 0.0, (-2706.05712890625), (-1712.0), 3639.0, 3639.0, (-1712.0)}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)12, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '|');
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'd';
      doubleArray0[1] = (double) (-2790);
      doubleArray0[2] = (double) 4046;
      doubleArray0[3] = (double) 'd';
      doubleArray0[4] = (double) '|';
      doubleArray0[5] = (double) 4046;
      doubleArray0[6] = (double) 4046;
      doubleArray0[7] = (double) 'd';
      ArrayUtils.swap(doubleArray0, (int) '|', (-2790), (-230));
      assertArrayEquals(new double[] {100.0, (-2790.0), 4046.0, 100.0, 124.0, 4046.0, 4046.0, 100.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-91));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = 'O';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      charArray0[8] = 'd';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|', 'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray1);
      assertArrayEquals(new char[] {'O', '|', 'O', '`', 'R', 'q', 'B', ':', 'd'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)10);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      int int0 = 76;
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1902L;
      longArray0[1] = (long) 76;
      longArray0[2] = 2120L;
      longArray0[3] = 2120L;
      longArray0[4] = 2120L;
      longArray0[5] = 2120L;
      longArray0[6] = 2120L;
      longArray0[7] = (long) 76;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 76L);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertArrayEquals(new long[] {1902L, 76L, 2120L, 2120L, 2120L, 2120L, 2120L, 76L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-61), (-61));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2120L);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1193.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1193.0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 1193.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 594.69616;
      doubleArray0[1] = 1902.625994322178;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2446.7);
      doubleArray0[4] = 4061.5738;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-424.7291856515);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), Integer.MAX_VALUE, 1902.625994322178);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, 0.0, (-2446.7), 4061.5738, (-1.0), 0.0, 0.0, (-424.7291856515)}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, 0.0, (-2446.7), 4061.5738, (-1.0), 0.0, 0.0, (-424.7291856515)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {594.69616, 1902.625994322178, (-2446.7), 4061.5738, (-1.0), (-424.7291856515)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1450.23534);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)59}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)59;
      objectArray0[1] = (Object) (short)59;
      objectArray0[2] = (Object) (short)59;
      objectArray0[3] = (Object) (short)59;
      objectArray0[4] = (Object) (short)59;
      objectArray0[5] = (Object) (short)59;
      objectArray0[6] = (Object) (short)59;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)59;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)59;
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[6] = (double) (short)59;
      doubleArray0[7] = (double) (short)59;
      doubleArray0[8] = (double) (short)59;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {59.0, 59.0, (-1612.614), 59.0, 59.0, 59.0, 59.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)59;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {59.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = (-387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, 253.017194019);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1450.23534);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, (-387));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals((-1), int1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-387);
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-387);
      integerArray0[3] = (Integer) (-387);
      integerArray0[4] = (Integer) (-387);
      integerArray0[5] = (Integer) (-387);
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer0, (-2182));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, (Object) integer0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.reverse(intArray0, 0, 1489);
      assertArrayEquals(new int[] {0, 484}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, (-14), (-2067947215), (int) (byte)43);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)43, (byte)2, (byte) (-34), (byte)2, (byte)43, (byte)43, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '9';
      objectArray0[1] = (Object) '@';
      objectArray0[2] = (Object) '@';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 3851L);
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, (-502), 56, 76);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = Integer.getInteger("tIuga 5~K`]");
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(objectArray0[1], (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer integer0 = Integer.valueOf((int) (byte) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) integer0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      boolean boolean0 = ArrayUtils.contains((Object[]) booleanArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(19, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-89L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      ArrayUtils.swap((long[]) null, Integer.MAX_VALUE, (-2995), (-160));
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 12, 12);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)57;
      ArrayUtils.shift(byteArray0, 832, (int) (byte)43, 105);
      assertArrayEquals(new byte[] {(byte)4, (byte)57}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte)57;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[3] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 12);
      assertNull(longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'C';
      charArray0[2] = '1';
      charArray0[3] = '&';
      charArray0[4] = 'g';
      charArray0[5] = '0';
      charArray0[6] = 's';
      ArrayUtils.swap(charArray0, (-502), Integer.MAX_VALUE, (int) (byte)4);
      assertArrayEquals(new char[] {'6', 'C', '1', '&', 'g', '0', 's'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-2086));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 329);
      assertArrayEquals(new int[] {329}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 91, 91);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)4;
      ArrayUtils.shift(byteArray0, 0, 885, (int) (byte)57);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)4, (byte)57, (byte)43, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = (int) (byte)4;
      intArray1[3] = (int) (byte)4;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      int[] intArray2 = ArrayUtils.add(intArray1, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 4, 4, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 4, 4, 0, 0, 0, 0}, intArray2);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1963L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 143.5157F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.shift(charArray0, (-23), 45, (-23));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 45);
      assertArrayEquals(new int[] {45}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 512);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 0, 2, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(24);
      assertEquals(24, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(4183);
      assertEquals(4183, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(88, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-913);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4893.1713926);
      doubleArray1[1] = (-4893.1713926);
      doubleArray1[2] = (-4893.1713926);
      doubleArray1[3] = (double) (-913);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0), (-4893.1713926), (-4893.1713926), (-4893.1713926), (-913.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(intArray0, 2036, (int) (short)2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double double0 = new Double(253.017194019);
      assertEquals(253.017194019, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray3 = new Double[0];
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray3, (-807.9092032502035));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)58;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {58, 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1151);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {58, 0}, intArray0);
      assertArrayEquals(new int[] {1151, 58, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer integer0 = new Integer(981);
      assertEquals(981, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 58;
      Integer integer1 = new Integer(777);
      assertEquals(777, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      intArray0[0] = (int) integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 777;
      integerArray0[5] = (Integer) 777;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 2286);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {777, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(2, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      
      ArrayUtils.shift((char[]) null, (int) integerArray0[5]);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = '0';
      charArray0[2] = '8';
      charArray0[3] = '5';
      charArray0[4] = 'o';
      charArray0[5] = 'l';
      charArray0[6] = '}';
      charArray0[7] = 'g';
      char[] charArray1 = ArrayUtils.add(charArray0, '}');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', '0', '8', '5', 'o', 'l', '}', 'g'}, charArray0);
      assertArrayEquals(new char[] {'I', '0', '8', '5', 'o', 'l', '}', 'g', '}'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(charArray0, 2287);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32325;
      shortArray0[1] = (short)699;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)32325, (short)699}, shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      charArray1[1] = 'B';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      ArrayUtils.swap(charArray1, (int) (short)699, (-1255), 50);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B'}, charArray1);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      short[] shortArray0 = new short[10];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(10, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)431);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)431, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1494));
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1494);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1494.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1494.0), (-1494.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 0, 36, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'M';
      charArray0[2] = '\"';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = '\'';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\"', 'M', '\"', 'M', 'M', '\''}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.shift(charArray0, 2287);
      assertArrayEquals(new char[] {'\'', '\"', 'M', '\"', 'M', 'M'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '\"';
      doubleArray1[1] = (-4893.1713926);
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {34.0, (-4893.1713926), 0.0, 34.0, (-4893.1713926), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {34.0, (-4893.1713926), 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)699;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)32325;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1823);
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)699, (short) (-1), (short)32325, (short)2, (short)0, (short) (-1823)}, shortArray0);
      assertTrue(boolean1);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 2340, 2340, 2340);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)59}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)59;
      objectArray0[2] = (Object) (short)59;
      shortArray0[0] = (short)59;
      objectArray0[4] = (Object) (short)59;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('y');
      assertEquals('y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'y', '?'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2, (int) character2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      ArrayUtils.shift((float[]) null, (int) character2, (int) (short)59, (int) (short)59);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2293), (-2293));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      Integer integer0 = Integer.valueOf((-2293));
      assertEquals((-2293), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-703);
      shortArray0[1] = (short)246;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1225);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-703), (short)246, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-703), (short)246, (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)246;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-703);
      doubleArray0[4] = (double) (short) (-703);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 246.0, (-1.0), (-703.0), (-703.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2243));
      assertEquals((-2243), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '{';
      longArray0[1] = (long) 'K';
      longArray0[2] = (long) '{';
      longArray0[3] = (long) 'K';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {123L, 75L, 123L, 75L}, longArray0);
      assertArrayEquals(new long[] {123L, 75L, 123L, 75L, 123L, 75L, 123L, 75L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      long[] longArray0 = new long[15];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(15, longArray0.length);
      assertEquals(15, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2691.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2691.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2691.0F, 2691.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("char");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '}';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'P';
      charArray0[5] = '<';
      charArray0[6] = '6';
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)36;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-67), (byte) (-67));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -67, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1920L));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer((-568));
      assertEquals((-568), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'Z';
      charArray0[3] = 'K';
      charArray0[4] = '@';
      charArray0[5] = 'C';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      charArray0[8] = '%';
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'9', '{', 'Z', 'K', '@', 'C', 'H', '>', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-56));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte) (-56);
      byteArray2[2] = (byte) (-56);
      byteArray2[3] = (byte) (-56);
      byteArray2[4] = (byte) (-56);
      byteArray2[5] = (byte) (-56);
      byteArray2[6] = (byte) (-56);
      ArrayUtils.swap(byteArray2, 2007, (-5319), (int) (byte) (-56));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56)}, byteArray2);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)12;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-695.81F));
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte)12, (int) (byte)12, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.0;
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('A');
      assertEquals('A', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-90));
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'A');
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((float[]) null, 1509, (int) (byte) (-98), (int) (byte) (-70));
      byte[] byteArray0 = ArrayUtils.insert((int) (byte) (-70), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'O');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)59}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)59;
      objectArray0[1] = (Object) (short)59;
      objectArray0[2] = (Object) (short)59;
      objectArray0[3] = (Object) (short)59;
      objectArray0[4] = (Object) (short)59;
      objectArray0[5] = (Object) (short)59;
      objectArray0[6] = (Object) (short)59;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)59;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)59;
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (-1612.614);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) (short)59;
      doubleArray0[5] = (double) (short)59;
      doubleArray0[6] = (double) (short)59;
      doubleArray0[7] = (double) (short)59;
      doubleArray0[8] = (double) (short)59;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {59.0, 59.0, (-1612.614), 59.0, 59.0, 59.0, 59.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      ArrayUtils.shift(byteArray0, 2146914928);
      assertArrayEquals(new byte[] {(byte)0, (byte)36}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '1';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'H', '1'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2851);
      assertEquals(2851, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(2851, (int)integer1);
      assertEquals(8, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(2851, (int)integer3);
      assertEquals(8, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) (byte)59);
      assertEquals(59, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.valueOf((int) integer4);
      assertEquals(59, (int)integer5);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[1]);
      assertEquals((byte)35, mutableInt0.byteValue());
      assertEquals(2851, (int)mutableInt0.getValue());
      assertEquals(2851L, mutableInt0.longValue());
      assertEquals(2851, (int)mutableInt0.toInteger());
      assertEquals(2851.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2851.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2851", mutableInt0.toString());
      assertEquals(2851, mutableInt0.intValue());
      assertEquals((short)2851, mutableInt0.shortValue());
      assertEquals(8, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer6 = mutableInt0.getValue();
      assertEquals((byte)35, mutableInt0.byteValue());
      assertEquals(2851, (int)mutableInt0.getValue());
      assertEquals(2851L, mutableInt0.longValue());
      assertEquals(2851, (int)mutableInt0.toInteger());
      assertEquals(2851.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2851.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2851", mutableInt0.toString());
      assertEquals(2851, mutableInt0.intValue());
      assertEquals((short)2851, mutableInt0.shortValue());
      assertEquals(2851, (int)integer6);
      assertEquals(8, integerArray0.length);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1505));
      assertEquals((-1505), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {2851, 2851, Integer.MAX_VALUE, 2851, 59, 59, 2851, (-1505)}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-87));
      assertArrayEquals(new short[] {(short) (-4383), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-4383);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4383.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4383.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = '8';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'm';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {':', '\\', '8', 'u', '|', 'm'}, charArray0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1610);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1610, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-125), 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 484;
      longArray0[1] = 76L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {76L, 484L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-125));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 76);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1331L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 484;
      longArray0[3] = (long) 484;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 484, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 41L);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(intArray0, 0, 0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, Integer.MAX_VALUE}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1409;
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short)5589;
      shortArray0[3] = (short) (-2039);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)355;
      shortArray0[6] = (short) (-2123);
      shortArray0[7] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1409, (short) (-125), (short)5589, (short) (-2039), (short)0, (short)355, (short) (-2123), (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-899), (byte)123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -899, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-1414), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1414, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (-1), 686, 4733);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)4254);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertTrue(int1 == int0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-85);
      floatArray0[1] = (-3585.4802F);
      floatArray0[3] = (-3585.4802F);
      ArrayUtils.swap(floatArray0, (int) (short)59, (int) (short)59, (int) (short)59);
      assertArrayEquals(new float[] {(-85.0F), (-3585.4802F), 0.0F, (-3585.4802F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, (-85));
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {484, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 484;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 484;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {484L, 0L, 484L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {484L, 0L, 0L, 484L, 0L, 0L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.shift(floatArray0, 4253);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 117);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2682.5F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2682.5F, 76);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 76;
      longArray0[1] = (long) 76;
      longArray0[2] = (long) 76;
      longArray0[3] = (long) 76;
      longArray0[4] = (long) 76;
      longArray0[5] = (long) 76;
      longArray0[6] = (long) 76;
      longArray0[7] = (long) 76;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3851L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 76L, 76L, 76L, 76L, 76L, 76L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, (-1365), Integer.MAX_VALUE, 76);
      assertArrayEquals(new float[] {2682.5F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1808;
      shortArray0[1] = (short)3257;
      shortArray0[2] = (short)3820;
      shortArray0[3] = (short)1020;
      shortArray0[4] = (short)1880;
      shortArray0[5] = (short) (-584);
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-425), 10);
      assertArrayEquals(new short[] {(short)1808, (short)3257, (short)3820, (short)1020, (short)1880, (short) (-584), (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = ' ';
      charArray0[2] = 'r';
      charArray0[3] = '6';
      charArray0[4] = 'y';
      charArray0[5] = '?';
      charArray0[6] = '\"';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '?';
      charArray1[1] = '6';
      charArray1[2] = ' ';
      charArray1[3] = 'r';
      charArray1[4] = 'l';
      charArray1[5] = '?';
      charArray1[6] = 'y';
      charArray1[7] = ' ';
      charArray1[8] = '6';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'P', ' ', 'r', '6', 'y', '?', '\"'}, charArray0);
      assertArrayEquals(new char[] {'?', '6', ' ', 'r', 'l', '?', 'y', ' ', '6'}, charArray1);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 599;
      intArray0[1] = 599;
      intArray0[2] = 599;
      intArray0[3] = 599;
      intArray0[4] = 599;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 599);
      assertArrayEquals(new int[] {599, 599, 599, 599, 599}, intArray0);
      assertEquals(4, int0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 2623, (byte)106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2623, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-4));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3562)}, shortArray0);
      assertArrayEquals(new short[] {(short)2771, (short) (-3562)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '|';
      charArray0[2] = 's';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      charArray0[8] = 'd';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'O', '|', 's', '`', 'R', 'q', 'B', ':', 'd'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2260.6562F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2260.6562F), 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1653.985444);
      assertEquals(1653.985444, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1653.985444}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)33;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2969);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {33}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(intArray0, 2969, 258);
      assertArrayEquals(new int[] {33}, intArray0);
      assertEquals(1, intArray0.length);
      
      Double double0 = new Double(33);
      assertEquals(33.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-239.07663078414));
      assertEquals((-239.07663078414), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2123.0));
      assertArrayEquals(new double[] {(-239.07663078414), 33.0, 33.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1587);
      shortArray0[1] = (short) (-1587);
      shortArray0[2] = (short) (-1300);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1587), 974);
      assertArrayEquals(new short[] {(short) (-1587), (short) (-1587), (short) (-1300)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(3, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, 1, 2, (int) (short) (-1587));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = ArrayUtils.insert(1, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2389);
      shortArray0[1] = (short)1201;
      shortArray0[2] = (short)4;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2389), (short)1201, (short)4}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2389), (short)1201, (short)4}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Double double0 = new Double((-539.28));
      assertEquals((-539.28), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 82;
      floatArray1[1] = (float) 82;
      floatArray1[2] = (float) 82;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(82, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1979));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[0] = (long) (-1);
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      ArrayUtils.shift(longArray0, (-1), (-3062), 0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      assertEquals((-1770), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)31}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)74;
      floatArray0[1] = (float) (byte)31;
      floatArray0[2] = (float) (byte)31;
      floatArray0[3] = (float) (byte)74;
      floatArray0[4] = (float) (-1770);
      floatArray0[5] = (float) (byte)31;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {74.0F, 31.0F, 31.0F, 74.0F, (-1770.0F), 31.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      int[] intArray0 = new int[11];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int[] intArray0 = new int[4];
      int int0 = 11;
      intArray0[0] = 11;
      intArray0[1] = 3284;
      intArray0[2] = Integer.MAX_VALUE;
      int int1 = 90;
      intArray0[3] = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2792, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2792, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 146, 146, (-2954));
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2311;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)2311}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2311;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)2311, (-316));
      assertArrayEquals(new double[] {2311.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(65);
      assertEquals(65, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)2311);
      assertEquals(2311, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)2311);
      assertEquals(2311, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray0, 90);
      assertFalse(boolean2);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) booleanArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2252;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2252, (short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2252, (short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-3035), (-3035), (-3035));
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 137L);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = new Boolean[1];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      char char0 = '8';
      int[] intArray0 = new int[3];
      intArray0[1] = (int) '8';
      intArray0[2] = 18;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray1, 117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 2186;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 264);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 264, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-2998));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2998, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'U';
      charArray0[0] = 'U';
      charArray0[1] = 'T';
      char char1 = '4';
      charArray0[2] = '4';
      int int0 = (-1512);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1512));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1512, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1731.207);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2213.91), 2214.057649260536);
      assertArrayEquals(new double[] {0.0, (-1731.207)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1731.207)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1731.207), 0.0, (-1731.207)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      floatArray0[0] = (float) 1;
      doubleArray0[4] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1731.207);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2213.91), (-1731.207));
      assertArrayEquals(new double[] {0.0, (-1731.207)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      Short[] shortArray0 = new Short[2];
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-430);
      intArray0[2] = (-430);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-430), (-430)}, intArray0);
      assertArrayEquals(new int[] {0, (-430)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-430);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) (-430.0F);
      floatArray1[2] = (Float) (-430.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-430.0F), (-430.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      ArrayUtils.reverse(intArray0, (-430), 24);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-430), (-430), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-635);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-635), (-635));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-635)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-635));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-635)}, intArray0);
      assertArrayEquals(new int[] {(-635), (-635)}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (short)2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-430);
      intArray0[2] = (-918);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-430), (-918)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-430);
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-430);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (-918);
      floatArray0[8] = (float) (-918);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-430.0F), 0.0F, 0.0F, 0.0F, (-430.0F), 0.0F, (-918.0F), (-918.0F)}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3337);
      shortArray0[1] = (short) (-496);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3337);
      intArray0[1] = (int) (short) (-2131);
      intArray0[2] = 605;
      intArray0[3] = (int) (short) (-3337);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 605);
      assertArrayEquals(new int[] {(-3337), (-2131), 605, (-3337)}, intArray0);
      assertEquals(2, int0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)3486);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3337), (short) (-496), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3486, (short) (-3337), (short) (-496), (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-3337));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 599;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 972);
      assertArrayEquals(new int[] {599}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1028));
      assertArrayEquals(new short[] {(short) (-1028)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (int) (short)5, (byte) (-107));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 91, 5);
      assertArrayEquals(new int[] {(-913), (-2346), 0, 0, 0, 5, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 's';
      charArray0[3] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'r');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', 's', '\\'}, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', 's', '\\'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'r';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-2346));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 114.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 114.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)1334;
      shortArray0[2] = (short)113;
      shortArray0[3] = (short) (-4572);
      shortArray0[4] = (short)4540;
      shortArray0[5] = (short) (-98);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)1334, (short)113, (short) (-4572), (short)4540, (short) (-98)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)491}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Character character0 = new Character('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ArrayUtils.swap(charArray0, (-3016), 5);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) 'B';
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {97.0, 66.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Integer> class2 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class2;
      classArray0[2] = class1;
      classArray0[4] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      int int0 = new Character('a');
      assertEquals('a', int0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ';');
      assertArrayEquals(new char[] {'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-929), (-929));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 4278.756865093;
      doubleArray0[3] = (-1154.547352);
      doubleArray0[4] = (double) 91;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 4278.756865093;
      ArrayUtils.swap(doubleArray0, 91, (-1697));
      assertArrayEquals(new double[] {91.0, 1.5, 4278.756865093, (-1154.547352), 91.0, 1.5, 4278.756865093}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '-';
      charArray0[2] = 'Q';
      charArray0[3] = 'h';
      charArray0[4] = '4';
      charArray0[5] = 'i';
      charArray0[6] = '8';
      charArray0[7] = '5';
      int int0 = ArrayUtils.indexOf(charArray0, '5', (-1373));
      assertArrayEquals(new char[] {'Q', '-', 'Q', 'h', '4', 'i', '8', '5'}, charArray0);
      assertEquals(7, int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '_');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      Integer integer0 = new Integer(113);
      assertEquals(113, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 113;
      longArray0[1] = (long) 113;
      longArray0[2] = (long) 113;
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 84);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-396));
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 523.1993475810729;
      doubleArray0[5] = 0.0;
      ArrayUtils.swap(doubleArray0, 1489, 1489);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 523.1993475810729, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1489;
      intArray0[1] = 1489;
      intArray0[2] = 1489;
      intArray0[3] = 1489;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1489);
      assertArrayEquals(new int[] {1489, 1489, 1489, 1489}, intArray0);
      assertEquals(3, int0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '|';
      charArray0[2] = '7';
      charArray0[3] = 'H';
      charArray0[4] = '=';
      charArray0[5] = ';';
      charArray0[6] = ':';
      charArray0[7] = 'C';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'h');
      assertArrayEquals(new char[] {'h', '|', '7', 'H', '=', ';', ':', 'C'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1587);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1300), 10);
      assertArrayEquals(new short[] {(short) (-1587)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 548;
      doubleArray0[1] = (double) 548;
      doubleArray0[2] = (double) (short) (-1587);
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) (short) (-1587);
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = 796.07;
      doubleArray0[7] = (double) (short) (-1587);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(548, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 548, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (-1300);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 974);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1300)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(3, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1300)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2183;
      shortArray0[1] = (short)3320;
      shortArray0[2] = (short)797;
      shortArray0[3] = (short)2225;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-461), 2);
      assertArrayEquals(new short[] {(short)2183, (short)3320, (short)797, (short)2225}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((-1443.03691553962));
      assertEquals((-1443.03691553962), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double(1.5);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1443.03691553962), 0.0, 1.5, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(1681L, 1681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-87));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-1231), 827);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1231, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-2104);
      shortArray0[4] = (short) (-87);
      shortArray0[5] = (short)59;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)59);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short) (-2104), (short) (-87), (short)59, (short)0, (short)0}, shortArray0);
      assertEquals(5, int0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3697.218157);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3697.218157)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3697.218157)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)103;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)2, (byte)122, (byte) (-112), (byte)0, (byte) (-1), (byte)61, (byte)0, (byte)103}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2008));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 554);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4041.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1379.25057436773;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3793.4165165402037);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 4430.597785290082;
      doubleArray0[7] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2386.3795694), 64);
      assertArrayEquals(new double[] {(-1.0), 1379.25057436773, 0.0, 0.0, (-3793.4165165402037), 1.0, 4430.597785290082, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte) (-101);
      longArray0[4] = (long) (byte) (-101);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-101L), 116);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift((byte[]) null, (-104));
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((float[]) null, (-104), (-1755), (-104));
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray0, (Object[]) longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)101);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((short)101);
      assertEquals(101, (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short)101);
      assertEquals((short)101, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      short[] shortArray0 = new short[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2970));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)802);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-125.0F);
      floatArray0[1] = (float) (short)802;
      floatArray0[2] = (float) (short)802;
      floatArray0[3] = (float) (short)802;
      floatArray0[4] = (float) (short)802;
      floatArray0[5] = (float) (short)802;
      floatArray0[6] = (float) (short)802;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1254.1F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-125.0F), 802.0F, 802.0F, 802.0F, 802.0F, 802.0F, 802.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-125.0F), 802.0F, 802.0F, 802.0F, 802.0F, 802.0F, 802.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-703);
      shortArray0[1] = (short)246;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1225);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-703), (short)246, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-703), (short)246, (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-703);
      objectArray0[1] = (Object) (short) (-703);
      objectArray0[2] = (Object) (short)246;
      objectArray0[3] = (Object) (short)246;
      objectArray0[4] = (Object) (short)246;
      objectArray0[5] = (Object) (short) (-1);
      objectArray0[6] = (Object) (short) (-1);
      objectArray0[7] = (Object) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'B';
      charArray0[2] = 'M';
      charArray0[3] = '(';
      charArray0[4] = '\"';
      charArray0[5] = '\'';
      charArray0[6] = '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'a', 'B', 'M', '(', '\"', '\'', '1'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2459);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1732);
      shortArray0[3] = (short)3235;
      shortArray0[4] = (short)3550;
      shortArray0[5] = (short)1257;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1257, (short)3550, (short)3235, (short) (-1732), (short) (-1), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 114.0F;
      floatArray0[1] = 369.79F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1173.0F);
      floatArray0[4] = 9.443F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 9.443F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {114.0F, 369.79F, 0.0F, (-1173.0F), 9.443F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {114.0F, 369.79F, 0.0F, (-1173.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {114.0F, 369.79F, 0.0F, (-1173.0F), 9.443F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {114.0F, 369.79F, 0.0F, (-1173.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shift(booleanArray0, 35);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(18, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 745);
      assertEquals(18, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 3841, 3841);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short) (-2614);
      ArrayUtils.swap(shortArray0, (int) (short)3, (int) (short) (-2614), (-560));
      assertArrayEquals(new short[] {(short)3, (short)0, (short)3, (short)3, (short)0, (short)3, (short) (-2614)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-2614);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short) (-2614);
      longArray0[3] = (long) 745;
      longArray0[4] = (long) (short)3;
      longArray0[5] = (long) (short) (-2614);
      longArray0[6] = (long) (short)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {(-2614L), 0L, (-2614L), 745L, 3L, (-2614L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 1407);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1407, Integer.MAX_VALUE);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-191));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3743.255874977127), 1.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1424.2815715666804);
      doubleArray0[2] = (-1424.2815715666804);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1424.2815715666804), 0.0);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-1424.2815715666804), (-1424.2815715666804)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      assertEquals(1388, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = 1255.3032F;
      ArrayUtils.reverse(floatArray0, 1073741824, 1073741824);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 1255.3032F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) 1255.3032F;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) 2.0F;
      doubleArray0[5] = (double) 1388;
      doubleArray0[6] = (double) 2.0F;
      doubleArray0[7] = (double) 1073741824;
      doubleArray0[8] = (double) (short)2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 185.771);
      assertArrayEquals(new double[] {1.073741824E9, 2.0, 1255.30322265625, 2.0, 2.0, 1388.0, 2.0, 1.073741824E9, 2.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 1388);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short)2, (long) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      short[] shortArray0 = new short[18];
      ArrayUtils.shift(shortArray0, 1302);
      assertEquals(18, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0);
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)59;
      shortArray0[2] = (short)59;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)59, (short)59}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-174));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-700.13738);
      doubleArray0[6] = (-2475.76720479);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1963));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short) (-2021);
      shortArray0[4] = (short) (-941);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1136, (short) (-2021), (short) (-941), (short)0, (short)2, (short)0, (short)386}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      ArrayUtils.hashCode(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2139029560;
      intArray0[1] = 2139029560;
      intArray0[2] = 2139029560;
      ArrayUtils.insert(2, intArray0, intArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2139029560);
      Object object1 = new Object();
      int int0 = 7;
      Integer integer0 = new Integer(7);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2534);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2534, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3378);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-3378);
      floatArray0[1] = (float) (-3378);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3378.0F), 2798);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      
      Character.valueOf('5');
      Character character0 = new Character('?');
      Character character1 = new Character('y');
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1283);
      assertEquals(1, intArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)76);
      assertArrayEquals(new short[] {(short)76}, shortArray1);
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)59;
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)59;
      int int0 = ArrayUtils.indexOf(shortArray2, (short)59, (-555));
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1173);
      floatArray0[1] = (float) (short)76;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-555);
      floatArray0[4] = (-4498.71F);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1751.77F), 1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2356);
      intArray0[2] = 0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)114, (int) (short)76);
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 0, 14);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2356);
      longArray0[1] = (long) 14;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)0);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-234.7F);
      floatArray0[1] = (-940.0F);
      floatArray0[2] = 13.77F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 13.77F);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 120);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)24);
      assertArrayEquals(new byte[] {(byte)24}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      ArrayUtils.indexOf(longArray0, 1L);
      ArrayUtils.removeElement((boolean[]) null, false);
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      Integer integer0 = new Integer(128);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      ArrayUtils.toObject(intArray0);
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[7], 1257);
      ArrayUtils.shift(longArray0, (-1), 1, (-963));
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      Integer integer0 = new Integer(1388);
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1388", string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1173);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1572);
      assertArrayEquals(new int[] {1572, (-1173)}, intArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2946;
      shortArray0[3] = (short) (-56);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2946);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2946, (short) (-56), (short)2946}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2187), (-1802));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2248;
      floatArray0[1] = (float) (-1802);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1173);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)2946, (-1173));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 16;
      intArray0[1] = (-1479);
      intArray0[2] = 2248;
      intArray0[3] = 57;
      intArray0[4] = 1572;
      intArray0[5] = 0;
      intArray0[6] = 1283;
      intArray0[7] = (-67);
      intArray0[8] = (-1173);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertArrayEquals(new int[] {0, 16, (-1479), 2248, 57, 1572, 0, 1283, (-67), (-1173)}, intArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (-108), 0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 57;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) 1283;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 57;
      floatArray0[7] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 57, 312);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte) (-101);
      longArray0[4] = (long) (byte) (-101);
      ArrayUtils.shift(longArray0, (int) (byte) (-101), 2015, (int) (byte) (-101));
      assertArrayEquals(new long[] {(-101L), (-101L), (-101L), (-101L), (-101L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      long[] longArray0 = new long[15];
      ArrayUtils.shift(longArray0, 0, 0, 929);
      assertEquals(15, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 1630, (-2706), (-2706));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2840L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      ArrayUtils.shift(longArray0, 0, (-2414), (-2126));
      assertArrayEquals(new long[] {(-2840L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      Integer integer0 = new Integer((-1770));
      ArrayUtils.hashCode((Object) integer0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.removeAllOccurences(booleanArray0, true);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-48);
      longArray0[1] = (long) (-387);
      ArrayUtils.clone(intArray0);
      ArrayUtils.swap(longArray0, (-1770), (-48), 50);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[4];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-88.1381F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1443.4724F);
      floatArray0[3] = (-629.5F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      ArrayUtils.remove(floatArray0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.isSameLength(intArray0, intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-125), (-125), 0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 75;
      intArray0[1] = 811;
      intArray0[2] = (-387);
      intArray0[3] = 1684;
      intArray0[4] = 2213;
      intArray0[5] = (-7);
      intArray0[6] = 0;
      intArray0[6] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(16, intArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      ArrayUtils.nullToEmpty(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'f';
      charArray1[4] = 'f';
      charArray1[5] = 'f';
      charArray1[6] = 'f';
      charArray1[7] = 'f';
      charArray1[8] = 'f';
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertEquals(9, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 0.0;
      ArrayUtils.reverse(objectArray0);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)36;
      ArrayUtils.shift(byteArray0, (int) (byte)36);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)36, (byte)36, (byte)0, (byte)0, (byte)36, (byte)0, (byte)36}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'Y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertEquals(3, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      float[] floatArray0 = new float[11];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 76);
      Object object0 = new Object();
      bitSet0.stream();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, 2379, 2379, 1607);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1607;
      long[] longArray1 = new long[8];
      longArray1[0] = 100L;
      longArray1[1] = (long) 1607;
      longArray1[2] = (long) 2379;
      longArray1[3] = 100L;
      longArray1[4] = (long) 1607;
      longArray1[5] = 1L;
      longArray1[6] = (long) 2379;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'q');
      ArrayUtils.addFirst((short[]) null, (short)578);
      ArrayUtils.indexesOf((boolean[]) null, true);
      ArrayUtils.removeElements(charArray1, charArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)578, Double.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 578, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      ArrayUtils.isNotEmpty((double[]) null);
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 2;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(36, booleanArray1.length);
      
      float[] floatArray2 = new float[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', (int) 'Y');
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.lastIndexOf(booleanArray0, false);
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 13);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[18];
      ArrayUtils.shuffle(booleanArray0);
      ArrayUtils.shift(booleanArray0, 13);
      assertEquals(18, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, 0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3562);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2771);
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      ArrayUtils.isNotEmpty(charArray0);
      ArrayUtils.shift(charArray0, (-2879));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2287;
      doubleArray0[1] = (double) (short) (-3562);
      doubleArray0[2] = (double) 2287;
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.isNotEmpty(shortArray1);
      ArrayUtils.swap(charArray0, (-2777), (int) (short) (-3562), (-1255));
      ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      double[] doubleArray0 = null;
      ArrayUtils.isNotEmpty((double[]) null);
      ArrayUtils.removeElements(charArray0, (char[]) null);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.nullToEmpty(floatArray0);
      char char0 = 'Q';
      int int0 = 2;
      ArrayUtils.indexesOf(charArray0, 'Q', 2);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      Integer integer0 = Integer.getInteger((String) null, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(64, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-124);
      ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-124));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte) (-101);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-101);
      intArray0[4] = (int) (byte) (-124);
      ArrayUtils.swap((char[]) null, (-48), (-502), 846);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      assertEquals((-1), int0);
      
      int[] intArray1 = new int[0];
      ArrayUtils.toObject(intArray1);
      Character character0 = new Character('{');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short)3;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 5;
      longArray0[4] = 33L;
      longArray0[5] = (long) 5;
      long[] longArray1 = ArrayUtils.insert(5, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2139029560, 2139029560, 1);
      Object object0 = new Object();
      ArrayUtils.hashCode(object0);
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (-1034);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      ArrayUtils.swap(charArray0, (int) (short) (-1034), 2305);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2139029560;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2789), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2789, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      long[] longArray0 = new long[12];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(13, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      ArrayUtils.nullToEmpty(classArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ArrayUtils.swap(charArray0, (-3016), 5);
      assertArrayEquals(new char[] {';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-930), 31, 55);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-712);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)32;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '\"';
      charArray0[2] = '&';
      charArray0[3] = '?';
      ArrayUtils.swap(charArray0, (-1479), (int) (short)32);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) '&';
      longArray0[5] = (long) (short) (-712);
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 'I';
      longArray1[1] = (long) '?';
      longArray1[2] = (-731L);
      longArray1[3] = (long) (short)32;
      longArray1[4] = (long) (short) (-1);
      longArray1[5] = (long) '?';
      longArray1[6] = (long) (short)32;
      longArray1[7] = (long) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)32, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte)91;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)58;
      intArray0[1] = 111;
      intArray0[2] = (int) (byte)91;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)9;
      intArray0[5] = (int) (byte) (-39);
      intArray0[6] = (int) (byte)91;
      intArray0[7] = (int) (byte)58;
      intArray0[8] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.shift(byteArray1, (int) (byte)59);
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'i';
      charArray0[8] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[6] = object0;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)59;
      intArray0[1] = (int) (short)59;
      intArray0[2] = (int) (short)59;
      intArray0[3] = (int) (short)59;
      intArray0[4] = 0;
      ArrayUtils.reverse(intArray0, 599, 59);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      ArrayUtils.shift(byteArray0, (-14), (int) (short)59, (int) (byte)0);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.lastIndexOf(booleanArray0, false);
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      int[] intArray0 = new int[4];
      intArray0[0] = 599;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)15;
      ArrayUtils.reverse(intArray0, 599, (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ArrayUtils.shift(byteArray0, (-911), (int) (byte)43, 599);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = 'L';
      ArrayUtils.indexOf(charArray0, 'L', (-1670));
      Float float0 = new Float((double) (-1670));
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0);
      ArrayUtils.reverse((int[]) null, (-1670), (-2086));
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 3627);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (int) (byte) (-35));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-83.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-83.0F));
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-83.0F), (-83.0F), (-83.0F)}, floatArray2, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      ArrayUtils.subarray(booleanArray1, 1, 530);
      ArrayUtils.swap(doubleArray0, 1, 1, 530);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer integer0 = new Integer((-3085));
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      Integer integer0 = new Integer(2735);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)33;
      ArrayUtils.isSorted((char[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)58;
      ArrayUtils.indexesOf(intArray0, 58);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)58, (-2));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 8, 8);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2287), (-2287));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Float float0 = new Float(1.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      Integer integer0 = mutableInt0.toInteger();
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      objectArray0[0] = object0;
      int[] intArray0 = new int[0];
      int int0 = 3945;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3945, 3945);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 111;
      intArray0[1] = 3;
      int[] intArray1 = new int[6];
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertArrayEquals(new int[] {111, 3, 0, 0, 0, 0}, intArray0);
      assertEquals(12, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[6] = object0;
      ArrayUtils.reverse(objectArray0);
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (int) (short)59);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1118.434F;
      floatArray0[1] = (float) (short)59;
      floatArray0[2] = (-2245.77F);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) 479;
      floatArray0[5] = 1118.434F;
      ArrayUtils.removeElements((float[]) null, floatArray0);
      Integer integer0 = new Integer(1349);
      Object object1 = new Object();
      Object object2 = ArrayUtils.toPrimitive(objectArray0[6]);
      int[] intArray0 = new int[1];
      intArray0[0] = 479;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 479, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer(2965);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      objectArray0[0] = object0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2965;
      intArray0[1] = 2965;
      intArray0[2] = 2965;
      intArray0[3] = 2965;
      intArray0[4] = 2965;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3530);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-3530));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)491;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)491);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      charArray0[3] = '-';
      charArray0[4] = '<';
      charArray0[5] = 'D';
      charArray0[6] = '&';
      charArray0[7] = '}';
      charArray0[8] = 'q';
      int int0 = ArrayUtils.indexOf(charArray0, '?', (int) (short)491);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 484;
      Class<Integer> class0 = Integer.TYPE;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '\\', (-1361));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1361);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1791), 484);
      ArrayUtils.shift(doubleArray1, (-2827), (-1361), (-1764));
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray1);
      assertArrayEquals(new double[] {(-1361.0)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-20L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertArrayEquals(new long[] {(-20L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-20L)}, longArray2);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      ArrayUtils.isSorted(intArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.lastIndexOf(shortArray0, (short)59);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 651.37917;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      ArrayUtils.toPrimitive((Boolean[]) null, true);
      ArrayUtils.isSameLength(intArray0, (int[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      MockRandom mockRandom0 = new MockRandom(684L);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 'P';
      doubleArray0[1] = (double) (-923);
      ArrayUtils.reverse(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 15;
      ArrayUtils.subarray(doubleArray1, 15, 15);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-123));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int[] intArray0 = new int[6];
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)535;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1185;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)535;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)535;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)1185;
      intArray0[6] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1185, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-65));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1261));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 474;
      ArrayUtils.swap(doubleArray0, 474, 474, 474);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayUtils.shift(doubleArray0, 996);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 94.1764;
      doubleArray0[1] = (-620.024552948262);
      doubleArray0[2] = 4278.756865093;
      doubleArray0[3] = 1.5;
      ArrayUtils.swap(doubleArray0, 91, 91);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 109L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-913);
      intArray0[1] = (-2356);
      intArray0[2] = 0;
      long[] longArray0 = new long[0];
      ArrayUtils.indexOf(longArray0, (long) (-913), 0);
      int[] intArray1 = new int[0];
      ArrayUtils.toObject(intArray1);
      Character character0 = new Character('{');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.subarray(booleanArray0, 0, 0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-913), (-913), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      int[] intArray0 = new int[6];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, (-2123), (-2123), (-2123));
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-2123));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2123);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Character character0 = new Character('m');
      Character character1 = new Character('Q');
      Character character2 = Character.valueOf('{');
      Character.valueOf('O');
      Character character3 = new Character('h');
      Character character4 = Character.valueOf('m');
      Character[] characterArray0 = new Character[5];
      Character character5 = Character.valueOf('#');
      characterArray0[0] = character5;
      characterArray0[1] = character2;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-383L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = 1L;
      longArray0[6] = (-646L);
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, 0);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('{');
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('{');
      characterArray0[3] = character3;
      Character character4 = new Character('h');
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('#');
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)59;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)59;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertEquals(12, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)59, (byte)0, (byte)0, (byte)0, (byte)59}, byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)1;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      int int0 = 0;
      ArrayUtils.shift((int[]) null, 0, 0, 0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      int int1 = 100;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 100, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1438), (byte)33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1438, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)84);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-3632L);
      ArrayUtils.toObject(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-267), (-946L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -267, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = (-136);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-136), (long) (-136));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -136, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)2, (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 5;
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-178), 2, (-1525));
      Short short0 = new Short((short) (-1));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-178);
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      ArrayUtils.shift(floatArray0, 5, (int) (short) (-1), (-69));
      assertArrayEquals(new float[] {(-178.0F), 5.0F, 2.0F, (-1.0F), 2.0F, 2.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-2198), (-2198), (-2198));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 2510.0F;
      floatArray0[2] = 2510.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2510.0F);
      assertEquals("{1, 2}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.lastIndexOf(shortArray0, (short) (-1300), 2110458067);
      double[] doubleArray0 = ArrayUtils.insert(2345, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-913);
      floatArray0[2] = (float) (-2346);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 687.0F;
      ArrayUtils.indexesOf(floatArray0, 687.0F, (-913));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2510.0F);
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*%";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 2320.1523F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      Double double1 = new Double(0.0);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 937.2716867176, (int) (byte) (-23), Double.NaN);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-23));
      assertArrayEquals(new byte[] {(byte) (-23)}, byteArray0);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift((long[]) null, (int) (byte)50, 574, Integer.MAX_VALUE);
      double[] doubleArray3 = ArrayUtils.insert(57, doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1529.2F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (byte) (-101));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2122);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2122));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1389;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4383);
      shortArray0[1] = (short) (-2818);
      shortArray0[2] = (short)679;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2224);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)609;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte) (-113);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
  }
}
