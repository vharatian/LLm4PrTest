/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:34:22 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.text.Collator;
import java.time.DayOfWeek;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoEra;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.function.Supplier;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1971));
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = new Integer(1);
      integerArray0[2] = integer1;
      Integer integer2 = ObjectUtils.median(integerArray0);
      assertEquals((-1971), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((long)int0, 0L, 1L, 0L, 1L).when(toLongFunction0).applyAsLong(any());
      Comparator<HashMap<Integer, Integer>> comparator0 = Comparator.comparingLong((ToLongFunction<? super HashMap<Integer, Integer>>) toLongFunction0);
      HashMap<Integer, Integer>[] hashMapArray0 = (HashMap<Integer, Integer>[]) Array.newInstance(HashMap.class, 3);
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      hashMapArray0[0] = (HashMap<Integer, Integer>) linkedHashMap0;
      hashMapArray0[1] = (HashMap<Integer, Integer>) linkedHashMap0;
      hashMapArray0[2] = (HashMap<Integer, Integer>) linkedHashMap0;
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.median(comparator0, hashMapArray0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DayOfWeek[] dayOfWeekArray0 = new DayOfWeek[8];
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      dayOfWeekArray0[0] = dayOfWeek0;
      DayOfWeek dayOfWeek1 = ObjectUtils.max(dayOfWeekArray0);
      assertSame(dayOfWeek1, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(953312, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(31);
      HashMap<Object, Integer> hashMap1 = ObjectUtils.defaultIfNull(hashMap0, (HashMap<Object, Integer>) null);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(32767);
      short short0 = ObjectUtils.CONST_SHORT((int) integer0);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Double>[] hashMapArray0 = (HashMap<Double, Double>[]) Array.newInstance(HashMap.class, 7);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMapArray0[0] = hashMap0;
      LinkedHashMap<Double, Double> linkedHashMap0 = new LinkedHashMap<Double, Double>();
      hashMapArray0[1] = (HashMap<Double, Double>) linkedHashMap0;
      hashMapArray0[2] = hashMapArray0[0];
      hashMapArray0[3] = hashMapArray0[2];
      HashMap<Double, Double> hashMap1 = ObjectUtils.mode(hashMapArray0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ThaiBuddhistEra[] thaiBuddhistEraArray0 = new ThaiBuddhistEra[7];
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      thaiBuddhistEraArray0[0] = thaiBuddhistEra0;
      thaiBuddhistEraArray0[1] = thaiBuddhistEraArray0[0];
      thaiBuddhistEraArray0[2] = thaiBuddhistEra0;
      thaiBuddhistEraArray0[3] = thaiBuddhistEra0;
      thaiBuddhistEraArray0[4] = thaiBuddhistEraArray0[2];
      thaiBuddhistEraArray0[5] = thaiBuddhistEraArray0[1];
      thaiBuddhistEraArray0[6] = thaiBuddhistEra0;
      ThaiBuddhistEra thaiBuddhistEra1 = ObjectUtils.median(thaiBuddhistEraArray0);
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 9);
      int int0 = ObjectUtils.hashCodeMulti(comparableArray0);
      assertEquals((-196513505), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology chronology0 = japaneseDate0.getChronology();
      ChronoLocalDate chronoLocalDate0 = chronology0.dateEpochDay((-24));
      int int0 = ObjectUtils.compare(chronoLocalDate0, (ChronoLocalDate) japaneseDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ObjectUtils.clone(object0);
      Object object2 = ObjectUtils.cloneIfPossible(object1);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1103));
      assertEquals((short) (-1103), short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) (-3935));
      assertEquals((-3935L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-1442));
      assertEquals((-1442), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-162.296F));
      assertEquals((-162.296F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = ObjectUtils.CONST(3604.744233339579);
      assertEquals(3604.744233339579, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = ObjectUtils.CONST('<');
      assertEquals('<', char0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char char0 = ObjectUtils.CONST('4');
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) linkedHashMap0;
      linkedHashMap0.put(objectArray0[0], objectArray0[0]);
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) null, (Object[]) comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) collator0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.RuleBasedCollator cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)ObjectUtils.firstNonNull(objectArray0);
      assertEquals(0, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = ObjectUtils.firstNonNull((Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Object object0 = ObjectUtils.firstNonNull((Object[]) comparableArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-2105));
      boolean boolean0 = ObjectUtils.equals((Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[7];
      int int0 = ObjectUtils.compare(integer0, integerArray0[1], false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = ObjectUtils.compare(integer0, (Integer) int0, false);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(780);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-667));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = ObjectUtils.compare((Integer) null, (Integer) null, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer((-24));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "", (Supplier<String>) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "Al61Oa+?LaI");
      assertEquals("Al61Oa+?LaI", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "*a3");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object[] objectArray0 = new Object[12];
      objectArray0[11] = (Object) linkedHashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) hashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      Object object0 = ObjectUtils.mode((Object[]) comparableArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DayOfWeek[] dayOfWeekArray0 = new DayOfWeek[8];
      ObjectUtils.max(dayOfWeekArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = ObjectUtils.max((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isNotEmpty(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashMap<FormatStyle, FormatStyle> linkedHashMap0 = new LinkedHashMap<FormatStyle, FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      linkedHashMap0.put(formatStyle0, formatStyle0);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.isNotEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isEmpty(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.ROC;
      String string0 = ObjectUtils.identityToString((Object) minguoEra0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      ObjectUtils.hashCode(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Supplier<Comparable<Object>> supplier0 = (Supplier<Comparable<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Comparable<Object> comparable0 = ObjectUtils.getIfNull((Comparable<Object>) null, supplier0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = ObjectUtils.getIfNull((Object) null, (Supplier<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 8);
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = ObjectUtils.getFirstNonNull((Supplier<Object>[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = ObjectUtils.defaultIfNull((Object) hashMap0, (Object) hashMap0);
      hashMap0.put(object0, object0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible((Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception cloning Cloneable type java.util.HashMap
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.defaultIfNull((Comparable<Object>) null, (Comparable<Object>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(32789);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [32789]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-32791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-32791]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((short)941);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [941]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-834]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      TextStyle textStyle1 = TextStyle.SHORT;
      int int0 = ObjectUtils.compare(textStyle0, textStyle1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IsoEra[] isoEraArray0 = new IsoEra[2];
      IsoEra isoEra0 = IsoEra.CE;
      isoEraArray0[0] = isoEra0;
      IsoEra isoEra1 = ObjectUtils.min(isoEraArray0);
      assertSame(isoEra1, isoEra0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(97);
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = ObjectUtils.cloneIfPossible(hashMap0);
      assertNotSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      boolean boolean0 = ObjectUtils.anyNull(comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[4] = integer0;
      boolean boolean0 = ObjectUtils.allNull(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = ObjectUtils.CONST(2.0368F);
      assertEquals(2.0368F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(304L);
      MutableInt mutableInt0 = new MutableInt(long0);
      Integer integer0 = mutableInt0.toInteger();
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Integer@3");
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      assertEquals(38, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-571.1680529));
      assertEquals((-571.1680529), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char char0 = ObjectUtils.CONST('P');
      assertEquals('P', char0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)72);
      assertEquals((byte)72, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      ObjectUtils.identityToString((Appendable) stringBuffer0, (Object) minguoEra0);
      assertEquals(28, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1105);
      ObjectUtils.identityToString(stringBuilder0, (Object) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = ObjectUtils.CONST(43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      int int0 = ObjectUtils.compare(textStyle0, textStyle0);
      assertEquals(0, int0);
  }
}
