/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:29:25 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatCodePointException;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-2985));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1614, 1614).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1361));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(", element2=").when(comparator0).toString();
      doReturn((-783), 37, (-783)).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      Comparator<Object> comparator1 = range1.getComparator();
      Range<Object> range2 = Range.between((Object) range0, object0, comparator1);
      boolean boolean0 = range2.isEndedBy(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2789));
      Integer integer1 = new Integer((-525));
      Range<Integer> range0 = Range.between(integer0, integer1);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(37);
      Range<Integer> range0 = Range.is(integer0);
      String string0 = range0.toString("i8rc_n:x,#Y");
      assertEquals("i8rc_n:x,#Y", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      String string0 = range0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-62));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-62), (-882), (-62), (-1), 17).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      range0.fit(integer0);
      boolean boolean0 = range0.isAfterRange(range0);
      range0.fit(integer0);
      boolean boolean1 = range0.isBeforeRange(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(139);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Range range1 = (Range)range0.fit(range0);
      assertFalse(range1.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(239);
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.toString("CSS=T%TO#2/YO'");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'tO'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(35);
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.toString("The value is invalid: %f");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-959));
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.toString("/%6cEsL");
        fail("Expecting exception: IllegalFormatCodePointException");
      
      } catch(IllegalFormatCodePointException e) {
         //
         // Code point = 0xfffffc41
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1373));
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Object> range0 = Range.is((Object) "%cz%kuec@|\"fJ'", (Comparator<Object>) null);
      Comparator<Object> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.isOverlappedBy(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "[1..1]", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isBeforeRange(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "[1..1]", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.isAfterRange(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((Integer) null, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.is(object0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "[1..1]", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1904));
      Range<Integer> range0 = Range.between(integer0, integer0);
      // Undeclared exception!
      try { 
        range0.fit((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.fit(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.between(integer0, integer0);
      // Undeclared exception!
      try { 
        range0.elementCompareTo((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range<Object> range0 = Range.is((Object) "z9sDgm.esaQj1h.V#9", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.elementCompareTo(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "[1..1]", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.containsRange(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-1574));
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.contains("[-1574..-1574]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.between(object0, object0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-1596));
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      String string0 = range0.toString();
      assertEquals("[-1596..-1596]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(1277);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer1, comparator0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      boolean boolean0 = range2.isOverlappedBy(range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1894));
      Range<Integer> range0 = Range.is(integer0, (Comparator<Integer>) null);
      boolean boolean0 = range0.isOverlappedBy((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-934));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-934), 1).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      boolean boolean0 = range0.isBefore(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isBefore(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-1892));
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.isBefore(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(42);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isAfter(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Range<Integer> range0 = Range.is(integer1);
      boolean boolean0 = range0.isAfter(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(150);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.isAfter(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(139);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("x3bpL*913").when(comparator0).toString();
      doReturn((-715), (-715)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      Range<Object> range1 = Range.between((Object) integer0, (Object) integer0, comparator1);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(139);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      Integer integer1 = new Integer(3);
      Range<Object> range1 = Range.is((Object) integer1, comparator1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) integer0, (Object) "s+casRsQt\u0002eJj6V", comparator0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("%cz%kuec@|\"fJ'", (String) null).when(comparator0).toString();
      doReturn((-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) comparator0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(org.apache.commons.lang3.Range.class) , any(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.between(range0, range0, comparator1);
      Object object0 = range1.getMinimum();
      boolean boolean0 = range0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-188));
      Range<Integer> range0 = Range.between(integer1, integer1);
      boolean boolean0 = range0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(2768);
      Integer integer2 = range0.fit(integer1);
      assertEquals(1, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(534);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-1669));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Integer integer1 = new Integer((-3786));
      boolean boolean0 = range0.isStartedBy(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(1146);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isStartedBy((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-1924));
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.isStartedBy(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-624));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.between(integer1, integer1, comparator0);
      boolean boolean0 = range1.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(1505);
      Range<Integer> range0 = Range.between(integer0, integer0);
      // Undeclared exception!
      try { 
        range0.intersectionWith((Range<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(139);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-715)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isEndedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(863954);
      boolean boolean0 = range0.isEndedBy(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isEndedBy((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      Range<Integer> range0 = Range.is(integer0);
      Comparator<Integer> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) comparator0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isEndedBy(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer(1260);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isBeforeRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(37);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isBefore((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(37);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isAfterRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(1408);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isAfter((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(139);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-715), (-715), 1, (-715), (-715)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Range<Object> range1 = range0.intersectionWith(range0);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [139..139]
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Range<Integer> range0 = Range.is(integer0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-2850));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-2056));
      Range<Integer> range1 = Range.between(integer0, integer1);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(145);
      Integer integer1 = new Integer((-3));
      Range<Integer> range0 = Range.between(integer1, integer0);
      Range<Integer> range1 = Range.is(integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-1924));
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-1145));
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(2);
      int int0 = range0.elementCompareTo(integer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(2628);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-783));
      int int0 = range0.elementCompareTo(integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer((-818));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-80));
      Range<Integer> range1 = Range.between(integer0, integer1);
      boolean boolean0 = range0.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(2414);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(2529);
      Range<Integer> range1 = Range.is(integer1);
      boolean boolean0 = range1.containsRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(37);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.containsRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(2414);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-1022));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-628));
      Range<Integer> range1 = Range.between(integer1, integer1);
      boolean boolean0 = range1.isOverlappedBy(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(1771);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(88);
      boolean boolean0 = range0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.contains((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(1771);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer((-1620));
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=-1620, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between((Integer) null, (Integer) null, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.is(integer0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(1204);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.toString("fX9l0% C*uEZVAOll");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags =  
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(534);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Object object1 = range0.getMaximum();
      assertSame(object1, object0);
  }
}
