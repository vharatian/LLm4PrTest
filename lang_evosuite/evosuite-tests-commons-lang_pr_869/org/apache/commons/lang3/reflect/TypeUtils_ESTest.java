/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:34:35 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Map;
import org.apache.commons.lang3.reflect.TypeUtils;
import org.apache.commons.lang3.reflect.Typed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.Description;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[4];
      typeArray0[2] = (Type) typeUtils0.WILDCARD_ALL;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.equals(typeArray0[2], (Type) wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Description description0 = Description.createTestDescription("org.junitpioneer.jupiter.AbstractEntryBasedExtension", (String) null, (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) genericArrayType0;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid number of type parameters specified: expected 4, got 3
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      boolean boolean0 = TypeUtils.containsTypeVariables(wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      // Undeclared exception!
      try { 
        TypeUtils.getRawType(genericArrayType0, wildcardType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Description description0 = Description.createTestDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      Type[] typeArray1 = new Type[4];
      typeArray1[0] = (Type) genericArrayType0;
      typeArray1[1] = (Type) genericArrayType0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      typeArray1[2] = (Type) wildcardType0;
      typeArray1[3] = (Type) genericArrayType0;
      Type[] typeArray2 = TypeUtils.normalizeUpperBounds(typeArray1);
      assertEquals(2, typeArray2.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Type type0 = TypeUtils.unrollVariables((Map<TypeVariable<?>, Type>) null, (Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterizeWithOwner((Type) null, class0, map0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertSame(typeArray1, typeArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      Class<Annotation> class1 = Annotation.class;
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class1, map0);
      Map<TypeVariable<?>, Type> map1 = TypeUtils.getTypeArguments(parameterizedType0);
      assertTrue(map1.equals((Object)map0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Class<?> class1 = TypeUtils.getRawType(parameterizedType0, class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      Class<?> class1 = TypeUtils.getRawType(parameterizedType0, parameterizedType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) parameterizedType0;
      typeArray0[3] = (Type) class1;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      assertEquals(0, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.typesSatisfyVariables((Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeVarAssigns is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) wildcardType0, (Class<?>) class0, (Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeArgMappings is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, (Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeArgMappings is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.normalizeUpperBounds((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value specified for bounds array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      Type[] typeArray0 = new Type[2];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      // Undeclared exception!
      try { 
        TypeUtils.isAssignable(wildcardType0, parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getImplicitUpperBounds((WildcardType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // wildcardType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getImplicitLowerBounds((WildcardType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // wildcardType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.genericArrayType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // componentType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.determineTypeArguments(class0, (ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // superType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Description description0 = Description.createTestDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      String string0 = TypeUtils.toString((Type) class0);
      assertEquals("org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.equals((Type) typeUtils0.WILDCARD_ALL, (Type) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(wildcardType0);
      boolean boolean0 = TypeUtils.equals((Type) genericArrayType0, (Type) wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.equals((Type) null, (Type) typeUtils0.WILDCARD_ALL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.equals((Type) wildcardType0, (Type) wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterizeWithOwner((Type) null, (Class<?>) class0, typeArray0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) null, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid number of type parameters specified: expected 0, got 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Description description0 = Description.createTestDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      Type[] typeArray0 = new Type[9];
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner(typeArray0[2], class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null type argument at index 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) class0, (Class<?>) class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no owner allowed for top-level class java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) null, class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.containsTypeVariables(genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.containsTypeVariables(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = TypeUtils.getRawType(class0, class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[7];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0);
      assertEquals(7, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Typed<Class<Integer>> typed0 = TypeUtils.wrap((Type) class0);
      assertNotNull(typed0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      String string0 = TypeUtils.toString((Type) wildcardType0);
      assertEquals("? super java.lang.annotation.Annotation & java.lang.annotation.Annotation & java.lang.annotation.Annotation & java.lang.annotation.Annotation", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[1];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) wildcardType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = TypeUtils.toString((Type) typeUtils0.WILDCARD_ALL);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[18];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) wildcardType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder0.build();
      String string0 = TypeUtils.toString((Type) wildcardType1);
      assertEquals("? super java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitLowerBounds(wildcardType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder1.build();
      assertTrue(wildcardType1.equals((Object)wildcardType0));
      
      String string0 = TypeUtils.toString((Type) wildcardType1);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      String string0 = TypeUtils.toString((Type) class1);
      assertEquals("java.lang.annotation.Annotation[]", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) wildcardType0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(typeArray0[0], wildcardType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(wildcardType0);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(genericArrayType0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType1, genericArrayType0);
      assertFalse(genericArrayType0.equals((Object)genericArrayType1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      boolean boolean0 = TypeUtils.containsTypeVariables(parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type type0 = TypeUtils.unrollVariables((Map<TypeVariable<?>, Type>) null, wildcardType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      Class class1 = (Class)TypeUtils.unrollVariables(map0, class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class class1 = (Class)TypeUtils.getArrayComponentType(genericArrayType0);
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      Class class2 = (Class)TypeUtils.getArrayComponentType(class1);
      assertTrue(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type type0 = TypeUtils.getArrayComponentType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Type type0 = TypeUtils.getArrayComponentType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) genericArrayType0;
      Class<?> class1 = TypeUtils.getRawType(typeArray0[0], typeArray0[3]);
      typeArray0[0] = (Type) class1;
      boolean boolean0 = TypeUtils.isArrayType(typeArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isArrayType(wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isArrayType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(wildcardType0);
      boolean boolean0 = TypeUtils.isArrayType(genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Class<?> class0 = TypeUtils.getRawType(wildcardType0, wildcardType0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawType((Type) null, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      boolean boolean0 = TypeUtils.typesSatisfyVariables(map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isInstance((Object) null, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isInstance((Object) null, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = TypeUtils.isInstance((Object) null, (Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Integer> class1 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[2];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) genericArrayType0, class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) genericArrayType0, (Class<?>) class0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[1];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder0.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType1, wildcardType0);
      assertTrue(boolean0);
      assertFalse(wildcardType0.equals((Object)wildcardType1));
      assertFalse(wildcardType1.equals((Object)wildcardType0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[2];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType1);
      assertFalse(boolean0);
      assertFalse(wildcardType0.equals((Object)wildcardType1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) typeUtils0.WILDCARD_ALL;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) genericArrayType0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, typeArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) genericArrayType0;
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(typeArray0[1]);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType1, genericArrayType0);
      boolean boolean0 = TypeUtils.isAssignable(class1, genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, class0);
      boolean boolean0 = TypeUtils.isAssignable(class1, genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      Type[] typeArray0 = new Type[11];
      typeArray0[10] = (Type) parameterizedType0;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      WildcardType wildcardType1 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType1);
      assertTrue(boolean0);
      assertTrue(wildcardType1.equals((Object)wildcardType0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isInstance(wildcardType0, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      Class<Annotation> class1 = Annotation.class;
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class1, map0);
      ParameterizedType parameterizedType1 = TypeUtils.parameterize(class0, map0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType1, parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      assertNotNull(map0);
      
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      ParameterizedType parameterizedType1 = TypeUtils.parameterize(class0, map0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType1);
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.equals((Type) parameterizedType0, (Type) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Integer> class0 = Integer.class;
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType1, genericArrayType0);
      assertTrue(boolean0);
      assertTrue(genericArrayType1.equals((Object)genericArrayType0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Description description0 = Description.createSuiteDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) parameterizedType0, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Description description0 = Description.createTestDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      Type[] typeArray0 = new Type[9];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      typeArray0[2] = (Type) wildcardType0;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner(typeArray0[2], class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ? is invalid owner type for parameterized class org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) typeUtils0.WILDCARD_ALL;
      typeArray0[1] = (Type) typeUtils0.WILDCARD_ALL;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Description description0 = Description.createSuiteDescription("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", (Annotation[]) null);
      Class<?> class0 = description0.getTestClass();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[13];
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) genericArrayType0, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl[] is invalid owner type for parameterized class org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      assertNotNull(map0);
      
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, map0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) parameterizedType0;
      typeArray0[1] = (Type) parameterizedType0;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) class0, (Class<?>) class0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no owner allowed for top-level class java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAssignable((Type) null, (Type) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      String string0 = TypeUtils.toString((Type) genericArrayType0);
      assertEquals("java.lang.annotation.Annotation[]", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Typed<Annotation> typed0 = TypeUtils.wrap(class0);
      assertNotNull(typed0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
