/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:27:10 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 890.462F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {890.462F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 9);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      longArray0[2] = (long) 9;
      longArray0[3] = (long) 9;
      longArray0[4] = (long) 9;
      longArray0[5] = 77L;
      longArray0[6] = (long) 9;
      longArray0[7] = (long) 9;
      longArray0[8] = (long) 9;
      ArrayUtils.swap(longArray0, 9, 9, (-1));
      assertArrayEquals(new long[] {9L, 9L, 9L, 9L, 9L, 77L, 9L, 9L, 9L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3932.361F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2306.7F, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {3932.361F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((-2537));
      assertEquals((-2537), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(8, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1126));
      assertEquals((-1126), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      assertEquals(1, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1280));
      assertEquals((-1280), (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)7);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      ArrayUtils.shift(objectArray0, 0, 1264, 100);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)64;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)44, (int) (byte)44);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)41, (byte)1, (byte)64}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.remove(integerArray0, 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4088);
      shortArray0[1] = (short)1071;
      shortArray0[2] = (short) (-1307);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)68;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-736);
      shortArray0[7] = (short) (-1454);
      short[] shortArray1 = ArrayUtils.insert(8, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-4088), (short)1071, (short) (-1307), (short) (-1), (short)68, (short) (-1), (short) (-736), (short) (-1454)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)85;
      shortArray0[1] = (short)61;
      shortArray0[2] = (short)2867;
      shortArray0[3] = (short)489;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1277;
      shortArray0[6] = (short)3;
      shortArray0[7] = (short) (-466);
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)61;
      shortArray1[1] = (short)1277;
      shortArray1[2] = (short)61;
      shortArray1[3] = (short)2867;
      shortArray1[4] = (short) (-709);
      shortArray1[5] = (short) (-466);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)85, (short)489, (short) (-1), (short)3}, shortArray2);
      assertArrayEquals(new short[] {(short)85, (short)61, (short)2867, (short)489, (short) (-1), (short)1277, (short)3, (short) (-466)}, shortArray0);
      assertArrayEquals(new short[] {(short)61, (short)1277, (short)61, (short)2867, (short) (-709), (short) (-466)}, shortArray1);
      assertEquals(4, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2867, (-3348), (int) (short)3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)85, (short)61, (short)2867, (short)489, (short) (-1), (short)1277, (short)3, (short) (-466)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-674L);
      longArray0[1] = 382L;
      longArray0[2] = 438L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = 615L;
      longArray0[6] = (-1L);
      longArray0[7] = (-391L);
      longArray0[8] = 396L;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-674L), 382L, 438L, 1L, 0L, 615L, (-1L), (-391L), 396L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "ke_hFOpap");
      assertNotNull(stringArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 959;
      intArray0[1] = 5;
      intArray0[2] = (-1622);
      intArray0[3] = 659;
      intArray0[4] = 449;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1622), 5);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {959, 5, (-1622), 659, 449}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      short short0 = (short)37;
      Integer[] integerArray0 = new Integer[3];
      int int0 = 16;
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2195));
      assertEquals((-2195), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)37);
      assertEquals(37, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = new Integer[7];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[2] = integer2;
      integerArray1[4] = integer2;
      integerArray1[5] = integer1;
      integerArray1[6] = integer1;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray1[6];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, int0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2195.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short) (-1019));
      assertEquals((short) (-1019), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)37);
      assertEquals((short)37, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1019), (short)37}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Double double0 = new Double((-175.0));
      assertEquals((-175.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-175.0), (-175.0), (-175.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-175.0), (-175.0), (-175.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('y', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('y', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('y');
      assertEquals('y', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('y');
      assertEquals('y', (char)character4);
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertEquals('y', (char)character5);
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertEquals('y', (char)character6);
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character1));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertEquals('y', (char)character7);
      assertTrue(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character4));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2386;
      intArray0[1] = (int) (char)character1;
      ArrayUtils.swap(intArray0, 2, (-2860), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {2386, 121}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(283.4264803007638);
      assertEquals(283.4264803007638, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1493.005452104);
      assertEquals(1493.005452104, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2691.23);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {283.4264803007638, 1493.005452104}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      ArrayUtils.swap(charArray0, 2, 35, 13);
      assertArrayEquals(new char[] {'.', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'R';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) '.';
      ArrayUtils.swap(floatArray0, 363, (-289), 35);
      assertArrayEquals(new float[] {82.0F, 46.0F, 82.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      BitSet bitSet0 = new BitSet(1473);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1536, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1473;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 4, 4.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1473.0, 4.0, 5.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 5;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {4, 4, 4, 5}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2047);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2047 cap=2047]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(2047, byteBuffer0.remaining());
      assertEquals(2047, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2047, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2047 cap=2047]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(2047, byteBuffer0.remaining());
      assertEquals(2047, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2047, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2047 cap=2047]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(2047, byteBuffer0.remaining());
      assertEquals(2047, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2047, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.toPrimitive(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(object2, object4);
      assertNotSame(object4, object1);
      assertSame(object4, object2);
      assertNotSame(object4, object0);
      
      objectArray0[4] = object4;
      Object object5 = ArrayUtils.get(objectArray0, 2047);
      assertNull(object5);
      assertEquals(7, objectArray0.length);
      
      objectArray0[5] = null;
      Object object6 = ArrayUtils.get(objectArray0, 78, object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(object2, object6);
      assertSame(object2, object4);
      assertSame(object6, object4);
      assertSame(object6, object2);
      assertNotSame(object6, object1);
      assertNotSame(object6, object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[6] = object6;
      ArrayUtils.swap(objectArray0, (-1073741824), 7, (-1073741824));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-598.2504112));
      assertEquals((-598.2504F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((-598.2504F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1290.0472F));
      assertEquals((-1290.0472F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((-598.2504F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(4, floatArray0.length);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-598.2504F), (-598.2504F), (-1290.0472F), (-598.2504F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 962, 2, 2);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 962;
      doubleArray0[1] = (double) 962;
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) (-2220);
      doubleArray0[4] = 2880.31172884;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1454, 489);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {962.0, 962.0, 82.0, (-2220.0), 2880.31172884}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-97));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-97));
      assertNull(shortArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, 2, 128, 46);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2255.549F;
      floatArray0[1] = 945.93774F;
      floatArray0[2] = (-2351.9F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1858.4226F;
      floatArray0[5] = 3592.4172F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2255.549F, 945.93774F, (-2351.9F), (-1.0F), 1858.4226F, 3592.4172F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2255.549F, 945.93774F, (-2351.9F), 1858.4226F, 3592.4172F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2351.9F);
      doubleArray0[1] = (double) (-2351.9F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-2351.9F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2351.9F), (-475), (double) 945.93774F);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-2351.89990234375), (-2351.89990234375), (-1.0), (-2351.89990234375)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-475);
      longArray0[1] = (long) (-475);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-475);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-475);
      ArrayUtils.swap(longArray0, 127, 70, 127);
      assertArrayEquals(new long[] {(-475L), (-475L), 0L, (-475L), 0L, 0L, 0L, (-475L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Integer integer0 = new Integer((-111));
      assertEquals((-111), (int)integer0);
      assertNotNull(integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-105);
      ArrayUtils.shift(byteArray0, (int) (byte) (-105), 397, 59);
      assertArrayEquals(new byte[] {(byte)62, (byte)1, (byte) (-105), (byte)118}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, '_');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1628.6889887149557;
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)10;
      floatArray0[1] = (float) (byte)10;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {10.0F, 10.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)10;
      shortArray0[1] = (short) (byte)10;
      shortArray0[2] = (short) (byte)10;
      shortArray0[3] = (short) (byte)10;
      shortArray0[4] = (short) (byte)10;
      shortArray0[5] = (short) (byte)10;
      shortArray0[6] = (short) (byte)10;
      shortArray0[7] = (short)45;
      shortArray0[8] = (short) (byte)10;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)10, (-2189));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)10, (short)10, (short)10, (short)10, (short)10, (short)10, (short)10, (short)45, (short)10}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = "CO!jX=mq";
      stringArray0[2] = "org.apache.commons.lang3.math.NumberUtils";
      stringArray0[3] = "@-0hbVQ0JZj";
      stringArray0[4] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-70);
      shortArray0[1] = (short)4104;
      shortArray0[2] = (short) (-1160);
      shortArray0[3] = (short)65;
      shortArray0[4] = (short)2467;
      ArrayUtils.shift(shortArray0, (-2360), 5, (-1904));
      assertArrayEquals(new short[] {(short)2467, (short) (-70), (short)4104, (short) (-1160), (short)65}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'k';
      floatArray0[2] = (float) 'k';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {107.0F, 107.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer integer0 = new Integer(2146814414);
      assertEquals(2146814414, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2077;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2077;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Integer integer0 = Integer.valueOf(948);
      assertEquals(948, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 948;
      floatArray0[1] = (float) 948;
      ArrayUtils.shift(floatArray0, 37, 948, 948);
      assertArrayEquals(new float[] {948.0F, 948.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Double double0 = new Double((-175.0));
      assertEquals((-175.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      long[] longArray0 = new long[9];
      longArray0[0] = (-3638L);
      longArray0[1] = (-3638L);
      longArray0[2] = (-3638L);
      longArray0[3] = (-719L);
      longArray0[4] = (-3638L);
      longArray0[5] = 0L;
      longArray0[6] = 1795L;
      longArray0[7] = (-3638L);
      longArray0[8] = (-3638L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-3638L), (-3638L), (-3638L), (-719L), (-3638L), 0L, 1795L, (-3638L), (-3638L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 't';
      charArray0[2] = 'q';
      charArray0[3] = '9';
      charArray0[4] = '%';
      charArray0[5] = 'c';
      charArray0[6] = 'o';
      charArray0[7] = '>';
      charArray0[8] = '+';
      ArrayUtils.shift(charArray0, 1, 1, (-2656));
      assertArrayEquals(new char[] {'[', 't', 'q', '9', '%', 'c', 'o', '>', '+'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1057);
      intArray0[1] = (-289);
      intArray0[2] = (-240);
      intArray0[3] = 1919;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1919);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1057), (-289), (-240), 1919}, intArray0);
      assertEquals(4, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) (-289);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '#';
      floatArray0[4] = (float) 1919;
      floatArray0[5] = (float) '/';
      floatArray0[6] = (float) (-240);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-289.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {35.0F, (-289.0F), 1.0F, 35.0F, 1919.0F, 47.0F, (-240.0F), (-289.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {35.0F, (-289.0F), 1.0F, 35.0F, 1919.0F, 47.0F, (-240.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-1);
      integerArray0[8] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.insert(2, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(18, integerArray1.length);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)122);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (-571L);
      longArray0[2] = (-2319L);
      longArray0[3] = 102L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-571L), (-2319L), 102L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift(longArray0, 1, 1, 1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), (-571L), (-2319L), 102L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1757);
      shortArray0[2] = (short) (-171);
      ArrayUtils.swap(shortArray0, (int) (short)2, (int) (short) (-1757), (int) (short) (-1757));
      assertArrayEquals(new short[] {(short)2, (short) (-1757), (short) (-171)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("");
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1203.6617F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-1203.6617F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-37), (byte)20, (byte) (-27), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-37), (byte) (-22), (byte) (-37), (byte)20, (byte) (-27), (byte)0, (byte)20, (byte) (-27), (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-27);
      intArray0[1] = (int) (byte) (-37);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (int) (byte) (-37);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-37));
      assertEquals(5, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 4}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-27), (-37), 2, 2, (-37)}, intArray0);
      assertEquals(5, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ArrayUtils.shift(charArray0, (-1383), 2, 125);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 531.0F;
      floatArray0[1] = 3192.4F;
      floatArray0[2] = (-2007.4705F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {531.0F, 3192.4F, (-2007.4705F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {531.0F, 3192.4F, (-2007.4705F), (-1.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray2.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)225;
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short)89;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)108;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)89);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)225, (short) (-26), (short)89, (short)4, (short)108}, shortArray0);
      assertArrayEquals(new short[] {(short)89, (short)225, (short) (-26), (short)89, (short)4, (short)108}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '2';
      charArray0[2] = 'U';
      charArray0[3] = '<';
      charArray0[4] = 'm';
      charArray0[5] = '2';
      charArray0[6] = '&';
      char[] charArray1 = ArrayUtils.add(charArray0, 'H');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {']', '2', 'U', '<', 'm', '2', '&', 'H'}, charArray1);
      assertArrayEquals(new char[] {']', '2', 'U', '<', 'm', '2', '&'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      short[] shortArray0 = new short[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)112, (-769));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)112;
      float[] floatArray1 = ArrayUtils.insert((int) (short)1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {112.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {112.0F, 112.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.getInteger("\n");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 1);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-769);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-769.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-769.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap(floatArray0, (-336), 1, (-336));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-336);
      intArray0[2] = 1;
      intArray0[3] = (-336);
      intArray0[4] = 1;
      intArray0[5] = (-336);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 387, 2085);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1, (-336), 1, (-336), 1, (-336)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 387, (-1911), (double) (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2915.6);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-336);
      intArray1[1] = (-1);
      intArray1[2] = 2085;
      intArray1[3] = (-1);
      intArray1[4] = 2085;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (-1174), 256);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-336), (-1), 2085, (-1), 2085}, intArray1);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Double double0 = new Double((-175.0));
      assertEquals((-175.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-9), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, (-1994), (int) (byte)0, (-1994));
      assertArrayEquals(new byte[] {(byte)116, (byte) (-9), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)14);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-9), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)116, (byte) (-9), (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer integer0 = new Integer((byte)60);
      assertEquals(60, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) (byte)60);
      assertEquals(60.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)60);
      assertEquals(60.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-79)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-2635L);
      longArray0[2] = 846L;
      longArray0[3] = (long) (byte) (-79);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-1L), (-2635L), 846L, (-79L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'X';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2144473849, 46);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {88}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = new BitSet(2798);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2816, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 88;
      integerArray0[1] = (Integer) 88;
      integerArray0[2] = (Integer) 88;
      integerArray0[3] = (Integer) 88;
      Integer integer0 = new Integer((-19));
      assertEquals((-19), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 88;
      integerArray0[6] = (Integer) 88;
      integerArray0[7] = (Integer) 88;
      integerArray0[8] = (Integer) 88;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {88, 88, 88, 88, (-19), 88, 88, 88, 88}, intArray2);
      assertEquals(9, intArray2.length);
      assertEquals(9, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {88}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1095.0173F;
      floatArray0[3] = 775.0F;
      floatArray0[4] = (-460.401F);
      floatArray0[5] = (-1846.6F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.0F, 0.0F, 1095.0173F, 775.0F, (-460.401F), (-1846.6F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 775.0F;
      doubleArray0[1] = (double) 775.0F;
      doubleArray0[2] = (double) 775.0F;
      doubleArray0[3] = (double) (-460.401F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 79.0, Integer.MAX_VALUE, (double) 775.0F);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {775.0, 775.0, 775.0, (-460.4010009765625)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 3;
      intArray0[8] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.remove(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 3, 3, 3, Integer.MAX_VALUE, Integer.MAX_VALUE, 3, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 3, 3, 3, 3, Integer.MAX_VALUE, Integer.MAX_VALUE, 3, Integer.MAX_VALUE}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean1 = new Boolean("~<qizQuB{H^5ij9");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("~<qizQuB{H^5ij9");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = new Boolean("k{2 J=");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray1[5] = boolean6;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer integer0 = new Integer((-1254));
      assertEquals((-1254), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[0]);
      assertEquals((-1254), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(10, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1254));
      assertEquals((-1254), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(10, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) integerArray0[1];
      intArray0[2] = (int) integer2;
      intArray0[3] = (int) integerArray0[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1254);
      doubleArray0[2] = (double) (-1254);
      doubleArray0[3] = (double) (-1254);
      ArrayUtils.shift(doubleArray0, (-1254));
      assertArrayEquals(new double[] {(-1254.0), (-1254.0), (-1254.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-1), (byte)88, (byte)1, (byte) (-1), (byte) (-42), (byte)2, (byte)35, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-1), (byte)88, (byte)1, (byte) (-1), (byte) (-42), (byte)2, (byte)35, (byte) (-1)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)55, (byte)55, (byte) (-40), (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 3548L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1628.6889887149557;
      byte byte0 = (byte) (-32);
      byte byte1 = (byte)10;
      Byte byte2 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      int[] intArray0 = new int[1];
      doubleArray0[1] = (double) (byte) (-32);
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)9;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-32));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-32), (byte) (-32), (byte)62, (byte) (-32), (byte) (-32), (byte)10, (byte)9}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-749L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1), (Object) integer0);
      assertEquals((-1), object1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[1] = object1;
      Integer integer1 = new Integer(2146004664);
      assertEquals(2146004664, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object2 = ArrayUtils.get(objectArray0, 1824, (Object) integer1);
      assertEquals(2146004664, object2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)int0));
      assertFalse(object2.equals((Object)integer0));
      assertNotNull(object2);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object4);
      assertEquals(9, objectArray0.length);
      
      objectArray0[4] = null;
      Integer integer2 = Integer.getInteger("&31,ru;57<_r}^");
      assertNull(integer2);
      
      Object object5 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object5);
      
      objectArray0[5] = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(18, bitSet0.cardinality());
      assertEquals("{0, 2, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23}", bitSet0.toString());
      assertEquals(24, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object object6 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(18, bitSet0.cardinality());
      assertEquals("{0, 2, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23}", bitSet0.toString());
      assertEquals(24, bitSet0.length());
      assertNull(object6);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      objectArray0[6] = null;
      Integer integer3 = new Integer((-83));
      assertEquals((-83), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)object2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Object object7 = ArrayUtils.get(objectArray0, (int)  (-1), (Object) integer3);
      assertEquals((-83), object7);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)object2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)integer0));
      assertFalse(object7.equals((Object)int0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)integer1));
      assertNotNull(object7);
      assertEquals(9, objectArray0.length);
      
      objectArray0[7] = object7;
      Object object8 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(18, bitSet0.cardinality());
      assertEquals("{0, 2, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23}", bitSet0.toString());
      assertEquals(24, bitSet0.length());
      assertNull(object8);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      objectArray0[8] = null;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null, (-4650));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Integer integer1 = new Integer(1264);
      assertEquals(1264, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray2 = ArrayUtils.removeAllOccurences(integerArray1, (Integer) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'g';
      charArray0[2] = 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'i');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'^', 'g', 'G'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-83);
      shortArray0[2] = (short)76;
      shortArray0[3] = (short) (byte) (-83);
      ArrayUtils.shift(shortArray0, (int) (short) (-83), (int) (byte)2, (-1542));
      assertArrayEquals(new short[] {(short)2, (short) (-83), (short)76, (short) (-83)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'n';
      charArray0[2] = '_';
      charArray0[3] = 'z';
      charArray0[4] = 'x';
      charArray0[5] = '`';
      charArray0[6] = '[';
      int int0 = ArrayUtils.indexOf(charArray0, '_', (-4027));
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'c', 'n', '_', 'z', 'x', '`', '['}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-1152L));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 125.3671);
      assertNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (-4241);
      intArray0[1] = 1;
      intArray0[2] = 84;
      intArray0[3] = 13;
      int int0 = ArrayUtils.indexOf(intArray0, 13);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {(-4241), 1, 84, 13}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      ArrayUtils.swap(byteArray0, (-503), (int) (byte)2, (int) (byte)79);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)79;
      longArray0[1] = (long) (-503);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)2;
      longArray0[6] = 1L;
      longArray0[7] = (long) (byte)79;
      longArray0[8] = (long) (-503);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-27L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {79L, (-503L), 2L, 2L, 2L, 2L, 1L, 79L, (-503L)}, longArray0);
      assertArrayEquals(new long[] {79L, (-503L), 2L, 2L, 2L, 2L, 1L, 79L, (-503L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)79;
      shortArray0[2] = (short) (byte)79;
      shortArray0[3] = (short) (byte)79;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)79;
      shortArray0[6] = (short) (byte)79;
      shortArray0[7] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)79, (short)79, (short)79, (short)2, (short)79, (short)79, (short)2}, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2141.712F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2141.712F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, 647.155176154);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)57, (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      
      Integer integer2 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), integer1);
      assertEquals((-1), (int)integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integer2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1), object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(10, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(10, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) integerArray0[1];
      ArrayUtils.shift((Object[]) integerArray0, (-1272), 2660, Integer.MAX_VALUE);
      assertEquals(10, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer3);
      assertNull(object0);
      assertEquals(10, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 8);
      assertEquals((-1), int0);
      assertEquals(10, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-26), (int) (byte) (-107));
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-107), (byte) (-26), (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Integer integer1 = new Integer((byte)45);
      assertEquals(45, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, (Integer) (-1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer3 = new Integer((-1822));
      assertEquals((-1822), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 2);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry1);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(object0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry1);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)576);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      char[] charArray0 = new char[9];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1890L);
      longArray0[1] = (-1890L);
      longArray0[2] = (-1890L);
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (-1890L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3004L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1890L), (-1890L), (-1890L), 2L, (-1890L)}, longArray0);
      assertArrayEquals(new long[] {3004L, (-1890L), (-1890L), (-1890L), 2L, (-1890L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1354);
      assertEquals((short)1354, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-597));
      assertEquals((short) (-597), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte)2);
      assertEquals((short)2, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)78);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)1354, (short) (-597), (short)2}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (int) (short)78);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1890L), (-1890L), (-1890L), 2L, (-1890L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-2960));
      assertEquals((-2960), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertFalse(boolean0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2960), object1);
      assertNotNull(object1);
      
      ArrayUtils.shift((double[]) null, 256, 3877, 3877);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2960);
      intArray0[1] = (-2960);
      intArray0[2] = 2408;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1908));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-2960), (-2960), 2408}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Integer integer0 = new Integer(127);
      assertEquals(127, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) integer0);
      assertNull(integerArray0);
      
      MockRandom mockRandom0 = new MockRandom((-222L));
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1600);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[4] = (float) 108;
      floatArray0[5] = (float) (byte)2;
      floatArray0[6] = (float) (byte)2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = 108;
      intArray0[2] = 108;
      intArray0[3] = 0;
      intArray0[4] = 79;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1024);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2, 108, 108, 0, 79, 2, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1024;
      longArray0[1] = (long) 2;
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new long[] {1024L, 2L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)84;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      Integer integer0 = new Integer((short)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)2;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)2;
      doubleArray1[1] = (double) (short)2;
      doubleArray1[2] = (double) (short)2;
      doubleArray1[3] = (double) (short)2;
      doubleArray1[4] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(map0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)94);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-785));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer integer0 = new Integer((-785));
      assertEquals((-785), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-785));
      assertEquals((-785), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3631);
      Double double0 = new Double((-3631));
      assertEquals((-3631.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3631.0F));
      assertEquals((-3631.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 3);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2358.69573565269));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3631.0), 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3631.0), 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      ArrayUtils.shift(doubleArray0, (-3631), 9, 9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-3631.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray1, 3, 3, 980);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-3631.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3631.0), 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1808);
      shortArray0[3] = (short) (-4853);
      shortArray0[4] = (short)1878;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1018));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2, (short) (-1808), (short) (-4853), (short)1878}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2, (short) (-1808), (short) (-4853), (short)1878}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[2];
      try { 
        Byte.valueOf("Array cannot be empty.", 2578);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2578 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1073;
      floatArray0[1] = (float) 1073;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1073.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {1073.0F, 1073.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1073.0F;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 1073);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ' ', 2147057683);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1073.0F, 1073.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray1, "Timeout for vintage @Test must be positive.");
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(stringArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, Float.NaN);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-393));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-393)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift((short[]) null, (-47));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1721.0499F;
      doubleArray0[2] = (double) (short)69;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1063.56504943), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1721.0499267578125, 69.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'f';
      intArray0[1] = (int) 'f';
      intArray0[2] = (int) 'f';
      intArray0[3] = (int) 'f';
      intArray0[4] = (int) 'f';
      ArrayUtils.shift(intArray0, 2746);
      assertArrayEquals(new int[] {102, 102, 102, 0, 102, 102}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      Integer integer0 = new Integer(478);
      assertEquals(478, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(478);
      assertEquals(478, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray2, (Object) integer1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1073.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-972.3072F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1073.0F, 1.0F, (-972.3072F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1073.0F, 1.0F, (-972.3072F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1647L);
      longArray0[1] = (-1647L);
      longArray0[2] = 2L;
      longArray0[3] = (-635L);
      longArray0[4] = (-144L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1647L), (-1647L), 2L, (-635L), (-144L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) integer1, (-1));
      assertEquals((-1), int0);
      assertTrue(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {(-1647L), (-1647L), 2L, (-635L), (-144L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)3007;
      shortArray0[2] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 1);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)10, (short)3007, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)10;
      shortArray1[1] = (short)3007;
      shortArray1[2] = (short)3007;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)10, (short)3007, (short)3007}, shortArray1);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)3007;
      intArray0[1] = 672;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)3007;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (short)3007);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {3007, 672, (-1), 3007}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '\"';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'s', '\"'}, charArray0);
      assertArrayEquals(new char[] {'s', '\"'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      int[] intArray0 = new int[2];
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Z');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)96}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'o');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) 0;
      longArray0[2] = 252L;
      longArray0[3] = (long) 'o';
      int int0 = ArrayUtils.indexOf(longArray0, 111L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {111L, 0L, 252L, 111L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2220);
      floatArray0[1] = (-1601.608F);
      floatArray0[4] = (float) (-2529);
      floatArray0[7] = (float) (-2220);
      floatArray0[8] = 65.15883F;
      ArrayUtils.shift(floatArray0, (-2529), 0, (-2529));
      assertArrayEquals(new float[] {(-2220.0F), (-1601.608F), 0.0F, 0.0F, (-2529.0F), 0.0F, 0.0F, (-2220.0F), 65.15883F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-2529);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1601.608F));
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-2220.0F), (-1601.608F), 0.0F, 0.0F, (-2529.0F), 0.0F, 0.0F, (-2220.0F), 65.15883F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-791.0F);
      floatArray0[1] = (-0.31274712F);
      floatArray0[2] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-791.0F), 3734);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-791.0F), (-0.31274712F), 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) 653;
      longArray0[3] = 1923L;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), (-271));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, (-1L), 653L, 1923L, (-1L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)45, (int) (byte)45);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(38, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('o');
      assertEquals('o', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'', 'o'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-3086));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-101));
      assertEquals((-101), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2145522996);
      assertEquals(2145522996, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3176)).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) longArray1, "true");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap((Object[]) longArray1, 0, 0, (int) (byte) (-104));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-20L);
      int int0 = 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-20L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-20L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(507);
      assertEquals(507, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((float) int0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2801.5823F));
      assertEquals((-2801.5823F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-20L));
      assertEquals((-20.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(36.0);
      assertEquals(36.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[0]);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(9, floatArray0.length);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(9, floatArray0.length);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[5]);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      
      floatArray0[6] = float6;
      Float float7 = new Float(1.0F);
      assertEquals(1.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float(2629.4963F);
      assertEquals(2629.4963F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[1] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-106.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-367));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short)94;
      Short short1 = new Short((short)94);
      assertEquals((short)94, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)982);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)94}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)94;
      longArray0[1] = (long) (short)982;
      longArray0[2] = (long) short0;
      longArray0[3] = (long) (short)94;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {94L, 982L, 94L, 94L}, longArray0);
      assertArrayEquals(new long[] {94L, 982L, 94L, 94L}, longArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-782L));
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {94L, 982L, 94L, 94L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) (-1148);
      doubleArray0[17] = (double) (-1148);
      doubleArray0[2] = (double) (-1148);
      doubleArray0[3] = (double) (-1148);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(23, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 664, (double) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(23, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(664);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-796));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 274);
      assertNull(integer0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer1 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 2026);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer1);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 948;
      longArray0[1] = 1135L;
      longArray0[2] = (long) 948;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 948L;
      floatArray0[1] = (float) 948;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 948L, (-796));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {948.0F, 948.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)100);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)27);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '+';
      charArray0[2] = 'u';
      charArray0[3] = '{';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ')';
      charArray1[1] = ')';
      charArray1[2] = '+';
      charArray1[3] = ')';
      charArray1[4] = 'u';
      charArray1[5] = '+';
      charArray1[6] = '+';
      charArray1[7] = '+';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {')', '+', 'u', '{'}, charArray0);
      assertArrayEquals(new char[] {')', ')', '+', ')', 'u', '+', '+', '+'}, charArray1);
      assertArrayEquals(new char[] {'{'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(1, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[3] = (short) (-533);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '&');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)53);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (-3184L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, 127);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.insert(127, arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'l';
      objectArray0[4] = object0;
      ArrayUtils.shift(objectArray0, 0, 0, (-876));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 2;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) (-2220);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (double) (-2220);
      doubleArray0[6] = (double) 2.0F;
      doubleArray0[7] = (double) 2L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2.0);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {2.0, 2.0, (-2220.0), 2.0, 2.0, (-2220.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)2;
      MockRandom mockRandom0 = new MockRandom(49L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (byte) (-83));
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 45, 2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap((boolean[]) null, (int) (byte) (-83), 2121610351, 1477);
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'N');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3758.9512F);
      floatArray0[1] = (float) (short) (-538);
      floatArray0[2] = (float) (short) (-538);
      floatArray0[3] = 65.15883F;
      floatArray0[4] = (float) (short) (-538);
      floatArray0[5] = 65.15883F;
      floatArray0[6] = (float) (-2529);
      floatArray0[7] = (float) (short) (-538);
      floatArray0[8] = 65.15883F;
      ArrayUtils.shift(floatArray0, (int) (short) (-538), 828, 4);
      assertArrayEquals(new float[] {65.15883F, (-2529.0F), (-538.0F), 65.15883F, (-3758.9512F), (-538.0F), (-538.0F), 65.15883F, (-538.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2529);
      longArray0[1] = (long) 828;
      int int0 = ArrayUtils.indexOf(longArray0, (long) 4, 4);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2529L), 828L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1628.6889887149557;
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'r';
      charArray0[2] = '|';
      charArray0[3] = '5';
      charArray0[4] = 'M';
      charArray0[5] = '[';
      charArray0[6] = 't';
      charArray0[7] = ']';
      charArray0[8] = 'e';
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'p', 'r', '|', '5', 'M', '[', 't', ']', 'e'}, charArray1);
      assertArrayEquals(new char[] {'p', 'r', '|', '5', 'M', '[', 't', ']', 'e'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1236);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1628.6889887149557, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'M';
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      Double double0 = new Double((-175.0));
      assertEquals((-175.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-175.0), (-175.0), (-175.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-175.0), (-175.0), (-175.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)86;
      Byte byte1 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)86, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)86, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)86}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      MutableInt mutableInt0 = new MutableInt((Number) byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals(86.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("86", mutableInt0.toString());
      assertEquals((short)86, mutableInt0.shortValue());
      assertEquals(86, mutableInt0.intValue());
      assertEquals(86.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(86L, mutableInt0.longValue());
      assertEquals((byte)86, mutableInt0.byteValue());
      assertEquals(86, (int)mutableInt0.toInteger());
      assertEquals(86, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(86, (int)integer0);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals(86.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("86", mutableInt0.toString());
      assertEquals((short)86, mutableInt0.shortValue());
      assertEquals(86, mutableInt0.intValue());
      assertEquals(86.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(86L, mutableInt0.longValue());
      assertEquals((byte)86, mutableInt0.byteValue());
      assertEquals(86, (int)mutableInt0.toInteger());
      assertEquals(86, (int)mutableInt0.getValue());
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("+]^-FoHU5^q{8+;s");
      assertNull(integer1);
      
      integerArray0[1] = null;
      Integer integer2 = new Integer(byte0);
      assertEquals(86, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals(86.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("86", mutableInt0.toString());
      assertEquals((short)86, mutableInt0.shortValue());
      assertEquals(86, mutableInt0.intValue());
      assertEquals(86.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(86L, mutableInt0.longValue());
      assertEquals((byte)86, mutableInt0.byteValue());
      assertEquals(86, (int)mutableInt0.toInteger());
      assertEquals(86, (int)mutableInt0.getValue());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {86, 86, 86, 0}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, 0, 166);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) 'l';
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, int0);
      assertEquals(5, objectArray0.length);
      
      char[] charArray1 = Character.toChars(1744);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u06D0'}, charArray1);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (-1093.2906F);
      floatArray0[2] = (-1093.2906F);
      floatArray0[3] = (-791.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[2] = (float) 5;
      floatArray0[6] = (float) 5;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-953);
      intArray0[1] = 20;
      intArray0[2] = (-3184);
      intArray0[3] = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3184);
      longArray0[1] = (long) 20;
      longArray0[2] = (long) (-3184);
      longArray0[3] = (long) 20;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-3184), 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-3184L), 20L, (-3184L), 20L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[1] = 'O';
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[2] = (float) 'O';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 79.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = (int) ' ';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.reverse(intArray0, 0, 7);
      assertArrayEquals(new int[] {32, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 45);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {32, 0, 0}, intArray0);
      assertArrayEquals(new int[] {45, 32, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[3] = 1;
      intArray0[5] = 1;
      intArray0[6] = 52;
      intArray0[8] = 83;
      ArrayUtils.shift(intArray0, 83, 0, 83);
      assertArrayEquals(new int[] {2, 83, 0, 1, 0, 1, 52, 0, 83}, intArray0);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte)2, (-513), (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (-1), 97, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R', (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (int) (byte) (-78));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(108);
      assertEquals(108, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 0, (Integer) null);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (int) byte0, (int) byte0, 0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)3;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2), 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Long long0 = new Long((-2));
      assertEquals((-2L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(2);
      assertEquals(2L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 2);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2L), 2L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2146749967);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (long)longArray0[0];
      doubleArray0[5] = (double) (-4);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      ArrayUtils.swap(doubleArray0, 0, (-3630), 2);
      assertArrayEquals(new double[] {(-2.146749967E9), (-2.0), 2.0, 2.0, (-2.0), (-4.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1751), integer0);
      assertEquals(1, (int)integer1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integer1);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1751);
      doubleArray0[1] = (double) (-1751);
      doubleArray0[2] = (double) (-1751);
      doubleArray0[3] = (double) (-1751);
      doubleArray0[4] = (double) (-1751);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1751);
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {(-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1751);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-1505.471095243);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) (-1751);
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) (-1751);
      doubleArray1[7] = (double) 1;
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-1505.471095243));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1751.0), 1.0, (-1505.471095243), 1.0, (-1751.0), 1.0, (-1751.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1505.471095243), (-1751.0), 1.0, (-1505.471095243), 1.0, (-1751.0), 1.0, (-1751.0), 1.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      Double[] doubleArray3 = ArrayUtils.toObject(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      
      ArrayUtils.swap(doubleArray1, (-212), 0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1751.0), 1.0, (-1505.471095243), 1.0, (-1751.0), 1.0, (-1751.0), 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray4 = ArrayUtils.removeElement(doubleArray0, (double) (-1751));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {(-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1751.0), (-1751.0), (-1751.0), (-1751.0), (-1751.0), 1.0}, doubleArray4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray4.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-212);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-1751);
      floatArray0[5] = (float) (-212);
      floatArray0[6] = (-541.5583F);
      floatArray0[7] = (float) (-1751);
      ArrayUtils.shift(floatArray0, 2, 2, (-2158));
      assertArrayEquals(new float[] {1.0F, 1.0F, (-212.0F), 1.0F, (-1751.0F), (-212.0F), (-541.5583F), (-1751.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)108, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ArrayUtils.shift(doubleArray0, 2032);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1114.3645F;
      floatArray0[1] = (float) 2032;
      floatArray0[2] = (float) 2032;
      floatArray0[3] = (float) (-683);
      floatArray0[4] = 1114.3645F;
      floatArray0[5] = (float) 2032;
      floatArray0[6] = (float) (-683);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2225.152F, (-683));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1114.3645F, 2032.0F, 2032.0F, (-683.0F), 1114.3645F, 2032.0F, (-683.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray2, (double) 2032.0F);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double double0 = new Double((-2220.0));
      assertEquals((-2220.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) double0;
      ArrayUtils.swap(objectArray0, 3, (-1), 7);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 613L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (-1093.2906F);
      floatArray0[2] = (-1093.2906F);
      floatArray0[3] = (-791.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[2] = (float) 5;
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      
      Long long0 = new Long(2191L);
      assertEquals(2191L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 2191L);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1824);
      intArray0[1] = (-2146749967);
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = (-2146749967);
      intArray0[5] = 5;
      ArrayUtils.swap(intArray0, 753, 5, (-1535));
      assertArrayEquals(new int[] {(-1824), (-2146749967), 5, 5, (-2146749967), 5}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '~';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) 'l';
      floatArray0[4] = (-1455.73F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2318.71F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {126.0F, 108.0F, 108.0F, 108.0F, (-1455.73F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 614, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(9);
      assertEquals(9, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(9);
      assertEquals(9, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(9, object1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(object1.equals((Object)integer1));
      assertNotNull(object1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (-4492);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)4;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 7, (-1), 11);
      assertArrayEquals(new int[] {4, (-4492), 0, 2, 2, 4, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (-2174));
      assertNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {4, (-4492), 0, 2, 2, 4, 0, 0}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-791);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)128;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (-791);
      doubleArray0[5] = (double) (-791);
      doubleArray0[6] = (double) (short)128;
      doubleArray0[7] = (double) (short)1;
      doubleArray0[8] = (double) (short)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-791), (int) (short)0, 0.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-791.0), 0.0, 128.0, 0.0, (-791.0), (-791.0), 128.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = ArrayUtils.get(integerArray0, 206);
      assertNull(integer1);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double double0 = new Double((-2220.0));
      assertEquals((-2220.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 2, 2);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2145465459);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\\', 500);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-3), (int) (byte) (-118));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-118), (byte)0, (byte) (-99), (byte)45}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer integer0 = new Integer((short)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) (byte) (-99));
      assertEquals((-99.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 0.0F;
      floatArray1[3] = float1;
      floatArray1[4] = float1;
      floatArray1[5] = float1;
      floatArray1[6] = (Float) 0.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-99.0F), (-99.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1, "");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, floatArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = ArrayUtils.indexOf(charArray0, '7');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '5', (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1066, 1066, 1066);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2459));
      assertEquals((-2459), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, (-2459), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      int int0 = 927;
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      Integer integer0 = new Integer((short) (-533));
      assertEquals((-533), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (short)565);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(496);
      assertEquals(496, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2, "'uu");
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(stringArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 8192);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 496, 321);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2908), 0, (-557));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer3 = ArrayUtils.get(integerArray0, 2);
      assertEquals((-533), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(3, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)18688);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)18688}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 65.15883F;
      floatArray0[2] = (float) (-2257);
      floatArray0[3] = (float) 596;
      ArrayUtils.shift(floatArray0, (-2257), 596, (-2529));
      assertArrayEquals(new float[] {65.15883F, (-2257.0F), 596.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2257);
      doubleArray0[1] = (double) 596;
      doubleArray0[2] = (double) 65.15883F;
      doubleArray0[3] = (double) (-2257.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 537.584563944216;
      doubleArray0[6] = (double) 65.15883F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-232.3107427701032), (-2529));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2257.0), 596.0, 65.15882873535156, (-2257.0), 0.0, 537.584563944216, 65.15882873535156}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2529);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2529), 12);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2529)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 12);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {12, (-2529)}, intArray1);
      assertArrayEquals(new int[] {(-2529)}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      boolean boolean0 = ArrayUtils.contains(charArray0, ' ');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (-2430));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-2430));
      assertEquals((-2430.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 0);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2430.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift((double[]) null, 0, 0, 0);
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 0, 0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2430.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1272));
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      charArray0[8] = '6';
      ArrayUtils.shift(charArray0, (-1), 3964, (-1));
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-310), 2, (-2439));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((-310), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      int int0 = 1073;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1073;
      floatArray0[1] = (float) 1073;
      floatArray0[2] = (float) (-2103);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = 5;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 2491, 1073, (double) 5);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int int2 = (-1049);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1049), 1, 5);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 2491, Float.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2491, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = 'S';
      charArray0[1] = '`';
      charArray0[2] = '_';
      charArray0[3] = 'p';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) '`';
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {83.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double double0 = new Double(Float.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      Double double1 = new Double((-964.140242641019));
      assertEquals((-964.140242641019), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-964.140242641019)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 0;
      ArrayUtils.shift(charArray0, 0, 0, 7);
      assertArrayEquals(new char[] {'\u0000', '`', '_', 'p', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int int1 = 12;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) '\u0000';
      floatArray0[6] = (float) '\u0000';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '3';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 0.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)4;
      shortArray0[1] = (short) (byte)4;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) (byte)4;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)4, (short)4, (short)4, (short)4, (short)4, (short)4, (short)4}, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)4, (short)4, (short)4}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 2;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 0.0, 2.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '~');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double double0 = new Double((-2220.0));
      assertEquals((-2220.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-5001.0), 0, (-741.773109914233));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2978.504F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2978.504F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray1.length);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) 2978.504F;
      ArrayUtils.swap(objectArray0, 953, 953, 953);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1595;
      floatArray0[3] = 261.1F;
      floatArray0[4] = (float) (short)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 261.1F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 261.1F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 261.1000061035156, 0.0, 261.1000061035156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 261.1000061035156, 0.0, 261.1000061035156}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1595.0F, 261.1F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, 2820);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)53;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (short)0, (byte) (-26));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)122, (byte)53}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 1258.3203F;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = 1258.3203F;
      floatArray0[5] = 1258.3203F;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-161.1F), (-452));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2.14748365E9F, 1258.3203F, 2.0F, 2.0F, 1258.3203F, 1258.3203F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, Integer.MAX_VALUE, (int) (short)2);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)2;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-2917L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-2917L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 785.5402426410191);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray3 = new Double[4];
      Double double0 = new Double((-2917L));
      assertEquals((-2917.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray3[0] = double0;
      Double double1 = new Double(664.0);
      assertEquals(664.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray3[1] = double1;
      Double double2 = new Double(0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray3[2] = double2;
      Double double3 = new Double((-1));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray3[3] = double3;
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {(-2917.0), 664.0, 0.0, (-1.0)}, doubleArray4, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      
      double[] doubleArray5 = ArrayUtils.removeElements((double[]) null, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNull(doubleArray5);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayUtils0;
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      objectArray0[1] = (Object) arrayUtils0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(10, integerArray0.length);
      
      integerArray0[1] = integer1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)64;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte)94, (byte) (-46), (byte)126, (byte)7, (byte)64}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (byte) (-46));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-46)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-352), (int) (short) (-352));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)94, (byte) (-46), (byte)126, (byte)7, (byte)64}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)126;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)7;
      longArray0[3] = (-504L);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)126);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {126L, 1L, 7L, (-504L)}, longArray0);
      assertArrayEquals(new long[] {126L, 1L, 7L, (-504L), 126L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1603.8968473128;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)37, (-1966));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1603.8968473128;
      objectArray0[1] = (Object) 1603.8968473128;
      objectArray0[2] = (Object) 1603.8968473128;
      objectArray0[3] = (Object) 1603.8968473128;
      objectArray0[4] = (Object) 1603.8968473128;
      objectArray0[5] = (Object) 1603.8968473128;
      objectArray0[6] = (Object) 1603.8968473128;
      objectArray0[7] = (Object) 1603.8968473128;
      objectArray0[8] = (Object) 1603.8968473128;
      ArrayUtils.swap(objectArray0, 34, 5, 0);
      assertEquals(9, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1603.8968473128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1603.8968473128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) byte0;
      objectArray0[5] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte)2, (int) (byte)2, 512);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1106.3001049384);
      assertEquals(1106.3001049384, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double2 = new Double(1.5);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      Double double3 = new Double(962.0367655487);
      assertEquals(962.0367655487, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[4] = double3;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 962.0367655487, 1.5, 1.5, 1.5, 1106.3001049384}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 962.0367655487, 1.5, 1.5, 1.5, 1106.3001049384}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2048);
      assertEquals(2048, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      double[] doubleArray3 = ArrayUtils.insert(int0, doubleArray2, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 962.0367655487, 1.5, 1.5, 1.5, 1106.3001049384}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 962.0367655487, 1.5, 1.5, 1.5, 1106.3001049384}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('9');
      assertEquals('9', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)84;
      intArray0[1] = (int) '9';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '9';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = 2;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)84);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {84, 57, 98, 57, 98, 98, 2}, intArray0);
      assertArrayEquals(new int[] {84, 84, 57, 98, 57, 98, 98, 2}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 57;
      objectArray0[1] = (Object) 98;
      objectArray0[2] = (Object) 57;
      objectArray0[3] = (Object) 98;
      objectArray0[4] = (Object) 98;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '57', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {91.0, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short) (-1071);
      shortArray0[1] = (short) (-1987);
      shortArray0[2] = (short) (-1763);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)4999;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(21, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1431655765);
      assertEquals(1431655765, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1431655765);
      assertEquals(1431655765, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, 1069, integer2);
      assertEquals(1431655765, (int)integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals(1431655765, object0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 54;
      intArray0[1] = int0;
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = 54;
      intArray0[4] = 1431655765;
      ArrayUtils.shift(intArray0, 1, 54, 2143716132);
      assertArrayEquals(new int[] {54, (-1), 1431655765, 54, 1431655765}, intArray0);
      assertEquals(5, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert(1893, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert(828, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) 'G';
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'U';
      intArray1[1] = (int) 'G';
      intArray1[2] = (int) 'U';
      intArray1[3] = 828;
      intArray1[4] = (int) 'U';
      intArray1[5] = (int) 'U';
      intArray1[6] = (int) 'U';
      intArray1[7] = (int) 'U';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(828, intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 828, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2210);
      shortArray0[1] = (short)9;
      ArrayUtils.swap(shortArray0, (int) (short) (-2210), (int) (short)9);
      assertArrayEquals(new short[] {(short) (-2210), (short)9}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-88));
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-88));
      assertNull(byteArray0);
      
      Integer integer1 = new Integer(1549);
      assertEquals(1549, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = Integer.getInteger("ef:a5$^[9)e", 3131);
      assertEquals(3131, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(3131, object0);
      assertNotNull(object0);
      
      Integer integer1 = new Integer(3131);
      assertEquals(3131, (int)integer1);
      assertTrue(integer1.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals(1, object1);
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer1));
      assertNotNull(object1);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(142.74677);
      assertEquals(142.74677, (double)double0, 0.01);
      assertNotNull(double0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2368;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)2368}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)2368}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)2368}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 3131;
      floatArray1[1] = (float) (byte) (-1);
      floatArray1[2] = 5365.7163F;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (float) (short)2368;
      floatArray1[5] = (float) 1;
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, (float[]) null);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {3131.0F, (-1.0F), 5365.7163F, 1.0F, 2368.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3131.0F, (-1.0F), 5365.7163F, 1.0F, 2368.0F, 1.0F}, floatArray2, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2), 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Short short0 = new Short((short)17);
      assertEquals((short)17, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-3624));
      assertEquals((short) (-3624), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)17);
      assertEquals((short)17, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)17, intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1274));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((short) (-1274));
      assertEquals((-1274.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3054.9, 1064.56504943);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-981));
      assertEquals((-981), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-981), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(7, integerArray0.length);
      
      Integer integer3 = Integer.getInteger("", integer2);
      assertEquals((-981), (int)integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(1091);
      assertEquals(1091, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[4] = integer5;
      MutableInt mutableInt0 = new MutableInt((Number) integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-981), mutableInt0.intValue());
      assertEquals((-981L), mutableInt0.longValue());
      assertEquals((short) (-981), mutableInt0.shortValue());
      assertEquals((-981.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-981", mutableInt0.toString());
      assertEquals((-981), (int)mutableInt0.getValue());
      assertEquals((-981.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-981), (int)mutableInt0.toInteger());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      assertEquals(7, integerArray0.length);
      
      Integer integer6 = mutableInt0.toInteger();
      assertEquals((-981), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-981), mutableInt0.intValue());
      assertEquals((-981L), mutableInt0.longValue());
      assertEquals((short) (-981), mutableInt0.shortValue());
      assertEquals((-981.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-981", mutableInt0.toString());
      assertEquals((-981), (int)mutableInt0.getValue());
      assertEquals((-981.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-981), (int)mutableInt0.toInteger());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertNotNull(integer6);
      assertEquals(7, integerArray0.length);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((-981));
      assertEquals((-981), (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = ArrayUtils.get(integerArray0, 775, integerArray0[4]);
      assertEquals(Integer.MAX_VALUE, (int)integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      assertEquals(7, integerArray0.length);
      
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-981), (-1), (-981), 1091, Integer.MAX_VALUE, (-981), (-981)}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 721);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), 721}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1), (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1), 328, 160);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) (-1);
      ArrayUtils.swap(objectArray0, 328, 664, (-584));
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 721);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 115L;
      longArray0[1] = 1426L;
      longArray0[2] = (-1L);
      longArray0[3] = 2607L;
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = 1L;
      longArray1[2] = 1426L;
      longArray1[3] = (-1L);
      longArray1[4] = 501L;
      longArray1[5] = (-1L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {115L, 1426L, (-1L), 2607L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, 1426L, (-1L), 501L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {115L, 2607L}, longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(2, longArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1426L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {115L, 1426L, (-1L), 2607L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2220);
      floatArray0[1] = (-106.0F);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-2529);
      floatArray0[4] = (float) (-2529);
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) (-2220);
      floatArray0[8] = 65.15883F;
      ArrayUtils.shift(floatArray0, (-2529), 2, (-2529));
      assertArrayEquals(new float[] {(-106.0F), (-2220.0F), 2.0F, (-2529.0F), (-2529.0F), 0.0F, 2.0F, (-2220.0F), 65.15883F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-2529);
      longArray0[2] = (long) (-2220);
      int int0 = ArrayUtils.indexOf(longArray0, (long) 2, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, (-2529L), (-2220L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-664);
      shortArray0[1] = (short)79;
      shortArray0[2] = (short)17;
      shortArray0[3] = (short) (-552);
      shortArray0[4] = (short)818;
      shortArray0[5] = (short) (-8);
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short)491);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-664), (short)79, (short)17, (short) (-552), (short)818, (short) (-8), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-664), (short)79, (short)491, (short)17, (short) (-552), (short)818, (short) (-8), (short)2}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[0] = (-1751.0F);
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-5412), 2828, 2828);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer((-5412));
      assertEquals((-5412), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-5412), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (-1751.0F);
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) (-1751.0F);
      objectArray0[4] = (Object) (-1751.0F);
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object2);
      assertFalse(boolean0);
      assertFalse(object2.equals((Object)object1));
      assertNotSame(object2, object1);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-3412), 2648, (-815));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-106.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-367));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)94);
      assertEquals((short)94, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)982);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)94}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = new Integer[5];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray2.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1096;
      doubleArray0[1] = (double) 1096;
      doubleArray0[2] = (double) 1096;
      doubleArray0[3] = (double) 1096;
      doubleArray0[4] = (double) 1096;
      doubleArray0[5] = (double) 1096;
      ArrayUtils.reverse(doubleArray0, 1096, (-533));
      assertArrayEquals(new double[] {1096.0, 1096.0, 1096.0, 1096.0, 1096.0, 1096.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1096.0;
      objectArray0[1] = (Object) 1096.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2145465459);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.reverse((long[]) null, 223, (-2982));
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) 1, 2145465459);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray2 = ArrayUtils.remove(charArray1, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2867);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2867)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2867)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Integer integer0 = new Integer((short) (-533));
      assertEquals((-533), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (short)565);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-533);
      floatArray0[1] = (float) (short) (-533);
      ArrayUtils.shift(floatArray0, 0, Integer.MAX_VALUE, (-964));
      assertArrayEquals(new float[] {(-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(3306L);
      assertEquals(3306L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      ArrayUtils.swap(intArray0, 4565, 1, (-1743));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'd';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2821;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)2821}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)0;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = byte0;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-80));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte)0, (byte) (-3), (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-3), (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray2.length);
      assertEquals(8, byteArray1.length);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 5697);
      ArrayUtils.shift((double[]) null, 56, 5697, 56);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-44);
      shortArray0[1] = (short) (-1543);
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-44);
      shortArray0[5] = (short)6;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-44), (short) (-1543), (short)1075, (short)6, (short) (-44), (short)6}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-44);
      shortArray1[1] = (short) (-1543);
      shortArray1[2] = (short)1075;
      shortArray1[3] = (short)1075;
      shortArray1[4] = (short)6;
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short) (-44), (short) (-1543), (short)1075, (short)1075, (short)6}, shortArray2);
      assertArrayEquals(new short[] {(short) (-44), (short) (-1543), (short)1075, (short)1075, (short)6}, shortArray1);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift((double[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE, (-3868));
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)6);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2397);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '!';
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 't';
      floatArray0[3] = (float) 't';
      floatArray0[4] = (float) (short)6;
      floatArray0[5] = 3.0F;
      floatArray0[6] = (float) 's';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 66.6F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {33.0F, 7.0F, 116.0F, 116.0F, 6.0F, 3.0F, 115.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {33.0F, 7.0F, 116.0F, 116.0F, 6.0F, 3.0F, 115.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-106.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (-1324));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1.0F;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) 'l';
      objectArray0[3] = (Object) 'l';
      objectArray0[4] = (Object) 'l';
      objectArray0[5] = (Object) 'l';
      objectArray0[6] = (Object) 'l';
      objectArray0[7] = (Object) 'l';
      ArrayUtils.shift(objectArray0, 0, 2417, (-3329));
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2417;
      longArray0[1] = (long) (-3329);
      longArray0[2] = 1455L;
      longArray0[3] = (long) 897;
      longArray0[4] = (long) 897;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(897, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 897, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shift(shortArray0, (-1288), 759, (-1288));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-346);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1259.1373F, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-346.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short) (byte)51;
      shortArray0[3] = (short) (byte)51;
      shortArray0[4] = (short) (byte)51;
      shortArray0[5] = (short) (byte)51;
      shortArray0[6] = (short) (byte)51;
      shortArray0[7] = (short) (byte)51;
      shortArray0[8] = (short) (byte)51;
      ArrayUtils.shift(shortArray0, (-5412), (int) (short)51, 2828);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51, (short)51, (short)51, (short)51, (short)51, (short)51, (short)51}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Integer integer0 = new Integer(53);
      assertEquals(53, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)51;
      objectArray0[1] = (Object) (short)51;
      objectArray0[2] = (Object) (short)51;
      objectArray0[3] = (Object) (short)51;
      objectArray0[4] = (Object) (short)51;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals((short)51, object0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 'l');
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (-1093.2906F);
      floatArray0[2] = (-1093.2906F);
      floatArray0[3] = (-791.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) 5;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 5);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {5.0F, (-1093.2906F), (-1093.2906F), (-791.0F), (-1.0F), 5.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), 0);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2340.98);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ArrayUtils.swap(byteArray0, 1, Integer.MAX_VALUE, (-1));
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-920);
      intArray0[1] = 1;
      intArray0[2] = (-1763);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      ArrayUtils.reverse(intArray0, (-49), (-920));
      assertArrayEquals(new int[] {(-920), 1, (-1763), 1, 1, 1}, intArray0);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = '*';
      charArray0[3] = 'X';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'X', 'X', '*', 'X', 'X', 'X', '*', 'X'}, charArray1);
      assertArrayEquals(new char[] {'X', 'X', '*', 'X'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      Short short0 = new Short((short)111);
      assertEquals((short)111, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 36, 36, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-605));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1056.88567895175), 5);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-427));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer0);
      
      Short short0 = new Short((short)782);
      assertEquals((short)782, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-346);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1259.1373F, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-346.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), 5);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-1));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray2);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-6768));
      assertEquals((short) (-6768), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-6768));
      assertEquals((short) (-6768), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-6768), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)140);
      assertEquals((short)140, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)57);
      assertEquals((short)57, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)116);
      assertEquals((short)116, (short)short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-6768), (short) (-6768), (short) (-6768), (short)140, (short)57, (short)116}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-346);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      Float float0 = new Float((float) (-3631));
      assertEquals((-3631.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3189;
      longArray0[1] = (long) 3189;
      longArray0[2] = (long) (-3976);
      longArray0[3] = 95L;
      longArray0[4] = (long) 436;
      ArrayUtils.shift(longArray0, (-3631), 436, (-3631));
      assertArrayEquals(new long[] {3189L, (-3976L), 95L, 436L, 3189L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-3631), (double) 95L);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-3631), 978, (-3631));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = '3';
      charArray0[3] = 'Y';
      charArray0[4] = 'i';
      charArray0[5] = '&';
      charArray0[6] = '\\';
      charArray0[7] = '7';
      int int0 = ArrayUtils.indexOf(charArray0, '&');
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'V', 'V', '3', 'Y', 'i', '&', '\\', '7'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 1510;
      intArray0[2] = 2;
      intArray0[3] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 1510, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 1510, 2, 1510, 2, 2, 2, 2}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short) (-533);
      char[] charArray0 = new char[5];
      charArray0[2] = '$';
      charArray0[3] = '$';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-533), (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = ArrayUtils.add(doubleArray2, 0, (double) (short) (-533));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-533.0)}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-106.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1324);
      ArrayUtils.swap(shortArray0, 2, (int) (short) (-1324), (int) (short) (-1324));
      assertArrayEquals(new short[] {(short) (-1324), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-2142753506), (-2142753506));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)19, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)19;
      shortArray0[1] = (short) (byte)19;
      shortArray0[2] = (short)13473;
      shortArray0[3] = (short) (byte)19;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)202);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)13473, (short)19, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)13473, (short)19, (short)0, (short)202}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (-2556), 1022);
      assertEquals((-1), int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)13473, (short)19, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)13473, (short)19, (short)0, (short)202}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)13473, (short)19, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean3 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)19, 1785);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1140;
      shortArray0[1] = (short) (byte)19;
      shortArray0[3] = (short) (-10864);
      shortArray0[4] = (short) (byte)19;
      shortArray0[5] = (short) (byte)19;
      shortArray0[6] = (short)1140;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)19);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1140, (short)19, (short)0, (short) (-10864), (short)19, (short)19, (short)1140}, shortArray0);
      assertArrayEquals(new short[] {(short)1140, (short)19, (short)0, (short) (-10864), (short)19, (short)19, (short)1140, (short)19}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4270));
      assertEquals((-1), int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1140, (short)19, (short)0, (short) (-10864), (short)19, (short)19, (short)1140}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray2);
      assertTrue(boolean2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean3 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)36, (byte)6, (byte)91, (byte)102, (byte) (-10), (byte)45, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)6, (byte)91, (byte)102, (byte) (-10), (byte)45, (byte)1}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)127;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (byte)127;
      floatArray0[3] = (float) (byte)36;
      floatArray0[4] = (float) (byte)127;
      floatArray0[5] = (float) (byte)91;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {127.0F, 1.0F, 127.0F, 36.0F, 127.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'G';
      charArray0[2] = 'A';
      charArray0[3] = 'L';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'q', 'G', 'A', 'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 'l';
      floatArray0[6] = (float) 'l';
      floatArray0[7] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.0F, 1.0F, 1.0F, 108.0F, 108.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0F);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift(charArray0, 0, 7, 1673);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 589, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'd';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)23;
      ArrayUtils.swap(byteArray0, (int) (byte) (-39), 2255, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-120), (byte) (-39), (byte) (-94), (byte)23}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'd';
      ArrayUtils.swap(intArray0, (int) (byte) (-39), (int) (byte) (-94), (int) (byte) (-39));
      assertArrayEquals(new int[] {100}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)45, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(38, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Character[] characterArray0 = new Character[7];
      char char0 = '<';
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('<');
      assertEquals('<', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('S');
      assertEquals('S', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('<', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('R');
      assertEquals('R', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character2);
      assertEquals('S', (char)character5);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('[');
      assertEquals('[', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) integerArray0[0], booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(integerArray0, integerArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(2, integerArray0.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = 5369L;
      Double double0 = Double.valueOf((double) 0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)4, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)16, (byte)4, (byte) (-1)}, byteArray0);
      assertEquals(1, intArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)19;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1140);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)1140}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2095), (-1804));
      assertEquals((-1), int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean3 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'l';
      characterArray0[1] = (Character) 'l';
      characterArray0[2] = (Character) 'l';
      characterArray0[3] = (Character) 'l';
      characterArray0[4] = (Character) 'l';
      Character character0 = new Character((char) characterArray0[0]);
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      assertEquals(9, characterArray0.length);
      
      characterArray0[5] = character0;
      characterArray0[6] = (Character) 'l';
      characterArray0[7] = (Character) 'l';
      characterArray0[8] = (Character) 'l';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-756);
      shortArray0[1] = (short) (-1895);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1933);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      ArrayUtils.swap(shortArray0, (-352), (int) characterArray0[7], 5);
      assertArrayEquals(new short[] {(short) (-756), (short) (-1895), (short)2, (short) (-1933), (short) (-1), (short)0}, shortArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short) (-756);
      shortArray1[2] = (short) (-1933);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-756), (short) (-1933)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-756), (short) (-1895), (short)2, (short) (-1933), (short) (-1), (short)0}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '*';
      charArray0[2] = 'S';
      charArray0[3] = '*';
      charArray0[4] = '6';
      charArray0[5] = 'p';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '%');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'%', '*', 'S', '*', '6', 'p'}, charArray0);
      assertArrayEquals(new char[] {'*', 'S', '*', '6', 'p'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2186);
      intArray0[1] = (int) '%';
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'p';
      intArray0[4] = (-3835);
      intArray0[5] = (int) '*';
      intArray0[6] = (int) 'S';
      intArray0[7] = (int) '%';
      intArray0[8] = (int) '*';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-2186), 37, 112, 112, (-3835), 42, 83, 37, 42}, intArray1);
      assertArrayEquals(new int[] {(-2186), 37, 112, 112, (-3835), 42, 83, 37, 42}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 42;
      longArray0[1] = (long) (-3835);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 83);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {42L, (-3835L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 112;
      doubleArray0[4] = (double) 42L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '*';
      doubleArray0[7] = 3.0;
      doubleArray0[8] = (double) 42L;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {54.0, 42.0, 83.0, 112.0, 42.0, 37.0, 42.0, 3.0, 42.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)45, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(38, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)45;
      shortArray0[1] = (short) (byte)45;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)1, (int) (short)45);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)45, (short)45, (short)1, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 1880.81;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)45;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1880.81, (-1.0), 1.0, 1.0, 45.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)45, (short)45, (short)1, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (byte)1;
      doubleArray2[1] = (double) (short)1;
      doubleArray2[2] = (double) (byte)45;
      doubleArray2[3] = (double) (short)1;
      doubleArray2[4] = (double) (byte)1;
      doubleArray2[5] = (double) (short)1;
      doubleArray2[6] = (double) (short)1;
      doubleArray2[7] = (double) (-1);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 45.0, 1.0, 1.0, 1.0, 1.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1880.81, (-1.0), 1.0, 1.0, 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray2);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(38, byteArray2.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (byte)45;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)45;
      floatArray0[6] = (float) (short)45;
      floatArray0[7] = (float) (byte)1;
      floatArray0[8] = (float) (short)45;
      boolean boolean2 = ArrayUtils.contains(floatArray0, 1140.0F);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 45.0F, 1.0F, 45.0F, 45.0F, 1.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1272);
      longArray0[1] = 91L;
      longArray0[2] = 1L;
      longArray0[2] = (long) (short)4;
      longArray0[4] = 155L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {91L, 4L, 0L, 155L, (-1272L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MutableInt mutableInt0 = new MutableInt((-1272));
      assertEquals((-1272.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1272), mutableInt0.intValue());
      assertEquals((short) (-1272), mutableInt0.shortValue());
      assertEquals((-1272L), mutableInt0.longValue());
      assertEquals((-1272.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1272", mutableInt0.toString());
      assertEquals((-1272), (int)mutableInt0.getValue());
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals((-1272), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1272.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1272), mutableInt0.intValue());
      assertEquals((short) (-1272), mutableInt0.shortValue());
      assertEquals((-1272L), mutableInt0.longValue());
      assertEquals((-1272.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1272", mutableInt0.toString());
      assertEquals((-1272), (int)mutableInt0.getValue());
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals((-1272), (int)mutableInt0.toInteger());
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1272), int0);
      assertEquals("-1271", mutableInt0.toString());
      assertEquals((-1271.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1271), mutableInt0.shortValue());
      assertEquals((-1271), mutableInt0.intValue());
      assertEquals((-1271L), mutableInt0.longValue());
      assertEquals((-1271.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)9, mutableInt0.byteValue());
      assertEquals((-1271), (int)mutableInt0.toInteger());
      assertEquals((-1271), (int)mutableInt0.getValue());
      
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer2 = new Integer(2319);
      assertEquals(2319, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[7] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[2]);
      assertNull(integer3);
      assertEquals(8, integerArray0.length);
      
      Integer integer4 = new Integer((-1272));
      assertEquals((-1272), (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer4, (int) integerArray0[2]);
      assertEquals(0, int1);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1363.7081F);
      floatArray0[1] = (float) 3768;
      floatArray0[2] = (-1363.7081F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 3768;
      floatArray0[6] = (float) 3768;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3768.0F, (-1559));
      assertEquals("{1, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1363.7081F), 3768.0F, (-1363.7081F), 1.0F, 1.0F, 3768.0F, 3768.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, 1206);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'W';
      ArrayUtils.swap(charArray0, 1125, 1125);
      assertArrayEquals(new char[] {'v', 'W'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Double double0 = new Double(552.4186181510948);
      assertEquals(552.4186181510948, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.7);
      assertEquals(0.7, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)1157;
      shortArray0[2] = (short) (-10864);
      shortArray0[3] = (short)4204;
      shortArray0[4] = (short) (-425);
      shortArray0[5] = (short) (-808);
      shortArray0[6] = (short)43;
      shortArray0[7] = (short)18;
      shortArray0[8] = (short)962;
      ArrayUtils.swap(shortArray0, 5, (-2048), (int) (short) (-808));
      assertArrayEquals(new short[] {(short)56, (short)1157, (short) (-10864), (short)4204, (short) (-425), (short) (-808), (short)43, (short)18, (short)962}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-106.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '9';
      charArray0[3] = '$';
      ArrayUtils.shift(charArray0, 0, 3587, 1673);
      assertArrayEquals(new char[] {'$', '$', '$', '9'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 1922, (Integer) null);
      assertNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) null, 1503, (int) (byte)2, (-973));
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1));
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 2053.3508F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1589.0F);
      floatArray0[4] = (float) (-938);
      ArrayUtils.shift(floatArray0, (-973));
      assertArrayEquals(new float[] {(-1589.0F), (-938.0F), (-1.0F), 2053.3508F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-3471));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1802);
      assertEquals(1802, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(11);
      assertEquals(11, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)38, (byte)1, (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)38, (byte)1, (byte)0, (byte) (-83), (byte) (-1), (byte)1}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-47));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)38, (byte)1, (byte)0, (byte) (-83), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-83);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(longArray0, 4, 3567);
      assertArrayEquals(new long[] {(-83L), 2L, 2L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'J';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = 2595.0;
      doubleArray0[4] = 2595.0;
      doubleArray0[5] = 1603.8968473128;
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) ',';
      characterArray0[1] = (Character) 'J';
      characterArray0[2] = (Character) ',';
      characterArray0[3] = (Character) 'J';
      characterArray0[4] = (Character) 'J';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      ArrayUtils.shift(doubleArray0, (-3942), 3873, (-531));
      assertArrayEquals(new double[] {2595.0, 2595.0, 1603.8968473128, 4.0, 64.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((float[]) null, 54, (int) (short) (-538));
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 76;
      objectArray1[1] = (Object) 76;
      ArrayUtils.reverse(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 828;
      longArray0[1] = (long) 828;
      longArray0[2] = (long) 54;
      longArray0[3] = (long) 2307;
      longArray0[4] = (-591L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {828L, 828L, 54L, 2307L, (-591L)}, longArray1);
      assertArrayEquals(new long[] {828L, 828L, 54L, 2307L, (-591L)}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 36, 48);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      int int0 = 50;
      Integer integer0 = new Integer(50);
      assertEquals(50, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2430));
      assertEquals((-2430), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[2] = integer0;
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 108;
      floatArray0[1] = (-2013.5563F);
      floatArray0[2] = (float) 3583;
      ArrayUtils.swap(floatArray0, (-2430), (-533), 1361);
      assertArrayEquals(new float[] {108.0F, (-2013.5563F), 3583.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) 3583;
      longArray0[2] = (-848L);
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) (-2430);
      longArray0[5] = (long) 1361;
      longArray0[6] = (long) (-2430);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2430L), 3583L, (-848L), (-2430L), (-2430L), 1361L, (-2430L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      Integer integer2 = new Integer(int0);
      assertEquals(50, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) null, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-2430L), 3583L, (-848L), (-2430L), (-2430L), 1361L, (-2430L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)90);
      assertEquals((short)90, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)56;
      Short short2 = new Short((short)56);
      assertEquals((short)56, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short1);
      assertEquals((short)56, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)90);
      assertEquals((short)90, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)90, (short)56, (short)56, (short)90}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(1704, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1704);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer((-1677));
      assertEquals((-1677), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 118;
      doubleArray0[2] = (double) (-1677);
      doubleArray0[3] = (double) 'P';
      doubleArray0[4] = (double) (-2220);
      doubleArray0[5] = (double) 118;
      doubleArray0[6] = (double) 1704;
      doubleArray0[8] = 3.0;
      ArrayUtils.shift(doubleArray0, (-2220), 2146876327, 2146876327);
      assertArrayEquals(new double[] {3.0, (-2.0), 118.0, (-1677.0), 80.0, (-2220.0), 118.0, 1704.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1075;
      shortArray0[1] = (short)1075;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)1075, (short)1075}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1075, (short)1075}, shortArray1);
      assertArrayEquals(new short[] {(short)1075, (short)1075}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)29;
      shortArray0[1] = (short) (byte)29;
      shortArray0[2] = (short) (byte)29;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte)29;
      shortArray0[5] = (short) (byte)29;
      shortArray0[6] = (short) (byte)29;
      shortArray0[7] = (short)1140;
      shortArray0[8] = (short) (byte)29;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)29);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)29, (short)29, (short)29, (short)1, (short)29, (short)29, (short)29, (short)1140, (short)29}, shortArray0);
      assertArrayEquals(new short[] {(short)29, (short)29, (short)29, (short)1, (short)29, (short)29, (short)29, (short)1140, (short)29, (short)29}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)29, (int) (short)1);
      assertEquals(1, int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)29, (short)29, (short)29, (short)1, (short)29, (short)29, (short)29, (short)1140, (short)29}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1140;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1140.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)29, (short)29, (short)29, (short)1, (short)29, (short)29, (short)29, (short)1140, (short)29}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1140.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 47;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {47}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 2053.3508F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 0;
      ArrayUtils.shift(floatArray0, 2);
      assertArrayEquals(new float[] {1.0F, 0.0F, Float.NaN, 2053.3508F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2053.3508F, 2.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0, 1, 2, 0, 0}, intArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, Float.NaN, 2053.3508F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(5, intArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 1, 2, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 19.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, Float.NaN, 2053.3508F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1, 2, 0, 0, 0, 1, 2, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 1, 2, 0, 0}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      Float float0 = new Float((float) (-3631));
      assertEquals((-3631.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3189;
      longArray0[1] = (long) 3189;
      longArray0[2] = (long) (-3976);
      longArray0[3] = 95L;
      longArray0[4] = (long) 436;
      ArrayUtils.shift(longArray0, (-3631), 436, (-3631));
      assertArrayEquals(new long[] {3189L, (-3976L), 95L, 436L, 3189L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-3631), (double) 95L);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-3631), 978, (-3631));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 3189L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3189L, (-3976L), 95L, 436L, 3189L, 3189L}, longArray1);
      assertArrayEquals(new long[] {3189L, (-3976L), 95L, 436L, 3189L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      
      Integer integer0 = new Integer((-3976));
      assertEquals((-3976), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[8] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1646.4375F);
      Float float0 = new Float((-1503.512405));
      assertEquals((-1503.5125F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-344L);
      longArray0[1] = 2169L;
      longArray0[2] = 432L;
      longArray0[3] = 2L;
      longArray0[4] = 0L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-344L), 2169L, 432L, 2L, 0L}, longArray2);
      assertArrayEquals(new long[] {(-344L), 2169L, 432L, 2L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-975);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)7, (short) (-975)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1087.0;
      doubleArray0[1] = (double) 0;
      ArrayUtils.swap(doubleArray0, 2, 0, 0);
      assertArrayEquals(new double[] {1087.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-8));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = '^';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = '';
      charArray1[2] = 'I';
      charArray1[3] = '^';
      charArray1[4] = 'j';
      charArray1[5] = '';
      charArray1[6] = 'j';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', 'j', '^'}, charArray0);
      assertArrayEquals(new char[] {'^', '', 'I', '^', 'j', '', 'j'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(7, charArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-8));
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (byte) (-8));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '^';
      int int0 = 1127;
      intArray0[1] = 1127;
      intArray0[2] = (int) 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2041, (int) (byte) (-8));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2041, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = 828;
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5, 828, (double) 828);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((-3217));
      assertEquals((-3217), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-533);
      floatArray0[1] = (float) (short)1075;
      floatArray0[2] = (float) (short) (-533);
      floatArray0[3] = (float) (short) (-533);
      floatArray0[4] = (float) (short)1075;
      floatArray0[5] = (float) (short)1075;
      floatArray0[6] = (float) (short)1075;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-533.0F), 1075.0F, (-533.0F), (-533.0F), 1075.0F, 1075.0F, 1075.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1004.62376905561);
      doubleArray0[1] = (double) 1075.0F;
      doubleArray0[2] = 1087.0;
      doubleArray0[3] = (double) (short)1075;
      doubleArray0[4] = (double) (short)1075;
      ArrayUtils.swap(doubleArray0, (-751), (-3324), (-1658));
      assertArrayEquals(new double[] {(-1004.62376905561), 1075.0, 1087.0, 1075.0, 1075.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (-2066L);
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, (-2066L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean[] booleanArray0 = ArrayUtils.insert((-1864), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = 'F';
      MutableInt mutableInt0 = new MutableInt(51);
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)51, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)565;
      shortArray0[1] = (short)565;
      shortArray0[2] = (short)565;
      shortArray0[3] = (short)565;
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)565, (short)565, (short)565, (short)565, (short)565}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)565, (short)565, (short)565, (short)565, (short)565}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(62, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Integer integer0 = new Integer(1256);
      assertEquals(1256, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1603.8968473128;
      doubleArray0[1] = (double) 91;
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      charArray0[2] = 'Q';
      charArray0[3] = '-';
      charArray0[4] = '-';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'9', 'c', 'Q', '-', '-'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'I');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'c', 'Q', '-', '-'}, charArray0);
      assertArrayEquals(new char[] {'9', 'c', 'Q', '-', '-'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      ArrayUtils.shift(charArray1, 0, 32, 34);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'c', 'Q', '-', '-'}, charArray0);
      assertArrayEquals(new char[] {'c', 'Q', '-', '-', '9'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1580L);
      longArray0[1] = (long) '-';
      longArray0[2] = (long) 34;
      longArray0[3] = (-1220L);
      longArray0[4] = (long) 'c';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) '-';
      longArray0[7] = 1L;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {45L, 34L, (-1220L), 99L, 0L, 45L, 1L}, longArray1);
      assertArrayEquals(new long[] {(-1580L), 45L, 34L, (-1220L), 99L, 0L, 45L, 1L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, (-1751), integer0);
      assertEquals((-1751), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char char0 = 'Y';
      Character character0 = Character.valueOf('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('Y');
      assertEquals('Y', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('Y');
      assertEquals('Y', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('J');
      assertEquals('J', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('h');
      assertEquals('h', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character2;
      characterArray0[1] = character4;
      characterArray0[2] = character0;
      Character character5 = new Character('D');
      assertEquals('D', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[3] = character5;
      characterArray0[4] = character0;
      characterArray0[5] = character2;
      characterArray0[6] = character4;
      Character character6 = Character.valueOf(char0);
      assertEquals('Y', (char)character6);
      assertTrue(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[7] = character6;
      characterArray0[8] = character2;
      Integer[] integerArray1 = ArrayUtils.insert((int) 0, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)30932;
      shortArray0[6] = (short) (-3082);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2141400123);
      intArray0[1] = (int) (char)character5;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) 'J';
      intArray0[4] = (-1751);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (short) (-3082);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)45, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)1, (byte)0, (byte)45, (byte)1}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2953), (int) (byte)1, (-1536));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray3 = ArrayUtils.subarray(byteArray1, 2161, (-1713));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2801L;
      longArray0[1] = (-3100L);
      longArray0[2] = 308L;
      longArray0[3] = (-117L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-3100L));
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2801L, (-3100L), 308L, (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 308L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2801L, (-3100L), 308L, (-117L)}, longArray0);
      assertArrayEquals(new long[] {2801L, (-3100L), (-117L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 89);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 0, (int) 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 65.15883F;
      floatArray0[3] = (float) 596;
      Integer integer0 = new Integer(496);
      assertEquals(496, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)7;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-128);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-128)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(17, byteArray2.length);
      assertEquals(19, byteArray0.length);
      
      Byte[] byteArray3 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)97;
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)2;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)5, (byte)2, (byte) (-126), (byte)59, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)59, (byte)5, (byte)97, (byte) (-126), (byte)2, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)83}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-2495), (short)1077);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2495, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Integer integer0 = new Integer((short) (-533));
      assertEquals((-533), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (short)565);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-533);
      floatArray0[1] = (float) (short) (-533);
      ArrayUtils.shift(floatArray0, 0, Integer.MAX_VALUE, (-993));
      assertArrayEquals(new float[] {(-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short)565, (-644));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '7';
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('7', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('!');
      assertEquals('!', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('R');
      assertEquals('R', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('p');
      assertEquals('p', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('D');
      assertEquals('D', (char)character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('p');
      assertEquals('p', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('Y');
      assertEquals('Y', (char)character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 235;
      doubleArray0[2] = (double) 235;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) '3';
      ArrayUtils.shift(doubleArray0, (int) (byte)2, (int) (byte)2, (int) (byte)2);
      assertArrayEquals(new double[] {2.0, 235.0, 235.0, 2.0, 51.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1075;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1075, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1075, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)1075, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals("34", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(948L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(14, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2026;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)0;
      ArrayUtils.reverse(intArray0, 1775, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 2026, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 49L, 2);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte) (-44), (int) (byte) (-44), (-188));
      assertArrayEquals(new byte[] {(byte)79, (byte)37, (byte)8, (byte) (-44), (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[5] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[0] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1751.0F);
      doubleArray0[1] = 2026.0;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-369.98F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2026.0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1751.0), 2026.0, (-1.0), (-1.0), 1.0, (-369.9800109863281)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1148);
      intArray0[2] = (-1148);
      intArray0[3] = (-3220);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 448);
      assertNull(integer0);
      assertArrayEquals(new int[] {0, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-6611), integer1);
      assertEquals(15, (int)integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertArrayEquals(new int[] {0, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertNotNull(object3);
      assertSame(object2, object3);
      assertSame(object3, object2);
      
      ArrayUtils.shift(intArray0, (-1148), 56, 2);
      assertArrayEquals(new int[] {(-1148), (-3220), 0, (-1148)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 448).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1148), (-3220), 0, (-1148)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Double double0 = new Double((-6611));
      assertEquals((-6611.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1588.2177408646));
      assertEquals((-1588.2177408646), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 56);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = '?';
      ArrayUtils.swap(charArray0, (int) (byte)59, (-1461));
      assertArrayEquals(new char[] {'t', 't', 't', 't', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (byte)59;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(170.42046284983007);
      assertEquals(170.42046284983007, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-1961L));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 170.42046284983007}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1461));
      assertEquals((-1), int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-751);
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = 1106.3001049384;
      doubleArray0[3] = (double) (-751);
      doubleArray0[4] = (double) 'j';
      ArrayUtils.swap(doubleArray0, (-1584), 2049, (-751));
      assertArrayEquals(new double[] {(-751.0), 51.0, 1106.3001049384, (-751.0), 106.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-68);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-7), (int) (byte) (-91));
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-78), (byte) (-7), (byte) (-68)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ArrayUtils.shift((boolean[]) null, 127, (-498), 127);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-68);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-492), 127);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short) (-68), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Short short0 = new Short((short) (-2229));
      assertEquals((short) (-2229), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[9];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short) (-68);
      shortArray1[2] = short0;
      shortArray1[3] = (Short) (short) (-68);
      shortArray1[4] = short0;
      shortArray1[5] = short0;
      shortArray1[6] = (Short) (short) (-68);
      shortArray1[7] = (Short) (short) (-68);
      shortArray1[8] = short0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-1085);
      intArray0[2] = (-2145521203);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {7, (-1085), (-2145521203)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2145521203);
      doubleArray0[1] = (double) (-1085);
      doubleArray0[2] = (double) (-1085);
      doubleArray0[3] = (double) 7;
      ArrayUtils.shift(doubleArray0, (-2145521203));
      assertArrayEquals(new double[] {7.0, (-2.145521203E9), (-1085.0), (-1085.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1085));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {7.0, (-2.145521203E9), (-1085.0), (-1085.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1085.0), 7.0, (-2.145521203E9), (-1085.0), (-1085.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'c';
      charArray0[2] = '9';
      charArray0[3] = '-';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {')', 'c', '9', '-'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '9');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {')', 'c', '-'}, charArray1);
      assertArrayEquals(new char[] {')', 'c', '9', '-'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1543), 7, 7);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'c', '9', '-', ')'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-46);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1677), (int) (byte)7);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-89), (byte)7, (byte) (-46)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-89), (byte)7, (byte) (-46)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-89), (byte)7, (byte) (-46)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-89), (byte)7, (byte) (-46)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-89), (byte)7, (byte) (-46), (byte) (-47), (byte) (-89), (byte)7, (byte) (-46)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("oM^ TN$SO{.,");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-46), (int) (byte) (-46));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[1];
      Short short0 = new Short((short)828);
      assertEquals((short)828, (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 828;
      intArray0[4] = 828;
      intArray0[3] = 828;
      intArray0[4] = 828;
      intArray0[5] = 828;
      intArray0[6] = 828;
      intArray0[1] = 828;
      ArrayUtils.shift(intArray0, 89);
      assertArrayEquals(new int[] {0, 2, 828, 0, 828, 828, 828, 828}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) 0;
      ArrayUtils.reverse(floatArray0, (-207), 2);
      assertArrayEquals(new float[] {0.0F, 8.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)48;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-28), (byte)3, (byte) (-112), (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-36), (byte) (-28), (byte)3, (byte) (-112), (byte)48}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) '\u0000';
      floatArray0[6] = (float) '\u0000';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '3';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 51.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), (-1));
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(54).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isEquals(object1, object0);
      assertFalse(boolean1);
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(integer1.equals((Object)object2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)integer2));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-629);
      doubleArray0[1] = (double) (-1214);
      doubleArray0[2] = (double) '|';
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (double) 'R';
      ArrayUtils.shift(doubleArray0, 54, Integer.MAX_VALUE, 2026);
      assertArrayEquals(new double[] {(-629.0), (-1214.0), 124.0, 82.0, 82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-9), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)90, (byte) (-9), (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '&';
      objectArray0[1] = (Object) '&';
      objectArray0[2] = (Object) (byte)90;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(2, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 47;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {47}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)19;
      shortArray0[1] = (short) (byte)19;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1140);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)1140}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)4497, (int) (byte)29);
      assertEquals((-1), int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)19, (short)19}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1880.81;
      doubleArray1[1] = (double) (short)19;
      doubleArray1[2] = (double) (short)19;
      doubleArray1[3] = (double) (short)4497;
      doubleArray1[4] = (double) 47;
      doubleArray1[5] = (double) (short)4497;
      doubleArray1[6] = (double) (byte)29;
      doubleArray1[7] = (double) (short)1140;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1880.81, 19.0, 19.0, 4497.0, 47.0, 4497.0, 29.0, 1140.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)1140}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1880.81, 19.0, 19.0, 4497.0, 47.0, 4497.0, 29.0, 1140.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.insert((-1), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (byte)2;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray1 = ArrayUtils.insert(0, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int[] intArray2 = ArrayUtils.clone((int[]) null);
      assertNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1606;
      intArray0[1] = (-6774);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-3192);
      intArray0[4] = 943;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3192), (-6774));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1606, (-6774), Integer.MAX_VALUE, (-3192), 943}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)37;
      Byte byte1 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-6774);
      floatArray0[1] = (float) (-6774);
      floatArray0[2] = (float) 1606;
      floatArray0[3] = (float) (byte)37;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) byte0;
      floatArray0[7] = (-817.2245F);
      floatArray0[8] = (float) 943;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-6774.0F), (-6774.0F), 1606.0F, 37.0F, 2.14748365E9F, 0.0F, 37.0F, (-817.2245F), 943.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      floatArray0[1] = (float) (-3976);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), (-3976.0F), 0.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), (-3631.0F), (-3976.0F), 0.0F, 0.0F, 91.0F, (-3976.0F), 0.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)565;
      doubleArray0[1] = (double) (short)565;
      doubleArray0[2] = (double) (-1763);
      doubleArray0[3] = (double) (-1763);
      doubleArray0[4] = (double) (short)565;
      doubleArray0[5] = (double) '';
      ArrayUtils.shift(doubleArray0, (-2), Integer.MAX_VALUE, (-1073741823));
      assertArrayEquals(new double[] {565.0, 565.0, (-1763.0), (-1763.0), 565.0, 127.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1561), longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-8);
      Integer integer0 = new Integer((-8));
      assertEquals((-8), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-8));
      assertEquals((-8), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1561));
      assertEquals((-1561), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 7;
      Integer integer3 = new Integer(7);
      assertEquals(7, (int)integer3);
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) int1;
      ArrayUtils.swap(floatArray0, (-1561), (-8), (-1275));
      assertArrayEquals(new float[] {(-8.0F), 7.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(35, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2026;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, 9);
      assertFalse(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(9);
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      Float float0 = new Float((float) (-3631));
      assertEquals((-3631.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3189;
      longArray0[1] = (long) 3189;
      longArray0[2] = (long) (-3976);
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      charArray0[8] = '6';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3631), 3189);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray1);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray0);
      assertEquals(0, charArray2.length);
      assertEquals(9, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) floatArray0, (-1), (-3631), 280);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1072, '6');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, 3);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)93;
      byteArray0[3] = (byte)93;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1056), 3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)93, (byte)0, (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)93, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 775, (int) (byte) (-99), (-2293));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'g';
      charArray0[2] = '1';
      ArrayUtils.shift(charArray0, 2, 775, 775);
      assertArrayEquals(new char[] {'=', 'g', '1'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '1';
      objectArray0[1] = (Object) '1';
      objectArray0[2] = (Object) (byte)93;
      objectArray0[3] = (Object) (byte)93;
      ArrayUtils.swap(objectArray0, 3, (-121), (-1));
      assertEquals(4, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2146326379));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-507.904080488);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = 839.05854;
      doubleArray0[3] = (-2393.28913359);
      doubleArray0[4] = 1064.56504943;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2393.28913359), 0.0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-507.904080488), 0.7, 839.05854, (-2393.28913359), 1064.56504943}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-507.904080488), 0.7, 839.05854, (-2393.28913359), 1064.56504943}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)103;
      Byte byte5 = new Byte((byte)103);
      assertEquals((byte)103, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertEquals((byte)103, (byte)byte6);
      assertFalse(byte4 == byte1);
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte1);
      assertEquals((byte) (-1), (byte)byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte1 == byte4);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte9);
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      try { 
        Byte.valueOf(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1368L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[1] = 5369L;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 5369L;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) (short)1;
      objectArray0[4] = (Object) 1.0;
      Integer integer0 = new Integer(85);
      assertEquals(85, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, 32, (Object) integer0);
      assertEquals(85, object0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = object0;
      ArrayUtils.shift(objectArray0, (-5545), (-2257), (int) (short)1);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.reverse((int[]) null, 342, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double double0 = new Double((-2220.0));
      assertEquals((-2220.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null, 1028, 1028);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 35;
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, 11);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1202;
      shortArray0[2] = (short)89;
      shortArray0[3] = (short) (-4048);
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1202, (short)89, (short) (-4048), (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)1202;
      intArray0[2] = (int) (short)89;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short)2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2, 1202, 89, 2, 2}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 0, (-549.5173F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-549.5173F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(":a~5T84FU B1Ej");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, (-5484));
      assertNull(integer2);
      assertEquals(3, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) int0);
      assertEquals(0, object0);
      assertTrue(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertNotNull(object0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = (-5484);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      int int1 = ArrayUtils.indexOf(longArray0, (-1144L), (-2184));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      ArrayUtils.swap(byteArray0, (-5484), (-5484), (int) (byte)52);
      assertArrayEquals(new byte[] {(byte)104, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)104, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '1';
      charArray0[2] = ';';
      charArray0[3] = ')';
      charArray0[4] = 'e';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'7', '1', ';', ')', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, 828, 9);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)6);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      Double double0 = new Double((-3631));
      assertEquals((-3631.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(299.5698621);
      assertEquals(299.5698621, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[5];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "");
      assertNotNull(stringArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2521.57F));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'l';
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) byte0;
      longArray0[5] = 1340L;
      longArray0[6] = 778L;
      longArray0[7] = 778L;
      longArray0[8] = (long) byte0;
      int int0 = ArrayUtils.indexOf(longArray0, 778L, (int) byte0);
      assertEquals(6, int0);
      assertArrayEquals(new long[] {108L, 2L, 2L, 108L, 2L, 1340L, 778L, 778L, 2L}, longArray0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray1 = new byte[0];
      ArrayUtils.swap(byteArray1, 6, (int) byte0, (int) (byte)52);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)41;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51, (short)41, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (-1536), 89);
      assertArrayEquals(new short[] {(short)51, (short)41, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)80);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte) (-78));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      int[] intArray0 = new int[2];
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) object0;
      integerArray0[1] = (Integer) object0;
      integerArray0[2] = (Integer) object0;
      integerArray0[3] = (Integer) object0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, 828, 9);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-78));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte)7, (byte)7}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-19));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)7, (byte)7}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)7, (byte)7}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)7);
      assertEquals(7, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, 965.6F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {965.6F, (-1.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) (-1);
      ArrayUtils.shift(longArray0, 2319);
      assertArrayEquals(new long[] {(-1L), 100L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift(longArray0, (-1098), 2319, (-1788));
      assertArrayEquals(new long[] {(-1L), 100L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 100L}, longArray0);
      assertArrayEquals(new long[] {100L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 91L;
      longArray0[1] = (-1183L);
      longArray0[2] = 91L;
      longArray0[3] = 155L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1183L), 91L, 155L, 91L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1272));
      assertNull(integer1);
      assertEquals(3, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 904);
      assertEquals((-1), int0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221419);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2126221419, 128);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)123;
      ArrayUtils.shift(byteArray0, 0, (int) (byte)2, 2052);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-48), (byte)2, (byte)0, (byte) (-125), (byte)11, (byte)114, (byte)123}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.swap((char[]) null, 1, (int) (byte) (-15), 7);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1123.409983921401;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-13);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '1';
      charArray0[2] = 'o';
      charArray0[3] = 'L';
      charArray0[4] = 'a';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'o');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'~', '1', 'o', 'L', 'a'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-127), 2, (-2356));
      assertArrayEquals(new byte[] {(byte) (-127), (byte)8, (byte)4, (byte)0, (byte) (-13), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(18688);
      assertEquals(18688, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(18688, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(9, integerArray0.length);
      
      integerArray0[1] = integer1;
      try { 
        Integer.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      int int0 = 50;
      Integer integer0 = new Integer(50);
      assertEquals(50, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2430));
      assertEquals((-2430), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, int0, (Integer) null);
      assertNull(integer2);
      assertEquals(4, integerArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) integerArray0, 0, (-1), (-938));
      assertEquals(4, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2430), (-2430), 50, 50}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 647.9F;
      floatArray0[1] = (float) (-2430);
      floatArray0[2] = (float) (-938);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (int)integerArray0[0];
      floatArray0[5] = (float) (-938);
      floatArray0[6] = (float) (int)integerArray0[0];
      floatArray0[7] = (float) (-2430);
      floatArray0[8] = (-1589.0F);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {(-2430.0F), (-938.0F), 0.0F, (-2430.0F), (-938.0F), (-2430.0F), (-2430.0F), (-1589.0F), 647.9F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 108;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 108;
      ArrayUtils.swap(floatArray0, (-1812), (int) (short)0, 2694);
      assertArrayEquals(new float[] {108.0F, 0.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-1812);
      longArray0[2] = (long) 2694;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1812L), 2694L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-2392L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 29L;
      longArray0[1] = (long) (-1);
      longArray0[2] = 29L;
      longArray0[3] = (-2392L);
      longArray0[4] = (long) 5;
      longArray0[5] = (-2392L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2735L, 5);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {29L, (-1L), 29L, (-2392L), 5L, (-2392L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1763);
      longArray0[1] = (long) 1;
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1763), 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 1, 1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean3);
      assertArrayEquals(new long[] {(-1763L), 1L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray2 = ArrayUtils.remove(charArray0, 1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1506);
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)2168;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1506), (short)11, (short)2168, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1506), (short)11, (short)2168, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-27));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-85), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-85), (byte)1}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, (-5484));
      assertNull(integer2);
      assertEquals(3, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) int0);
      assertEquals(0, object0);
      assertTrue(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      int[] intArray0 = new int[12];
      intArray0[1] = int0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1950;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1950.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1075, (short) (-533), (short)565, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[2] = '3';
      charArray0[3] = '\u0092';
      charArray0[4] = 'j';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)565;
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) (short)565;
      floatArray0[3] = (float) '\u0092';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {565.0F, 51.0F, 565.0F, 146.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)565;
      intArray0[1] = (int) (short) (-533);
      intArray0[2] = (int) (short) (-533);
      intArray0[3] = (int) '3';
      intArray0[4] = (int) 'j';
      intArray0[5] = (int) '3';
      intArray0[6] = (int) (short)565;
      intArray0[7] = (int) (short) (-533);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {565, (-533), (-533), 51, 106, 51, 565, (-533)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1004.62376905561);
      doubleArray0[1] = (double) (short) (-533);
      doubleArray0[2] = (double) 146.0F;
      doubleArray0[3] = (double) 146.0F;
      doubleArray0[4] = (double) 51.0F;
      doubleArray0[5] = (double) 'j';
      ArrayUtils.swap(doubleArray0, (-751), 0, 565);
      assertArrayEquals(new double[] {(-1004.62376905561), (-533.0), 146.0, 146.0, 51.0, 106.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-470));
      assertEquals((-470L), mutableInt0.longValue());
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals((-470), (int)mutableInt0.toInteger());
      assertEquals((-470.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-470), (int)mutableInt0.getValue());
      assertEquals((-470.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-470", mutableInt0.toString());
      assertEquals((short) (-470), mutableInt0.shortValue());
      assertEquals((-470), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Boolean boolean0 = Boolean.valueOf("%s was not annotated with %s or %s but should have been.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("%s was not annotated with %s or %s but should have been.");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.valueOf("%s was not annotated with %s or %s but should have been.");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[4] = boolean6;
      booleanArray0[2] = boolean4;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "z7d[^3m>KGF");
      assertNotNull(stringArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-470);
      intArray0[1] = (-148);
      intArray0[2] = (-470);
      intArray0[3] = (-470);
      intArray0[4] = (-470);
      intArray0[5] = (-470);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-470), 588);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-470), (-148), (-470), (-470), (-470), (-470)}, intArray0);
      assertArrayEquals(new int[] {(-470), (-148), (-470), (-470), (-470), (-470)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, (boolean) boolean1);
      assertEquals(1, int0);
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean6));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 695;
      intArray0[2] = (-2216);
      intArray0[3] = 4;
      intArray0[4] = (-148);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 4);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1, 695, (-2216), 4, (-148)}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = 'P';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.add(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-', 'K', 'P', 't'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', 'P', 't', '-'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-148);
      integerArray0[1] = (Integer) 1;
      Integer integer0 = Integer.valueOf(695);
      assertEquals(695, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) (-148);
      integerArray0[5] = (Integer) 1;
      integerArray0[6] = (Integer) (-148);
      int[] intArray3 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertFalse(int0 == int1);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {(-148), 1, 695, 1, (-148), 1, (-148)}, intArray3);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1528.9);
      doubleArray0[2] = (double) 512;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (-1528.9);
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {(-1528.9), 1.0, (-1528.9), 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      ArrayUtils.shift(charArray0, (-1090));
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'.', '.', '.', '.'}, charArray1);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'd';
      charArray0[2] = 'A';
      charArray0[3] = 'K';
      charArray0[4] = 'A';
      charArray0[5] = 'd';
      charArray0[7] = 'd';
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer integer0 = new Integer(586);
      assertEquals(586, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[2] = (short) (byte)51;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)51, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)51, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1603.8968473128;
      doubleArray0[1] = (double) 91;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {1603.8968473128, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 11, 2, 2);
      assertArrayEquals(new double[] {1603.8968473128, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-44);
      shortArray0[1] = (short) (-44);
      shortArray0[2] = (short) (-44);
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)1075;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short) (-44), (short)6, (short)1075}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short) (-44), (short)6, (short)1075}, shortArray0);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short) (-44), (short)6, (short)1075}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      short[] shortArray0 = new short[11];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(11, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(10, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[9] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(10, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) integerArray0[1];
      integerArray0[5] = integerArray0[0];
      ArrayUtils.shift(intArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1272)}, intArray0);
      assertEquals(10, integerArray0.length);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)856;
      shortArray0[2] = (short)1317;
      shortArray0[3] = (short) (-15925);
      shortArray0[4] = (short)8;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)856, (short)1317, (short) (-15925), (short)8}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-15925);
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[2] = (float) (short)1317;
      floatArray0[3] = (float) (short)8;
      floatArray0[4] = (float) (short)8;
      floatArray0[5] = (float) (short)1317;
      floatArray0[6] = (float) (-1272);
      floatArray0[7] = (float) (short)8;
      ArrayUtils.reverse(floatArray0, 0, (int) (short)0);
      assertArrayEquals(new float[] {(-15925.0F), (-1272.0F), 1317.0F, 8.0F, 8.0F, 1317.0F, (-1272.0F), 8.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_CHAR_ARRAY, '');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1), (-1), (-2730));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)848;
      shortArray0[1] = (short)37;
      shortArray0[2] = (short)1088;
      shortArray0[3] = (short) (-2);
      shortArray0[4] = (short)1523;
      shortArray0[5] = (short) (-2207);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2207));
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short)848, (short)37, (short)1088, (short) (-2), (short)1523, (short) (-2207)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      int int0 = ArrayUtils.indexOf(charArray0, 'G');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Z', ']'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-43);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte) (-43));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-43)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse(charArray0, (int) (byte) (-43), 1);
      assertArrayEquals(new char[] {'Z', ']'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "@CartesianProductTest not found.");
      assertEquals("1", string0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) (short) (-43);
      longArray0[2] = (long) (short) (-43);
      longArray0[3] = (long) (short) (-43);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-43L));
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {90L, (-43L), (-43L), (-43L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ']');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray1);
      assertArrayEquals(new char[] {'Z', ']'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      try { 
        Integer.valueOf("@CartesianProductTest not found.", 3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@CartesianProductTest not found.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-580.8F);
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) 'l';
      int int0 = ArrayUtils.indexOf(floatArray0, 108.0F, (int) (byte)2);
      assertEquals(3, int0);
      assertArrayEquals(new float[] {(-580.8F), 108.0F, 2.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift((int[]) null, 3, 6, (-7));
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2821, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2821, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-297));
      assertEquals((-297), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, (-1751), integer1);
      assertEquals((-297), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-4343);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-4343)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) (-297);
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (byte)0, 15);
      assertArrayEquals(new double[] {11.0, (-297.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-297));
      assertEquals((-297), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, (-1751), integer1);
      assertEquals((-297), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2316);
      intArray0[1] = (-1122);
      intArray0[2] = (-584);
      intArray0[3] = (-1751);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-288);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2145777941));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2316), (-1122), (-584), (-1751), 0, (-288)}, intArray0);
      assertArrayEquals(new int[] {(-2145777941), (-2316), (-1122), (-584), (-1751), 0, (-288)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8966);
      int[] intArray0 = new int[2];
      intArray0[0] = 102;
      intArray0[1] = (int) (short) (-8966);
      ArrayUtils.shift(intArray0, (-2973), (-1331), (-8966));
      assertArrayEquals(new int[] {102, (-8966)}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1535), 207);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 102);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {102, (-8966)}, intArray0);
      assertArrayEquals(new int[] {102, 102, (-8966)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      charArray0[7] = 'U';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.shift((Object[]) null, 2024, 1, 2024);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '8');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-495), (-1578), (-495));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2480, (int) (byte)7);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)35, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)35, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)35, (byte)7, (byte)7, (byte)35, (byte)7}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray2.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 2480);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift(byteArray1, (-59), (-2993), 1329);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)35, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean("Can't find a public method for ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("OBw}&t=+*5#?N&I5{!t");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("w");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      
      boolean boolean5 = ArrayUtils.contains((Object[]) booleanArray1, (Object) null);
      assertFalse(boolean5);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1763L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1763L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray0, 3347, 248);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'V';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'#', 'V'}, charArray1);
      assertArrayEquals(new char[] {'#', 'V'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1238), (-1238));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2257);
      floatArray0[1] = (float) (-1238);
      floatArray0[2] = (float) (-2257);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (-2257);
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (float) (-2257);
      ArrayUtils.shift(floatArray0, 596, (-1689), (-2257));
      assertArrayEquals(new float[] {(-2257.0F), (-1238.0F), (-2257.0F), 0.0F, Float.NaN, (-2257.0F), Float.NaN, (-2257.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2257);
      longArray0[1] = (long) (-1238);
      longArray0[2] = (long) (-1689);
      longArray0[3] = (long) (-1689);
      longArray0[4] = (long) (-2257);
      longArray0[5] = (long) (-2257);
      int int0 = ArrayUtils.indexOf(longArray0, (-1689L), 596);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2257L), (-1238L), (-1689L), (-1689L), (-2257L), (-2257L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 45;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 2, 13, 948);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 65.15883F;
      floatArray0[2] = (float) (-2257);
      floatArray0[3] = (float) 596;
      ArrayUtils.shift(floatArray0, (-2257), 596, (-2529));
      assertArrayEquals(new float[] {65.15883F, (-2257.0F), 596.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-2257);
      longArray2[1] = (long) 14;
      longArray2[2] = (long) 14;
      longArray2[3] = (long) 14;
      int int0 = ArrayUtils.indexOf(longArray2, (long) 596, 0);
      assertEquals((-1), int0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-2257L), 14L, 14L, 14L}, longArray2);
      assertEquals(4, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-2244), 584, (-2244));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1636), 1073741824, 1073741824);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3.833704F;
      floatArray0[1] = 1220.3148F;
      floatArray0[2] = 3.833704F;
      ArrayUtils.shift(floatArray0, 1, 1, 533);
      assertArrayEquals(new float[] {3.833704F, 1220.3148F, 3.833704F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 50;
      Integer integer1 = new Integer(50);
      assertEquals(50, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2430));
      assertEquals((-2430), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, int0, (Integer) null);
      assertNull(integer3);
      assertEquals(4, integerArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) integerArray0, 0, (-1), (-938));
      assertEquals(4, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2430), (-2430), 50, 50}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 647.9F;
      floatArray0[1] = (float) (-2430);
      floatArray0[2] = (float) (-938);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (int)integerArray0[0];
      floatArray0[5] = (float) (-938);
      floatArray0[6] = (float) (int)integerArray0[0];
      floatArray0[7] = (float) (-2430);
      floatArray0[8] = (-1589.0F);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {(-2430.0F), (-938.0F), 0.0F, (-2430.0F), (-938.0F), (-2430.0F), (-2430.0F), (-1589.0F), 647.9F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      Double double0 = new Double((-3631));
      assertEquals((-3631.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(299.5698621);
      assertEquals(299.5698621, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-3976.0);
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      Float float0 = new Float((double) doubleArray1[2]);
      assertEquals(299.56985F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.insert((-4008), arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1043), 1720, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 93.43;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {93.43, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {93.43, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character character0 = new Character(']');
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 93.43;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) 93.43;
      objectArray0[3] = (Object) 93.43;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 915);
      assertEquals(1, int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-600), (-600), (-600));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-538.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 102.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-588);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      ArrayUtils.reverse(doubleArray0, (-1), 1096);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-588.0), (-1.0), 102.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (-588));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = Character.toChars(1096);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0448'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(booleanArray1, 427);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2575));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (int) (byte)0, (-762));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, (-1751), (-2648));
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 311);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1107.298F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 76.78159F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1107.298F), 0.0F, 0.0F, 0.0F, 76.78159F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-71), Integer.MIN_VALUE);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Double double0 = new Double(709.29);
      assertEquals(709.29, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(2267);
      assertEquals(2267, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(2267, object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 828;
      doubleArray0[0] = 79.8792;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, 2833.73888426615, 828.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, 2833.73888426615, 828.0, 0.0, 79.8792, 2833.73888426615, 828.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[1] = (byte)3;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Integer integer0 = new Integer((-733));
      assertEquals((-733), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 1);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)67;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-342));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(9);
      assertEquals(9, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer1, (-101));
      assertEquals((-1), int1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Integer integer0 = new Integer(1770);
      assertEquals(1770, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 321);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)6);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      floatArray0[1] = (float) (byte)13;
      byteArray0[7] = (byte)13;
      long[] longArray0 = ArrayUtils.insert(616, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[3] = 616;
      intArray0[2] = (int) (byte)13;
      intArray0[3] = (int) (byte)13;
      intArray0[4] = (int) (byte)13;
      intArray0[5] = (-1772);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 13, 13, 13, (-1772)}, intArray1);
      assertArrayEquals(new int[] {0, 0, 13, 13, 13, (-1772)}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 13;
      integerArray0[1] = (Integer) 13;
      integerArray0[2] = (Integer) (-1772);
      integerArray0[3] = (Integer) 13;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(6L);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {6L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertNotNull(longArray3);
      assertSame(longArray0, longArray2);
      assertSame(longArray0, longArray3);
      assertSame(longArray2, longArray3);
      assertSame(longArray2, longArray0);
      assertSame(longArray3, longArray2);
      assertSame(longArray3, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short) (-538));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-538)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ArrayUtils.reverse((double[]) null, (-1535), 85);
      ArrayUtils.reverse(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Long long0 = new Long(85);
      assertEquals(85L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 1);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)127;
      ArrayUtils.shift(byteArray0, (int) (byte)124, (int) (byte)47, 1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)47, (byte)67, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 95L, (int) (byte)124);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(byteArray0, (int) (byte)67, 1267, 0);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)47, (byte)67, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = Integer.valueOf((-343));
      assertEquals((-343), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-343), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-343), object1);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-343), object2);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Integer integer1 = new Integer((-343));
      assertEquals((-343), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object2));
      assertTrue(integer1.equals((Object)object0));
      assertTrue(integer1.equals((Object)object1));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object2));
      assertTrue(integer1.equals((Object)object0));
      assertTrue(integer1.equals((Object)object1));
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-343);
      longArray0[1] = (long) (-343);
      longArray0[2] = (long) (-343);
      longArray0[3] = (-2376L);
      longArray0[4] = (long) (-343);
      longArray0[5] = (long) (-343);
      longArray0[6] = (long) (-343);
      longArray0[7] = (long) (-343);
      longArray0[8] = (long) (-343);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-343L), (-343L), (-343L), (-2376L), (-343L), (-343L), (-343L), (-343L), (-343L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '.';
      ArrayUtils.shift(charArray0, (-343), (-343), (-659));
      assertArrayEquals(new char[] {'9', '.'}, charArray0);
      assertEquals(2, charArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3092.14F);
      floatArray0[1] = (float) (-343L);
      floatArray0[2] = (float) (-343L);
      floatArray0[3] = (float) '.';
      floatArray0[4] = (float) '.';
      floatArray0[5] = (float) (-343L);
      floatArray0[6] = (float) '9';
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-3092.14F), (-343.0F), (-343.0F), 46.0F, 46.0F, (-343.0F), 57.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1721.0499F;
      floatArray0[1] = 1721.0499F;
      floatArray0[2] = 1721.0499F;
      floatArray0[3] = 1721.0499F;
      floatArray0[4] = 1721.0499F;
      floatArray0[5] = 1721.0499F;
      floatArray0[6] = 1721.0499F;
      floatArray0[7] = 1721.0499F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1721.0499F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F, 1721.0499F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-393);
      shortArray0[1] = (short)69;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2527);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-393), (short)69}, shortArray0);
      assertArrayEquals(new short[] {(short) (-393), (short)69, (short)2527}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (int) (short)69);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-393), (short)69}, shortArray0);
      assertArrayEquals(new short[] {(short) (-393), (short)69, (short)2527}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1721.0499F;
      doubleArray0[2] = (double) 1721.0499F;
      doubleArray0[3] = (double) 1721.0499F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1566.0), (-90));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1721.0499267578125, 1721.0499267578125, 1721.0499267578125}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0, 3415);
      assertEquals((-1), int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1922;
      intArray0[1] = (-168);
      intArray0[2] = (-2216);
      intArray0[3] = (-168);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1922, (-168), (-2216), (-168), 0}, intArray0);
      assertArrayEquals(new int[] {1922, (-168), (-2216), (-168), 0, 1922, (-168), (-2216), (-168), 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'l';
      longArray0[1] = (long) 'l';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((float[]) null, 607);
      int[] intArray0 = new int[3];
      intArray0[0] = 607;
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'l';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 607, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 21, 21, 21);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '9');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1751);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-1751);
      longArray0[5] = (long) (-1751);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 1135L);
      assertNull(longArray1);
      
      boolean[] booleanArray4 = ArrayUtils.remove(booleanArray1, 1);
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray4.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1770.0;
      doubleArray0[2] = 4220.803;
      doubleArray0[3] = (-2983.5854);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) (-1073741823);
      doubleArray0[8] = 1.0;
      ArrayUtils.shift(doubleArray0, 108, 13, 36);
      assertArrayEquals(new double[] {0.0, 1770.0, 4220.803, (-2983.5854), (-1.0), 0.0, 11.0, (-1.073741823E9), 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      ArrayUtils.shift((long[]) null, 3346, 3346, 3346);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 436;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 436;
      doubleArray0[6] = (double) '-';
      doubleArray0[7] = (-2633.0);
      doubleArray0[8] = (double) '-';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 764.0, 35.20000076293945);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2.0, 2.0, 1.0, 436.0, 1.0, 436.0, 45.0, (-2633.0), 45.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) '-';
      floatArray2[1] = (float) 3346;
      floatArray2[2] = (float) 3346;
      floatArray2[3] = (float) 1;
      floatArray2[4] = (float) (byte)2;
      floatArray2[5] = (float) 436;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray2, 3346, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3346, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-897), (-897), (-482));
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)45;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)45, (-1275));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)126, (byte)45, (byte)45, (byte)1, (byte)45}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)126, (byte)45, (byte)45, (byte)1, (byte)45}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) (byte)45;
      floatArray0[2] = (float) (byte)126;
      floatArray0[3] = (float) (byte)126;
      floatArray0[4] = (float) 'l';
      floatArray0[5] = (float) (byte)1;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)126);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {45.0F, 45.0F, 108.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 45.0F, 126.0F, 126.0F, 108.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {45.0F, 45.0F, 108.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 45.0F, 126.0F, 126.0F, 108.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)126, (byte)45, (byte)45, (byte)1, (byte)45}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {45.0F, 45.0F, 126.0F, 126.0F, 108.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer integer0 = new Integer((byte)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-7), (-641));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-7);
      intArray0[1] = (int) 'S';
      intArray0[2] = (int) 'S';
      intArray0[3] = (-641);
      intArray0[4] = (-2636);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-7), 83, 83, (-641), (-2636)}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-7), 83, 83, (-641), (-2636)}, intArray0);
      assertArrayEquals(new int[] {(-7), 83, 83, (-641), (-2636)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-641), 83, 127);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.swap(shortArray0, (-641), 57, 2699);
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1377L;
      longArray0[1] = 1909L;
      longArray0[2] = 2278L;
      longArray0[3] = 0L;
      longArray0[4] = 91L;
      longArray0[5] = 0L;
      longArray0[6] = 155L;
      longArray0[7] = (-557L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {1909L, 2278L, 0L, 91L, 0L, 155L, (-557L), 1377L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-557L);
      doubleArray0[2] = (double) 2278L;
      doubleArray0[3] = 147.518854;
      doubleArray0[4] = (double) 0L;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-120));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)60);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (byte)2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[0];
      int int0 = 2282;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2282, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'j';
      intArray0[1] = (int) '$';
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2282, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2282, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1288), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      doubleArray0[1] = 2833.73888426615;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 828;
      floatArray0[1] = (float) (short) (-538);
      floatArray0[2] = (float) 828;
      floatArray0[3] = (float) (short) (-538);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 4022, 828);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {828.0F, (-538.0F), 828.0F, (-538.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift((char[]) null, 4022);
      short[] shortArray0 = ArrayUtils.insert(4022, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1185));
      assertEquals((-1185), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst((float[]) null, 1766.396F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1766.396F}, floatArray2, 0.01F);
      assertEquals(1, floatArray2.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-538.0F));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-538.0), 2833.73888426615, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-538.0), (-538.0), 2833.73888426615, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(948L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(14, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)52;
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)91}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift(byteArray1, (-2329), 2097542167, 2097542167);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom(2097542167);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 0.0, 79.8792, (-538.0), 2833.73888426615, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 828);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)0, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (long) 828;
      longArray0[3] = (long) 828;
      longArray0[4] = (long) 828;
      longArray0[5] = (long) (short) (-538);
      longArray0[6] = (long) 377;
      longArray0[7] = (long) (byte)3;
      ArrayUtils.reverse(longArray0, Integer.MAX_VALUE, 5);
      assertArrayEquals(new long[] {0L, 1L, 828L, 828L, 828L, (-538L), 377L, 3L}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.shift(byteArray0, (-1815), 1810, (-1613));
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1011);
      shortArray0[1] = (short)17;
      shortArray0[2] = (short)734;
      shortArray0[3] = (short)17;
      shortArray0[4] = (short)2821;
      shortArray0[5] = (short)1699;
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '%';
      charArray0[2] = 'C';
      charArray0[3] = 'j';
      charArray0[4] = 'w';
      charArray0[5] = 'Y';
      charArray0[6] = '>';
      charArray0[7] = 'b';
      charArray0[8] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '5', (int) (short)17);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'p', '%', 'C', 'j', 'w', 'Y', '>', 'b', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (short)1699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1528.9);
      doubleArray0[2] = (double) 512;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (-1528.9);
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {(-1528.9), 1.0, (-1528.9), 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1185.69F;
      floatArray0[1] = (-1363.7081F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-1763);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1703.3104F, 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1185.69F, (-1363.7081F), (-1.0F), 1.0F, (-1763.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 672.11F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[1] = '=';
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) '=';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 32.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = (int) ' ';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (short)0, 32);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Integer[] integerArray0 = new Integer[11];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(11, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2142060709));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 1396);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) (-2142060709);
      floatArray0[2] = (float) (byte) (-9);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (byte) (-9);
      floatArray0[7] = (float) 1;
      ArrayUtils.reverse(floatArray0, 0, 1074);
      assertArrayEquals(new float[] {1.0F, (-9.0F), 1.0F, 0.0F, 0.0F, (-9.0F), (-2.14206067E9F), 90.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int int2 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1074);
      assertEquals(1074, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertEquals(1074, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("line.separator");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer((-3211));
      assertEquals((-3211), (int)integer3);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1396);
      assertEquals(1396, (int)integer4);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertEquals(1074, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertNotNull(integer5);
      assertEquals(7, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2517);
      assertEquals(2517, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2026;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) 2026);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 2427.4321F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2427.4321F, 2026.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 478;
      longArray0[2] = (long) 478;
      longArray0[3] = (long) 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[1];
      doubleArray0[5] = (double) 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '('}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int[] intArray0 = new int[3];
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      Character character0 = new Character('\"');
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '\"');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray2);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray2.length);
      
      ArrayUtils.shift(intArray0, 15);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) (byte)38;
      ArrayUtils.shift(longArray0, 7);
      assertArrayEquals(new long[] {38L, 102L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((float[]) null, 7);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 102.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 102.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-83);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-', '{', '{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte) (-83);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)38;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-83);
      ArrayUtils.shift(intArray0, 15);
      assertArrayEquals(new int[] {38, 0, (-83)}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (char)character0;
      longArray0[1] = (long) (byte)38;
      ArrayUtils.shift(longArray0, (-83));
      assertArrayEquals(new long[] {38L, 45L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte) (-83), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shift(floatArray1, (-2995));
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[4] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-83);
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[2] = (double) '-';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-83);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-', '{', '{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte) (-83);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)38;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-83);
      ArrayUtils.shift(intArray0, 15);
      assertArrayEquals(new int[] {38, 0, (-83)}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (char)character0;
      longArray0[1] = (long) (byte)38;
      ArrayUtils.shift(longArray0, (-83));
      assertArrayEquals(new long[] {38L, 45L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte) (-83), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shift(floatArray1, (-2995));
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-68);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-7), (int) (byte) (-91));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-78), (byte) (-7), (byte) (-68)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 0.1, 160, 3.0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 160);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'O';
      charArray0[2] = 'A';
      charArray0[3] = 'R';
      charArray0[4] = 'F';
      charArray0[5] = 'E';
      charArray0[6] = 'x';
      charArray0[7] = '{';
      char[] charArray1 = ArrayUtils.add(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'=', 'O', 'A', 'R', 'F', 'E', 'x', '{', 'h'}, charArray1);
      assertArrayEquals(new char[] {'=', 'O', 'A', 'R', 'F', 'E', 'x', '{'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Integer integer0 = Integer.valueOf(927);
      assertEquals(927, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-51), (-51), 840);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-346.98);
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (-102.498322);
      doubleArray0[4] = 118.0;
      doubleArray0[5] = 2328.5306;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1500.204272);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-346.98), 3.0, 0.1, (-102.498322), 118.0, 2328.5306, 1.0, (-1500.204272)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1962.5662F;
      floatArray0[2] = 1662.2F;
      floatArray0[3] = (-2976.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-368.38428F);
      floatArray0[6] = 1583.3376F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1583.7F);
      ArrayUtils.swap(floatArray0, 1842, 2681, 108);
      assertArrayEquals(new float[] {1.0F, 1962.5662F, 1662.2F, (-2976.0F), 1.0F, (-368.38428F), 1583.3376F, 0.0F, (-1583.7F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[8] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1016));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)2, (short)2, (short)0, (short)0, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)2, (short)2, (short)0, (short)0, (short)2}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-124);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      ArrayUtils.reverse(byteArray0, (int) (short)0, (int) (short)2);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)2, (byte)2, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray2 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray2);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.add(floatArray2, (float) (byte) (-124));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-124.0F)}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray3.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)56;
      ArrayUtils.shift(byteArray0, 54, 1060, 1);
      assertArrayEquals(new byte[] {(byte)127, (byte)1, (byte)4, (byte) (-44), (byte) (-1), (byte)56}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer4, (-6611));
      assertEquals((-1), int0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[5] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) (byte) (-83);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) 436;
      ArrayUtils.shift(longArray0, 1, 3189, 1);
      assertArrayEquals(new long[] {45L, 436L, (-83L), 2L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0.0F, (-988.6707763671875));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)1, 54);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (-84L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      Character character0 = new Character('T');
      assertEquals('T', (char)character0);
      assertNotNull(character0);
      
      Integer[] integerArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[4];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) (byte)0, (int) (byte)0, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(91, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 5506.0864266344);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(2215, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '&';
      intArray0[2] = (int) '&';
      intArray0[3] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {38, 38, (-1), 45}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "k$_hFOpap");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, 2293, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[0] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'k', 2);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) 'l';
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) 'l';
      doubleArray0[6] = 905.0367655487;
      int int0 = ArrayUtils.indexOf(doubleArray0, 141.7132401503819, (int) (byte)2, 141.7132401503819);
      assertEquals(2, int0);
      assertEquals(25, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) 'l';
      int int1 = ArrayUtils.indexOf(intArray0, (int) byte0, 2146755547);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2, 108}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(367L);
      assertEquals(367L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 367L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {367L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0.0F, (-988.6707763671875));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)1, 87);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) 87);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (int) (short)1);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-890L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-890L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3005.771F, 2026);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-873));
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Long long0 = new Long(2026);
      assertEquals(2026L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-601L));
      assertEquals((-601L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) Integer.MAX_VALUE);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 2145846846);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 126.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {126.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-393));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-393)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, 2414);
      assertArrayEquals(new short[] {(short) (-393)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 170.42046284983007, (int) (short) (-393));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[2] = '$';
      ArrayUtils.shift(charArray0, (int) (short)565);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '$', '\u0000', '\u0000', '\u0000', '$'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 36;
      intArray0[1] = (int) (short)565;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)565;
      intArray0[4] = (int) (short) (-533);
      intArray0[5] = (int) (short)565;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {36, 565, 0, 565, (-533), 565}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)34;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)34);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)24, (byte)28, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3;
      ArrayUtils.shift(floatArray0, (int) (byte)28, Integer.MAX_VALUE, (int) (byte)28);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)34);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)24, (byte)28, (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)24, (byte)28}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1001.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1001.0F), 3.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-33);
      doubleArray0[1] = (double) (byte)24;
      doubleArray0[2] = (double) (byte)24;
      doubleArray0[3] = (double) (byte) (-33);
      doubleArray0[4] = (double) (byte)24;
      doubleArray0[5] = (double) (byte) (-33);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)24;
      doubleArray1[1] = (double) (byte)24;
      doubleArray1[2] = (double) Integer.MAX_VALUE;
      doubleArray1[3] = (double) (byte) (-33);
      doubleArray1[4] = (double) (byte)28;
      doubleArray1[5] = (double) Integer.MAX_VALUE;
      doubleArray1[6] = (double) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {24.0, 24.0, 2.147483647E9, (-33.0), 28.0, 2.147483647E9, 2.147483647E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-33.0), 24.0, 24.0, (-33.0), 24.0, (-33.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)5, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)2, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray2 = ArrayUtils.insert((int) '~', (char[]) null, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) byte0);
      char[] charArray3 = ArrayUtils.insert(3687, (char[]) null, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(charArray3);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 1708);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1736));
      assertEquals((-1736), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1736), integer1);
      assertEquals((-1736), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = (Integer)ArrayUtils.get((Object[]) integerArray2, 1365, (Object) integer0);
      assertEquals(1, (int)integer4);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1072), 1365);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer[] integerArray3 = ArrayUtils.subarray(integerArray0, (-2180), 1);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray3.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray2, 1365);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(intArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertArrayEquals(new int[] {(-1736)}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray1, 1810);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray3);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 2319;
      ArrayUtils.swap(intArray0, 0, 214, (-3343));
      assertArrayEquals(new int[] {0, 2319, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      Float float0 = new Float((-1547.032F));
      assertEquals((-1547.032F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      intArray0[3] = 1;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap(intArray0, 0, 16, 1);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 16);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {16, 0, 0, 1, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-533);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-533.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short) (-533);
      floatArray0[2] = (float) (short) (-533);
      floatArray0[3] = (float) 91;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-533.0F), (-533.0F), 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-533.0F), (-533.0F), 91.0F, 0.0F, (-533.0F), (-533.0F), 91.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-533);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short) (-533);
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short) (-533);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-533), (short)108, (short) (-533), (short) (-533), (short) (-533)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2026, 2146224356);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-533);
      intArray0[1] = (int) (short) (-533);
      intArray0[2] = (int) (short) (-533);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 12);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-533), (-533), (-533)}, intArray0);
      assertArrayEquals(new int[] {12, (-533), (-533), (-533)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 12, (-533));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '3';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 51.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      Float float0 = new Float((double) byte0);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1629.0087F);
      assertEquals(1629.0087F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 0.0F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1524.445, (-1), 3493.6);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 59;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {59, 0, 121}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 121;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray1 = new float[0];
      boolean boolean3 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 121;
      doubleArray0[2] = 355.15;
      doubleArray0[3] = (double) 59;
      boolean boolean4 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new double[] {0.0, 121.0, 355.15, 59.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      intArray0[2] = (-1148);
      intArray0[3] = (-3220);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 448);
      assertNull(integer0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2026);
      assertEquals(2026, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-6611), integer1);
      assertEquals(15, (int)integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertNotNull(object3);
      assertSame(object2, object3);
      assertSame(object3, object2);
      
      ArrayUtils.shift(intArray0, 2026, 56, 2);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2906).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3220);
      longArray0[1] = (long) (-1148);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-3220L), (-1148L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('L');
      assertEquals('L', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('g');
      assertEquals('g', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('L', (char)character2);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      Integer integer0 = new Integer((-8));
      assertEquals((-8), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-772));
      assertEquals((-772), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-162));
      assertEquals((-162), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1577);
      assertEquals(1577, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-772);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-772.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-772.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(4, integerArray2.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) byte0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) 1922;
      doubleArray0[2] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2743.8862), (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {36.0, 1922.0, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) (short)2, 757, (-1764));
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      intArray0[2] = (-1148);
      intArray0[3] = (-3220);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 448);
      assertNull(integer0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2026);
      assertEquals(2026, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-6611), integer1);
      assertEquals(15, (int)integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertNotNull(object3);
      assertSame(object2, object3);
      assertSame(object3, object2);
      
      ArrayUtils.shift(intArray0, 2026, 56, 2);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(448).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3220);
      longArray0[1] = (long) (-1148);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-3220L), (-1148L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('L');
      assertEquals('L', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('g');
      assertEquals('g', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('L', (char)character2);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', 'g', 'L'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1001);
      floatArray0[1] = (-2039.44F);
      floatArray0[2] = 2.0F;
      floatArray0[3] = 2.0F;
      floatArray0[4] = (-2039.44F);
      floatArray0[5] = (-580.8F);
      floatArray0[6] = (-580.8F);
      floatArray0[7] = (-580.8F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1662.2F, (-1001));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1001.0F), (-2039.44F), 2.0F, 2.0F, (-2039.44F), (-580.8F), (-580.8F), (-580.8F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = (-3381);
      intArray0[2] = (-3381);
      intArray0[3] = (-3381);
      intArray0[4] = (-3381);
      intArray0[5] = 2821;
      ArrayUtils.shift(intArray0, (-1883), 59, (-1306));
      assertArrayEquals(new int[] {(-3381), 2821, 6, (-3381), (-3381), (-3381)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(51, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-3639), (-435));
      assertNull(intArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'l', (-435));
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short short0 = (short)1;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)352;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)128;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)19418;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)352, (short) (-1), (short)1, (short)128, (short) (-1), (short) (-1), (short) (-1), (short)19418}, shortArray0);
      assertArrayEquals(new short[] {(short)352, (short) (-1), (short)1, (short)128, (short) (-1), (short) (-1), (short) (-1), (short)19418}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)352;
      doubleArray0[1] = (double) (short)352;
      doubleArray0[2] = (double) (short) (-1);
      ArrayUtils.swap(doubleArray0, (int) (short)20150, 1176, 2);
      assertArrayEquals(new double[] {352.0, 352.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-8966);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-8966);
      doubleArray0[4] = (double) (short) (-8966);
      doubleArray0[5] = (double) (short)0;
      ArrayUtils.reverse(doubleArray0, (-2180), (-1));
      assertArrayEquals(new double[] {(-8966.0), 0.0, 0.0, (-8966.0), (-8966.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-783), (double) (-783));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-8966.0), 0.0, 0.0, (-8966.0), (-8966.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      intArray0[0] = 2026;
      floatArray0[1] = (-3199.3638F);
      floatArray0[1] = (-3199.3638F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2948.4348F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-686.434);
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2026, (-2180));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1, 2026);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray1, (-1194));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(1, intArray1.length);
      
      ArrayUtils.shift((Object[]) integerArray0, 1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2026;
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = (Integer)ArrayUtils.get((Object[]) integerArray1, 2026, (Object) integer0);
      assertEquals(4, (int)integer1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integer1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) (-3199.3638F);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-2180));
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0, 0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(50);
      assertEquals(50, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2430));
      assertEquals((-2430), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 108;
      floatArray0[1] = (float) 108;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2430);
      ArrayUtils.swap(floatArray0, (-1), 50, 0);
      assertArrayEquals(new float[] {108.0F, 108.0F, 0.0F, (-2430.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 50;
      longArray0[1] = (long) (byte)7;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 50;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 108;
      longArray0[6] = (long) (byte)7;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-2430);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {50L, 7L, 0L, 50L, 0L, 108L, 7L, (-1L), (-2430L)}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2118.84469);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2319;
      floatArray0[1] = (float) 2319;
      floatArray0[2] = (float) 2319;
      floatArray0[3] = (float) 2319;
      floatArray0[4] = (float) 2319;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1073, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2319.0F, 2319.0F, 2319.0F, 2319.0F, 2319.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-1163.9838469081), (-1070.99));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) 2319, 3653);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2135070446);
      intArray0[1] = 3653;
      intArray0[2] = (-1);
      intArray0[3] = 3653;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2135070446), 3653, (-1), 3653}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[4] = (long) (-1751);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertNotNull(intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean3);
      assertArrayEquals(new long[] {(-1751L), 1L, (-1751L), 0L, (-1751L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-8965.0), 401.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-8965.0), (-2135070446));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean4 = ArrayUtils.contains(intArray0, 7);
      assertFalse(boolean4);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertTrue(boolean4 == boolean3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, 2, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 'f';
      float[] floatArray1 = ArrayUtils.insert(7, (float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2769);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2769));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2769)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((float[]) null, (-2203), Integer.MAX_VALUE, (int) (short) (-2769));
      long[] longArray0 = new long[7];
      longArray0[0] = (-4648L);
      longArray0[1] = (long) (-2203);
      longArray0[2] = (long) (short) (-2769);
      longArray0[3] = (long) (short) (-2769);
      longArray0[4] = (long) (-2203);
      float[] floatArray1 = ArrayUtils.insert(Integer.MAX_VALUE, (float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 180.9);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {1, 2, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.swap(intArray0, 2, (-2640), 822);
      assertArrayEquals(new int[] {1, 0, 0, 2, 1}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double double0 = new Double(1583.3498672728113);
      assertEquals(1583.3498672728113, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 1583.3498672728113;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1583.3498672728113}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1583.3498672728113}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1011);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-2203);
      floatArray0[2] = (float) (short) (-1011);
      floatArray0[3] = (float) (short) (-1011);
      floatArray0[4] = (float) (short) (-1011);
      ArrayUtils.shift(floatArray0, (-1), (-2257), 596);
      assertArrayEquals(new float[] {(-1.0F), (-2203.0F), (-1011.0F), (-1011.0F), (-1011.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-2203), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 2326, 2326, 2326);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2769);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2769));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2769)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((float[]) null, (-2203), Integer.MAX_VALUE, (int) (short) (-2769));
      long[] longArray0 = new long[7];
      longArray0[0] = (-4648L);
      longArray0[1] = (long) (-2203);
      longArray0[2] = (long) (short) (-2769);
      longArray0[3] = (long) (short) (-2769);
      longArray0[4] = (long) (-2203);
      longArray0[5] = (long) (short) (-2769);
      longArray0[6] = (long) (-2203);
      int int0 = ArrayUtils.indexOf(longArray0, (-2769L), 1096);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-4648L), (-2203L), (-2769L), (-2769L), (-2203L), (-2769L), (-2203L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-36));
      assertEquals((-36), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-36));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-36), (-36)}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2263);
      assertNotNull(intArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(13, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-4410);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-4410), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      Double double0 = new Double(1922);
      assertEquals(1922.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-4410);
      shortArray1[1] = (short) (-4410);
      shortArray1[2] = (short)565;
      shortArray1[3] = (short)565;
      shortArray1[4] = (short)565;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-996));
      assertEquals((-1), int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-4410), (short) (-4410), (short)565, (short)565, (short)565}, shortArray1);
      assertEquals(5, shortArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(559L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-4410), (short)565, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4410), (short) (-4410), (short)565, (short)565, (short)565, (short)0, (short)0, (short) (-4410), (short)565, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4410), (short) (-4410), (short)565, (short)565, (short)565}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertEquals(5, shortArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Integer[] integerArray0 = new Integer[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = 5056.498F;
      floatArray0[2] = (float) 'l';
      floatArray0[3] = 1703.3104F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 5056.498F, (int) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2.0F, 5056.498F, 108.0F, 1703.3104F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(byte0);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(byte0);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2491L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Integer integer0 = new Integer((-720));
      assertEquals((-720), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer0, (-1518));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1528.9);
      doubleArray0[2] = (double) 512;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (-1528.9);
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {(-1528.9), 1.0, (-1528.9), 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1185.69F;
      floatArray0[1] = (-1363.7081F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-1763);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1703.3104F, 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1185.69F, (-1363.7081F), (-1.0F), 1.0F, (-1763.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2026;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) 2026);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 2427.4321F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2427.4321F, 2026.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 478;
      longArray0[2] = (long) 478;
      longArray0[3] = (long) 0;
      longArray0[4] = (-2849L);
      longArray0[5] = (long) 2026;
      longArray0[6] = (long) 8;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) (-2849L);
      doubleArray0[3] = (double) (-2849L);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2309.062071536), 8, (double) (-2849L));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {11.0, (-2849.0), 0.0, (-2849.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)5, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)2, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = 5;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) byte0;
      intArray0[4] = (-3095);
      intArray0[5] = (int) (byte)5;
      intArray0[6] = (int) 'l';
      intArray0[7] = 32;
      intArray0[8] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 43);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 2, (-3095), 5, 108, 32, (-1)}, intArray1);
      assertArrayEquals(new int[] {2, 5, 2, 2, (-3095), 5, 108, 32, (-1)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)89;
      int int1 = ArrayUtils.lastIndexOf(byteArray1, (byte)0, 46);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 828;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 828.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 828.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-538.0), 2833.73888426615, 828.0, 79.8792, (-538.0), 2833.73888426615, 828.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 828, 828, (int) (short) (-538));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)32, 377);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte byte0 = (byte) (-44);
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byte byte4 = (byte) (-29);
      Byte byte5 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte5;
      byteArray0[3] = (Byte) byte4;
      byteArray0[4] = byte3;
      Byte byte6 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byteArray0[6] = byte5;
      byteArray0[7] = byte5;
      byteArray0[8] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)41);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)2, (byte) (-29), (byte) (-29), (byte) (-44), (byte)2, (byte) (-29), (byte) (-29), (byte) (-44)}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) byte4;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      ArrayUtils.shift(shortArray0, (int) byte4, (-667), 1383);
      assertFalse(byte4 == byte0);
      assertArrayEquals(new short[] {(short)2, (short) (-29), (short) (-44), (short) (-44)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)10;
      intArray0[2] = 332;
      intArray0[3] = (int) short0;
      intArray0[4] = 332;
      intArray0[5] = (int) short0;
      intArray0[6] = 332;
      intArray0[7] = 332;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) short0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {10, 332, 332, 332, 332}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)123, 332);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {10, 332, 332, 332, 332}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray2);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(8, intArray2.length);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-3081), 3199, (int) short0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean[] booleanArray2 = ArrayUtils.insert((-3081), booleanArray1, (boolean[]) null);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      int[] intArray3 = ArrayUtils.addFirst(intArray1, (-1661));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray3);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {10, 332, 332, 332, 332}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertArrayEquals(new int[] {(-1661), 10, 332, 332, 332, 332}, intArray3);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray3.length);
      
      ArrayUtils.reverse((Object[]) null, (-1421), (int) (byte)123);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1703.3104F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = 206.5318F;
      floatArray0[3] = 1703.3104F;
      floatArray0[4] = (-2039.44F);
      floatArray0[5] = 1703.3104F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 1703.3104F;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1477));
      assertEquals((-1477), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1477));
      assertEquals((-1477), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt(2.0F);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3052));
      assertEquals((-3052), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1477));
      assertEquals((-1477), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertEquals((-1477), (int)integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-777));
      assertEquals((-777), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-449));
      assertEquals((-449), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[3]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'D');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[2] = (float) (int)integerArray0[2];
      floatArray0[3] = (float) (int)integerArray0[1];
      floatArray0[4] = (float) (int)integerArray0[1];
      ArrayUtils.reverse(floatArray0, (int) integerArray0[2], 2307);
      assertArrayEquals(new float[] {(-1272.0F), (-1272.0F), (-1272.0F), (-1272.0F), (-1272.0F)}, floatArray0, 0.01F);
      assertEquals(3, integerArray0.length);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(3, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-1272);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) integerArray0[2]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, (-1272L)}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-1272), (int) integerArray0[1]);
      assertNull(booleanArray0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Byte byte0 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)26}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Byte byte0 = new Byte((byte) (-64));
      assertEquals((byte) (-64), (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = (Integer) object0;
      integerArray1[1] = integer1;
      integerArray1[2] = integer0;
      integerArray1[3] = (Integer) 2026;
      Integer integer2 = ArrayUtils.get(integerArray1, 2026, integer1);
      assertEquals(2026, (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray1.length);
      
      Byte byte1 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2118.84469);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2319;
      floatArray0[1] = (float) 2319;
      floatArray0[2] = (float) 2319;
      floatArray0[3] = (float) 2319;
      floatArray0[4] = (float) 2319;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1073, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2319.0F, 2319.0F, 2319.0F, 2319.0F, 2319.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '<';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'J', 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'g', '<'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)90;
      Byte byte2 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)90, (byte)byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)90, (byte)90, (byte)2, (byte)90}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1073;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 1073;
      floatArray0[3] = (float) 1073;
      floatArray0[4] = (float) 1073;
      floatArray0[5] = (float) 1073;
      floatArray0[6] = (float) 1073;
      floatArray0[7] = (float) 1073;
      floatArray0[8] = (float) 1073;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 99, 1073);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1073.0F, 0.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 99);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1073.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 1073.0F;
      objectArray0[3] = (Object) 1073.0F;
      objectArray0[4] = (Object) 1073.0F;
      objectArray0[5] = (Object) 1073.0F;
      objectArray0[6] = (Object) 1386.844970703125;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[4], 99);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(floatArray0, 2, (-1), 1321);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 1073.0F, 0.0F, 1073.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g}";
      stringArray0[1] = "/'0e]u~PKFH^:";
      stringArray0[2] = " in an array of ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2118.84469);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-1), 68);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 2125570538, 1259, 2125570538);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)36, 1259);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82), (byte)92, (byte) (-82), (byte) (-82), (byte) (-82)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-584));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-584)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 1);
      assertNull(longArray0);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)100;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 59;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {59, 0, 100}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 100;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'L';
      charArray0[2] = 'G';
      charArray0[3] = 'x';
      charArray0[4] = '<';
      charArray0[5] = '}';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', 'L', 'G', 'x', '<', '}'}, charArray0);
      assertArrayEquals(new char[] {'c', '^', 'L', 'G', 'x', '<', '}'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      char[] charArray0 = new char[6];
      ArrayUtils.shift(charArray0, 3768);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '<');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer(1213);
      assertEquals(1213, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) integer0, 1213);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Float float0 = new Float(1874.8F);
      assertEquals(1874.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1874.8F, 1874.8F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      Integer integer0 = new Integer(1177);
      assertEquals(1177, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer0, 1);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {38L, 38L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '&', 2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-5375));
      assertEquals((short) (-5375), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-5375), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertEquals((short) (-5375), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short) (-5375), (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[3]);
      assertEquals((short) (-5375), (short)short4);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals(6, shortArray0.length);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[2]);
      assertEquals((short) (-5375), (short)short5);
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short2));
      assertNotNull(short5);
      assertEquals(6, shortArray0.length);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) shortArray0[2];
      shortArray2[1] = (short) shortArray0[0];
      shortArray2[2] = (short) shortArray0[0];
      shortArray2[3] = (short) shortArray0[5];
      shortArray2[4] = (short) shortArray0[3];
      shortArray2[5] = (short) shortArray0[3];
      shortArray2[6] = (short) shortArray0[3];
      short[] shortArray3 = ArrayUtils.clone(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertArrayEquals(new short[] {(short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375)}, shortArray3);
      assertArrayEquals(new short[] {(short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375), (short) (-5375)}, shortArray2);
      assertEquals(7, shortArray3.length);
      assertEquals(7, shortArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-5375);
      intArray0[1] = (int) (short) (-5375);
      intArray0[2] = (-520);
      intArray0[3] = (int) (short) (-5375);
      intArray0[4] = (int) (short)shortArray0[3];
      intArray0[5] = (int) (short)shortArray0[4];
      intArray0[6] = (int) (short)shortArray0[5];
      ArrayUtils.swap(intArray0, (-2958), 2, (-5375));
      assertArrayEquals(new int[] {(-5375), (-5375), (-520), (-5375), (-5375), (-5375), (-5375)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-131.13F);
      doubleArray0[1] = (double) (-131.13F);
      doubleArray0[2] = (double) (-131.13F);
      doubleArray0[3] = (double) (-131.13F);
      doubleArray0[4] = (double) (-131.13F);
      doubleArray0[5] = (double) (-131.13F);
      doubleArray0[6] = (double) (-131.13F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-131.1300048828125), 4, 10.0);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {(-131.1300048828125), (-131.1300048828125), (-131.1300048828125), (-131.1300048828125), (-131.1300048828125), (-131.1300048828125), (-131.1300048828125)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-2071);
      longArray0[1] = (long) (short) (-2071);
      longArray0[2] = (long) (short) (-2071);
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2071L), (-2071L), (-2071L)}, longArray0);
      assertArrayEquals(new long[] {(-2071L), (-2071L), (-2071L), (-1L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short)1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (short) (-2071));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2071.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '\\';
      charArray0[2] = '1';
      charArray0[3] = 'n';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'V', '\\', '1', 'n'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '1';
      charArray0[2] = 'j';
      charArray0[3] = '';
      charArray0[4] = 'U';
      charArray0[5] = 'a';
      charArray0[6] = 'Q';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'^', '1', 'j', '', 'U', 'a', 'Q'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(doubleArray0, 14);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)40;
      shortArray0[2] = (short)2413;
      shortArray0[3] = (short) (-3521);
      shortArray0[4] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-3521), (-2886), (-2886));
      assertArrayEquals(new short[] {(short) (-1), (short)40, (short)2413, (short) (-3521), (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      intArray0[2] = (-1148);
      intArray0[3] = (-3220);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 448);
      assertNull(integer0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2026);
      assertEquals(2026, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-6611), integer1);
      assertEquals(15, (int)integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertNotNull(object3);
      assertSame(object2, object3);
      assertSame(object3, object2);
      
      ArrayUtils.shift(intArray0, 2026, 56, 2);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2026, (-1148), (-1148), (-3220)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3220);
      longArray0[1] = (long) (-1148);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-3220L), (-1148L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('L');
      assertEquals('L', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('g');
      assertEquals('g', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('L', (char)character2);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', 'g', 'L'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) integerArray0[1];
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = (-1272);
      intArray0[4] = (int) integerArray0[1];
      Integer integer4 = Integer.getInteger("");
      assertNull(integer4);
      
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertEquals((-1272), (int)integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(3, integerArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(3, integerArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integerArray0[2], integerArray0[0]);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(3, integerArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertEquals(3, integerArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertEquals(3, integerArray0.length);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(abstractMap_SimpleImmutableEntryArray0, 1553);
      assertFalse(boolean0);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'b';
      charArray0[2] = 'e';
      charArray0[3] = 'h';
      charArray0[4] = 'O';
      charArray0[5] = 'y';
      charArray0[6] = 'B';
      charArray0[7] = 'Q';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'u');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'F', 'b', 'e', 'h', 'O', 'y', 'B', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) 'y';
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 'b';
      doubleArray0[7] = (double) 'e';
      doubleArray0[8] = (double) 'e';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1390, 81.0);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {70.0, 81.0, 121.0, 121.0, 98.0, 1.0, 98.0, 101.0, 101.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 18);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 7, (-1.0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)588;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 343);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 588;
      objectArray0[1] = (Object) (short)588;
      objectArray0[2] = (Object) (-3478.2805F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(8, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, 0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588, 0}, intArray2);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1274));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((short) (-1274));
      assertEquals((-1274.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3054.9, 1064.56504943);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Double double1 = new Double(5370.5);
      assertEquals(5370.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'U';
      charArray0[2] = '\"';
      charArray0[3] = 'O';
      charArray0[4] = 'T';
      charArray0[5] = 'q';
      charArray0[6] = 'v';
      charArray0[7] = '}';
      ArrayUtils.shift(charArray0, (-2868));
      assertArrayEquals(new char[] {'T', 'q', 'v', '}', '>', 'U', '\"', 'O'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert(145, shortArray1, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1005;
      shortArray0[2] = (short) (-674);
      shortArray0[3] = (short)1005;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(3, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1005, (short) (-674), (short)1005, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1005, (short) (-674), (short)0, (short)1005, (short) (-674), (short)1005, (short)0, (short)1005, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-674);
      doubleArray0[1] = (double) (short)1005;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 122.0;
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      doubleArray0[5] = 1238.2490234375;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {122.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 1238.2490234375}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = 'K';
      charArray0[4] = '6';
      charArray0[5] = 'G';
      charArray0[6] = '6';
      charArray0[7] = 'G';
      charArray0[8] = 'm';
      ArrayUtils.shift(charArray0, 2319);
      assertArrayEquals(new char[] {'K', '6', 'G', '6', 'G', 'm', 'G', 'd', '6'}, charArray0);
      assertEquals(9, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-412);
      shortArray0[1] = (short) (-565);
      shortArray0[2] = (short)2207;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1513;
      shortArray0[5] = (short)468;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-412), (short) (-565), (short)2207, (short)2, (short)1513, (short)468}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, (-2103), 2125570538);
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)6;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '.';
      ArrayUtils.shift((boolean[]) null, 1259, 1259, 1259);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-82), (int) (short)6);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.', 247);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2125570538;
      intArray0[1] = 2;
      intArray0[2] = (-2103);
      intArray0[3] = 2125570538;
      intArray0[4] = 247;
      ArrayUtils.swap(intArray0, 306, 1310, 2125570538);
      assertArrayEquals(new int[] {2125570538, 2, (-2103), 2125570538, 247}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1259;
      doubleArray0[1] = (double) (short)6;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 306;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)6, 2162.279716);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float((-0.7624374214889973));
      assertEquals((-0.7624374F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1147));
      assertEquals((-1147), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8966);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-8966), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '$';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      ArrayUtils.shift(charArray0, (int) (short)0, (-1), (-1073741823));
      assertArrayEquals(new char[] {'d', '$', 'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (-1073741823);
      longArray0[2] = (long) (short) (-8966);
      longArray0[3] = (long) 'd';
      longArray0[4] = (long) (short)565;
      longArray0[5] = (-4712L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-1073741823L), (-8966L), 100L, 565L, (-4712L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-1073741823L), (-8966L), 100L, 565L, (-4712L)}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4712L);
      doubleArray0[1] = (double) 'j';
      doubleArray0[2] = (double) (short) (-8966);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0L);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-4712.0), 106.0, (-8966.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$', (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'d', '$', 'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) integerArray0[1];
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = (-1272);
      intArray0[4] = (int) integerArray0[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ArrayUtils.shift(doubleArray0, (-683));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1114.3645F, (-683));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement((float[]) null, 2018.1112F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 924);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-1763), 4264);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = '=';
      charArray0[3] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'f', 'f', '=', 'f', '\u0000', 'f', 'f', 'f'}, charArray0);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'f');
      assertEquals(15, int1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'f', 'f', '=', 'f', '\u0000', 'f', 'f', 'f'}, charArray0);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'f';
      characterArray0[1] = (Character) 'f';
      characterArray0[2] = (Character) 'f';
      characterArray0[3] = (Character) 'f';
      characterArray0[4] = (Character) 'f';
      characterArray0[5] = (Character) 'f';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[2]);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f'}, charArray2);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2953L;
      longArray0[1] = 981L;
      longArray0[2] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 3953);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertEquals(9, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(9, longBuffer0.capacity());
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {2953L, 981L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet1 = BitSet.valueOf(longBuffer0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(9, longBuffer0.remaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(9, longBuffer0.limit());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=9 cap=9]", longBuffer0.toString());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(9, longBuffer0.capacity());
      assertEquals(13, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(74, bitSet1.length());
      assertEquals("{0, 3, 7, 8, 9, 11, 64, 66, 68, 70, 71, 72, 73}", bitSet1.toString());
      assertEquals(128, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2953L, 981L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 2500);
      assertNull(integer0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNull(object0);
      assertNotSame(bitSet0, bitSet1);
      
      ArrayUtils.reverse((int[]) null);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)92;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-45));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-87), (byte) (-45), (byte)92}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-87), (byte)92}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-560));
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-54);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)83, (byte)73, (byte)3, (byte) (-1), (byte)2, (byte) (-54), (byte) (-54)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)83, (byte)73, (byte)3, (byte) (-1), (byte)2, (byte) (-54), (byte) (-54)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Byte byte0 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-42);
      shortArray0[1] = (short) (byte)86;
      shortArray0[2] = (short) (byte) (-42);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2127413706), (int) (byte)86);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-42), (short)86, (short) (-42)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-42), (short)86, (short) (-42)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2127413706), 3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-42)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap(booleanArray0, (-1075), 322, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '=');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Integer integer0 = new Integer((-2230));
      assertEquals((-2230), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, 127);
      assertNull(integer1);
      
      Integer integer2 = new Integer((byte)2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer3 = new Integer(byte0);
      assertEquals(2, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = new Object[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1324);
      shortArray0[1] = (short) (-1324);
      shortArray0[2] = (short) (-1324);
      shortArray0[3] = (short) (-1324);
      shortArray0[4] = (short) (-1324);
      shortArray0[5] = (short) (-1324);
      shortArray0[6] = (short) (-1324);
      shortArray0[7] = (short) (-1324);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1324));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1324), (short) (-1324), (short) (-1324), (short) (-1324), (short) (-1324), (short) (-1324), (short) (-1324), (short) (-1324)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2037));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '>', 3);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'#', '#', '#'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '#';
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 3;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert((-2712), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '+';
      charArray0[3] = 'd';
      charArray0[4] = '9';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', 'X', '+', 'd', '9'}, charArray0);
      assertArrayEquals(new char[] {'F', 'X', '+', 'd', '9', 'F', 'X', '+', 'd', '9'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      
      MutableInt mutableInt0 = new MutableInt((int) short0);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals((-1), (int)integer0);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-4772));
      assertEquals((-4772), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((short) (-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((short) (-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      mutableInt0.add((-585));
      assertEquals("-586", mutableInt0.toString());
      assertEquals((-586), mutableInt0.intValue());
      assertEquals((-586.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-586L), mutableInt0.longValue());
      assertEquals((-586), (int)mutableInt0.toInteger());
      assertEquals((byte) (-74), mutableInt0.byteValue());
      assertEquals((-586), (int)mutableInt0.getValue());
      assertEquals((short) (-586), mutableInt0.shortValue());
      assertEquals((-586.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer5 = new Integer(2528);
      assertEquals(2528, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      mutableInt0.subtract((Number) integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer5));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertEquals((-585), mutableInt0.intValue());
      assertEquals((-585L), mutableInt0.longValue());
      assertEquals((-585), (int)mutableInt0.toInteger());
      assertEquals((byte) (-73), mutableInt0.byteValue());
      assertEquals((-585), (int)mutableInt0.getValue());
      assertEquals((-585.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-585), mutableInt0.shortValue());
      assertEquals((-585.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-585", mutableInt0.toString());
      
      Integer integer6 = new Integer((-723));
      assertEquals((-723), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      mutableInt0.increment();
      assertEquals((-584L), mutableInt0.longValue());
      assertEquals((-584), (int)mutableInt0.toInteger());
      assertEquals((-584), (int)mutableInt0.getValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((short) (-584), mutableInt0.shortValue());
      assertEquals((-584.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-584", mutableInt0.toString());
      assertEquals((-584), mutableInt0.intValue());
      assertEquals((-584.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer[] integerArray0 = ArrayUtils.insert((-2071), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences((Integer[]) null, integer3);
      assertFalse(integer3.equals((Object)integer6));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-584L), mutableInt0.longValue());
      assertEquals((-584), (int)mutableInt0.toInteger());
      assertEquals((-584), (int)mutableInt0.getValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((short) (-584), mutableInt0.shortValue());
      assertEquals((-584.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-584", mutableInt0.toString());
      assertEquals((-584), mutableInt0.intValue());
      assertEquals((-584.0F), mutableInt0.floatValue(), 0.01F);
      assertNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1922, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1238.249F;
      floatArray0[3] = 1238.249F;
      floatArray0[4] = (-2367.3F);
      floatArray0[5] = (float) '~';
      floatArray0[6] = 1238.249F;
      floatArray0[7] = (float) 'l';
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 108.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {108.0F, 0.0F, 1238.249F, 1238.249F, (-2367.3F), 126.0F, 1238.249F, 108.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {108.0F, 108.0F, 0.0F, 1238.249F, 1238.249F, (-2367.3F), 126.0F, 1238.249F, 108.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-2131);
      shortArray0[2] = (short) (-519);
      shortArray0[3] = (short) (-519);
      shortArray0[4] = (short) (-519);
      shortArray0[5] = (short) (-393);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)14);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-519), (short) (-2131), (short) (-519), (short) (-519), (short) (-519), (short) (-393), (short)0, (short)0, (short)0, (short)14}, shortArray1);
      assertArrayEquals(new short[] {(short) (-519), (short) (-2131), (short) (-519), (short) (-519), (short) (-519), (short) (-393), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.shift(shortArray1, (int) (short) (-2131));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-2131), (short) (-519), (short) (-519), (short) (-519), (short) (-393), (short)0, (short)0, (short)0, (short)14, (short) (-519)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-519), (short) (-2131), (short) (-519), (short) (-519), (short) (-519), (short) (-393), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      ArrayUtils.swap((Object[]) byteArray0, (-33), (int) (byte) (-1), (-33));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[4] = 'n';
      charArray0[5] = '+';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = '8';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'n';
      ArrayUtils.shuffle(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '+', '\u0000', 'n', '+', 'n', 'n', '8', 'n'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      Integer integer0 = new Integer(2146389109);
      assertEquals(2146389109, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2146389109;
      doubleArray0[1] = 2908.741962951688;
      doubleArray0[2] = (double) '+';
      doubleArray0[3] = (-638.08784059);
      doubleArray0[4] = (double) '+';
      doubleArray0[5] = (double) 110L;
      doubleArray0[6] = (double) 2146389109;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.146389109E9, 2908.741962951688, 43.0, (-638.08784059), 43.0, 110.0, 2.146389109E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.146389109E9, 2908.741962951688, 43.0, (-638.08784059), 43.0, 110.0, 2.146389109E9}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-43));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-39);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)12);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-56), (byte) (-23), (byte) (-116), (byte)2, (byte)76, (byte)85, (byte) (-39)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-56), (byte) (-23), (byte) (-116), (byte)2, (byte)76, (byte)85, (byte) (-39), (byte)12}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      ArrayUtils.reverse(charArray0, (-789), (int) (byte)85);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)12);
      assertEquals(12, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1344);
      assertEquals(1344, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1261);
      assertEquals(1261, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-2697));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2697);
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray1[1] = boolean3;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean4 = ArrayUtils.contains((Object[]) booleanArray1, object1);
      assertFalse(boolean4);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 653;
      longArray0[1] = (long) (-2697);
      longArray0[2] = (long) 653;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 653);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {653L, (-2697L), 653L}, longArray0);
      assertArrayEquals(new long[] {653L, 653L, (-2697L), 653L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray0, 2, (-2697));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      
      ArrayUtils.swap((byte[]) null, (-2430), 1712);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4388;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-19842);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4388, Integer.MAX_VALUE);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)4388, (short)13, (short) (-19842)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)6;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(byteArray1, 0, 12, (int) byte0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, 2150);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, 409, 2, 1604);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-1689), 1604);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '5';
      charArray0[2] = 'd';
      charArray0[3] = '7';
      charArray0[4] = 'K';
      charArray0[5] = 'T';
      charArray0[6] = 'i';
      charArray0[7] = 'P';
      charArray0[8] = '&';
      int int0 = ArrayUtils.indexOf(charArray0, 'T', 166);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {';', '5', 'd', '7', 'K', 'T', 'i', 'P', '&'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '/');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8966);
      ArrayUtils.swap(shortArray0, (int) (short) (-8966), (-4190));
      assertArrayEquals(new short[] {(short)0, (short) (-8966)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4190);
      doubleArray0[1] = (double) (-4190);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 184.19, (double) (-4190));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-4190.0), (-4190.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-8966);
      intArray0[1] = (int) (short) (-8966);
      intArray0[2] = (int) (short) (-8966);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-8966), (-8966), (-8966)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (-8966);
      floatArray0[3] = (float) (-8966);
      floatArray0[4] = (float) (short) (-8966);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (-8966);
      floatArray0[7] = (float) (short)0;
      floatArray0[8] = (float) (-8966);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, (-8966.0F), (-8966.0F), (-8966.0F), 0.0F, (-8966.0F), 0.0F, (-8966.0F)}, floatArray0, 0.01F);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-8966.0F));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-4190.0), (-4190.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4190.0), (-4190.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1763);
      longArray0[1] = (long) 1;
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1763), 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'!', ':'}, charArray0);
      assertArrayEquals(new char[] {'!'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 1, 1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean3);
      assertArrayEquals(new long[] {(-1763L), 1L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      intArray0[1] = 0;
      intArray0[2] = (-533);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, (-533), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1597);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-533);
      objectArray0[1] = (Object) (-1597);
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (-533);
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-258), (-533));
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-258);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-600.0F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-600.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (-393);
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (-393);
      shortArray0[8] = (short)69;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-28086));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)2, (short) (-393), (short)2, (short)2, (short) (-393), (short)69}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)2, (short) (-393), (short)2, (short)2, (short) (-393), (short)69, (short) (-28086)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      ArrayUtils.shift(shortArray2, (int) (short) (-28086));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-805.0);
      doubleArray0[1] = (double) (short) (-393);
      doubleArray0[2] = (double) (short) (-393);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-393), (double) (short)2);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-805.0), (-393.0), (-393.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray2, (-1052), 1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)10;
      intArray0[2] = 332;
      intArray0[3] = (int) short0;
      intArray0[4] = 332;
      intArray0[5] = (int) short0;
      intArray0[6] = 332;
      intArray0[7] = 332;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.swap(shortArray1, (-1), 332);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) short0;
      longArray0[1] = (long) 332;
      longArray0[2] = (-2376L);
      longArray0[3] = (long) 332;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 332;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 332);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), 332L, (-2376L), 332L, (-1L), 332L}, longArray0);
      assertEquals(6, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)21;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)68);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)84, (byte)7, (byte)21}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)36;
      byte[] byteArray3 = ArrayUtils.addAll(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)36}, byteArray2);
      assertArrayEquals(new byte[] {(byte)36}, byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte)36);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift(byteArray3, (int) (byte)0, (-912), 2146848162);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)36}, byteArray2);
      assertArrayEquals(new byte[] {(byte)36}, byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.reverse((long[]) null, (-340), (int) (byte)36);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '%';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'l', '%', 'l', 'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(11, charArray0.length);
      assertEquals(10, charArray1.length);
      
      ArrayUtils.reverse((long[]) null, 223, 1);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = 89;
      Integer integer0 = new Integer(89);
      assertEquals(89, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(100);
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {100, 89, 100}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 122;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) byte0, (double) 100);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {89.0, 122.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 122, 89);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {89.0, 122.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = null;
      Integer integer0 = ArrayUtils.get((Integer[]) null, (-1097));
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1272));
      assertEquals((-1272), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1272), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1272));
      assertEquals((-1272), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = (int) integerArray0[1];
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = (-1272);
      intArray0[4] = (int) integerArray0[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1272, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)56;
      ArrayUtils.swap(shortArray1, 3, 0);
      assertArrayEquals(new short[] {(short)56}, shortArray1);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2376L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {7L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 59;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {59, 0, 121}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 121;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray2, true);
      assertEquals(0, int0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, false}, booleanArray2));
      assertEquals(8, booleanArray2.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)121;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (-5733);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)121, (short)0, (short) (-5733), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)6);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2397);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 's';
      charArray0[2] = ',';
      charArray0[3] = 't';
      charArray0[4] = '!';
      charArray0[5] = 'Q';
      int[] intArray0 = new int[4];
      intArray0[0] = 47;
      intArray0[1] = (int) '!';
      intArray0[2] = (int) ',';
      intArray0[3] = (int) ',';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {47, 33, 44, 44}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)19, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short) (byte)19);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)19}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray2.length);
      
      int int1 = ArrayUtils.indexOf(shortArray2, (short)791, 44);
      assertEquals((-1), int1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)19}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray2.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) ',';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {33.0, 44.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ',';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 't';
      longArray0[3] = (long) (byte)19;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'Q';
      longArray0[6] = (long) 47;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {44L, (-1L), 116L, 19L, (-1L), 81L, 47L}, longArray1);
      assertArrayEquals(new long[] {44L, (-1L), 116L, 19L, (-1L), 81L, 47L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-2071);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short) (-2071);
      intArray0[3] = (int) (short) (-2071);
      intArray0[4] = (int) (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2071), 1, (-2071), (-2071), 1, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 'c';
      charArray0[2] = 'z';
      charArray0[3] = '\'';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'<', 'c', 'z', '\''}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '<';
      doubleArray0[1] = (double) '<';
      doubleArray0[2] = (double) (short) (-2071);
      doubleArray0[3] = (double) 'c';
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {60.0, 60.0, (-2071.0), 99.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {60.0, 60.0, (-2071.0), 99.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2118.84469);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2319;
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) 2319;
      longArray1[2] = (long) (-1);
      longArray1[3] = (long) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 2319L, (-1L), (-1L)}, longArray1);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, (-2103), 2125570538);
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)6;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '.';
      ArrayUtils.shift((boolean[]) null, 1259, 1259, 1259);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)11;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)59, (byte)11}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2125570538;
      intArray0[1] = 0;
      intArray0[2] = 2125570538;
      intArray0[3] = (-3185);
      intArray0[4] = (int) (short)6;
      intArray0[5] = 303;
      intArray0[6] = (int) (byte)59;
      intArray0[7] = 0;
      intArray0[8] = (-2103);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 6, 1259);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2125570538, 0, 2125570538, (-3185), 6, 303, 59, 0, (-2103)}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-2103);
      doubleArray0[2] = (double) '.';
      doubleArray0[3] = (double) (-3185);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      ArrayUtils.reverse(doubleArray0, (-3185), 0);
      assertArrayEquals(new double[] {4.0, (-2103.0), 46.0, (-3185.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)32);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)32, 21847, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, 1703.3104F, (-1001));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3381);
      ArrayUtils.shift(intArray0, (-1001), 1, (-3381));
      assertArrayEquals(new int[] {(-3381)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-345), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -345, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'R';
      charArray0[2] = ']';
      charArray0[3] = 'V';
      charArray0[4] = 'R';
      charArray0[5] = 'd';
      charArray0[6] = '6';
      charArray0[7] = 'G';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'R', ']', 'V', 'R', 'd', '6', 'G'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1157);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1157));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1157)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1), (-1471), (-2789));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.shift((byte[]) null, 3);
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1471);
      intArray0[1] = (int) '^';
      intArray0[2] = (-1471);
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = (int) '^';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1471), 94, (-1471), 3, 3, 94}, intArray0);
      assertEquals(6, intArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(longArray0, (-371), 4, (-2415));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-8966);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1331);
      intArray0[3] = 102;
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE, 121, (-77));
      assertArrayEquals(new int[] {(-8966), 0, (-1331), 102}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1123.28F);
      floatArray0[1] = (float) (-2973);
      floatArray0[2] = (-580.8F);
      floatArray0[3] = (float) 121;
      floatArray0[4] = (float) (-77);
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) (short) (-8966);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short) (-8966));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1123.28F), (-2973.0F), (-580.8F), 121.0F, (-77.0F), 2.14748365E9F, (-8966.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-8966.0F), (-1123.28F), (-2973.0F), (-580.8F), 121.0F, (-77.0F), 2.14748365E9F, (-8966.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2973);
      ArrayUtils.shift(longArray0, (-1));
      assertArrayEquals(new long[] {(-2973L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.shift(longArray0, (-78), 102, (-2082));
      assertArrayEquals(new long[] {(-2973L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-881L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-2973L)}, longArray1);
      assertArrayEquals(new long[] {(-2973L)}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[1] = '=';
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) '=';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 32.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = (int) ' ';
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-314));
      assertEquals((short) (-314), mutableInt0.shortValue());
      assertEquals("-314", mutableInt0.toString());
      assertEquals((-314L), mutableInt0.longValue());
      assertEquals((-314), (int)mutableInt0.toInteger());
      assertEquals((-314), (int)mutableInt0.getValue());
      assertEquals((-314), mutableInt0.intValue());
      assertEquals((-314.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals((-314.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd((-4707));
      assertEquals((-314), int0);
      assertEquals((-5021), mutableInt0.intValue());
      assertEquals((short) (-5021), mutableInt0.shortValue());
      assertEquals((-5021.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals((-5021L), mutableInt0.longValue());
      assertEquals((-5021), (int)mutableInt0.getValue());
      assertEquals((-5021), (int)mutableInt0.toInteger());
      assertEquals("-5021", mutableInt0.toString());
      assertEquals((-5021.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-5021), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-5021), mutableInt0.intValue());
      assertEquals((short) (-5021), mutableInt0.shortValue());
      assertEquals((-5021.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals((-5021L), mutableInt0.longValue());
      assertEquals((-5021), (int)mutableInt0.getValue());
      assertEquals((-5021), (int)mutableInt0.toInteger());
      assertEquals("-5021", mutableInt0.toString());
      assertEquals((-5021.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer0);
      
      int int1 = 43;
      Integer integer1 = new Integer(43);
      assertEquals(43, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-314));
      assertEquals((-314), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      int int2 = 1446;
      Integer integer3 = new Integer(43);
      assertEquals(43, (int)integer3);
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2312), Integer.MIN_VALUE, (-1758));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.swap(charArray0, 550, 550, Integer.MIN_VALUE);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 1386.844970703125);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2319;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 2319;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 2319;
      floatArray0[5] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2319, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2319.0F, (-1.0F), 2319.0F, (-1.0F), 2319.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 1079);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), (-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F, 0.0F, 0.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("{YVyqW1Q$p?(");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean4));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean4));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 91.0F);
      assertEquals(4, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      ArrayUtils.swap((boolean[]) null, 2552, (-1005));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1751);
      doubleArray0[1] = (double) (-1751);
      doubleArray0[2] = (double) (-1214);
      doubleArray0[3] = (double) (-489.611F);
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {(-1751.0), (-1751.0), (-1214.0), (-489.6109924316406)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1214);
      floatArray0[1] = (float) 2552;
      floatArray0[2] = (float) (-1751);
      floatArray0[3] = (float) (-1214);
      floatArray0[4] = (float) 2552;
      floatArray0[5] = (-489.611F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1214.0F), 2552.0F, (-1751.0F), (-1214.0F), 2552.0F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int int0 = (-1763);
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3089));
      assertEquals((-3089), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, 5, integer1);
      assertEquals((-3089), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1, integerArray0.length);
      
      Integer integer3 = new Integer(3490);
      assertEquals(3490, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 1, 3490, 2353);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) 1520;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3089), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3089, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 1088);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-3631);
      floatArray0[2] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-3631.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, 18688);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals(6, int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)0, (short)2}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(36L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shuffle((Object[]) floatArray1, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, (-3631.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)0, (short)2}, shortArray0);
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('D');
      assertEquals('D', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('W');
      assertEquals('W', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)character2;
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) (char)character0;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (float) '#';
      floatArray0[1] = (float) '#';
      floatArray1[3] = (float) (char)character2;
      floatArray1[4] = (float) 'W';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {49.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {87.0F, 35.0F, 49.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 35.0F, 0.0F, 87.0F, 87.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'W', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      ArrayUtils.swap(shortArray0, (-607), (int) (short)2397, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.valueOf(185);
      assertEquals(185, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 185);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {185, 185, 185, 185, 185}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), 256, 185);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1489);
      assertEquals(1489, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '\'';
      charArray0[2] = 'o';
      charArray0[3] = 'b';
      charArray0[4] = '~';
      ArrayUtils.swap(charArray0, 1489, 1489, (-3028));
      assertArrayEquals(new char[] {'|', '\'', 'o', 'b', '~'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(doubleArray0, (-3617));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer integer0 = new Integer(107);
      assertEquals(107, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(85);
      assertEquals(85, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 992.2527982);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-156.54306), 107);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      ArrayUtils.reverse((double[]) null, 774, 387);
      ArrayUtils.shift((int[]) null, 3229);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(object1.equals((Object)integer0));
      assertTrue(object1.equals((Object)int0));
      assertNotNull(object1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals(0, object2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)int0));
      assertTrue(object2.equals((Object)integer0));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)integer1));
      assertNotNull(object2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)object2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)object1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(883);
      assertEquals(883, (int)integer4);
      assertFalse(integer4.equals((Object)object1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)object2));
      assertFalse(integer4.equals((Object)object0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      integerArray0[2] = integer4;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) 883);
      assertEquals((-1), int1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'd';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '3', 'd', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, (Integer) int0);
      assertFalse(int0 == int1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(7, integerArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'd';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1602.0668F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, (-1602.0668F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-3403.0F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1595;
      floatArray0[3] = 261.1F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 1595;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) 1595;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1075, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1595L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 2328.3F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-285.3F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-285.3F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Float float0 = new Float(2147.63639063213);
      assertEquals(2147.6365F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2147.63639063213);
      assertEquals(2147.6365F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2147.63639063213);
      assertEquals(2147.6365F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(2147.63639063213);
      assertEquals(2147.6365F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(2465.819);
      assertEquals(2465.819F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      Float float6 = new Float(2026.0F);
      assertEquals(2026.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float3;
      floatArray0[1] = float2;
      floatArray0[2] = float3;
      floatArray0[3] = float2;
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3199.3638F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2147.6365F, 2147.6365F, 2147.6365F, 2147.6365F, (-3199.3638F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3732;
      intArray0[1] = 256;
      intArray0[2] = 1711;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 356);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {3732, 256, 1711}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 1711;
      doubleArray0[2] = (double) 1711;
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer(3732);
      assertEquals(3732, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 356;
      longArray2[1] = (long) 1711;
      longArray2[2] = 0L;
      longArray2[3] = (long) 3732;
      int int1 = ArrayUtils.lastIndexOf(longArray2, 290L);
      assertEquals((-1), int1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {356L, 1711L, 0L, 3732L}, longArray2);
      assertEquals(4, longArray2.length);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) 1711);
      assertEquals(1711.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0L);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2147.63639063213);
      assertEquals(2147.6365F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[0]);
      assertEquals(1711.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(9, floatArray0.length);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(170.42046284983007);
      assertEquals(170.42046F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float(3338.266405641);
      assertEquals(3338.2664F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(2026.0F);
      assertEquals(2026.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float(0.0F);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 232.94778F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1711.0F, 0.0F, 2147.6365F, 1711.0F, 0.0F, 170.42046F, 3338.2664F, 2026.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3732;
      intArray0[1] = 256;
      intArray0[2] = 1711;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 356);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {3732, 256, 1711}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 1711;
      doubleArray0[2] = (double) 1711;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1711;
      ArrayUtils.reverse(doubleArray0, 3732, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {256.0, 1711.0, 1711.0, 1.0, 1711.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1711.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1), object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 256.0;
      doubleArray1[1] = (Double) 256.0;
      doubleArray1[2] = (Double) 256.0;
      Double double0 = new Double(1711.0);
      assertEquals(1711.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[3] = double0;
      doubleArray1[2] = (Double) 1711.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {256.0, 256.0, 1711.0, 1711.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)101;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte) (-15), (byte)1, (byte)64, (byte)5, (byte)50, (byte)101}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1730));
      assertEquals((-1730), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1730), integer1);
      assertEquals((-1730), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1730);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1730);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-1730);
      longArray0[5] = (long) (-1730);
      MockRandom mockRandom0 = new MockRandom((-1730L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 7, 2659);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-1);
      shortArray0[0] = (short) (-1);
      short short1 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-441), (-441));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Integer integer0 = new Integer((short)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1818;
      intArray0[0] = (-1355);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1355), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1355), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1355, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      boolean boolean0 = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      ArrayUtils.shift(charArray0, 2087);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'G';
      charArray1[1] = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-121), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -121, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short) (-538));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {76}, intArray0);
      assertArrayEquals(new int[] {76, (-538)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-1535), (-1535));
      assertArrayEquals(new double[] {(-538.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((short) (-538));
      assertEquals((-538L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-538L), (-538L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'w');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertArrayEquals(new char[] {'w', 'w'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      long[] longArray2 = ArrayUtils.insert(2, longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {(-538L), (-538L), (-538L), (-538L)}, longArray2);
      assertArrayEquals(new long[] {(-538L), (-538L)}, longArray1);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[4] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-1));
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(1, longArray0.length);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 1680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1680, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      float[] floatArray0 = new float[1];
      long[] longArray0 = new long[5];
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, 0L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1595;
      floatArray0[3] = 261.1F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 1595;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) 1595;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1075, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1595L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1595);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1595}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1736));
      assertEquals((-1736), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1736), integer1);
      assertEquals((-1736), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1736));
      assertEquals((-1736), (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Object object0 = ArrayUtils.get((Object[]) integerArray2, 1365, (Object) integer4);
      assertEquals((-1736), object0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer4));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer3));
      assertNotNull(object0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Integer integer5 = ArrayUtils.get(integerArray2, 2500);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)object0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNull(integer5);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNull(object1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray2);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)object0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(stringArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      ArrayUtils.reverse((double[]) null, 762, 387);
      ArrayUtils.reverse((int[]) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ":a~5T84FU B1Ej";
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, 2150);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1075));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert((-1075), charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)93, (-1));
      assertNull(byteArray0);
      
      ArrayUtils.swap(booleanArray0, 1596, (-18), (int) (byte)93);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      byte[] byteArray1 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 142);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 142);
      assertNull(object1);
      assertEquals(7, objectArray0.length);
      
      objectArray0[1] = null;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)124;
      shortArray0[1] = (short)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)121, (int) (short)124);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)124, (short)121}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object object2 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNull(object2);
      assertArrayEquals(new short[] {(short)124, (short)121}, shortArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(2, shortArray0.length);
      
      objectArray0[2] = null;
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (-1743L));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.xor(bitSet1);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)124, (short)121}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object object3 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = new Object();
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = ArrayUtils.get(objectArray0, (int) 124);
      assertNull(object5);
      assertEquals(7, objectArray0.length);
      
      objectArray0[5] = null;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      ArrayUtils.reverse(objectArray0, (int) (short)124, (int) (short)121);
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1703.3104F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = 206.5318F;
      floatArray0[3] = 1703.3104F;
      floatArray0[4] = (-2039.44F);
      floatArray0[5] = 1703.3104F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 1703.3104F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-580.8F), (-1001));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1703.3104F, 2.0F, 206.5318F, 1703.3104F, (-2039.44F), 1703.3104F, 2.0F, 1703.3104F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.shift(intArray0, 2821, (-3381), 6);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(51, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.reverse((double[]) null, (-1), 2821);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '`';
      charArray0[2] = '_';
      charArray0[3] = 'p';
      charArray0[4] = 'o';
      charArray0[5] = 'P';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'S', '`', '_', 'p', 'o', 'P'}, charArray0);
      assertArrayEquals(new char[] {'S', '`', '_', 'p', 'o', 'P'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-4487));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4487), (short)4}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (double) (short)4;
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) (short) (-4487);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = (double) 'P';
      doubleArray0[7] = (double) (short)4;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {96.0, 4.0, 83.0, 83.0, (-4487.0), 95.0, 80.0, 4.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {96.0, 4.0, 83.0, 83.0, (-4487.0), 95.0, 80.0, 4.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1628.6889887149557;
      doubleArray0[1] = 1379.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1628.6889887149557, 1379.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      MutableInt mutableInt0 = new MutableInt(584);
      assertEquals("584", mutableInt0.toString());
      assertEquals(584, mutableInt0.intValue());
      assertEquals(584.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(584L, mutableInt0.longValue());
      assertEquals(584.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(584, (int)mutableInt0.toInteger());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals(584, (int)mutableInt0.getValue());
      assertEquals((short)584, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(584, (int)integer0);
      assertEquals("584", mutableInt0.toString());
      assertEquals(584, mutableInt0.intValue());
      assertEquals(584.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(584L, mutableInt0.longValue());
      assertEquals(584.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(584, (int)mutableInt0.toInteger());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals(584, (int)mutableInt0.getValue());
      assertEquals((short)584, mutableInt0.shortValue());
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(43);
      assertEquals(43, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 1503;
      Integer integer2 = new Integer(1503);
      assertEquals(1503, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 1446;
      Integer integer3 = new Integer(1446);
      assertEquals(1446, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.decode("i(QueB[IrrOM^Pk#OQP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i(QueB[IrrOM^Pk#OQP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 100.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Integer integer0 = new Integer((-2230));
      assertEquals((-2230), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, 0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2230));
      assertEquals((-2230), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)27;
      Integer integer0 = new Integer((byte)27);
      assertEquals(27, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, 2146943672);
      assertNull(integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = null;
      Integer integer2 = new Integer(2146943672);
      assertEquals(2146943672, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = null;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1763), 1520, 606);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1520;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1520;
      floatArray0[3] = (float) 1520;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1520;
      floatArray0[6] = (float) (-1763);
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1520.0F, 1.0F, 1520.0F, 1520.0F, 1.0F, 1520.0F, (-1763.0F)}, floatArray0, 0.01F);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 180.9);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2026;
      floatArray0[2] = (float) 2026;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 2026.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 2026.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) 2026);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 2026.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 2026.0F}, floatArray1, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.shift(intArray0, 120, 0, 478);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 2427.4321F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 2026.0F, 2026.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, 2026.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2427.4321F, 2026.0F, 2026.0F}, floatArray2, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 478;
      longArray0[2] = (long) 478;
      longArray0[3] = (long) 0;
      longArray0[4] = (-2849L);
      longArray0[5] = (long) 2026;
      longArray0[6] = (long) 8;
      ArrayUtils.shift(longArray0, 35);
      assertArrayEquals(new long[] {11L, 478L, 478L, 0L, (-2849L), 2026L, 8L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2849L);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 2026.0F;
      doubleArray0[3] = (double) 120;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 11L;
      int int1 = ArrayUtils.indexOf(doubleArray0, 11.0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-2849.0), 11.0, 2026.0, 120.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (-1.0F));
      assertEquals((-1), int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(int1 == int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, floatArray1.length);
      
      ArrayUtils.shift(intArray0, 120, (int) (byte)119, (-1391));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) 11);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {11.0F, (-1589.0F), 4206.6187F, 0.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 478;
      longArray0[1] = (long) 35;
      longArray0[2] = (long) 358;
      longArray0[3] = (long) 358;
      longArray0[4] = (long) (byte)119;
      longArray0[5] = (long) 358;
      longArray0[6] = (long) (byte)43;
      ArrayUtils.shift(longArray0, 478);
      assertArrayEquals(new long[] {358L, 43L, 478L, 35L, 358L, 358L, 119L}, longArray0);
      assertEquals(7, longArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(478);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-83);
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[2] = (double) '-';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-83);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte) (-83);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)38;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-83);
      ArrayUtils.shift(intArray0, 15);
      assertArrayEquals(new int[] {38, 0, (-83)}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0, (byte)38}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 38;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {38L}, longArray0);
      assertArrayEquals(new long[] {38L, 38L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3574);
      shortArray0[1] = (short)814;
      shortArray0[2] = (short)99;
      shortArray0[3] = (short) (-3574);
      shortArray0[4] = (short)1143;
      shortArray0[5] = (short) (-2868);
      shortArray0[6] = (short) (-2184);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-3574), (short)814, (short)99, (short) (-3574), (short)1143, (short) (-2868), (short) (-2184)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3574), (short)814, (short)99, (short) (-3574), (short)1143, (short) (-2868), (short) (-2184)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3574), (short)814, (short)99, (short) (-3574), (short)1143, (short) (-2868), (short) (-2184)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2184);
      intArray0[1] = (int) 'Z';
      intArray0[2] = (int) (short) (-2868);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1386.845F;
      floatArray0[4] = (-489.611F);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1214), (-1214));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1386.845F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1386.844970703125, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1547.032F), (-1.0F), 1386.845F, 1386.845F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1214);
      intArray0[1] = (-1214);
      intArray0[2] = (-1214);
      intArray0[3] = (-1214);
      intArray0[4] = (-1214);
      intArray0[5] = (-1214);
      intArray0[6] = (-1214);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-1214), (-1214), (-1214), (-1214), (-1214), (-1214), (-1214)}, intArray0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray0, intArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, booleanArray2.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1643);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1214), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1214, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      boolean boolean0 = ArrayUtils.contains(charArray0, '&');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'K', 'Y', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) 'Y';
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {89, 89, 89, 89}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap(intArray0, 46, 89, (-2150));
      assertArrayEquals(new int[] {89, 89, 89, 89}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)7, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer((-2145051615));
      assertEquals((-2145051615), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer('&');
      assertEquals(38, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      ArrayUtils.shift(charArray0, (-2145051615));
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-288), 2171);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2026);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertArrayEquals(new int[] {2026, 2026, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[15];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      Double double0 = new Double(91);
      assertEquals(91.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-867.5038359352));
      assertEquals((-867.5038359352), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(5963.783662795864);
      assertEquals(5963.783662795864, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 91;
      floatArray0[1] = (-792.0F);
      floatArray0[2] = 1155.7915F;
      floatArray0[3] = (float) 91;
      floatArray0[4] = (float) 91;
      floatArray0[5] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-791.0F));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {91.0F, (-792.0F), 1155.7915F, 91.0F, 91.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {91.0F, (-792.0F), 1155.7915F, 91.0F, 91.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 115;
      longArray0[5] = (long) (-1);
      longArray0[6] = (-1L);
      longArray0[7] = (long) 91;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-389), 91);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {115L, 91L, (-1L), (-1L), 115L, (-1L), (-1L), 91L}, longArray0);
      assertArrayEquals(new long[] {115L, 91L, (-1L), (-1L), 115L, (-1L), (-1L), 91L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1123.409983921401;
      doubleArray0[1] = (-212.7184149657996);
      doubleArray0[2] = 113.0;
      doubleArray0[3] = (-654.1647126);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 102.5675F;
      floatArray0[1] = 102.5675F;
      floatArray0[2] = 1962.5662F;
      floatArray0[3] = 102.5675F;
      floatArray0[4] = 102.5675F;
      floatArray0[5] = 1962.5662F;
      floatArray0[6] = 1962.5662F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1435.5776F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {102.5675F, 102.5675F, 1962.5662F, 102.5675F, 102.5675F, 1962.5662F, 1962.5662F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1962.5662F, 2091);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {102.5675F, 102.5675F, 1962.5662F, 102.5675F, 102.5675F, 1962.5662F, 1962.5662F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-3095), (-3095));
      assertNull(longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3095);
      intArray0[1] = 2693;
      intArray0[2] = 5;
      intArray0[3] = 32;
      intArray0[4] = (-3095);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 5, 6);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3095), 2693, 5, 32, (-3095)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[1] = '=';
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) '=';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 32.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = (int) ' ';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 32.0F, 61.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.0F, 61.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)10;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)32, (byte)10}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean3 = ArrayUtils.contains((double[]) null, (double) (byte)10);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2957.63109928);
      doubleArray0[1] = (-1528.9);
      doubleArray0[2] = (double) 512;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (-1528.9);
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {(-1528.9), (-2957.63109928), (-1528.9), 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1185.69F;
      floatArray0[1] = (-1363.7081F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) (-1763);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1703.3104F, 1);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1185.69F, (-1363.7081F), (-1.0F), 1.0F, (-1763.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 512;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) (-1763);
      floatArray1[3] = (float) (-1763);
      floatArray1[4] = (-1363.7081F);
      floatArray1[5] = 2018.1112F;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (-3199.3638F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {512.0F, (-1.0F), (-1763.0F), (-1763.0F), (-1363.7081F), 2018.1112F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {512.0F, (-1.0F), (-1763.0F), (-1763.0F), (-1363.7081F), 2018.1112F}, floatArray2, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3180.0F);
      floatArray0[1] = (-3180.0F);
      floatArray0[2] = (-3180.0F);
      floatArray0[3] = (-3180.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1721.0499F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3180.0F), (-3180.0F), (-3180.0F), (-3180.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1721.0499F, (-3180.0F), (-3180.0F), (-3180.0F), (-3180.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-393);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-393));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = 1917L;
      longArray0[2] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 1917L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(doubleArray0, 14);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)40;
      shortArray0[2] = (short)2413;
      shortArray0[3] = (short) (-3521);
      shortArray0[4] = (short) (-1);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1), 2627);
      assertArrayEquals(new short[] {(short) (-1), (short) (-3521), (short)2413, (short)40, (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-4255), arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-4255), (-1), 91);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-172));
      assertEquals((-172), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer2 = new Integer((byte)0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((Object[]) null, 0, (-1105));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)69;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)69, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)69}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, 718);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 620.4841542572509, 3.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.reverse(shortArray1, 0, 120);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)69, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 718;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) 120;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 718L, 0L, 0L, 120L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 1454, (-310), 828);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("2ZHiP,`Jp+'yx/5");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("J*D%65B");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) boolean5;
      objectArray0[2] = (Object) boolean3;
      objectArray0[3] = (Object) 'l';
      objectArray0[4] = (Object) "J*D%65B";
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) boolean4;
      boolean boolean6 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean0);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1425L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1425L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray2, false, 1454);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8966);
      int[] intArray0 = new int[2];
      intArray0[0] = 102;
      intArray0[1] = (int) (short) (-8966);
      ArrayUtils.shift(intArray0, (-2973), (-1331), (-8966));
      assertArrayEquals(new int[] {102, (-8966)}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-1331);
      floatArray0[2] = (float) (-1331);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1331.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1331.0F), (-1331.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1331.0F), 0.0F, (-1331.0F), (-1331.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 102;
      ArrayUtils.shift(longArray0, (int) (short) (-8966));
      assertArrayEquals(new long[] {102L, 1L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.shift(longArray0, 160, (int) (short)0, (-2753));
      assertArrayEquals(new long[] {102L, 1L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 126L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {102L, 1L, 0L}, longArray1);
      assertArrayEquals(new long[] {102L, 1L, 0L}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1075, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'W';
      charArray0[2] = 'd';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = '$';
      ArrayUtils.shift(charArray0, (int) (short)0, (-1), (-1073741823));
      assertArrayEquals(new char[] {'$', 'W', 'd', 'j', '$', '$'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '$';
      longArray0[2] = (long) '$';
      longArray0[3] = 1L;
      longArray0[4] = (long) 'W';
      longArray0[5] = (long) '$';
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), 36L, 36L, 1L, 87L, 36L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 36L, 36L, 1L, 87L, 36L, (-1L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 100.0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3095);
      intArray0[1] = (int) '$';
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'j';
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, 0, (-3095), (int) (short)1075);
      assertArrayEquals(new int[] {(-3095), 36, (-1), 0, 100, 106, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)17;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-106), (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 102);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1547.032F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1547.031982421875)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'U';
      charArray0[2] = '.';
      charArray0[3] = 'v';
      charArray0[4] = 'Q';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'U');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'*', '.', 'v', 'Q'}, charArray1);
      assertArrayEquals(new char[] {'*', 'U', '.', 'v', 'Q'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 5, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1108.266);
      doubleArray0[2] = (-1108.266);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1108.266), 0.0, (-1108.266)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1630.1482508847319;
      doubleArray0[1] = 1630.1482508847319;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1630.1482508847319, 1630.1482508847319}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1630.1482508847319, 1630.1482508847319}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 77.62097;
      doubleArray0[1] = (-1892.73634336037);
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 186.174290105311;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {77.62097, (-1892.73634336037), 100.0, 0.0, 186.174290105311}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2'}, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2', 'F', '@', '2'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      int int0 = 51;
      Integer[] integerArray0 = new Integer[7];
      MutableInt mutableInt0 = new MutableInt(51);
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(51, (int)integer0);
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-585));
      assertEquals((-585), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-585));
      assertEquals((-585), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = mutableInt0.getValue();
      assertEquals(51, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(199);
      assertEquals(199, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      mutableInt0.add(int0);
      assertEquals(102L, mutableInt0.longValue());
      assertEquals(102.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(102, (int)mutableInt0.getValue());
      assertEquals((byte)102, mutableInt0.byteValue());
      assertEquals(102, (int)mutableInt0.toInteger());
      assertEquals((short)102, mutableInt0.shortValue());
      assertEquals(102, mutableInt0.intValue());
      assertEquals(102.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("102", mutableInt0.toString());
      
      ArrayUtils.swap(charArray0, 61, (int) integerArray0[4], (-3166));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'F', '@', '2'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(7, integerArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-1662.09F), 59);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3166);
      longArray0[1] = (long) (int)integerArray0[4];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-3166L), 199L}, longArray0);
      assertArrayEquals(new long[] {(-3166L), 199L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1386.845F;
      floatArray0[4] = (-489.611F);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1214), (-1214));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1386.845F;
      doubleArray0[1] = (double) (-1.0F);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'P';
      charArray0[2] = 'C';
      charArray0[3] = '`';
      charArray0[4] = '=';
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2523);
      assertEquals(2523, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(2202);
      assertEquals(2202.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2202.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-102), mutableInt0.byteValue());
      assertEquals("2202", mutableInt0.toString());
      assertEquals(2202, (int)mutableInt0.toInteger());
      assertEquals(2202, (int)mutableInt0.getValue());
      assertEquals(2202, mutableInt0.intValue());
      assertEquals(2202L, mutableInt0.longValue());
      assertEquals((short)2202, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals(2203, (int)mutableInt0.getValue());
      assertEquals(2203, (int)mutableInt0.toInteger());
      assertEquals(2203.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-101), mutableInt0.byteValue());
      assertEquals(2203.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2203", mutableInt0.toString());
      assertEquals(2203, mutableInt0.intValue());
      assertEquals(2203L, mutableInt0.longValue());
      assertEquals((short)2203, mutableInt0.shortValue());
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(114, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.removeAllOccurences(integerArray1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertTrue(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 226L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 226.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Float float0 = new Float(1748.0);
      assertEquals(1748.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-547);
      shortArray0[1] = (short) (-2);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-106));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-547), (short) (-2)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-106), (short) (-547), (short) (-2)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '6';
      ArrayUtils.shift(charArray0, 3768);
      assertArrayEquals(new char[] {'R', '6'}, charArray0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3768, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3768, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (int) (byte)7, 3337);
      assertArrayEquals(new float[] {7.0F, 7.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-838), (-1304));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.swap((float[]) null, (int) (byte)0, 3);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((byte)7);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-856), arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -856, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2045);
      shortArray0[3] = (short) (-2045);
      shortArray0[4] = (short) (-2045);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2045), (short) (-2045), (short) (-2045), (short)1, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, (int) (short) (-2045), (int) (short)1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-2045), 1922);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2045), (short) (-2045), (short) (-2045), (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2045), (short) (-2045), (short) (-2045), (short)1, (short)1}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)93, 1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, 182, 3, 2147244187);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '=');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3495.0864F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 49.0F;
      ArrayUtils.swap(floatArray0, (-1), (-1), (-1));
      assertArrayEquals(new float[] {(-3495.0864F), (-1.0F), 49.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2098.4082034319667), (-1651));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Y');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'^', 'Y', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) '^';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {89, 89, 89, 94, 89, 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) 94;
      doubleArray0[4] = (double) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 128);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {128, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), (-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F, 0.0F, 0.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("{YVyqW1Q$p?(");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-3976);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-3976), 1}, intArray0);
      assertArrayEquals(new int[] {1, 0, (-3976), 1}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)3005);
      assertEquals((short)3005, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3005);
      assertEquals((short)3005, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)692);
      assertEquals((short)692, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertEquals((short)3005, (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals(4, shortArray0.length);
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 102.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 102.0, (-1.0), 102.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) 102.0;
      doubleArray2[1] = (Double) (-1.0);
      doubleArray2[2] = (Double) (-1.0);
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertNotNull(doubleArray3);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1210);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1210, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 118;
      intArray0[3] = 1013;
      intArray0[4] = 2146433979;
      intArray0[5] = 1468;
      intArray0[6] = (-1264);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146433979, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = BitSet.valueOf(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1552);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1552}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'h');
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)600;
      shortArray0[1] = (short)114;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-513);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)5;
      shortArray0[6] = (short) (-1075);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-513), (-3678));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)600, (short)114, (short) (-1), (short) (-513), (short)2, (short)5, (short) (-1075)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (short) (-513), (int) (short) (-513));
      assertEquals((-1), int0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      intArray0[2] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148), 2026}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      Integer integer0 = new Integer((-3486));
      assertEquals((-3486), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-3486), object0);
      assertNotNull(object0);
      
      Integer integer1 = new Integer(1332);
      assertEquals(1332, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2318);
      assertEquals(2318, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-3486), object1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer2));
      assertNotNull(object1);
      
      Integer integer3 = new Integer(1332);
      assertEquals(1332, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = ArrayUtils.get(integerArray0, (-3486), integer3);
      assertEquals(1332, (int)integer4);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)object0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)object1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertArrayEquals(new int[] {2026, (-1148), 2026}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-3486), object2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object2.equals((Object)integer3));
      assertFalse(object2.equals((Object)integer4));
      assertFalse(object2.equals((Object)integer2));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      
      ArrayUtils.shift(intArray0, 2110, 1882, (-1148));
      assertArrayEquals(new int[] {2026, (-1148), 2026}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(354);
      assertEquals(354, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)122;
      shortArray0[1] = (short) (byte)122;
      shortArray0[2] = (short) (byte)122;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 354, 1020);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)122, (short)122, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2059, 59);
      assertEquals((-1), int0);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray2);
      assertTrue(boolean0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      int int0 = 50;
      Integer integer1 = new Integer(50);
      assertEquals(50, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, int0, (Integer) null);
      assertNull(integer3);
      assertEquals(4, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) int0, "");
      assertEquals("50", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ArrayUtils.shift(byteArray0, 3288, (-2430), Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      Integer integer4 = ArrayUtils.get(integerArray0, 3288);
      assertNull(integer4);
      assertEquals(4, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 359.6F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[3];
      Float float0 = new Float((-2200.05F));
      assertEquals((-2200.05F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      Float float1 = new Float(108.0);
      assertEquals(108.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray2[1] = float1;
      Float float2 = new Float((-3137.0F));
      assertEquals((-3137.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray2[2] = float2;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {(-2200.05F), 108.0F, (-3137.0F)}, floatArray3, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1571.651F);
      assertEquals(1571.651F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1571.651F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = BitSet.valueOf(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-2477.0243464786995));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[25];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(25, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(intArray0, 8, 11, 102);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 102;
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(longArray0, 102);
      assertArrayEquals(new long[] {102L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shift(intArray0, 1, 0, (-1656));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0.0F, (-988.6707763671875));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 59.0, (-988.6707763671875));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean2 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)0, (int) (short)128);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1604.673493853555), 1114111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      char[] charArray0 = new char[6];
      ArrayUtils.shift(charArray0, 3745);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1893;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1893);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)1893}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long[] longArray0 = new Long[5];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      longArray0[1] = (Long) long0;
      Long long2 = new Long((short)1893);
      assertEquals(1893L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(long0);
      assertEquals(0L, (long)long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(long0);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1893, 0);
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1893}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      ArrayUtils.shift(charArray0, 1);
      assertArrayEquals(new char[] {'\u0000', '?', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      floatArray0[2] = 326.12854F;
      int int0 = 358;
      int int1 = ArrayUtils.indexOf(floatArray0, 326.12854F, 358);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int int2 = ArrayUtils.indexOf((boolean[]) null, false, (-776));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int3 = 233;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 358;
      longArray0[1] = (long) 358;
      int int4 = (-1867);
      ArrayUtils.reverse(longArray0, 233, (-1867));
      assertArrayEquals(new long[] {358L, 358L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int5 = (-933);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-933), (-3380L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -933, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1), 669, (int) (byte)10);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) (byte)119;
      intArray0[2] = (int) (byte)43;
      intArray0[3] = (int) (byte)111;
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)43;
      intArray0[6] = (int) (byte)10;
      intArray0[7] = (int) (byte)111;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {38, 119, 43, 111, (-1), 43, 10, 111}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 38;
      longArray0[1] = (long) 111;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (byte)119;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2104L, (-1511));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {38L, 111L, 10L, (-1L), 119L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1168, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1168, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'R';
      charArray0[2] = ']';
      charArray0[3] = 'V';
      charArray0[4] = 'R';
      charArray0[5] = 'd';
      charArray0[6] = '6';
      charArray0[7] = 'G';
      ArrayUtils.shift(charArray0, 2087);
      assertArrayEquals(new char[] {'R', ']', 'V', 'R', 'd', '6', 'G', 'h'}, charArray0);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2087, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2087, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_CHAR_ARRAY, '(');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1010;
      intArray0[1] = (int) (byte)57;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1010, (int) (byte)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1010, 57}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)57;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) (byte) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {57.0, 3.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) byte0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 75;
      intArray0[1] = (-2145027237);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-1155);
      intArray0[4] = 450;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1010, 5);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {75, (-2145027237), Integer.MAX_VALUE, (-1155), 450}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-106);
      Byte byte1 = new Byte((byte) (-106));
      assertEquals((byte) (-106), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)14;
      Byte byte3 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-106), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-106), (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte0 == byte2);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte) (-106), (byte)byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte0 == byte2);
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) byte2;
      doubleArray0[1] = (double) (-2145027237);
      doubleArray0[2] = (-534.092);
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = 0.1;
      doubleArray0[6] = (double) (-2145027237);
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = 98.133223902;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {14.0, (-2.145027237E9), (-534.092), 2.147483647E9, (-106.0), 0.1, (-2.145027237E9), 5.0, 98.133223902}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      boolean boolean0 = ArrayUtils.contains(charArray0, '&');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'K', 'Y', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'K';
      characterArray0[1] = (Character) 'K';
      characterArray0[2] = (Character) 'Y';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'Y'}, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (char)characterArray0[1];
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'K';
      doubleArray0[3] = (double) (char)characterArray0[1];
      doubleArray0[4] = (double) (char)characterArray0[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3216), (int) (byte)2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {75.0, 89.0, 75.0, 75.0, 89.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {75.0, 89.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1123.409983921401;
      doubleArray0[1] = (-212.7184149657996);
      doubleArray0[2] = 113.0;
      doubleArray0[3] = (-654.1647126);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1123.409983921401);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1123.409983921401, (-212.7184149657996), 113.0, (-654.1647126), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1123.409983921401, (-212.7184149657996), 113.0, (-654.1647126), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)61);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)61);
      assertEquals(61, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 3605);
      assertNull(integer2);
      assertEquals(2, integerArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)54;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-116), (byte)0, (byte)1, (byte)91, (byte)54}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)653);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-1L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertEquals(11, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) '\u0000';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      charArray1[1] = '3';
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '3'}, charArray1);
      assertEquals(2, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 3, 3175, (-2390));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-435), (-1));
      assertNull(intArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'i', (-62));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)19418;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)20150;
      shortArray0[4] = (short)128;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)19418, (short) (-1), (short)1, (short)20150, (short)128}, shortArray1);
      assertArrayEquals(new short[] {(short)19418, (short) (-1), (short)1, (short)20150, (short)128}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)19418;
      doubleArray0[1] = (double) (short)20150;
      ArrayUtils.swap(doubleArray0, (int) (short)128, (-791), (-791));
      assertArrayEquals(new double[] {19418.0, 20150.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Integer integer0 = new Integer((short)13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1703.3104F, (int) (short)13);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 830, 79);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 2693);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      int int1 = ArrayUtils.indexOf((double[]) null, (-5.7597), (-1776), (double) 32);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)71;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[9];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      
      ArrayUtils.swap(intArray0, (-2142569496), (-2142569496), (-2142569496));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = '';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'j', 'j', '', 'j', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) 38;
      longArray0[2] = (long) 'G';
      longArray0[3] = (long) '';
      longArray0[4] = (long) '|';
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1087));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 5019.57953715017, 0.0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short) (-533));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {71L, 38L, 71L, 127L, 124L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, (int) (short) (-533));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) (short) (-533);
      objectArray0[2] = (Object) '';
      ArrayUtils.shift(objectArray0, (-1), 1922, (-2216));
      assertEquals(3, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)565);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short) (-533));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-533), (short)565, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 122.0;
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      doubleArray0[5] = 1238.2490234375;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {122.0, 1386.844970703125, 0.0, (-3378.280517578125), 108.0, 1238.2490234375}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2319;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2319;
      longArray0[1] = 1239L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 1160);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[0] = (byte)84;
      ArrayUtils.shift(byteArray0, (-2102));
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Short short0 = new Short((short)120);
      assertEquals((short)120, (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift((byte[]) null, 102, (int) (byte)47, (-1812));
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'S', 102);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '/';
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 102;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {47.0, 2.0, 102.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = ArrayUtils.insert(102, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {47.0, 2.0, 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1812));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1812)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 1);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)127;
      ArrayUtils.shift(byteArray0, (int) (byte)124, (int) (byte)47, 1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)47, (byte)67, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)47, (byte)67, (byte)127}, byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)47, (byte)67, (byte)127}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int0 = ArrayUtils.indexOf(charArray0, '/', (int) (byte)127);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)59;
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (-278));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {59.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {59.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-3994));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-512));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-512)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)789;
      shortArray0[4] = (short)101;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)3337;
      shortArray0[7] = (short)1577;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)940);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)2, (short)789, (short)101, (short)6, (short)3337, (short)1577}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)8);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)2, (short)789, (short)101, (short)6, (short)3337, (short)1577}, shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)2, (short)789, (short)101, (short)6, (short)3337, (short)1577}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 2127031422);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'s', 'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer integer0 = new Integer((-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1357L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1961L);
      longArray0[4] = 1L;
      longArray0[6] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1135);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(5, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 48);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 0L);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 1135, 4);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (-1.0F);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals("{1, 2, 3, 5}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(4, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(6, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-1.0F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)57;
      ArrayUtils.swap(floatArray0, (int) (byte)7, 3337);
      assertArrayEquals(new float[] {7.0F, 7.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-838), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)7;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)57;
      intArray0[3] = (-860);
      intArray0[4] = (int) (byte)54;
      int int0 = ArrayUtils.indexOf(intArray0, (-1), 3337);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {7, (-1), 57, (-860), 54}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'Y';
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-338L));
      assertEquals((-338L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(828L);
      assertEquals(828L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long long3 = new Long((-3780L));
      assertEquals((-3780L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2708, (-723));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      ArrayUtils.shift(charArray0, 2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', 'Y', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1893;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1893);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)1893}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long[] longArray0 = new Long[5];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((short)1893);
      assertEquals(1893L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(0L, (long)long4);
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long0);
      assertEquals(0L, (long)long5);
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertNotNull(long5);
      
      longArray0[4] = long5;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1893, 0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1893}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '3';
      charArray0[2] = ']';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', '3', ']'}, charArray0);
      assertArrayEquals(new char[] {'?', '3', ']'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      ArrayUtils.shift(shortArray0, 1587);
      assertArrayEquals(new short[] {(short)1893}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1044);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1044));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1044)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, (-2103), 2125570549);
      int[] intArray0 = new int[7];
      intArray0[0] = 2125570549;
      intArray0[1] = (-2103);
      intArray0[2] = 2125570549;
      intArray0[3] = 2125570549;
      intArray0[4] = 1881;
      intArray0[5] = (-2103);
      intArray0[6] = 2125570549;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2125570549, (-2103), 2125570549, 2125570549, 1881, (-2103), 2125570549}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer(2125570549);
      assertEquals(2125570549, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-435), (-1));
      assertNull(intArray0);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (-836), (-836));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, (-1214));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2026, 9);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 54;
      longArray0[1] = (-88L);
      longArray0[2] = (long) 2026;
      longArray0[3] = (long) (-629);
      longArray0[4] = (long) (-1214);
      longArray0[5] = (long) 2026;
      longArray0[6] = (long) (-1214);
      longArray0[7] = (long) 9;
      longArray0[8] = (long) 54;
      int int0 = ArrayUtils.indexOf(longArray0, (long) 9);
      assertEquals(7, int0);
      assertArrayEquals(new long[] {54L, (-88L), 2026L, (-629L), (-1214L), 2026L, (-1214L), 9L, 54L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-36), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-36), (int) (byte) (-36), (int) (byte) (-36));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-36), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, (-5484));
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) int0);
      assertEquals(0, object0);
      assertTrue(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer2));
      assertNotNull(object0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = (-5484);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      int int1 = ArrayUtils.indexOf(longArray0, 778L, (-2184));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)52;
      ArrayUtils.swap(byteArray0, (-5484), (-5484), (int) (byte)52);
      assertArrayEquals(new byte[] {(byte)104, (byte)52}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      intArray0[0] = 2026;
      floatArray0[1] = (-3199.3638F);
      floatArray0[1] = (-3199.3638F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2948.4348F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-686.434);
      doubleArray0[1] = (-2957.63109928);
      doubleArray0[2] = (-1528.9);
      doubleArray0[3] = (double) 554.89F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3199.3638F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 2026}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 102L;
      longArray0[1] = 3091L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-522L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1270;
      ArrayUtils.shift(intArray0, 1270, (-2146792280), 425);
      assertArrayEquals(new int[] {1270}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1270;
      floatArray0[1] = (float) 425;
      floatArray0[2] = 1927.07F;
      floatArray0[3] = (float) 3091L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1L));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1270.0F, 425.0F, 1927.07F, 3091.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1270.0F, 425.0F, 1927.07F, 3091.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1270.0F, 425.0F, 1927.07F, 3091.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1270.0F, 425.0F, 1927.07F, 3091.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)28;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)5, (byte)9, (byte)28}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1270}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1751L);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) (-1751L);
      floatArray0[8] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-1751.0F), 1.0F, 1.0F, 1.0F, 1.0F, (-1751.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-1), (int) (byte) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Double double0 = new Double((byte) (-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 102L;
      longArray0[1] = 3091L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-522L);
      longArray0[5] = (-1L);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 1.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 911.9012699842783;
      doubleArray0[1] = (double) 0L;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, 3, 414.829);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {911.9012699842783, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap((int[]) null, (-3265), (-1091), 3926);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-533);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 80;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 80.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 80.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 80.0, 79.8792, (-533.0), 2833.73888426615, 80.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 80);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)0, (byte)3, (byte)3}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)3;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer integer0 = new Integer((byte)3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = 271L;
      longArray0[2] = (long) 80;
      longArray0[3] = (long) 80;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte)3, (-325));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {3L, 271L, 80L, 80L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)104);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-4712), 849, (-4712));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)104, (-4712));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(849);
      assertEquals(849, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (int) 104, integerArray0[1]);
      assertNull(integer2);
      assertEquals(2, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null, "w4C-ymb&3ukyl!");
      assertEquals("w4C-ymb&3ukyl!", string0);
      assertNotNull(string0);
      
      ArrayUtils.shift((byte[]) null, 909, (-649), (-1751));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1751);
      doubleArray0[1] = (double) (byte)104;
      doubleArray0[2] = (double) 909;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1751.0), 104.0, 909.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1751.0), 104.0, 909.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 909.0;
      doubleArray2[1] = (Double) 104.0;
      doubleArray2[2] = (Double) 104.0;
      doubleArray2[3] = (Double) 104.0;
      doubleArray2[4] = (Double) 104.0;
      doubleArray2[5] = (Double) 104.0;
      doubleArray2[6] = (Double) 104.0;
      doubleArray2[7] = (Double) 909.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {909.0, 104.0, 104.0, 104.0, 104.0, 104.0, 104.0, 909.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte)59, (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-17);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)118;
      longArray0[4] = (long) (byte) (-6);
      longArray0[5] = (-2042L);
      ArrayUtils.shift(longArray0, (-1), (int) (byte) (-17), 1106);
      assertArrayEquals(new long[] {(-17L), 0L, 0L, 118L, (-6L), (-2042L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)6);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-371), (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[3];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer integer0 = new Integer((-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      ArrayUtils.swap(charArray0, (-2180), 1, 1466);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      byte byte0 = (byte)2;
      byte byte1 = (byte) (-30);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char char0 = '@';
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '@', (int) (byte) (-30));
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(1357L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'L';
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1627L), 2, (int) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'e', (-1763));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 1454, (-310), 828);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 828;
      float[] floatArray1 = ArrayUtils.insert((int) (byte)2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {108.0F, 108.0F, 828.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {108.0F, 108.0F, 108.0F, 108.0F, 828.0F, 828.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 828.0F;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 828.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MockRandom mockRandom0 = new MockRandom(1454);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      short[] shortArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-19L);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) 'l';
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (double) '~';
      doubleArray0[5] = 3.0;
      doubleArray0[6] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1789.044, (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {36.0, 108.0, 3.0, 3.0, 126.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) byteArray0, (-2216), (-748), (-118));
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-2));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.add((float[]) null, (float) (byte) (-2));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (byte) (-2);
      intArray0[2] = (int) (byte) (-2);
      intArray0[3] = 122;
      intArray0[4] = (int) (byte) (-2);
      intArray0[5] = 154;
      intArray0[6] = (int) (byte) (-2);
      intArray0[7] = (-1214);
      ArrayUtils.shift(intArray0, (int) (byte) (-2));
      assertArrayEquals(new int[] {(-2), 122, (-2), 154, (-2), (-1214), 0, Integer.MAX_VALUE, (-2)}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.shift((short[]) null, Integer.MAX_VALUE, (int) (byte) (-2), Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 154, (short)51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 154, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift((short[]) null, 372, (-1), 372);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 122.0;
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[2] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      doubleArray0[5] = 1238.2490234375;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {122.0, (-219.432612717714), 1386.844970703125, (-3378.280517578125), 108.0, 1238.2490234375}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, 3558);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 668.073F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (-1));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte)13);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 111;
      intArray0[5] = 4;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 111, 0, 4}, intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 111, 0, 4}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      long[] longArray0 = ArrayUtils.insert(25, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)5031);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)5031, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 554.89F;
      floatArray0[2] = 1962.5662F;
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-946.7269));
      assertEquals((-946.7269), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0F);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0F);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(3334.54);
      assertEquals(3334.54, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double(554.89F);
      assertEquals(554.8900146484375, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double5;
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)53);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1763);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(5963.783662795864);
      assertEquals(5963.783662795864, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(5963.783662795864, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1696));
      assertEquals((-1696.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(5963.783662795864);
      assertEquals(5963.783662795864, (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2477.7045657227);
      assertEquals(2477.7045657227, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-4190.0));
      assertEquals((-4190.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1763));
      assertEquals((-1763.0), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-1.0));
      assertEquals((-1.0), (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 5963.783662795864, 5963.783662795864, (-1696.0), 5963.783662795864, 2477.7045657227, (-4190.0), (-1763.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)876;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)70;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)876, (short)53, (short) (-1), (short)70}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)876, (short)53, (short) (-1), (short)70}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      short[] shortArray0 = new short[10];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-825), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -825, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      short[] shortArray0 = new short[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)5031);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)5031}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)1075;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 52);
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1075, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1075, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0, 0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'W');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&', 'W'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1), 2025, 1492);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0085';
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = 93.43;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 133.0, 0.0, 0.0, 0.0, 93.43}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 133.0, 0.0, 0.0, 0.0, 93.43}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character character0 = new Character('\u0085');
      assertEquals('\u0085', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\u0085');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1736));
      assertEquals((-1736), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1736), integer1);
      assertEquals((-1736), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray0 = ArrayUtils.insert((-1736), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)52, 478);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Double double0 = new Double((-3578.280517578125));
      assertEquals((-3578.280517578125), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 122, (-1214));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-369.98F);
      doubleArray0[1] = (double) (-1646.4375F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-369.98F);
      doubleArray0[5] = (double) (-1646.4375F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-369.9800109863281), (-1646.4375), (-1.0), (-1.0), (-369.9800109863281), (-1646.4375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-489.611F);
      floatArray0[1] = (float) (-1214);
      floatArray0[2] = 102.5675F;
      floatArray0[3] = (-369.98F);
      floatArray0[4] = (-1646.4375F);
      floatArray0[5] = (float) 122;
      floatArray0[6] = (-1751.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-489.611F), (-1214.0F), 102.5675F, (-369.98F), (-1646.4375F), 122.0F, (-1751.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-29));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3732;
      intArray0[1] = 256;
      intArray0[2] = 1711;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 356);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {3732, 256, 1711}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 1711;
      doubleArray0[2] = (double) 256;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1711;
      ArrayUtils.reverse(doubleArray0, 3732, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {256.0, 1711.0, 256.0, 1.0, 1711.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1711.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1), object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 256.0;
      doubleArray1[1] = (Double) 256.0;
      doubleArray1[2] = (Double) 256.0;
      Double double0 = new Double(1711.0);
      assertEquals(1711.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 1711.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {256.0, 256.0, 256.0, 1711.0, 1711.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)101;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte) (-15), (byte)1, (byte)64, (byte)4, (byte)50, (byte)101}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(shortArray0, (-388), (-2145100668), (-69));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '>';
      charArray0[5] = '!';
      charArray0[6] = '!';
      ArrayUtils.swap(charArray0, Integer.MIN_VALUE, (-2080), (-1444));
      assertArrayEquals(new char[] {'!', '!', '!', '!', '>', '!', '!'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shift(shortArray0, (-25), (-25), (-25));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      ArrayUtils.shift(longArray0, 436, (int) byte0, 0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1016));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      byteArray1[5] = byte0;
      ArrayUtils.reverse(byteArray1, (int) (short)2, (int) (short)2);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-124), (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      float[] floatArray2 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray2);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3431.1);
      doubleArray0[1] = (-165.487874);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 91.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2269.2694953;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-165.487874), 0.1, 91.0, Double.NaN, Double.NaN, 2269.2694953, (-3431.1)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt(int0);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(88);
      assertEquals(88, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2145103856));
      assertEquals((-2145103856), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("#+)t|z?Mh$");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer integer7 = new Integer(1227);
      assertEquals(1227, (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(88);
      assertEquals(88, (int)integer8);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertNotNull(integer8);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer8);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)10;
      intArray0[2] = 332;
      intArray0[3] = (int) short0;
      intArray0[4] = 332;
      intArray0[5] = (int) short0;
      intArray0[6] = 332;
      intArray0[7] = 332;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) short0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {10, 332, 332, 332, 332}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray0, 137);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332, 137}, intArray2);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(9, intArray2.length);
      assertEquals(8, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, short0, (int) (short)1087);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) short0;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-1);
      MutableInt mutableInt0 = new MutableInt((Number) 332);
      assertEquals(332, mutableInt0.intValue());
      assertEquals("332", mutableInt0.toString());
      assertEquals(332.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(332.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(332L, mutableInt0.longValue());
      assertEquals(332, (int)mutableInt0.toInteger());
      assertEquals(332, (int)mutableInt0.getValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals((short)332, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(332, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(332, mutableInt0.intValue());
      assertEquals("332", mutableInt0.toString());
      assertEquals(332.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(332.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(332L, mutableInt0.longValue());
      assertEquals(332, (int)mutableInt0.toInteger());
      assertEquals(332, (int)mutableInt0.getValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals((short)332, mutableInt0.shortValue());
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 10;
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) 332;
      Integer integer1 = new Integer(short0);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[6] = integer1;
      integerArray0[7] = (Integer) 332;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean0);
      assertEquals(8, integerArray0.length);
      
      longArray0[1] = (long) 332;
      longArray0[2] = (long) 137;
      longArray0[3] = (long) 332;
      longArray0[4] = (long) (short)10;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 332L, 137L, 332L, 10L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2026;
      floatArray0[1] = (-3180.0F);
      floatArray0[2] = (-3180.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2948.4348F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2026.0F, (-3180.0F), (-3180.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2026.0F, (-3180.0F), (-3180.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-686.434);
      doubleArray0[1] = (double) (-3180.0F);
      doubleArray0[2] = (-1528.9);
      doubleArray0[4] = (double) (-3180.0F);
      doubleArray0[5] = (double) (-3180.0F);
      doubleArray0[6] = (double) (-3180.0F);
      doubleArray0[7] = 100.0;
      ArrayUtils.shift(doubleArray0, 2026);
      assertArrayEquals(new double[] {(-3180.0), 100.0, (-686.434), (-3180.0), (-1528.9), 0.0, (-3180.0), (-3180.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)68);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2184);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)106);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)120;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)120);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)879;
      ArrayUtils.swap(shortArray0, (-724), (-724), (-505));
      assertArrayEquals(new short[] {(short)879}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 122.0;
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[2] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      doubleArray0[5] = 1238.2490234375;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {122.0, (-219.432612717714), 1386.844970703125, (-3378.280517578125), 108.0, 1238.2490234375}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2319;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2319;
      ArrayUtils.swap(floatArray0, 2319, 2319, 1017);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2319L, (-1L), 2319L, 0L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1050;
      shortArray0[3] = (short)1331;
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)101, (short)1050, (short)1331, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)101, (short)1050, (short)1331, (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray1, (-2086), (-307));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)101, (short)1050, (short)1331, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)101, (short)1050, (short)1331, (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)51;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51, (short)51}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (byte)51, 2146653575);
      assertArrayEquals(new short[] {(short)51, (short)51}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-78));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer((byte) (-78));
      assertEquals((-78), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (byte)51, (short)51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-533);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0, 79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 91;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {91, 91, 3, 3}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) 377;
      longArray0[2] = (long) 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 3, 91);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {3L, 377L, 3L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-533);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0, 79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 91);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'d', 'q', 'q', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 984.26249355, (double) (byte)3);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      BitSet bitSet0 = new BitSet(2779);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2816, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[0] = (double) 2779;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 'K', 4, (double) (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2779.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-172));
      assertEquals((-172), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer2 = new Integer((byte)0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-172);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 34;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (-172);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-172.0), 34.0, 0.0, (-172.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-172.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, 0.0, (-172.0)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-109), 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray2[8] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray2, true);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray2));
      assertEquals(8, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Short[] shortArray0 = new Short[16];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertEquals(16, shortArray0.length);
      assertEquals(16, shortArray1.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) short0;
      intArray0[5] = (int) short0;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) short0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {10, 0}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, (-1), (-1), 0, (-1), (-1), (-1)}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(8, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(15, int0);
      assertEquals(16, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, short0, (int) (short)1087);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(16, shortArray0.length);
      assertEquals(16, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Double double0 = new Double(299);
      assertEquals(299.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 90);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-59.844078F));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (-59.844078F));
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)39, 91);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '|';
      boolean boolean4 = ArrayUtils.contains(doubleArray0, (double) (byte)39, (-213.39484281993154));
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertArrayEquals(new double[] {126.0, 124.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {126.0, 124.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), (-3631.0F), 0.0F, 0.0F, 0.0F, 91.0F, 0.0F, 0.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("{YVyqW1Q$p?(");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2964;
      floatArray0[1] = (float) (-1645);
      floatArray0[2] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (-4793));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2964.0F, (-1645.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.7);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-52));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-68));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 0, (Integer) null);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (int) byte0, 1381, 0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '~';
      charArray1[3] = '~';
      charArray1[4] = '!';
      ArrayUtils.swap(charArray1, 0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'l', '~', '~', '!'}, charArray1);
      assertEquals(5, charArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'l';
      intArray0[1] = (int) 'l';
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) '~';
      intArray0[6] = (int) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = new Integer((-2430));
      assertEquals((-2430), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-2430), 0.0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2430);
      intArray0[2] = 0;
      intArray0[3] = (-2430);
      intArray0[4] = (-2430);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-618);
      intArray0[8] = (-2302);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2430), 0, (-2430), (-2430), 0, 0, (-618), (-2302)}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      ArrayUtils.shift((boolean[]) null, 127, 0, 0);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 102L;
      longArray0[1] = 3091L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = (-522L);
      longArray0[5] = (-1L);
      longArray0[6] = (-88L);
      longArray0[7] = (-17300L);
      int int0 = ArrayUtils.indexOf(longArray0, 251L, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {102L, 3091L, 0L, (-1L), (-522L), (-1L), (-88L), (-17300L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-355));
      assertEquals((-355), (int)integer0);
      assertNotNull(integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-355), (-1), (-355));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CLASS_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1751);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-1751);
      longArray0[5] = (long) 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 1135L);
      assertNull(longArray1);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1), 3761.4506783);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[3] = integer1;
      Integer integer2 = Integer.valueOf(int0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[4] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Object object0 = ArrayUtils.toPrimitive((Object) (-1148));
      assertEquals((-1148), object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1532));
      assertEquals((-1532), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Double double0 = new Double((-1532));
      assertEquals((-1532.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)100);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1386.845F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer0 = new Integer((byte)70);
      assertEquals(70, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(5);
      assertEquals(5, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-3717));
      assertEquals((-3717), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((byte)70);
      assertEquals(70, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)70;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 5;
      intArray0[5] = 15;
      intArray0[6] = (int) (byte)70;
      intArray0[7] = (int) (byte)70;
      intArray0[8] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 5);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {70, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 15, 70, 70, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {70, Integer.MAX_VALUE, Integer.MAX_VALUE, 5, 0, 15, 70, 70, Integer.MAX_VALUE}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      assertEquals(5, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3717));
      assertEquals((-3717), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 15;
      Integer integer3 = new Integer(15);
      assertEquals(15, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(5, (int)integer4);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(int0 == int1);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int int2 = (-1);
      Integer integer5 = new Integer((-1));
      assertEquals((-1), (int)integer5);
      assertTrue(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, integerArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int2;
      intArray0[3] = (-3717);
      intArray0[4] = int1;
      intArray0[5] = int1;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {15, 5, (-1), (-3717), 15, 15}, intArray0);
      assertArrayEquals(new int[] {15, 5, (-3717), 15, 15}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 410.52F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-462.717F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {108.0F, (-1.0F), 410.52F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-1), byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 12;
      intArray0[2] = (int) (byte) (-37);
      intArray0[3] = (int) (byte) (-37);
      intArray0[4] = (int) (byte) (-27);
      intArray0[5] = (-1640);
      intArray0[6] = (int) (byte) (-22);
      intArray0[7] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 12, (-37), (-37), (-27), (-1640), (-22), (-1)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'E');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 107.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {107.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte)1);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(46);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals("46", mutableInt1.toString());
      assertEquals(46.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(46, mutableInt1.intValue());
      assertEquals(46, (int)mutableInt1.toInteger());
      assertEquals(46, (int)mutableInt1.getValue());
      assertEquals(46.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)46, mutableInt1.byteValue());
      assertEquals((short)46, mutableInt1.shortValue());
      assertEquals(46L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt((int) (byte) (-64));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals((short) (-64), mutableInt2.shortValue());
      assertEquals((-64.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-64.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-64), (int)mutableInt2.toInteger());
      assertEquals((-64), (int)mutableInt2.getValue());
      assertEquals("-64", mutableInt2.toString());
      assertEquals((byte) (-64), mutableInt2.byteValue());
      assertEquals((-64), mutableInt2.intValue());
      assertEquals((-64L), mutableInt2.longValue());
      assertNotNull(mutableInt2);
      
      Integer integer1 = mutableInt1.toInteger();
      assertEquals(46, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertEquals("46", mutableInt1.toString());
      assertEquals(46.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(46, mutableInt1.intValue());
      assertEquals(46, (int)mutableInt1.toInteger());
      assertEquals(46, (int)mutableInt1.getValue());
      assertEquals(46.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)46, mutableInt1.byteValue());
      assertEquals((short)46, mutableInt1.shortValue());
      assertEquals(46L, mutableInt1.longValue());
      assertNotNull(integer1);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      
      Integer[] integerArray0 = null;
      Integer integer2 = new Integer(2608);
      assertEquals(2608, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, Integer.MAX_VALUE, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (-17);
      MockRandom mockRandom0 = new MockRandom((-17));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)10;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-17.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte)1;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-8), (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int) 1, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short) (-1580), (short) (-1580));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1580, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(booleanArray1, 427);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)1755);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1755, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[7] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer integer0 = new Integer((-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer0, 0);
      assertEquals((-1), int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte)0;
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[3] = 't';
      charArray0[4] = '?';
      ArrayUtils.swap(charArray0, (int) (byte)59, (-1461));
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', 't', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)59;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2220), 2595);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {59.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '?';
      Object object0 = ArrayUtils.get(objectArray0, 0, objectArray0[0]);
      assertEquals('?', object0);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 't';
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) '\u0000';
      objectArray0[6] = (Object) 't';
      objectArray0[7] = (Object) '?';
      objectArray0[8] = (Object) 59.0;
      ArrayUtils.shift(objectArray0, (-1461));
      assertEquals(9, objectArray0.length);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) '\u0000';
      characterArray0[2] = (Character) '\u0000';
      characterArray0[3] = (Character) 't';
      ArrayUtils.swap(doubleArray0, (int) characterArray0[3], 34);
      assertArrayEquals(new double[] {59.0}, doubleArray0, 0.01);
      assertEquals(4, characterArray0.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1603.8968473128;
      doubleArray0[1] = (double) 91;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {1603.8968473128, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1603.8968473128, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 91, (-1658), 91);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1603.8968473128, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1646.4375F);
      floatArray0[7] = 0.0F;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)90;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-84), (byte)50, (byte)90}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3005.771F, 2026);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-873));
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false}, booleanArray1));
      assertEquals(9, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2125570549);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, 1871);
      assertFalse(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)99;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-706), (-3177));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)99}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short)99;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) (short)99;
      objectArray0[5] = (Object) false;
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short)99;
      boolean boolean3 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)13);
      assertEquals(13, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 49;
      Integer integer2 = new Integer(49);
      assertEquals(49, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, 49);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      ArrayUtils.shift(intArray0, 15, 15, 522);
      assertArrayEquals(new int[] {49}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 15);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {15.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap(floatArray1, (int) integerArray0[1], int0, 2223);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {15.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) 49;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) 15;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) (int)integerArray0[0];
      ArrayUtils.swap(longArray0, 0, 15, (int) integerArray0[0]);
      assertArrayEquals(new long[] {49L, 49L, 49L, 15L, 49L, 13L}, longArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)2, byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)52);
      assertEquals((-1), int0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (byte)5, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = true;
      booleanArray0[5] = true;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)13, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-45);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)97, (byte)47, (byte) (-45)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)13;
      longArray0[1] = (long) (byte) (-47);
      longArray0[2] = (long) (byte) (-47);
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)47, (int) (byte) (-47));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {13L, (-47L), (-47L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-47L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {13L, (-47L), (-47L), 0L}, longArray0);
      assertArrayEquals(new long[] {13L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-47);
      doubleArray0[1] = (double) (byte)97;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (byte)97;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, (int) (byte)97);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-47.0), 97.0, 0.0, 97.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, 3);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)93;
      byteArray0[3] = (byte)93;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1056);
      longArray0[1] = (long) '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), Integer.MAX_VALUE);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1056L), 49L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-99));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1056L), 49L}, longArray0);
      assertArrayEquals(new long[] {(-1056L), 49L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte) (-99));
      assertEquals((-99.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-99.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      Character character1 = new Character('1');
      assertEquals('1', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Integer[] integerArray0 = new Integer[1];
      try { 
        Integer.valueOf(":~lCS_pzv", (int) (byte)93);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 93 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1595;
      floatArray0[3] = 261.1F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 1595;
      ArrayUtils.swap(floatArray0, 108, 8192, (int) (short)0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1595.0F, 261.1F, 0.0F, 0.0F, 1595.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)97;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = (int) (short)111;
      intArray0[1] = (int) (short)111;
      intArray0[12] = (int) (short)111;
      intArray0[3] = (int) (short)111;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(17, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1053;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, Integer.MAX_VALUE);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1053}, intArray0);
      assertArrayEquals(new int[] {1053}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-640);
      intArray0[1] = (-75);
      intArray0[2] = (-1769);
      intArray0[3] = 52;
      intArray0[4] = 2546;
      intArray0[5] = (-1393);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 410);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-640), (-75), (-1769), 52, 2546, (-1393)}, intArray0);
      assertArrayEquals(new int[] {(-640), (-75), (-1769), 52, 2546, (-1393)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-490.0F);
      floatArray0[1] = (float) 2546;
      floatArray0[2] = (float) (-75);
      floatArray0[3] = (float) (-1393);
      floatArray0[4] = (float) (-1769);
      floatArray0[5] = (float) (-1769);
      floatArray0[6] = (float) (-1393);
      floatArray0[7] = (float) (-1769);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-490.0F), 2546.0F, (-75.0F), (-1393.0F), (-1769.0F), (-1769.0F), (-1393.0F), (-1769.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-640), (-75), (-1769), 52, 2546, (-1393)}, intArray0);
      assertArrayEquals(new int[] {(-640), (-75), (-1769), 52, 2546, (-1393)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      ArrayUtils.shift(charArray0, (-2145546006));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('Z');
      assertEquals('Z', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('u');
      assertEquals('u', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('}');
      assertEquals('}', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('Z');
      assertEquals('Z', (char)character4);
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('B');
      assertEquals('B', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('Z');
      assertEquals('Z', (char)character6);
      assertTrue(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character((char) character1);
      assertEquals('Z', (char)character7);
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character6));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character1);
      assertEquals('Z', (char)character8);
      assertTrue(character8.equals((Object)character1));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character3));
      assertTrue(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1842L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1842L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) (-1148));
      assertEquals((-1148), object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1532));
      assertEquals((-1532), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Double double0 = new Double((-1532));
      assertEquals((-1532.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1148);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1148.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1148);
      longArray0[1] = (long) (-1148);
      longArray0[2] = (long) 2026;
      longArray0[3] = (long) (-1532);
      longArray0[4] = 124L;
      longArray0[5] = (long) 2026;
      longArray0[6] = (long) 2026;
      longArray0[7] = (long) (-1148);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1148), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1148, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shift(shortArray0, 2, 759, 2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 759;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(759, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 759, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3093), (int) (byte)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.insert(1, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, (int) (byte) (-118));
      assertEquals((-1), int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 1, 2, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-6), (byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[1] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 94.74138319274974;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[12];
      charArray0[0] = 'A';
      charArray0[1] = 'd';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2821;
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(12, charArray0.length);
      assertEquals(12, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 122.0;
      doubleArray0[1] = (-219.432612717714);
      doubleArray0[2] = 1386.844970703125;
      doubleArray0[3] = (-3378.280517578125);
      doubleArray0[4] = 108.0;
      doubleArray0[5] = 1238.2490234375;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-792.175721));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {122.0, (-219.432612717714), 1386.844970703125, (-3378.280517578125), 108.0, 1238.2490234375}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2319);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2319;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2319;
      longArray0[3] = 1239L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(512, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 2, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = ':';
      charArray0[2] = 'a';
      charArray0[3] = ':';
      charArray0[4] = '0';
      charArray0[5] = 'b';
      boolean boolean0 = ArrayUtils.contains(charArray0, '0');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', ':', 'a', ':', '0', 'b'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)122, (-1751));
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Integer integer0 = new Integer(1020);
      assertEquals(1020, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(59);
      assertEquals(59, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)7;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2960, (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)7}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1020;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 59;
      int int1 = ArrayUtils.indexOf(doubleArray0, 905.0367655487, (int) (byte)0, (double) (byte)57);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {1020.0, (-1.0), 59.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)122;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1751);
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)122;
      intArray0[5] = (int) (byte)122;
      int int2 = ArrayUtils.indexOf(intArray0, (int) (short)0, (-1));
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {122, 0, (-1751), (-1), 122, 122}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1301));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-1301)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short) (-1301));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1301L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integerArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)59;
      objectArray0[1] = (Object) (byte)59;
      objectArray0[2] = (Object) (byte)59;
      objectArray0[3] = (Object) (byte)59;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte)59;
      objectArray0[6] = (Object) (byte)59;
      Integer integer0 = new Integer((byte)59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (int) (byte) (-17));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer((-2367));
      assertEquals((-2367), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[15];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 91, 91, 97);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      Character character0 = new Character('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[2] = character0;
      characterArray0[3] = (Character) '&';
      characterArray0[4] = (Character) '&';
      characterArray0[5] = (Character) '&';
      characterArray0[6] = (Character) '&';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1366;
      shortArray0[1] = (short)1366;
      shortArray0[2] = (short)1366;
      shortArray0[3] = (short)1366;
      shortArray0[4] = (short)1366;
      shortArray0[5] = (short)1366;
      shortArray0[6] = (short)1366;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1366, (short)1366, (short)1366, (short)1366, (short)1366, (short)1366, (short)1366}, shortArray0);
      assertArrayEquals(new short[] {(short)1366, (short)1366, (short)1366, (short)1366, (short)1366, (short)1366, (short)1366}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)4;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      floatArray0[2] = (float) 'R';
      charArray0[2] = 'R';
      charArray0[3] = '.';
      ArrayUtils.shift(charArray0, 3768);
      assertArrayEquals(new char[] {'R', '\u0000', 'R', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'R', '\u0000', 'R', '.'}, charArray0);
      assertArrayEquals(new char[] {'R', '\u0000', 'R', '\u0000', 'R', '.', 'R', '.'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = ArrayUtils.insert(43, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)57;
      ArrayUtils.swap(floatArray0, (int) (byte)7, 3337);
      assertArrayEquals(new float[] {7.0F, 7.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      char[] charArray0 = ArrayUtils.insert((int) (byte)7, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1135, byteArray2, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1135, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1751);
      intArray0[2] = (-1751);
      intArray0[3] = (-1751);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-1751);
      intArray0[7] = (-1751);
      ArrayUtils.shift(intArray0, 1, (-1751), 0);
      assertArrayEquals(new int[] {1, (-1751), (-1751), (-1751), 1, 1, (-1751), (-1751)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1751);
      doubleArray0[1] = (-912.72758);
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1751.0), (-912.72758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1751.0), (-912.72758), (-1751.0), (-912.72758)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1114.785222), (-1751));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1751.0), (-912.72758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1751.0), (-912.72758), (-1751.0), (-912.72758)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)62);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = 54;
      Integer integer2 = new Integer(54);
      assertEquals(54, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, (-5484));
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) int0);
      assertEquals(54, object0);
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer2));
      assertNotNull(object0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = (-5484);
      ArrayUtils.shift(intArray0, 1270, (-5484), 522);
      assertEquals(12, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 54;
      floatArray0[1] = (float) (-5484);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-5484.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {54.0F, (-5484.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5484.0F), 54.0F, (-5484.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {54.0F, (-5484.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)5, (byte)28, (byte)9, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1357L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1961L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1135);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1075.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (-1646.4375F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1646.4375F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (byte) (-87));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)119;
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte)119);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)0, 48);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)43;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 184.19);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {43.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {43.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 0, (int) (byte)43);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1);
      longArray2[1] = 1592L;
      longArray2[2] = (long) (byte)119;
      longArray2[3] = (long) (-1);
      longArray2[4] = (long) (byte)0;
      ArrayUtils.swap(longArray2, (int) (byte)111, (int) (byte)111, (-2060));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-1L), 1592L, 119L, (-1L), 0L}, longArray2);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1357L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1961L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1135);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, (-407));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1135;
      floatArray0[1] = (float) 1135;
      floatArray0[2] = (-1646.4375F);
      floatArray0[3] = (float) (-407);
      floatArray0[4] = (float) (-1L);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1135.0F, 1135.0F, (-1646.4375F), (-407.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-573);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short) (-1), (-5483));
      assertArrayEquals(new short[] {(short) (-573), (short) (-1), (short)2, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      Integer integer0 = new Integer(59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1020);
      assertEquals(1020, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(59);
      assertEquals(59, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)7;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2960, (int) integer0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)7}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1020;
      doubleArray0[1] = (double) (int)integer0;
      doubleArray0[2] = (double) 59;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 59.0, (int) (byte)0, (-136.22277462762617));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1020.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 54;
      intArray0[1] = 54;
      intArray0[2] = (int) '!';
      intArray0[3] = (int) '!';
      intArray0[4] = 54;
      intArray0[5] = 54;
      intArray0[6] = (int) '!';
      intArray0[7] = 54;
      ArrayUtils.shift(intArray0, 33, 88, 4);
      assertArrayEquals(new int[] {54, 54, 33, 33, 54, 54, 33, 54}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-513), (-2793));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {54, 54, 33, 33, 54, 54, 33, 54}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = 2595.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 33.0, (-2793), 1644.7094447892387);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {33.0, 2595.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) ' ';
      ArrayUtils.shift(intArray0, 0, 54, 54);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)13;
      floatArray0[3] = (float) (short)13;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1175.9868F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1175.9868F, 32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray2.length);
      assertEquals(7, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 54, (int) (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 13.0F;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 13.0F;
      doubleArray0[4] = (double) 1175.9868F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1603.8968473128;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2595.0, 64, 2424.57953715017);
      assertEquals(6, int0);
      assertArrayEquals(new double[] {13.0, 32.0, 32.0, 13.0, 1175.98681640625, 0.0, 1603.8968473128}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals((short)34, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer2 = new Integer((byte)0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-49));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -49, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[1], 2340);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-4522.046116695948));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[1];
      doubleArray0[5] = (double) 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '('}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {6, 40, 40}, intArray0);
      assertEquals(3, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('^');
      assertEquals('^', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char0 = '0';
      Character character2 = Character.valueOf('0');
      assertEquals('0', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('m');
      assertEquals('m', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('h');
      assertEquals('h', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('0');
      assertEquals('0', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char0);
      assertEquals('0', (char)character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char0);
      assertEquals('0', (char)character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, (char) character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character7));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character5));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'f', '^', '0', 'm', 'h', '0', '0', '0'}, charArray2);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray2.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 40;
      integerArray0[1] = (Integer) 40;
      integerArray0[2] = (Integer) 40;
      integerArray0[3] = (Integer) 6;
      integerArray0[4] = (Integer) 40;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(785, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 785, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 848.0367655487;
      doubleArray0[2] = 1770.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4220.803;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-2983.5854);
      doubleArray0[7] = 671.0813097966496;
      doubleArray0[8] = (-1851.488323432624);
      ArrayUtils.shift(doubleArray0, (-1073741823), (-1073741823), 11);
      assertArrayEquals(new double[] {Double.NaN, 848.0367655487, 1770.0, 0.0, 4220.803, 1.0, (-2983.5854), 671.0813097966496, (-1851.488323432624)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2833.73888426615;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {2833.73888426615}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2833.73888426615}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2833.73888426615, 2833.73888426615}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte)3);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.length());
      assertEquals("{3, 4}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = (int) (byte)3;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 377;
      intArray1[1] = (int) (byte)3;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {377, 3}, intArray1);
      assertArrayEquals(new int[] {68, 3, 0, 3, 3}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(5, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap((float[]) null, 4834, 4834, 4834);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-0.47617394F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-489.611F);
      ArrayUtils.reverse(floatArray0, 155, 2147483618);
      assertArrayEquals(new float[] {(-1547.032F), (-0.47617394F), 1386.845F, 1.0F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'z';
      floatArray0[0] = (float) '4';
      charArray0[3] = '.';
      charArray0[4] = '\'';
      charArray0[5] = 'r';
      boolean boolean0 = ArrayUtils.contains(charArray0, '>');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6', 'z', '\u0000', '.', '\'', 'r'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'z';
      doubleArray0[1] = (double) 1386.845F;
      doubleArray0[2] = (double) 155;
      doubleArray0[3] = (double) 'z';
      doubleArray0[4] = 4183.007801;
      doubleArray0[5] = (double) '\'';
      doubleArray0[6] = (double) '4';
      doubleArray0[7] = (double) (-0.47617394F);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 1386.845F);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {122.0, 155.0, 122.0, 4183.007801, 39.0, 52.0, (-0.47617393732070923)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {122.0, 1386.844970703125, 155.0, 122.0, 4183.007801, 39.0, 52.0, (-0.47617393732070923)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 1015, (Object) null);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Integer integer0 = new Integer((-3122));
      assertEquals((-3122), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = new Integer[8];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integerArray0[0];
      integerArray1[3] = integer0;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer0;
      Integer integer1 = new Integer((int) integerArray1[0]);
      assertEquals((-3122), (int)integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(8, integerArray1.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      ArrayUtils.shift(shortArray0, (-1561), 2, (int) (short)4);
      assertEquals(19, shortArray0.length);
      
      integerArray1[3] = integerArray1[1];
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2397;
      ArrayUtils.shift(shortArray0, (int) (short)2397, 16, (-388));
      assertArrayEquals(new short[] {(short)2397}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)48;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)27, (byte) (-117), (byte)0, (byte)108, (byte)48}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2427.4321F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.3882F);
      long[] longArray0 = new long[1];
      longArray0[0] = (-3957L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3957L), 1617);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-3957L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, 13);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 1617;
      intArray0[2] = (-1072);
      intArray0[3] = 287;
      intArray0[4] = 1617;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1617, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1617, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2953L;
      longArray0[1] = 981L;
      ArrayUtils.shift(booleanArray0, 108);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 409, 2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-3402.969602950576));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 2.0;
      objectArray0[2] = (Object) 2953L;
      objectArray0[3] = (Object) 2.0;
      objectArray0[4] = (Object) 2953L;
      ArrayUtils.swap(objectArray0, 18688, 2, 1604);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1751);
      longArray0[4] = (long) (-1751);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-1121), (-393), (-2336));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)99, (-393));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray4 = ArrayUtils.addAll(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray2, booleanArray4);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray4.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(118);
      assertEquals(118, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2220);
      floatArray0[1] = (float) 2;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221433);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2126221433;
      longArray0[1] = (long) 2126221433;
      longArray0[2] = (long) 2126221433;
      longArray0[3] = (long) 2126221433;
      longArray0[4] = (long) 2126221433;
      longArray0[5] = (long) 2126221433;
      longArray0[6] = (long) 2126221433;
      longArray0[7] = (-226L);
      longArray0[8] = (long) 2126221433;
      ArrayUtils.shift(longArray0, 4, 4, 2126221433);
      assertArrayEquals(new long[] {2126221433L, 2126221433L, 2126221433L, 2126221433L, 2126221433L, 2126221433L, 2126221433L, (-226L), 2126221433L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)637);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean[] booleanArray0 = new boolean[1];
      Float float0 = new Float((float) (byte)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      ArrayUtils.shift(longArray0, 436, (int) byte0, 0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1016));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 46;
      doubleArray1[1] = (double) 46;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(46, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2126221433;
      ArrayUtils.shift(intArray0, (-118));
      assertArrayEquals(new int[] {0, 2126221433}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2126221433, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(1072);
      assertEquals(1072, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1072, 1072);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 240, 240);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 240, (-1089.83772992));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.reverse((Object[]) integerArray1, 2026, 9);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 54;
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = 'X';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|', '|', '|', 'X'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2026, 1039);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'i', 65536);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'|', '|', '|', 'X'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2325);
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2787);
      shortArray0[4] = (short)793;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)64;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 9;
      intArray2[1] = (int) (short) (-2787);
      intArray2[2] = (-1224);
      intArray2[3] = 2174;
      intArray2[4] = 2026;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2174, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Byte byte0 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-44);
      intArray0[1] = (int) (byte)84;
      intArray0[2] = (int) (byte)84;
      intArray0[3] = (int) (byte)84;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte)84);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-44), 84, 84, 84}, intArray0);
      assertArrayEquals(new int[] {(-44), 84, 84, 84}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)588;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 332);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1107.298F);
      doubleArray0[1] = (double) (-3478.2805F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-3478.2805F), 100.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-1107.2979736328125), (-3478.280517578125)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, 931, (-1535));
      assertArrayEquals(new short[] {(short)588, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2373.0), 318);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1107.2979736328125), (-3478.280517578125)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap(floatArray0, (-1535), 11);
      assertArrayEquals(new float[] {(-3478.2805F), 0.0F, (-1107.298F), 76.78159F, 1259.3516F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-3478.280517578125), (-1107.2979736328125)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (byte) (-6);
      longArray0[2] = (long) (byte) (-6);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)13;
      longArray0[5] = (long) (byte) (-6);
      longArray0[6] = (long) (byte) (-6);
      longArray0[7] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-6L), (-6L), 0L, 13L, (-6L), (-6L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-6L), (-6L), 0L, 13L, (-6L), (-6L), 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("0", string0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(arrayUtils0.EMPTY_SHORT_ARRAY, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-111);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte) (-111), (byte)106}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-83);
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[2] = (double) '-';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 45.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-83);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-83.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-83), (byte) (-83), (byte)38}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1238.249F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1238.249F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1238.249F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-393);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-519));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393), (short) (-519)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-393));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1238.249F;
      doubleArray0[2] = (double) 0.0F;
      floatArray0[3] = 1.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-519), (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1238.2490234375, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, (-1), (int) (short) (-519));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'Z';
      charArray0[2] = '^';
      charArray0[3] = '#';
      charArray0[4] = '&';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) '4';
      intArray0[2] = (int) '^';
      intArray0[3] = (int) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1822));
      assertEquals((short) (-1822), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-1751));
      assertEquals((-1751.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1751.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1751), (int)mutableInt0.getValue());
      assertEquals((-1751), (int)mutableInt0.toInteger());
      assertEquals((byte)41, mutableInt0.byteValue());
      assertEquals("-1751", mutableInt0.toString());
      assertEquals((short) (-1751), mutableInt0.shortValue());
      assertEquals((-1751L), mutableInt0.longValue());
      assertEquals((-1751), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals((-1751), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-1751.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1751.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1751), (int)mutableInt0.getValue());
      assertEquals((-1751), (int)mutableInt0.toInteger());
      assertEquals((byte)41, mutableInt0.byteValue());
      assertEquals("-1751", mutableInt0.toString());
      assertEquals((short) (-1751), mutableInt0.shortValue());
      assertEquals((-1751L), mutableInt0.longValue());
      assertEquals((-1751), mutableInt0.intValue());
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(128);
      assertEquals(128, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(128);
      assertEquals(128, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer integer6 = mutableInt0.getValue();
      assertEquals((-1751), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertEquals((-1751.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1751.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1751), (int)mutableInt0.getValue());
      assertEquals((-1751), (int)mutableInt0.toInteger());
      assertEquals((byte)41, mutableInt0.byteValue());
      assertEquals("-1751", mutableInt0.toString());
      assertEquals((short) (-1751), mutableInt0.shortValue());
      assertEquals((-1751L), mutableInt0.longValue());
      assertEquals((-1751), mutableInt0.intValue());
      assertNotNull(integer6);
      
      Integer integer7 = new Integer((-585));
      assertEquals((-585), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      
      MutableInt mutableInt1 = new MutableInt(128);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(128, mutableInt1.intValue());
      assertEquals(128L, mutableInt1.longValue());
      assertEquals(128.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)128, mutableInt1.shortValue());
      assertEquals(128.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("128", mutableInt1.toString());
      assertEquals(128, (int)mutableInt1.toInteger());
      assertEquals(128, (int)mutableInt1.getValue());
      assertEquals((byte) (-128), mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      
      mutableInt1.add(1921);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(2049, mutableInt1.intValue());
      assertEquals(2049L, mutableInt1.longValue());
      assertEquals("2049", mutableInt1.toString());
      assertEquals(2049.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2049, mutableInt1.shortValue());
      assertEquals(2049.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2049, (int)mutableInt1.getValue());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(2049, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer8 = new Integer(1);
      assertEquals(1, (int)integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertNotNull(integer8);
      
      Integer integer9 = new Integer((-1751));
      assertEquals((-1751), (int)integer9);
      assertTrue(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      assertNotNull(integer9);
      
      mutableInt1.increment();
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(2050L, mutableInt1.longValue());
      assertEquals(2050.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)2050, mutableInt1.shortValue());
      assertEquals(2050, mutableInt1.intValue());
      assertEquals(2050.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2050, (int)mutableInt1.toInteger());
      assertEquals("2050", mutableInt1.toString());
      assertEquals(2050, (int)mutableInt1.getValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer[] integerArray2 = ArrayUtils.insert(664, integerArray1, integerArray0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer6));
      assertTrue(integer0.equals((Object)integer8));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer7));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer9));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer[] integerArray3 = new Integer[4];
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      
      integerArray3[0] = integer7;
      integerArray3[1] = integer8;
      integerArray3[2] = integer1;
      integerArray3[3] = integer9;
      Integer[] integerArray4 = ArrayUtils.removeAllOccurences(integerArray3, integer9);
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray3));
      assertFalse(integerArray4.equals((Object)integerArray1));
      assertFalse(integerArray4.equals((Object)integerArray0));
      assertFalse(integerArray4.equals((Object)integerArray2));
      assertTrue(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      assertNotNull(integerArray4);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray4);
      assertNotSame(integerArray4, integerArray3);
      assertNotSame(integerArray4, integerArray1);
      assertNotSame(integerArray4, integerArray0);
      assertNotSame(integerArray4, integerArray2);
      assertEquals(4, integerArray3.length);
      assertEquals(2, integerArray4.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray2);
      assertTrue(boolean0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray4));
      assertFalse(integerArray2.equals((Object)integerArray3));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray4));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray3));
      assertFalse(integer0.equals((Object)integer6));
      assertTrue(integer0.equals((Object)integer8));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer7));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer9));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray4));
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray4);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray4);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray4);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)4251);
      assertEquals((short)4251, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) shortArray0[0]);
      assertEquals((short)4251, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(8, shortArray0.length);
      
      shortArray0[1] = short1;
      short short2 = (short)99;
      Short short3 = new Short((short)99);
      assertEquals((short)99, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      assertEquals((short)99, (short)short4);
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)4251);
      assertEquals((short)4251, (short)short5);
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-19395));
      assertEquals((short) (-19395), (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short)99);
      assertEquals((short)99, (short)short7);
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short5));
      assertNotNull(short7);
      
      shortArray0[6] = short7;
      Short short8 = new Short(short2);
      assertEquals((short)99, (short)short8);
      assertTrue(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short6));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short1));
      assertTrue(short8.equals((Object)short4));
      assertTrue(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short5));
      assertNotNull(short8);
      
      shortArray0[7] = short8;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) ' ';
      ArrayUtils.shift(intArray0, 0, 54, 54);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)13;
      floatArray0[3] = (float) (short)13;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1175.9868F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1175.9868F, 32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 32.0F;
      doubleArray0[2] = (double) 54;
      doubleArray0[3] = (double) (short)13;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) ' ';
      doubleArray0[6] = (double) ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 0, 13.0);
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 32.0, 54.0, 13.0, 0.0, 32.0, 32.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      ArrayUtils.shift(charArray0, 251, (-2143821591), (-3411));
      assertArrayEquals(new char[] {'U', 'X', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)38;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      ArrayUtils.reverse((long[]) null);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean boolean0 = Boolean.valueOf("S8!Rjo=G");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = boolean1;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray1, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 1135L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((byte[]) null, (-463), 1573);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1442.4926F);
      floatArray0[1] = (float) 1573;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1442.4926F), 1573.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1442.4926F), 1573.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      floatArray0[2] = 326.12854F;
      int int0 = ArrayUtils.indexOf(floatArray0, 326.12854F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift((boolean[]) null, (int) (byte)10, (-2127), (int) (byte) (-51));
      int[] intArray0 = new int[1];
      intArray0[0] = 341;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {341}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)10, (byte) (-51), (byte)111, (byte)119, (byte)0, (byte)43}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'l';
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 'l';
      doubleArray0[3] = (double) 'l';
      doubleArray0[4] = (double) 'l';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {108.0, Double.NaN, 108.0, 108.0, 108.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1467.6041355500001), 2075.07179);
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {108.0, Double.NaN, 108.0, 108.0, 108.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, 417L, 0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'l'}, charArray0);
      assertEquals(9, charArray0.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, 87);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '\"';
      charArray0[2] = '1';
      charArray0[3] = '7';
      charArray0[4] = ' ';
      int int0 = ArrayUtils.indexOf(charArray0, 'e');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', '\"', '1', '7', ' '}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(charArray0, (-1), 2);
      assertArrayEquals(new char[] {'\"', 'D', '1', '7', ' '}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-34);
      ArrayUtils.reverse(byteArray0, 1017, (int) (byte) (-34));
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte) (-23), (byte) (-34)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-117L);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) '\"';
      longArray0[4] = (long) (byte) (-80);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '1';
      intArray0[2] = (int) ' ';
      intArray0[3] = (-93);
      intArray0[4] = (int) ' ';
      intArray0[5] = (-2145701618);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1703.3104F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = 206.5318F;
      floatArray0[3] = 1703.3104F;
      floatArray0[4] = (-2039.44F);
      floatArray0[5] = 1703.3104F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 1703.3104F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-580.8F), (-1001));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1703.3104F, 2.0F, 206.5318F, 1703.3104F, (-2039.44F), 1703.3104F, 2.0F, 1703.3104F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-124);
      ArrayUtils.reverse(byteArray0, (-1001), (-4706));
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124), (byte) (-124), (byte) (-124), (byte)29, (byte) (-124)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1703.3104F, 2.0F, 206.5318F, 1703.3104F, (-2039.44F), 1703.3104F, 2.0F, 1703.3104F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1341);
      shortArray0[1] = (short)543;
      shortArray0[2] = (short) (-537);
      shortArray0[3] = (short)3241;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)543);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1341), (short)543, (short) (-537), (short)3241}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)63, (byte)0, (byte) (-41), (byte)113, (byte) (-69), (byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse((float[]) null);
      int int0 = ArrayUtils.indexOf((float[]) null, (-1589.0F));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1341);
      doubleArray0[1] = (-1064.56504943);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-124), 51, (double) (short)543);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1341.0), (-1064.56504943)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      byte byte0 = (byte)13;
      int int0 = (-791);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-93), (byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -93, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.swap(longArray0, (-376), 832, (-1300));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1205.0779F);
      floatArray0[1] = (-1205.0779F);
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1205.0779F));
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1205.0779F), (-1205.0779F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) (-2146612810);
      longArray0[2] = (long) 97;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-1126), 321, 2342);
      assertArrayEquals(new long[] {97L, (-2146612810L), 97L, 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1366;
      shortArray0[1] = (short)1366;
      shortArray0[2] = (short)1366;
      shortArray0[3] = (short)1366;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1366, (short)1366, (short)1366, (short)1366, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1366, (short)1366, (short)1366, (short)1366, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(321);
      assertEquals(321, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)1366);
      assertEquals(1366, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(1704, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1704;
      intArray0[1] = 1704;
      intArray0[2] = 1704;
      intArray0[3] = 1704;
      intArray0[4] = 1704;
      intArray0[5] = 1704;
      intArray0[6] = 1704;
      intArray0[7] = 1704;
      intArray0[8] = 1704;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2), 1704);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704}, intArray0);
      assertArrayEquals(new int[] {1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) 'l';
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) 'l';
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-116));
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-116), (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[1] = 5369L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1, 1064.56504943);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Double double0 = new Double((-3601.0));
      assertEquals((-3601.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-524), 63, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1313;
      floatArray0[1] = (float) (short)1313;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1485, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1485, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 729.305325847;
      doubleArray0[3] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1500.282593), (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 729.305325847, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2659), (-1547.032F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2659, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-78), (int) (byte) (-101));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)2, 5068, 108);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-78));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1724;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (byte) (-78);
      shortArray0[3] = (short) (-1408);
      shortArray0[4] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1408), 5068);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1724, (short)18688, (short) (-78), (short) (-1408), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)1724, (short)18688, (short) (-78), (short) (-1408), (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[15];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short) (-1724);
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)63;
      shortArray0[5] = (short)181;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, (int) (short)181);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)64, (short) (-1724), (short)56, (short)63, (short)181}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)64, (short) (-1724), (short)56, (short)63, (short)181}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)57, (int) (byte)2, (-1004));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (-200L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)57;
      longArray0[5] = (long) (byte)57;
      longArray0[6] = (long) (byte)7;
      longArray0[7] = (long) (byte)57;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 2L, (-200L), 0L, 57L, 57L, 7L, 57L}, longArray0);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 57L;
      doubleArray0[1] = (double) 2L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 57L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {57.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {57.0, 2.0, 57.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1313;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-106), 15);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1313;
      intArray0[1] = (int) (byte) (-106);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1313, (-106)}, intArray0);
      assertArrayEquals(new int[] {1313, (-106), 1313, (-106)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 1313);
      assertEquals(1313, object0);
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2207), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)1313, (short)1313, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)588;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 332);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1107.298F);
      doubleArray0[1] = (double) (-3478.2805F);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 100.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1107.2979736328125), (-3478.280517578125)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, 931, (-1535));
      assertArrayEquals(new short[] {(short)588, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2373.0), 318);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1107.2979736328125), (-3478.280517578125)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap(floatArray0, (-1535), 11);
      assertArrayEquals(new float[] {(-3478.2805F), 0.0F, (-1107.298F), 76.78159F, 1259.3516F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Integer integer1 = new Integer((-1894));
      assertEquals((-1894), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1);
      assertEquals((-1), int1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte) (-118), (byte)0, (byte)0, (byte) (-118), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer0 = new Integer((byte) (-118));
      assertEquals((-118), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-118);
      shortArray0[1] = (short) (byte) (-118);
      shortArray0[2] = (short) (byte)13;
      shortArray0[3] = (short) (byte) (-117);
      shortArray0[4] = (short) (byte)13;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-118), (short) (-118), (short)13, (short) (-117), (short)13, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)588;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 332);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 588;
      objectArray0[1] = (Object) (short)588;
      objectArray0[2] = (Object) (-3478.2805F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, 0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588, 0}, intArray2);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '?');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'K');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1148), (-524));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'R', 54);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      ArrayUtils.shift(charArray0, 251, (-2143821591), (-3411));
      assertArrayEquals(new char[] {'U', 'X', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-54), (int) (byte)6);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      classArray0[6] = class1;
      Class<Integer> class6 = Integer.class;
      classArray0[7] = class6;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[6] = (-1646.4375F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (-1646.4375F);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 121);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '3';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 51.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-1581), (-1581), (-479));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      Short short0 = new Short((short)111);
      assertEquals((short)111, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2114);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(shortArray1, (int) (short)2114, (int) (short)2114, (int) (short)2114);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)111;
      longArray0[1] = (long) (short)2114;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (short)111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(';');
      assertEquals(';', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals(';', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character1);
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) ';';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F, 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)24375;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (int) character2, (int) character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertArrayEquals(new short[] {(short)13, (short)24375}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-533);
      doubleArray0[1] = 2833.73888426615;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 79.8792;
      ArrayUtils.shift(doubleArray0, 377);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.8792, (-533.0), 2833.73888426615, 91.0, 79.8792, (-533.0), 2833.73888426615, 91.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 91);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)0, (byte)3, (byte)3}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)3;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer integer0 = new Integer((byte)3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 3;
      Integer integer1 = ArrayUtils.get(integerArray0, (-808));
      assertNull(integer1);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      int[] intArray0 = new int[3];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'E');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 107.0F);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {69.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-32);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)1, (byte)0, (byte)0, (byte) (-17), (byte)2, (byte)127, (byte)1, (byte) (-32)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (float) (byte) (-17);
      floatArray1[2] = (float) (byte)2;
      floatArray1[3] = (float) (byte)1;
      floatArray1[4] = (float) (byte)0;
      floatArray1[5] = (float) (byte)1;
      floatArray1[6] = (float) (byte) (-32);
      floatArray1[7] = (float) (byte)0;
      floatArray1[8] = (float) (byte)14;
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-17.0F), 2.0F, 1.0F, 0.0F, 1.0F, (-32.0F), 0.0F, 14.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-17.0F), 2.0F, 1.0F, 0.0F, 1.0F, (-32.0F), 0.0F, 14.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 107.0F;
      objectArray0[1] = (Object) 107.0F;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(107.0F, object0);
      assertNotNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = object0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'n';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'n');
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'n'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-83));
      assertEquals((-83.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-83.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-538);
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short) (-538));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {76}, intArray0);
      assertArrayEquals(new int[] {76, (-538)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-1535), (-1535));
      assertArrayEquals(new double[] {(-538.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      ArrayUtils.reverse(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {76}, intArray0);
      assertArrayEquals(new int[] {(-538), 76}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 0L;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray1[1] = long0;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 0L;
      longArray1[5] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 0, (Integer) null);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (int) byte0, 1381, 0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '+';
      byte[] byteArray1 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)28);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 0.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1253);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1253.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3728;
      intArray0[1] = 256;
      intArray0[2] = 1711;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 356);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {3728, 256, 1711}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 1711;
      doubleArray0[2] = (double) 256;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1711;
      ArrayUtils.reverse(doubleArray0, 3728, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {256.0, 1711.0, 256.0, 1.0, 1711.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1711.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1), object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 256.0;
      doubleArray1[1] = (Double) 256.0;
      doubleArray1[2] = (Double) 256.0;
      Double double0 = new Double(1711.0);
      assertEquals(1711.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 1711.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {256.0, 256.0, 256.0, 1711.0, 1711.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)37;
      Byte byte1 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)37, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)37, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)37;
      shortArray0[1] = (short) (byte)37;
      shortArray0[2] = (short) byte0;
      byteArray0[2] = (Byte) byte0;
      shortArray0[5] = (short) (byte)37;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)37, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)37, (short)37, (short)37, (short)0, (short)0, (short)37}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      long long0 = 1L;
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Long[] longArray0 = new Long[5];
      try { 
        Long.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (-2096));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-43), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -43, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221433);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2126221433;
      ArrayUtils.swap(floatArray0, 0, 1, 0);
      assertArrayEquals(new float[] {2.12622144E9F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 2126221433);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)100;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 59;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {59, 0, 100}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 100;
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, 99, 278);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      ArrayUtils.swap(booleanArray1, 0, 100, 45);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, (-1075));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)2;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)93;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (short)2, (int) (short)2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)93}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)2, 0, (int) (byte)93);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '=';
      charArray1[1] = 'l';
      charArray1[2] = 'l';
      charArray1[3] = 'l';
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'l');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'='}, charArray2);
      assertArrayEquals(new char[] {'=', 'l', 'l', 'l'}, charArray1);
      assertEquals(1, charArray2.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = '?';
      ArrayUtils.swap(charArray0, (int) (byte)0, (-1461));
      assertArrayEquals(new char[] {'t', 't', 't', 't', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1961L);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(170.42046284983007);
      assertEquals(170.42046284983007, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-1961L));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 170.42046284983007}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      booleanArray2[8] = false;
      ArrayUtils.swap(booleanArray2, (-1461), (-1461), 847);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, false}, booleanArray2));
      assertEquals(9, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayUtils.shift(intArray0, 116);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)6);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2397);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 's';
      charArray0[2] = ',';
      charArray0[3] = 't';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ',';
      floatArray0[1] = (float) '!';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 33.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {44.0F, 33.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {44.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 379.57F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {44.0F, 33.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {44.0F, 33.0F, 379.57F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Q';
      ArrayUtils.shift(intArray0, 2143361798);
      assertArrayEquals(new int[] {81}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)76;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)65, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-117), (byte) (-117), (byte) (-6), (byte)13, (byte)76}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)8;
      floatArray0[3] = (float) (byte)13;
      floatArray0[4] = (-0.8913491F);
      floatArray0[5] = (float) (-791);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-6.0F), 0.0F, 8.0F, 13.0F, (-0.8913491F), (-791.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertEquals(12, booleanArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte) (-117);
      intArray0[2] = (int) (byte)65;
      intArray0[3] = (int) (byte)13;
      intArray0[4] = (int) (byte)76;
      intArray0[5] = (int) (byte)65;
      intArray0[6] = (int) (byte)8;
      intArray0[7] = (int) (byte)8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2589.47;
      ArrayUtils.swap(doubleArray0, 0, 1, 83);
      assertArrayEquals(new double[] {2589.47}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 828;
      ArrayUtils.swap(doubleArray0, (-842), 897);
      assertArrayEquals(new double[] {828.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        Integer.valueOf("Rr{.S}46ZTS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Rr{.S}46ZTS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = '';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'j', 'j', '', 'j', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) 38;
      longArray0[2] = (long) 'G';
      longArray0[3] = (long) '';
      longArray0[4] = (long) '|';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 3860);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {71L, 38L, 71L, 127L, 124L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 124L;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1573), (int) (short)1075);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {124.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {124.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1541.2F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-4916.9155F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1541.2F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1541.2F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, 512.0F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Double double0 = new Double(299);
      assertEquals(299.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(140L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)104);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-4712), 849, (-4712));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)104, (-4712));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(849);
      assertEquals(849, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (int) 104, integerArray0[1]);
      assertEquals(849, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) integer2, "w4C-ymb&3ukyl!");
      assertEquals("849", string0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(string0);
      assertEquals(2, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2'}, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2', 'F', '@', '2'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1470.124F);
      floatArray0[1] = (float) 51;
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'F';
      floatArray0[4] = (float) 'F';
      floatArray0[5] = (float) 'F';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1470.124F), 51.0F, 1478.057F, 70.0F, 70.0F, 70.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double double0 = new Double(299);
      assertEquals(299.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(51);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      assertEquals(7, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      MutableInt mutableInt0 = new MutableInt(108);
      assertEquals(108, mutableInt0.intValue());
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(108, (int)mutableInt0.getValue());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108L, mutableInt0.longValue());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = Integer.valueOf(108);
      assertEquals(108, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(54);
      assertEquals(54, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-3814));
      assertEquals((-3814), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(108, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(108, mutableInt0.intValue());
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(108, (int)mutableInt0.getValue());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108L, mutableInt0.longValue());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-585));
      assertEquals((-585), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      mutableInt0.add((-1289));
      assertEquals((-1181.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1181.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1181", mutableInt0.toString());
      assertEquals((-1181), (int)mutableInt0.getValue());
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals((-1181), (int)mutableInt0.toInteger());
      assertEquals((-1181), mutableInt0.intValue());
      assertEquals((-1181L), mutableInt0.longValue());
      assertEquals((short) (-1181), mutableInt0.shortValue());
      
      Integer integer5 = new Integer(57);
      assertEquals(57, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer((-763));
      assertEquals((-763), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      mutableInt0.increment();
      assertEquals((short) (-1180), mutableInt0.shortValue());
      assertEquals("-1180", mutableInt0.toString());
      assertEquals((-1180.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1180), (int)mutableInt0.toInteger());
      assertEquals((-1180), mutableInt0.intValue());
      assertEquals((-1180), (int)mutableInt0.getValue());
      assertEquals((-1180.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1180L), mutableInt0.longValue());
      assertEquals((byte)100, mutableInt0.byteValue());
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer4;
      integerArray0[1] = integer0;
      Integer integer7 = new Integer((-1000));
      assertEquals((-1000), (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer7);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) 2026);
      assertEquals(2026, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer1);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 9;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-629));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {9L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'`', '`', '`', '`'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray0.length);
      
      Integer integer2 = new Integer((-1036));
      assertEquals((-1036), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertNotNull(integer2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)65;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)9, (byte)18, (byte)3, (byte)63, (byte) (-87), (byte)65}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'U';
      charArray0[2] = '$';
      charArray0[3] = '+';
      charArray0[4] = 'n';
      charArray0[5] = '8';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'C', 'U', '$', '+', 'n', '8'}, charArray0);
      assertArrayEquals(new char[] {'C', 'U', '$', '+', 'n', '8'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '8';
      objectArray0[1] = (Object) 'n';
      objectArray0[2] = (Object) '$';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) '8';
      objectArray0[5] = (Object) '8';
      objectArray0[6] = (Object) 'U';
      objectArray0[7] = (Object) 'U';
      objectArray0[8] = (Object) 'U';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "UsYyh+v ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'E');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 107.0F);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {69.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-32);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)1, (byte)14, (byte)0, (byte) (-17), (byte)2, (byte)127, (byte)1, (byte) (-32)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)2;
      floatArray1[1] = (float) (byte) (-17);
      floatArray1[2] = (float) (byte)2;
      floatArray1[3] = (float) (byte)1;
      floatArray1[4] = (float) (byte)14;
      floatArray1[5] = (float) (byte)1;
      floatArray1[6] = (float) (byte) (-32);
      floatArray1[7] = (float) (byte)14;
      floatArray1[8] = (float) (byte)14;
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {2.0F, (-17.0F), 2.0F, 1.0F, 14.0F, 1.0F, (-32.0F), 14.0F, 14.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-17.0F), 2.0F, 1.0F, 14.0F, 1.0F, (-32.0F), 14.0F, 14.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte byte0 = (byte) (-37);
      byte byte1 = (byte)20;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 2026;
      doubleArray0[2] = (double) 91;
      ArrayUtils.shift(doubleArray0, 2026);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0, 91.0, 91.0, 2026.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1075), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1075, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.shift(booleanArray0, 9);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)37;
      Byte byte1 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)37, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)37, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)37;
      shortArray0[1] = (short) (byte)37;
      shortArray0[2] = (short) byte0;
      byteArray0[2] = (Byte) byte0;
      shortArray0[4] = (short) (byte)37;
      shortArray0[5] = (short) (byte)37;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)37, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)37, (short)37, (short)37, (short)0, (short)37, (short)37}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)37, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer0 = new Integer((byte) (-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 3562, (-1075));
      assertNull(shortArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, Integer.MAX_VALUE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 0, (-255));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 272.59795, 272.59795);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(51);
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt1.toString());
      assertEquals(51, (int)mutableInt1.getValue());
      assertEquals((byte)51, mutableInt1.byteValue());
      assertEquals(51, (int)mutableInt1.toInteger());
      assertEquals((short)51, mutableInt1.shortValue());
      assertEquals(51L, mutableInt1.longValue());
      assertEquals(51.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(51, mutableInt1.intValue());
      assertEquals(51.0F, mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      
      Integer integer0 = mutableInt1.getValue();
      assertEquals(51, (int)integer0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt1.toString());
      assertEquals(51, (int)mutableInt1.getValue());
      assertEquals((byte)51, mutableInt1.byteValue());
      assertEquals(51, (int)mutableInt1.toInteger());
      assertEquals((short)51, mutableInt1.shortValue());
      assertEquals(51L, mutableInt1.longValue());
      assertEquals(51.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(51, mutableInt1.intValue());
      assertEquals(51.0F, mutableInt1.floatValue(), 0.01F);
      assertNotNull(integer0);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer1 = new Integer((-543));
      assertEquals((-543), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(51);
      assertEquals(51, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(51, (int)integer3);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertNotNull(integer3);
      assertNotSame(mutableInt0, mutableInt1);
      
      Integer integer4 = new Integer(199);
      assertEquals(199, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      mutableInt1.add(0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt1.toString());
      assertEquals(51, (int)mutableInt1.getValue());
      assertEquals((byte)51, mutableInt1.byteValue());
      assertEquals(51, (int)mutableInt1.toInteger());
      assertEquals((short)51, mutableInt1.shortValue());
      assertEquals(51L, mutableInt1.longValue());
      assertEquals(51.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(51, mutableInt1.intValue());
      assertEquals(51.0F, mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer5 = new Integer(199);
      assertEquals(199, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(51);
      assertEquals(51, (int)integer6);
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      mutableInt0.increment();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52, mutableInt0.intValue());
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(199, integerArray0, integerArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 199, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-2257);
      floatArray0[3] = (float) 596;
      char[] charArray0 = new char[9];
      charArray0[1] = 'f';
      charArray0[2] = 'B';
      charArray0[3] = 'Q';
      charArray0[4] = '8';
      charArray0[5] = '\"';
      charArray0[6] = 'E';
      charArray0[7] = 'M';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = 'f';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'B', 'Q', '8', '\"', 'E', 'M', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'f'}, charArray1);
      assertArrayEquals(new char[] {'B', 'Q', '8', '\"', 'E', 'M', '\u0000'}, charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(7, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Integer integer0 = new Integer((-1105));
      assertEquals((-1105), (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-1105));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      ArrayUtils.shift(byteArray0, (int) (byte) (-36));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-36)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, booleanArray0);
      assertNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(object1.equals((Object)integer0));
      assertTrue(object1.equals((Object)integer2));
      assertNotNull(object1);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)object1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object0));
      assertNotNull(integer3);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer3);
      assertEquals(0, object2);
      assertTrue(integer3.equals((Object)object1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(object2.equals((Object)integer0));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)integer1));
      assertTrue(object2.equals((Object)integer2));
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)object1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)object0));
      assertTrue(integer4.equals((Object)object2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(879);
      assertEquals(879, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)object2));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)object1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      integerArray0[3] = integer1;
      integerArray0[4] = integer3;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 879);
      assertEquals((-1), int0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'd';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '3', 'd', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1075;
      longArray0[1] = (long) '';
      longArray0[2] = (-1534L);
      longArray0[3] = (long) 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 3);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', 'j', '$', '', 'j', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) (-1409);
      floatArray0[2] = (float) '|';
      floatArray0[3] = (float) (-1534L);
      floatArray0[4] = (float) (short) (-533);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', (-1409));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-3180.0F));
      assertNull(floatArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)59;
      objectArray0[1] = (Object) (byte)59;
      objectArray0[2] = (Object) (byte)59;
      objectArray0[3] = (Object) (byte)59;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte)59;
      objectArray0[6] = (Object) (byte)59;
      Integer integer0 = new Integer((byte)59);
      assertEquals(59, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (int) (byte) (-17));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(3480);
      assertEquals(3480, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = 'B';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', (-1445));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'L', ';', ';', ';', 'B'}, charArray0);
      assertEquals(5, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ';';
      longArray0[1] = 1135L;
      longArray0[2] = (long) ';';
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 'B';
      longArray0[5] = (long) (byte) (-6);
      longArray0[6] = (long) ';';
      int int1 = ArrayUtils.lastIndexOf(longArray0, 59L, 38);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {59L, 1135L, 59L, 0L, 66L, (-6L), 59L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 68);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer integer0 = new Integer(35);
      assertEquals(35, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(7);
      assertEquals(7, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((byte)2);
      assertEquals(2, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1461), 1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ' ');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'n', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (-1461);
      intArray0[2] = (int) (byte)59;
      intArray0[3] = (int) (byte)59;
      intArray0[4] = (-1461);
      intArray0[5] = (int) (byte)59;
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = (int) 'n';
      intArray0[8] = (int) 'v';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {59, (-1461), 59, 59, (-1461), 59, (-1), 110, 118}, intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 571.4369793192525;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)50);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)50, (byte) (-1), (byte)0, (byte) (-6), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 57);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)50, (byte) (-1), (byte)0, (byte) (-6), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)50, (byte) (-1), (byte)0, (byte) (-6), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 57;
      longArray0[3] = (long) 57;
      longArray0[4] = (long) (byte)50;
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-6L), 0L, 57L, 57L, 50L, (-1L), (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1238), (-1238));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1238);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-1238);
      longArray0[3] = (long) (-1238);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1238L), (-1L), (-1238L), (-1238L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1075;
      longArray0[1] = (long) '';
      longArray0[2] = (-1534L);
      longArray0[3] = (long) 'G';
      longArray0[4] = (long) (short)1075;
      longArray0[5] = 2351L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1075L, 127L, (-1534L), 71L, 1075L, 2351L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-847.4588F);
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) (short)1313;
      floatArray0[3] = (float) (short)1075;
      floatArray0[4] = (float) 'j';
      floatArray0[5] = (float) '';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)565);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-847.4588F), 36.0F, 1313.0F, 1075.0F, 106.0F, 127.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte byte0 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte0);
      assertNotNull(byte0);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[2] = '$';
      charArray0[3] = '';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)565;
      intArray0[1] = (int) '';
      intArray0[2] = (int) '';
      intArray0[3] = (int) '';
      intArray0[4] = (int) '$';
      intArray0[5] = (int) (short) (-533);
      intArray0[6] = (int) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 127;
      ArrayUtils.swap(objectArray0, (-2585), 1079);
      assertEquals(2, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 565, Integer.MAX_VALUE);
      assertNull(integerArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-2484.36));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2484.36)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 127;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)565, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      intArray0[0] = (-1597);
      intArray0[1] = 0;
      intArray0[2] = (-533);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1597), (-533), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1597);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-533);
      objectArray0[1] = (Object) (-533);
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (-533);
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) (-1597);
      ArrayUtils.swap(objectArray0, 1079, (-1597));
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-258), (-533));
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-258);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-369.98F));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-258.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-369.9800109863281), (-258.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1), 0.1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.subarray((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, 2057, (-1));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 0, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ArrayUtils.reverse(objectArray0, (-1981), 0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1981);
      floatArray0[2] = (float) (-1981);
      floatArray0[3] = (float) (-1981);
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1981.0F), (-1981.0F), (-1981.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1981);
      longArray0[1] = (long) (-1981);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1981);
      longArray0[4] = (long) (-1981);
      longArray0[5] = (long) (-1981);
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1981L), (-1981L), 0L, (-1981L), (-1981L), (-1981L), 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short)196;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)54, (short)196}, shortArray0);
      assertArrayEquals(new short[] {(short)54, (short)196, (short)54, (short)196}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2829.8);
      doubleArray0[1] = (-3565.83321030853);
      doubleArray0[2] = (-2373.0);
      doubleArray0[3] = (-2227.0);
      doubleArray0[4] = 104.0;
      doubleArray0[5] = 58.1846;
      doubleArray0[6] = 2511.78489178;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2373.0), 0.0);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-2829.8), (-3565.83321030853), (-2373.0), (-2227.0), 104.0, 58.1846, 2511.78489178}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 653);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)14;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-9), (byte) (-31), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)90, (byte) (-9), (byte) (-31), (byte)14}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-82));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2118.84469);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2319;
      floatArray0[1] = (float) 2319;
      floatArray0[2] = (float) 2319;
      floatArray0[3] = (float) 2319;
      floatArray0[4] = (float) 2319;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1073, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2319.0F, 2319.0F, 2319.0F, 2319.0F, 2319.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1203.6617F);
      floatArray0[1] = (-1203.6617F);
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1203.6617F));
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1203.6617F), (-1203.6617F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int2 = (-2294);
      ArrayUtils.shift(booleanArray0, (-2294), (-3034), (-3034));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(101, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)5;
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)2, byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte)0}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)52);
      assertEquals((-1), int0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)5, (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (byte)0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1926));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 653);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1203.6617F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1203.6617F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-37), (byte)20, (byte) (-27), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-22), (byte) (-37), (byte)20, (byte) (-27), (byte)0, (byte) (-37), (byte)20, (byte) (-27), (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-27);
      intArray0[1] = (int) (byte) (-37);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (int) (byte) (-37);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-37));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-27), (-37), 1, 1, (-37)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte byte0 = (byte) (-1);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-118);
      shortArray0[1] = (short) (byte) (-118);
      shortArray0[2] = (short) (byte)59;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)59, Integer.MAX_VALUE);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-118), (short) (-118), (short)59, (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (-2849L));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-118);
      doubleArray0[1] = (double) (short) (-118);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-118);
      doubleArray0[4] = (double) (-391);
      doubleArray0[5] = (double) (-391);
      doubleArray0[6] = (double) (byte)59;
      doubleArray0[7] = (double) (short) (-118);
      doubleArray0[8] = (double) (byte) (-118);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2953L;
      longArray0[1] = 981L;
      longArray0[2] = 0L;
      longArray0[3] = (-3957L);
      longArray0[4] = (-1179L);
      longArray0[5] = (-1961L);
      longArray0[6] = (-2849L);
      longArray0[7] = 2147483647L;
      longArray0[8] = 986L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2849L), 2146389109);
      assertEquals(6, int0);
      assertArrayEquals(new long[] {2953L, 981L, 0L, (-3957L), (-1179L), (-1961L), (-2849L), 2147483647L, 986L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-809));
      assertEquals(0, int1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-809);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 6, (-1072));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, (-842), 897);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = Integer.getInteger("Rr{.S}46ZTS", (-842));
      assertEquals((-842), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, 1398);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-18));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      char char0 = 'l';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = (-798);
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-798), 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) (-798);
      doubleArray0[2] = (double) 'l';
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = 2101.37;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 653;
      doubleArray0[7] = (double) 4;
      ArrayUtils.swap(doubleArray0, (-1955), (-2145373406));
      assertArrayEquals(new double[] {100.0, (-798.0), 108.0, 4.0, 2101.37, 4.0, 653.0, 4.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 100.0;
      objectArray0[1] = (Object) 100.0;
      objectArray0[2] = (Object) 100.0;
      objectArray0[3] = (Object) 4.0;
      try { 
        Integer.valueOf("Rr{.S}46ZTS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Rr{.S}46ZTS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)15);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {15.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (short)15, (double) (short)15);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {15.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, Integer.MIN_VALUE, Integer.MIN_VALUE, (-84));
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray1, Integer.MIN_VALUE, Integer.MIN_VALUE, (-1));
      assertArrayEquals(new double[] {15.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      ArrayUtils.shift(charArray0, 251, (-2143821591), (-3411));
      assertArrayEquals(new char[] {'U', 'X', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-54), (int) (byte)6);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-54);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3411));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-54)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) classArray0, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)1075;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      int[] intArray0 = new int[2];
      intArray0[0] = 102;
      intArray0[1] = (int) (short)1075;
      ArrayUtils.shift(intArray0, (-2973), (-2917), (int) (short)1075);
      assertArrayEquals(new int[] {102, 1075}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 102;
      floatArray0[2] = (float) 102;
      floatArray0[3] = (float) 1075;
      floatArray0[4] = 3425.5542F;
      floatArray0[5] = (float) (-2973);
      floatArray0[6] = (float) (short)1075;
      floatArray0[7] = (float) (-2917);
      floatArray0[8] = (float) 102;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)1075);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1075.0F, 102.0F, 0.0F, 102.0F, 1075.0F, 3425.5542F, (-2973.0F), 1075.0F, (-2917.0F), 102.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {102.0F, 0.0F, 102.0F, 1075.0F, 3425.5542F, (-2973.0F), 1075.0F, (-2917.0F), 102.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2917));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1075;
      doubleArray0[1] = (double) 102;
      doubleArray0[2] = (double) (short)1075;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 102);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1075.0, 102.0, 1075.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift(longArray0, 1075, (-789), 1075);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 102);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1113.03602425, (-195), (double) (-195));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2045);
      shortArray0[3] = (short) (-2045);
      shortArray0[4] = (short) (-2045);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2045), (short) (-2045), (short) (-2045), (short)1, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, (int) (short) (-2045), (int) (short)1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(0, intArray0.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '+', (int) (short)1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) (short) (-2045);
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) '+';
      longArray0[4] = 215L;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)1;
      longArray0[7] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {43L, (-2045L), 1L, 43L, 215L, 1L, 1L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {43L, (-2045L), 1L, 43L, 215L, 1L, 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {43L, (-2045L), 43L, 215L, 1L, 1L, 1L}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1643.9876457479565, (double) 43L);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)6);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2397);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 's';
      charArray0[2] = ',';
      charArray0[3] = 't';
      charArray0[4] = '!';
      charArray0[5] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 47);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {',', 's', ',', 't', '!', 'Q'}, charArray0);
      assertArrayEquals(new char[] {',', 's', ',', 't', '!', 'Q'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1646.4375F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (int) (byte) (-106));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-106), (byte) (-106)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1751.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1751.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte) (-101);
      intArray0[2] = (int) (byte) (-101);
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte) (-101);
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, (-101), (-101), 2, (-101), 2, 2}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      Integer integer0 = new Integer((byte)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)2, 2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = '`';
      charArray0[4] = '/';
      charArray0[5] = 'j';
      charArray0[6] = '`';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'j', '`'}, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'j', '`'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.reverse((Object[]) integerArray0, 1, 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'h';
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) '/';
      ArrayUtils.shift(intArray0, 1, (-809), 0);
      assertArrayEquals(new int[] {104, 104, 47}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) '~';
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = 3835.75077;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 126.0, 2.0, 3835.75077}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1447.57604526847);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((boolean[]) null, 697, 152, 626);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1646.4375F);
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-78), (int) (byte) (-101));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer integer0 = new Integer((byte) (-78));
      assertEquals((-78), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-78), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)59;
      objectArray0[1] = (Object) (byte)59;
      objectArray0[2] = (Object) (byte)59;
      objectArray0[3] = (Object) (byte)59;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte)59;
      objectArray0[6] = (Object) (byte)59;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer((-17));
      assertEquals((-17), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-17));
      assertEquals((-17), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 226L;
      doubleArray2[1] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 0.0, 242);
      assertEquals(1, int0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {226.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 2026;
      doubleArray0[2] = (double) 91;
      ArrayUtils.shift(doubleArray0, 2026);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0, 91.0, 91.0, 2026.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Double double0 = new Double((-4249.092384));
      assertEquals((-4249.092384), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(91.0);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2026);
      assertEquals(2026.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Integer integer0 = new Integer(2026);
      assertEquals(2026, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, (-3889), integer0);
      assertEquals(2026, (int)integer1);
      assertNotNull(integer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-102);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)32, (int) (byte) (-102));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-102)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(floatArray0, 2026, 101);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2427.4321F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      floatArray0[5] = 151.9191F;
      floatArray0[5] = (-83.05F);
      int int0 = (-172);
      Integer integer0 = new Integer((-172));
      assertEquals((-172), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1078));
      assertEquals((-1078), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = (-3374);
      MutableInt mutableInt0 = new MutableInt((-1078));
      assertEquals((-1078.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1078), mutableInt0.shortValue());
      assertEquals((-1078L), mutableInt0.longValue());
      assertEquals((-1078.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1078), mutableInt0.intValue());
      assertEquals((-1078), (int)mutableInt0.getValue());
      assertEquals((-1078), (int)mutableInt0.toInteger());
      assertEquals((byte) (-54), mutableInt0.byteValue());
      assertEquals("-1078", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(Integer.MAX_VALUE);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(Integer.MAX_VALUE, mutableInt1.intValue());
      assertEquals(2.147483647E9, mutableInt1.doubleValue(), 0.01);
      assertEquals(2147483647L, mutableInt1.longValue());
      assertEquals("2147483647", mutableInt1.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.getValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.toInteger());
      assertEquals(2.14748365E9F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      
      Integer integer2 = mutableInt1.toInteger();
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(Integer.MAX_VALUE, mutableInt1.intValue());
      assertEquals(2.147483647E9, mutableInt1.doubleValue(), 0.01);
      assertEquals(2147483647L, mutableInt1.longValue());
      assertEquals("2147483647", mutableInt1.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.getValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.toInteger());
      assertEquals(2.14748365E9F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertNotNull(integer2);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer3 = new Integer((-1070));
      assertEquals((-1070), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, Integer.MAX_VALUE, integer3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ArrayUtils.shift(charArray0, (-1), (-1), 108);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(565);
      assertEquals(565, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 565, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      ArrayUtils.shift(charArray0, 251, (-2143821591), (-3411));
      assertArrayEquals(new char[] {'U', 'X', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-54), (int) (byte)6);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      ArrayUtils.reverse((long[]) null);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      ArrayUtils.shift(objectArray0, 0, 1264, 100);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2026;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2026, 1833);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {2026.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'P';
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('Y');
      assertEquals('Y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char char1 = '/';
      Character character3 = Character.valueOf('/');
      assertEquals('/', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char char2 = 's';
      Character character4 = Character.valueOf('s');
      assertEquals('s', (char)character4);
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('s');
      assertEquals('s', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertEquals('P', (char)character6);
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char2));
      assertFalse(character6.equals((Object)char1));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
      assertNotNull(character6);
      
      characterArray0[6] = (Character) char1;
      characterArray0[7] = (Character) char0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'P', 'Y', 'Y', '/', 's', 's', '/', 'P'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (char)character1;
      longArray0[1] = (long) char1;
      longArray0[2] = (long) char2;
      longArray0[3] = (long) '/';
      longArray0[5] = 659L;
      longArray0[6] = (long) 's';
      longArray0[7] = (long) 2026;
      longArray0[8] = (long) 's';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {115L, 2026L, 115L, 659L, 0L, 47L, 115L, 47L, 89L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)734;
      shortArray0[3] = (short)17;
      shortArray0[4] = (short)2821;
      shortArray0[5] = (short)1699;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)734, (short)17, (short)2821, (short)1699}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1699;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1699.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1699.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'l';
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 'l';
      longArray0[3] = (long) 'l';
      ArrayUtils.reverse(longArray0, (-2119), (int) (byte)2);
      assertArrayEquals(new long[] {108L, 108L, 108L, 108L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1131.2930035589);
      doubleArray0[1] = (double) 108L;
      doubleArray0[2] = (double) 64;
      doubleArray0[3] = (double) 108L;
      doubleArray0[4] = (double) 'l';
      doubleArray0[5] = (double) 108L;
      doubleArray0[6] = 3091.0;
      doubleArray0[7] = (double) 64;
      doubleArray0[8] = (double) 'l';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2595.0, 3567, (double) (-2119));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1131.2930035589), 108.0, 64.0, 108.0, 108.0, 108.0, 3091.0, 64.0, 108.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2026;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2026, 1833);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {2026.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'P';
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('Y');
      assertEquals('Y', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char char1 = '/';
      Character character3 = Character.valueOf('/');
      assertEquals('/', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char char2 = 's';
      Character character4 = Character.valueOf('s');
      assertEquals('s', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('s');
      assertEquals('s', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertEquals('P', (char)character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char2));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertNotNull(character6);
      
      characterArray0[6] = (Character) char1;
      Character character7 = Character.valueOf(char1);
      assertEquals('/', (char)character7);
      assertFalse(char1 == char2);
      assertFalse(char1 == char0);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)char2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'P', 'Y', 'Y', '/', 's', 's', '/', '/'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (char)character1;
      longArray0[1] = (long) char1;
      longArray0[2] = (long) char2;
      longArray0[3] = (long) '/';
      longArray0[4] = (long) 'Y';
      longArray0[5] = 659L;
      longArray0[6] = (long) 's';
      longArray0[7] = (long) 2026;
      longArray0[8] = (long) 's';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {115L, 2026L, 115L, 659L, 89L, 47L, 115L, 47L, 89L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      int int0 = 91;
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = false;
      booleanArray0[2] = false;
      int int1 = 256;
      int int2 = ArrayUtils.indexOf(booleanArray0, false, 256);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) 256;
      doubleArray0[4] = (double) 'B';
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {66.0, 66.0, 256.0, 66.0, 66.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[0] = (Object) 66.0;
      objectArray0[2] = (Object) 66.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "{index}");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 91, 'B');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.shift(objectArray0, (-2146514873), 122, 122);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = '?';
      ArrayUtils.swap(charArray0, (int) (byte)59, (-1461));
      assertArrayEquals(new char[] {'t', 't', 't', 't', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)59;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2220), 2595);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {59.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '?';
      Object object0 = ArrayUtils.get(objectArray0, 0, objectArray0[0]);
      assertEquals('?', object0);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 't';
      objectArray0[3] = (Object) 't';
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) 't';
      objectArray0[6] = (Object) 't';
      objectArray0[7] = (Object) '?';
      objectArray0[8] = (Object) 59.0;
      ArrayUtils.shift(objectArray0, (-1461));
      assertEquals(9, objectArray0.length);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 't';
      characterArray0[1] = (Character) 't';
      characterArray0[2] = (Character) 't';
      characterArray0[3] = (Character) 't';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'t', 't', 't', 't'}, charArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-5692.5971386));
      assertEquals((-5692.597F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((-5692.597F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 3450, 2104);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f', '}'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'f';
      objectArray0[1] = (Object) 'f';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1.0));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5, 160);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 4);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1357L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1961L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1135);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 48);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-3371.4));
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 1135, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 1135, 1135);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 2307, 1135);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-1961L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 48);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'l';
      intArray0[1] = (-1148);
      intArray0[2] = (-3302);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {108, (-1148), (-3302)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Integer integer0 = new Integer((-83));
      assertEquals((-83), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3302));
      assertEquals((-3302), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-83), object2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      
      Integer integer2 = new Integer((-3976));
      assertEquals((-3976), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1148));
      assertEquals((-1148), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)object2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      ArrayUtils.shift(intArray0, 91, 5, (-1214));
      assertArrayEquals(new int[] {108, (-1148), (-3302)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1763);
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1763), 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean3);
      assertArrayEquals(new long[] {(-1763L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (int) 'I', (int) 'I');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2397;
      shortArray0[1] = (short) (-2);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean2 = ArrayUtils.contains((char[]) null, '9');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2581;
      intArray0[1] = (int) '9';
      intArray0[2] = (int) (short) (-2);
      intArray0[3] = (int) (short)2397;
      intArray0[4] = (int) (short)2397;
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new int[] {2581, 57, (-2), 2397, 2397}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((short) (-2));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, 2);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2332));
      assertEquals((-2332), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-445));
      assertEquals((-445), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2332));
      assertEquals((-2332), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1781), (-2332));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-23));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte) (-17));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)0, (byte) (-17)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-280);
      shortArray0[1] = (short) (-280);
      shortArray0[3] = (short) (-280);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-280));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-280), (short) (-280), (short)0, (short) (-280), (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-280), (short) (-280), (short)0, (short) (-280), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-280), (short) (-280), (short)0, (short) (-280), (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(intArray0, 8, (-1), 102);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2422);
      shortArray0[1] = (short) (-27);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2145945334), (-791));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2422), (short) (-27)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-2422), (short) (-27)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2422), (short) (-27)}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 2026;
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(object1.equals((Object)integer0));
      assertTrue(object1.equals((Object)int0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(object2.equals((Object)int0));
      assertFalse(object2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1214);
      integerArray0[1] = (Integer) (-1214);
      doubleArray0[2] = (double) (-629);
      doubleArray0[3] = (double) (-1214);
      doubleArray0[4] = (double) (-1148);
      doubleArray0[5] = (double) 54;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2026, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2026, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1.0));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 2026;
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 0);
      assertEquals(0, object0);
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1148));
      assertEquals((-1148), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertTrue(object1.equals((Object)int0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1148), (int)integer2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1148), object2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(object2.equals((Object)int0));
      assertFalse(object2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      int int1 = 54;
      int int2 = (-629);
      ArrayUtils.shift(intArray0, 54, 0, (-629));
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      int int3 = 9;
      ArrayUtils.reverse((Object[]) integerArray1, 2026, 9);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 2026;
      doubleArray0[4] = (double) (-1214);
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = 1841.987;
      doubleArray0[7] = (double) (-629);
      doubleArray0[8] = (double) (-1148);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-106), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -106, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221433);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true, (-1751));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-99));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-83);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = 503L;
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1322L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-83L), 2L, 2L, 503L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-83L), 2L, 2L, 503L, (-1L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-83));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'C';
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) 'C';
      intArray0[3] = (int) 'C';
      intArray0[4] = (int) (byte) (-83);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3312L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1363L), 1471);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-3312L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      Double double0 = new Double((-3631));
      assertEquals((-3631.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(299.5698621);
      assertEquals(299.5698621, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 3);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2358.69573565269));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3976.0), 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3976.0), 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3631.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (-3631);
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) (-3631);
      longArray0[6] = (long) (-3631);
      longArray0[7] = (long) (-3631);
      longArray0[8] = (long) (-3976);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3631L), 1);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {3L, 3L, (-3631L), 3L, 3L, (-3631L), (-3631L), (-3631L), (-3976L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = '?';
      ArrayUtils.swap(charArray0, (int) (byte)59, (-1461));
      assertArrayEquals(new char[] {'t', 't', 't', 't', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1961L);
      longArray0[1] = (long) (byte)59;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-774));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1961L), 59L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 847);
      assertEquals(5, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (-1811L), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      floatArray0[4] = (-369.98F);
      floatArray0[5] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      intArray0[0] = (-1597);
      intArray0[1] = 0;
      intArray0[2] = (-533);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1597), (-533), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1597);
      longArray0[1] = (long) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-1597L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1976L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', (-1409));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', (-1311));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(986L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 986L;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 'L';
      floatArray0[3] = (float) (-1311);
      floatArray0[4] = (float) (-1);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146797198, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146797198, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Integer integer0 = new Integer((short)57);
      assertEquals(57, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 87);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (int) (short)57, (-1), (int) (short)57);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      Short[] shortArray0 = new Short[15];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2101);
      assertNotNull(shortArray1);
      assertEquals(15, shortArray0.length);
      assertEquals(15, shortArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, (int) (short)2101);
      assertEquals(14, int0);
      assertEquals(15, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) null, 128);
      assertEquals((-1), int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)10;
      intArray0[2] = 332;
      intArray0[3] = (int) short0;
      intArray0[4] = 332;
      intArray0[5] = (int) short0;
      intArray0[6] = 332;
      intArray0[7] = 332;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) short0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {10, 332, 332, 332, 332}, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray0, 137);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332, 137}, intArray2);
      assertArrayEquals(new int[] {(-1), 10, 332, (-1), 332, (-1), 332, 332}, intArray0);
      assertEquals(9, intArray2.length);
      assertEquals(8, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, short0, (int) (short)1087);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 0, (Integer) null);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (int) byte0, 1381, 0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '+';
      charArray1[2] = '~';
      charArray1[3] = '+';
      charArray1[4] = '!';
      ArrayUtils.swap(charArray1, 0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', '+', '~', '+', '!'}, charArray1);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 65);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '=');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-941L));
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-14);
      Integer integer0 = new Integer((byte) (-83));
      assertEquals((-83), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-83), 1883);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte) (-83), (byte)80, (byte)104, (byte) (-14), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte) (-83), (byte)80, (byte)104, (byte) (-14), (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-14);
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short) (byte)80;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 726, (int) (byte) (-83));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-14), (short)39, (short)1136, (short)80}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.shift((long[]) null, (-2147322724));
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1595;
      floatArray0[3] = 261.1F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 1595;
      ArrayUtils.swap(floatArray0, 108, 8192, (int) (short)0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1595.0F, 261.1F, 0.0F, 1.0F, 1595.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-5);
      ArrayUtils.swap(byteArray0, (int) (byte)7, (int) (byte)7, 1619);
      assertArrayEquals(new byte[] {(byte)7, (byte)97, (byte) (-5), (byte) (-5)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)97;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)97;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      ArrayUtils.swap(byteArray0, 514, 1971, 239);
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'R';
      charArray0[2] = 't';
      charArray0[3] = '?';
      ArrayUtils.swap(charArray0, (-1461), (-1461));
      assertArrayEquals(new char[] {'$', 'R', 't', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2595;
      intArray0[1] = (int) '?';
      intArray0[3] = (-1566);
      intArray0[4] = 2451;
      intArray0[5] = (int) '$';
      intArray0[6] = 0;
      ArrayUtils.swap((boolean[]) null, (-1656), (-1214));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = (double) (-2227);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 63;
      doubleArray1[1] = (double) (-1214);
      doubleArray1[2] = (-730.37376917);
      doubleArray1[3] = (double) (-2220);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {63.0, (-1214.0), (-730.37376917), (-2220.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {36.0, (-2227.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {36.0, (-2227.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '\u0085';
      doubleArray0[1] = (double) '\u0085';
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) '\u0085';
      doubleArray0[6] = (double) '\u0085';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {133.0, 133.0, 2.0, 2.0, 61.0, 133.0, 133.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {133.0, 133.0, 2.0, 2.0, 61.0, 133.0, 133.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) 'j';
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) ' ';
      floatArray0[5] = (float) '\u0085';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {32.0F, 61.0F, 106.0F, Float.NaN, 32.0F, 133.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3003.8137F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3003.8137F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-657);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-657)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-489.611F);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1214), (-1214));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1386.845F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1386.844970703125, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1547.032F), (-1.0F), 1386.845F, 1.0F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 4036);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1321.0, 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)11);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Double double0 = new Double(299);
      assertEquals(299.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(140L);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.shuffle((Object[]) floatArray1, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, 299);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Double double0 = new Double((-2220.0));
      assertEquals((-2220.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)2);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(211L);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shuffle((Object[]) floatArray1, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2080);
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2080), (short)0, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2080), (short)0, (short)2, (short)2, (short)2, (short) (-2080), (short)0, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)734;
      shortArray1[2] = (short)734;
      shortArray1[3] = (short)1;
      shortArray1[4] = (short)2821;
      shortArray1[6] = (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)734, (short)734, (short)1, (short)2821, (short)0, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)51;
      Byte byte2 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-111);
      Byte byte4 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte) (-111), (byte)byte5);
      assertFalse(byte3 == byte1);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte1);
      assertEquals((byte)51, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte1 == byte3);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)51, (byte) (-111), (byte) (-111), (byte)51}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[6] = true;
      booleanArray0[5] = true;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)13, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (short)13;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1276.8216786296;
      doubleArray0[5] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1.5);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, (-1.0), 13.0, 1.0, 1276.8216786296, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, (-2143885260), 52);
      assertArrayEquals(new short[] {(short)0, (short)13, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)13;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertTrue(boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)13}, shortArray1);
      assertEquals(4, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = (-2143885260);
      intArray0[5] = 52;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (-2143885260);
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1973);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1973, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1238.249F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1238.249F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1238.249F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-393);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-519));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393), (short) (-519)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-393));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1238.249F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1238.249F;
      doubleArray0[5] = (double) 0.0F;
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = '~';
      ArrayUtils.swap(charArray0, (int) (short) (-519), 1, 126);
      assertArrayEquals(new char[] {'~', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short) (-2045);
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-2045.0F), 1478.057F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)83, (int) (short)1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 59, (int) (byte)83);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3478.2805F), 0.0F, (-1107.298F), 76.78159F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)83, (int) (byte)83);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double double0 = new Double((-2373.0));
      assertEquals((-2373.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (byte)83, 59);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)57;
      ArrayUtils.swap(floatArray0, (int) (byte)7, 3337);
      assertArrayEquals(new float[] {7.0F, 7.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-838), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '\\');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '5', (int) (byte) (-44));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 43);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[5] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) (byte) (-83);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) 436;
      ArrayUtils.shift(longArray0, (-1), 3189, 1);
      assertArrayEquals(new long[] {436L, 45L, (-83L), 2L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 50);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(intArray0, 8, (-1), 102);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, 2427.4321F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2427.4321F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 102;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, 102);
      assertArrayEquals(new long[] {102L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[4] = (float) 108;
      floatArray0[5] = (float) (byte)2;
      floatArray0[6] = 108.0F;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)2;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2L;
      objectArray0[1] = (Object) 108.0F;
      objectArray0[2] = (Object) 108.0F;
      ArrayUtils.shift(objectArray0, (-2216), 2, 3583);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1123.409983921401;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)4;
      doubleArray0[2] = (double) (byte)120;
      byteArray0[4] = (byte) (-13);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1123.409983921401, 0.0, 120.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 1, (-2463));
      assertArrayEquals(new double[] {1123.409983921401, 0.0, 120.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((byte) (-127));
      assertEquals((-127), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(890);
      assertEquals(890, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte) (-127));
      assertEquals((-127), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte)8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integerArray0[1];
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, (int) (short) (-533));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '\u0000';
      objectArray0[1] = (Object) (short) (-533);
      objectArray0[2] = (Object) '';
      ArrayUtils.shift(objectArray0, (-1), 1922, (-2216));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      assertEquals((-10), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-10));
      assertEquals((-10), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals((-10), object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      Integer integer2 = new Integer((-10));
      assertEquals((-10), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals((-10), object1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(object1.equals((Object)integer2));
      assertTrue(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer3 = new Integer((-10));
      assertEquals((-10), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)object1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer3);
      assertEquals((-10), object2);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)object1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)integer0));
      assertTrue(object2.equals((Object)integer1));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)integer2));
      assertNotNull(object2);
      
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('y');
      assertEquals('y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('y');
      assertEquals('y', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('Y');
      assertEquals('Y', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('Y');
      assertEquals('Y', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Character character5 = new Character('/');
      assertEquals('/', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      ArrayUtils.shift((Object[]) booleanArray0, 0, 9, (-5523));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.shift(objectArray0, (-2146514881), 115, 115);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-491), 55, 55);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_OBJECT_ARRAY, (-2146514881), (-2146514881), (-2146514881));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'R';
      charArray0[2] = 't';
      charArray0[3] = '?';
      ArrayUtils.swap(charArray0, (-1461), (-1461));
      assertArrayEquals(new char[] {'$', 'R', 't', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2595;
      intArray0[1] = (int) '?';
      intArray0[3] = (-1566);
      intArray0[4] = 2451;
      intArray0[5] = (int) '$';
      intArray0[6] = 0;
      intArray0[7] = (-2220);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2595;
      doubleArray0[1] = (double) 2451;
      doubleArray0[2] = (double) '?';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2227), 63);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2595.0, 2451.0, 63.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-2220);
      objectArray0[1] = (Object) (-1566);
      objectArray0[2] = (Object) 't';
      objectArray0[3] = (Object) 2595.0;
      objectArray0[4] = (Object) (-1566);
      objectArray0[5] = (Object) 36;
      ArrayUtils.shift(objectArray0, 2451);
      assertEquals(6, objectArray0.length);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) '?';
      characterArray0[1] = (Character) 't';
      characterArray0[2] = (Character) '$';
      characterArray0[3] = (Character) '$';
      characterArray0[4] = (Character) '?';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', 't', '$', '$', '?'}, charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      ArrayUtils.shift(charArray0, (-2143821591), 251, 10);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3253L;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 251;
      longArray0[4] = (long) 251;
      longArray0[5] = (long) '#';
      longArray0[6] = (-1035L);
      longArray0[7] = (long) 10;
      longArray0[8] = (long) 251;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2430L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3253L, 10L, 251L, 0L, 251L, 35L, (-1035L), 10L, 251L}, longArray1);
      assertArrayEquals(new long[] {3253L, 10L, 251L, 0L, 251L, 35L, (-1035L), 10L, 251L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = (int) '#';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '\u0000';
      intArray0[4] = (int) '#';
      intArray0[5] = (-2143821591);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {10, 35, 35, 0, 35, (-2143821591)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      Integer integer0 = new Integer(251);
      assertEquals(251, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(251, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 1, 0, (int) (byte)2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) 1;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 1L, 108L, 2L, 1L}, longArray0);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      ArrayUtils.shift(charArray0, (-785));
      assertArrayEquals(new char[] {'\u0000', 'q', 'q'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      ArrayUtils.shift(byteArray0, (-785), 3328, 809);
      assertArrayEquals(new byte[] {(byte) (-36)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1793));
      assertEquals((short) (-1793), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)851);
      assertEquals((short)851, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-310));
      assertEquals((short) (-310), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1793), (short)851, (short) (-310)}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-61));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2146088245), (-2146088245), 1);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      ArrayUtils.shift(intArray0, 2, 2, 1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 1}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 160;
      intArray0[2] = 4174;
      intArray0[3] = 160;
      ArrayUtils.shift(intArray0, (-630), 2, (-37));
      assertArrayEquals(new int[] {160, 89, 4174, 160}, intArray0);
      assertEquals(4, intArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 2);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer2 = new Integer((byte)0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((Object[]) null, 0, (-1105));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      integerArray0[2] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-3663), 34);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)249, (int) (short)249);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = '`';
      charArray0[4] = '/';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'L', '`'}, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'L', '`'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 'j';
      doubleArray0[5] = (double) 'h';
      doubleArray0[6] = (double) int0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 699.790522799, 0, 0.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {76.0, 54.0, 1.0, 106.0, 0.0, 104.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'j', '6', '`', '/', 'L', '`', 'h'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[0];
      int int2 = ArrayUtils.indexOf(intArray0, (-1));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(';');
      assertEquals(';', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('\\');
      assertEquals('\\', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {';', '\\', '\\'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) char0;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-87.0F);
      floatArray1[1] = (float) ';';
      floatArray1[2] = (float) ';';
      floatArray1[3] = (float) ';';
      floatArray1[4] = (float) '\\';
      floatArray1[5] = (float) '\\';
      floatArray1[6] = (-516.093F);
      floatArray1[7] = (float) '\\';
      floatArray1[8] = (float) ';';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), 59.0F, 59.0F, 59.0F, 92.0F, 92.0F, (-516.093F), 92.0F, 59.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      Character[] characterArray0 = new Character[11];
      Character character0 = Character.valueOf('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'd');
      assertNotNull(charArray0);
      assertEquals(11, characterArray0.length);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-238), 1, 348);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 348);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {348}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-310), (int) (byte)59, 1454);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-489.611F);
      floatArray0[1] = 2427.4321F;
      floatArray0[2] = (float) (byte)59;
      floatArray0[3] = (float) (-3976);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-310), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -310, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(15, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, (-1238), (-1238));
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1156L);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1156L));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1156.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1156.0F), (-1156.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.insert(1, floatArray1, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1156.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1156.0F), (-1156.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1156.0F), (-1156.0F), (-1156.0F), (-1156.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-1112));
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Character character0 = new Character(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertEquals(')', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals(')', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[1] = character2;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ')');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 404);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1196.1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1434));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1196.1)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = (boolean) boolean0;
      booleanArray1[5] = (boolean) boolean0;
      booleanArray1[7] = (boolean) boolean0;
      ArrayUtils.shift(booleanArray1, 64);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray((boolean[]) null, 4, 4);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)57;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)57;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)57;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-838), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {57L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2410, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      int[] intArray0 = new int[12];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(12, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(12, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1359.0239));
      assertEquals((-1359.0239), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(299);
      assertEquals(299.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = new Object[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 49);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, (-1578));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '`';
      charArray0[2] = '~';
      charArray0[3] = 'y';
      charArray0[4] = 'D';
      charArray0[5] = '-';
      charArray0[6] = 'v';
      charArray0[7] = '[';
      charArray0[8] = 'T';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'@', '`', '~', 'y', 'D', '-', 'v', '[', 'T'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) 'y';
      doubleArray0[2] = (double) 'D';
      doubleArray0[3] = (double) '~';
      doubleArray0[4] = (double) '`';
      doubleArray0[5] = (double) 'y';
      doubleArray0[6] = (double) '~';
      doubleArray0[7] = (double) 'y';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {126.0, 121.0, 68.0, 126.0, 96.0, 121.0, 126.0, 121.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {126.0, 121.0, 68.0, 126.0, 96.0, 121.0, 126.0, 121.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'v';
      longArray0[1] = (-1L);
      longArray0[2] = (long) '~';
      longArray0[3] = (long) '[';
      longArray0[4] = (long) 'v';
      longArray0[5] = (long) '-';
      longArray0[6] = (long) 'v';
      longArray0[7] = 1L;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) '[';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)565, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) (short)1075;
      floatArray0[2] = (float) (short)1075;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) '';
      floatArray0[5] = (float) (short)565;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-533), (int) (short) (-533));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {106.0F, 1075.0F, 1075.0F, 0.0F, 127.0F, 565.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (short)565;
      longArray0[2] = (long) '';
      longArray0[3] = (long) (short)565;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {565L, 127L, 565L, 127L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((-1352));
      assertEquals((-1352.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1352), (int)mutableInt0.toInteger());
      assertEquals((-1352.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals("-1352", mutableInt0.toString());
      assertEquals((-1352), (int)mutableInt0.getValue());
      assertEquals((-1352L), mutableInt0.longValue());
      assertEquals((-1352), mutableInt0.intValue());
      assertEquals((short) (-1352), mutableInt0.shortValue());
      
      mutableInt0.increment();
      assertEquals("-1351", mutableInt0.toString());
      assertEquals((-1351.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1351.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1351), (int)mutableInt0.toInteger());
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals((-1351), (int)mutableInt0.getValue());
      assertEquals((-1351L), mutableInt0.longValue());
      assertEquals((-1351), mutableInt0.intValue());
      assertEquals((short) (-1351), mutableInt0.shortValue());
      
      int int0 = 8;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1352);
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (double) 8);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {8.0, 0.0, (-1352.0), 8.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (-1));
      assertNull(longArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 43, (-1));
      assertNull(floatArray0);
      
      long[] longArray1 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1073;
      floatArray0[1] = (float) 1073;
      floatArray0[2] = (float) (-2103);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2491, 2491);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1073.0F, 1073.0F, (-2103.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1073.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1073.0F, 1073.0F, (-2103.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-363L);
      longArray0[1] = (-1239L);
      longArray0[2] = 107L;
      longArray0[3] = (-4712L);
      longArray0[4] = (-1492L);
      longArray0[5] = 0L;
      longArray0[6] = 986L;
      longArray0[7] = 155L;
      longArray0[8] = 1258L;
      long[] longArray1 = ArrayUtils.remove(longArray0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-363L), (-1239L), 107L, (-4712L), (-1492L), 0L, 986L, 155L, 1258L}, longArray0);
      assertArrayEquals(new long[] {(-363L), (-1239L), (-4712L), (-1492L), 0L, 986L, 155L, 1258L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1239L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1239.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2511.78489178;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-535.44716993);
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 2353.0847450188;
      doubleArray0[6] = 1180.9917262003548;
      doubleArray0[7] = 699.790522799;
      doubleArray0[8] = (-1826.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1180.9917262003548, (-535.44716993));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2511.78489178, 0.0, (-535.44716993), 0.7, 3.0, 2353.0847450188, 1180.9917262003548, 699.790522799, (-1826.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1543.993F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1566.0F;
      floatArray0[3] = (-2359.9224F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 4, 4);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1543.993F, (-1.0F), 1566.0F, (-2359.9224F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 4;
      longArray0[2] = 1L;
      longArray0[3] = (long) 4;
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {4L, 1L, 4L, 4L, 4L, 4L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Double double0 = new Double(short0);
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5369L;
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) 332;
      doubleArray0[3] = (double) short0;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 83, (-1101));
      assertNull(charArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5369.0, (-1.0), 332.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5369.0, (-1.0), 332.0, (-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, 'l');
      assertNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2080);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2397;
      shortArray0[1] = (short) (-2);
      shortArray0[2] = (short)50;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2397);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2397, (short) (-2), (short)50}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2397);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Z';
      charArray0[2] = 't';
      charArray0[3] = '!';
      charArray0[4] = 's';
      charArray0[5] = ',';
      charArray0[6] = ':';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-2), (int) (short) (-2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Q', 'Z', 't', '!', 's', ',', ':'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, (-1075));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)122);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)13;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)36, (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)36, (short)13}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[1] = (double) (short)36;
      doubleArray0[2] = (double) (short)13;
      int int0 = ArrayUtils.indexOf(doubleArray0, 36.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {36.0, 36.0, 13.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger("", (int) (short)13);
      assertEquals(13, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {36.0, 36.0, 13.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {36.0, 36.0, 13.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1373, 140, 2633);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)28;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)31);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)54, (byte)1, (byte)96, (byte)31, (byte)28}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (int) (byte)0, (int) (byte)0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      shortArray0[1] = (short)19418;
      shortArray0[2] = (short)53;
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '6';
      ArrayUtils.swap(charArray0, (-1408), (int) (short)588, (int) (short)53);
      assertArrayEquals(new char[] {'+', '+', '', '', '6'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)19418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19418, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer0 = new Integer((byte) (-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-118);
      shortArray0[1] = (short) (byte) (-6);
      shortArray0[2] = (short) (byte)13;
      shortArray0[3] = (short) (byte) (-117);
      shortArray0[4] = (short) (byte)13;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, (int) (byte) (-6));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-118), (short) (-6), (short)13, (short) (-117), (short)13, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer1 = new Integer((-1751));
      assertEquals((-1751), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      assertEquals((-1751), (int)integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 2564.036976921486;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1, (-2143873160), (double) (-1751));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.147483647E9, 1.0, 2564.036976921486}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, (boolean) boolean1, 3017);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      shortArray0[1] = (short)19418;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short)588;
      shortArray0[4] = (short) (-2008);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)19418, (short)53, (short)588, (short) (-2008), (short)588}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((char[]) null, (-1556), (-1573), (-1556));
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)43);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {43L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert(96, arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)2);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      Integer integer0 = new Integer(1555);
      assertEquals(1555, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)114, 1555);
      assertEquals((-1), int0);
      
      Integer integer1 = new Integer((short)565);
      assertEquals(565, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[4] = (short)588;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)588;
      doubleArray0[1] = (double) (short) (-533);
      doubleArray0[2] = 2833.73888426615;
      doubleArray0[3] = 79.8792;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short) (-533);
      doubleArray0[6] = (double) (short)588;
      doubleArray0[7] = (double) 91;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {(-533.0), 588.0, 91.0, 588.0, (-533.0), 2833.73888426615, 79.8792, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-533.0), 588.0, 91.0, 588.0, (-533.0), 2833.73888426615, 79.8792, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 140);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4517;
      intArray0[1] = (int) (short)1313;
      intArray0[2] = (-1073741823);
      intArray0[3] = (int) (short)588;
      intArray0[4] = (int) (short)588;
      intArray0[5] = (int) (short)588;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {4517, 1313, (-1073741823), 588, 588, 588}, intArray0);
      assertEquals(6, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1425), booleanArray1, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1571.651F;
      floatArray0[1] = 1571.651F;
      floatArray0[2] = 1571.651F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-650.1401F), 7);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1571.651F, 1571.651F, 1571.651F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '=';
      charArray0[1] = 'j';
      charArray0[3] = '';
      charArray0[4] = '$';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 11);
      assertArrayEquals(new char[] {' ', 'j', '\u0000', '', '$'}, charArray0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) '';
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {106.0F, 32.0F, 0.0F, 127.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) ' ';
      longArray0[4] = 3290L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {127L, 0L, 0L, 32L, 3290L}, longArray0);
      assertArrayEquals(new long[] {127L, 0L, 0L, 32L, 3290L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)708, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'I';
      charArray0[2] = 'B';
      ArrayUtils.shift(charArray0, (int) (short)708, 12, 1833);
      assertArrayEquals(new char[] {'r', 'I', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)128;
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (float) 1833, 2223);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertArrayEquals(new float[] {1.0F, 128.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2332));
      assertEquals((-2332), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-445));
      assertEquals((-445), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2332));
      assertEquals((-2332), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1781), (-2332));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      int int0 = new Byte((byte)59);
      assertEquals((byte)59, int0);
      
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2146603891));
      assertEquals((-2146603891), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)59, 1632);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(intArray0, 8, (-1), 102);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 8.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = '`';
      charArray0[4] = '/';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'L', '`'}, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'L', '`'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 'j';
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 'h';
      doubleArray0[6] = (double) int0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 699.790522799, 0, 0.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {76.0, 54.0, 1.0, 106.0, 0.0, 104.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'j', '6', '`', '/', 'L', '`', 'h'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[4] = 'n';
      charArray0[5] = '+';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = '8';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'n';
      ArrayUtils.shuffle(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '+', '+', '\u0000', 'n', '+', 'n', 'n', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '+', '\u0000', 'n', '+', 'n', 'n', '8', 'n'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      Integer integer0 = new Integer(2146389109);
      assertEquals(2146389109, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'n';
      floatArray0[2] = (float) 'n';
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) 'n';
      floatArray0[5] = (float) 'n';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2146389109);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2.14638912E9F, 110.0F, 110.0F, 110.0F, 43.0F, 110.0F, 110.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {110.0F, 110.0F, 110.0F, 43.0F, 110.0F, 110.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      ArrayUtils.shift(longArray0, (-1464));
      assertArrayEquals(new long[] {110L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Integer integer0 = new Integer(2239);
      assertEquals(2239, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0, (-2145883951));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)57);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)103, (byte)3, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)103, (byte)3, (byte)3}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2445L, 1135);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom((-520L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap(longArray0, (-1126), (-2146612810), 97);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1366;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1366}, shortArray0);
      assertArrayEquals(new short[] {(short)1366}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Integer[] integerArray0 = new Integer[9];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[6]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = new Object[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      ArrayUtils.shift(booleanArray2, 49);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray1, (-76), 613);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-59.844078F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = 1478.057F;
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-59.844078F), 85.0F, 1478.057F, 88.0F, (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(299);
      assertEquals(299L, mutableInt0.longValue());
      assertEquals("299", mutableInt0.toString());
      assertEquals(299, (int)mutableInt0.getValue());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertEquals(299, (int)mutableInt0.toInteger());
      assertEquals(299.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(299.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(299, mutableInt0.intValue());
      assertEquals((short)299, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(299, (int)integer0);
      assertEquals(299L, mutableInt0.longValue());
      assertEquals("299", mutableInt0.toString());
      assertEquals(299, (int)mutableInt0.getValue());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertEquals(299, (int)mutableInt0.toInteger());
      assertEquals(299.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(299.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(299, mutableInt0.intValue());
      assertEquals((short)299, mutableInt0.shortValue());
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, (-1594));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 'l';
      floatArray0[6] = (float) 'l';
      floatArray0[7] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.0F, 1.0F, 1.0F, 108.0F, 108.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0F);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift(charArray0, 0, 7, 1673);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1540), 2, (-1540));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      ArrayUtils.shift(charArray0, (-2143821591), 251, 10);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3253L;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 251;
      longArray0[3] = (long) 251;
      longArray0[4] = (long) 251;
      longArray0[5] = (long) '#';
      longArray0[6] = (-1035L);
      longArray0[7] = (long) 10;
      longArray0[8] = (long) 251;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2430L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3253L, 10L, 251L, 251L, 251L, 35L, (-1035L), 10L, 251L}, longArray1);
      assertArrayEquals(new long[] {3253L, 10L, 251L, 251L, 251L, 35L, (-1035L), 10L, 251L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-1112));
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short) (-2050);
      Integer integer0 = Integer.valueOf((int) (short)34);
      assertEquals(34, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(34, object0);
      assertNotNull(object0);
      
      ArrayUtils.shift((int[]) null, (-1), 1448, 1658);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 54;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) 54;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2102.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {54.0F, 32.0F, 54.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2102.0F), 54.0F, 32.0F, 54.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift((int[]) null, (-1), (-1), (-1));
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object) integer0, 1);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-1), 1, (-672));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2071);
      longArray0[1] = 5369L;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray2, (-1214), (-2145811715), (-2145811715));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)52;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '.');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'k');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {107, 107, 107}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1191.2201;
      doubleArray0[3] = (-1240.51598761575);
      doubleArray0[4] = 133.7492709577937;
      doubleArray0[5] = (-5551.21444021759);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-2374.5192534148);
      doubleArray0[8] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2564.036976921486, Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, 1191.2201, (-1240.51598761575), 133.7492709577937, (-5551.21444021759), (-1.0), (-2374.5192534148), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 56;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-2145840583), 90);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {(-1), (-1), 56, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)1075;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (short)1075;
      intArray0[2] = (int) (short)1075;
      intArray0[3] = (int) (short)1075;
      intArray0[4] = (int) (short)1075;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1075, 1075, 1075, 1075}, intArray0);
      assertArrayEquals(new int[] {0, 1075, 1075, 1075, 1075, 0, 1075, 1075, 1075, 1075}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      
      Integer integer0 = new Integer(1075);
      assertEquals(1075, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3815);
      assertEquals(3815, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(3815, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1075, 108);
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1075, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer((-894));
      assertEquals((-894), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-103), 4);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-106);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-106)}, intArray0);
      assertArrayEquals(new int[] {(-106), (-106)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Integer integer0 = new Integer((byte) (-106));
      assertEquals((-106), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-106), object0);
      assertNotNull(object0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte) (-103);
      shortArray0[4] = (short) (byte) (-106);
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte) (-101);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-176), 2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short) (-103), (short) (-106), (short)2, (short) (-101)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = 5369L;
      Double double0 = new Double((-3601.0));
      assertEquals((-3601.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2802), (int) (short) (-2071));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1769));
      assertEquals((-1769), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1769));
      assertEquals((-1769), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)599;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)599, 1);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)599}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-1408), 1896, (int) (short)599);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)588;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 332);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 588;
      objectArray0[1] = (Object) (short)588;
      objectArray0[2] = (Object) (-3478.2805F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, 0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {588, 0}, intArray2);
      assertArrayEquals(new int[] {588}, intArray0);
      assertArrayEquals(new int[] {588}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1087, (int) (short)1087);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)588, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-117), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, Integer.MAX_VALUE, (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) (-1148));
      assertEquals((-1148), object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1532));
      assertEquals((-1532), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1532), (int)integer2);
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)32;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)39, (int) (byte) (-102));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)120, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Integer integer0 = new Integer((-2230));
      assertEquals((-2230), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, 127);
      assertNull(integer1);
      
      Integer integer2 = new Integer((byte)2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer3 = new Integer(byte0);
      assertEquals(2, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      ArrayUtils.shift((Object[]) null, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)708, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)708;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (short)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {708.0, 0.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {708.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) (short)0;
      doubleArray2[2] = 729.305325847;
      doubleArray2[3] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, (-1500.282593), (int) (short)0);
      assertEquals((-1), int0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 729.305325847, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      ArrayUtils.shift(objectArray0, (int) (short)708);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ArrayUtils.shift((Object[]) integerArray0, (-977));
      assertEquals(1, integerArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-977));
      assertEquals((-977), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      Integer integer0 = new Integer((short)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(byte0);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)2;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)2;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte)2, 1534);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)2);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (-791));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Integer integer0 = new Integer((byte) (-6));
      assertEquals((-6), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((byte) (-117));
      assertEquals((-117), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-117), (-1793));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-6), (byte) (-118), (byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-178));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-754.31F));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer((-17));
      assertEquals((-17), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      Integer[] integerArray2 = ArrayUtils.removeAllOccurrences(integerArray1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray2.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, '|');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 1406);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer((short) (-2071));
      assertEquals((-2071), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[4] = (float) 108;
      floatArray0[5] = (float) (byte)2;
      floatArray0[6] = (-2013.5563F);
      MockRandom mockRandom0 = new MockRandom(108);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1408);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short)18688;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2857, (int) (short)2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1408), (short)18688, (short)2, (short)18688}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((char[]) null, 2664, (int) (short)18688);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte) (-78), (double) (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, 0L, 87);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, 87);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2071);
      longArray0[1] = 5369L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1, 1064.56504943);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1.0, (-2071.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Double double0 = new Double((-3601.0));
      assertEquals((-3601.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'h';
      charArray0[2] = 'K';
      charArray0[3] = '';
      charArray0[4] = '\"';
      charArray0[5] = '\'';
      ArrayUtils.reverse(charArray0, (int) (short)1, (int) (short)1);
      assertArrayEquals(new char[] {'I', 'h', 'K', '', '\"', '\''}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = ';';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2127961068), 12);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'l';
      intArray0[1] = (-1);
      intArray0[2] = (int) 'l';
      intArray0[3] = 160;
      intArray0[4] = (int) 'l';
      ArrayUtils.shift(intArray0, (-939), (-870), (-1381));
      assertArrayEquals(new int[] {108, (-1), 108, 160, 108}, intArray0);
      assertEquals(5, intArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 108;
      integerArray0[1] = (Integer) 160;
      integerArray0[2] = (Integer) 108;
      MutableInt mutableInt0 = new MutableInt((Number) 108);
      assertEquals(108L, mutableInt0.longValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals(108, mutableInt0.intValue());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(108, (int)mutableInt0.getValue());
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(108, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(108L, mutableInt0.longValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals(108, mutableInt0.intValue());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(108, (int)mutableInt0.getValue());
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertNotNull(integer0);
      
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 160;
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) 108;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 108);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {108, 160, 108, 108, 160, (-1), 108}, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {108, (-1), 108, 160, 108}, intArray0);
      assertArrayEquals(new int[] {108, 160, 108, 108, 160, (-1), 108}, intArray1);
      assertArrayEquals(new int[] {160, 108}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(2, intArray2.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) (-1148);
      doubleArray0[17] = (double) (-1148);
      doubleArray0[2] = (double) (-1148);
      doubleArray0[3] = (double) (-1148);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(23, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 664, (double) (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(23, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(664);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, 6, 728);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-115), (-2039));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)13;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)36, (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)36, (short)13}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)13;
      ArrayUtils.shift(booleanArray0, (int) (short)13, 152, (int) (short)0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)36;
      intArray0[1] = (int) (short)36;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {36, 36}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 5);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-3155));
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, (-1075));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2077), 82);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), 330);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Integer integer0 = new Integer(1020);
      assertEquals(1020, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(59);
      assertEquals(59, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 7, (int) (byte)122);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(longArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1377L;
      longArray0[1] = 1909L;
      longArray0[2] = 2278L;
      longArray0[3] = 0L;
      longArray0[4] = 91L;
      longArray0[5] = 0L;
      longArray0[6] = 155L;
      longArray0[7] = (-557L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {1909L, 2278L, 0L, 91L, 0L, 155L, (-557L), 1377L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-557L);
      doubleArray0[2] = (double) 2278L;
      doubleArray0[3] = 147.518854;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (double) 2278L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 7, 2659);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-557.0), 2278.0, 147.518854, 0.0, 1.5, 2278.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 261.1F;
      floatArray0[2] = (-915.9F);
      ArrayUtils.swap(floatArray0, 1595, 1595, (-2145959177));
      assertArrayEquals(new float[] {1.0F, 261.1F, (-915.9F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-2145959167), (-2145959167), (-2145959167));
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)80);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)80}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)80;
      floatArray0[1] = 6.0F;
      ArrayUtils.swap(floatArray0, (int) (byte)80, (int) (byte)80, (int) (byte)80);
      assertArrayEquals(new float[] {80.0F, 6.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      floatArray0[2] = 326.12854F;
      int int0 = ArrayUtils.indexOf(floatArray0, 326.12854F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)101, (byte)111, (byte) (-51), (byte)10, (byte)0, (byte) (-87), (byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)101, (byte)111, (byte) (-51), (byte)10, (byte)0, (byte) (-87), (byte) (-2)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)111);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) (byte)10);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F, 10.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-87);
      intArray0[3] = (int) (byte) (-2);
      intArray0[4] = 2;
      ArrayUtils.shift(intArray0, (int) (byte)101);
      assertArrayEquals(new int[] {2, 0, 0, (-87), (-2)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte) (-87);
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-87)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-87)}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-87);
      floatArray0[1] = (float) (byte) (-51);
      floatArray0[2] = (float) (byte) (-2);
      floatArray0[3] = (float) (byte)111;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) byte0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-87.0F), (-51.0F), (-2.0F), 111.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-51.0F), (-2.0F), 111.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)111);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-87.0F), (-51.0F), (-2.0F), 111.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-51.0F), (-2.0F), 111.0F, 111.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-51.0F), (-2.0F), 111.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift((int[]) null, 1156);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-118));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      floatArray0[2] = 326.12854F;
      int int0 = ArrayUtils.indexOf(floatArray0, 326.12854F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)119, (byte)111, (byte) (-51), (byte)10, (byte)0, (byte) (-87), (byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)119, (byte)111, (byte) (-51), (byte)10, (byte)0, (byte) (-87), (byte) (-2)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)111);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) (byte)10);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F, 10.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-87);
      intArray0[3] = (int) (byte) (-2);
      intArray0[4] = 2;
      ArrayUtils.shift(intArray0, (int) (byte)119);
      assertArrayEquals(new int[] {0, (-87), (-2), 2, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 34, 34);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1528.9);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1472.5785), (-1763));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, (-1528.9), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) integerArray0, (-1763), (-2216), (-1763));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Character character0 = Character.valueOf(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('/');
      assertEquals('/', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('/');
      assertEquals('/', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[3];
      Character character3 = new Character('w');
      assertEquals('w', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[0] = character3;
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ';');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'w', ';', '/'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'w';
      floatArray1[1] = (float) ';';
      floatArray1[2] = (float) (char)character1;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {119.0F, 59.0F, 47.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {119.0F, 59.0F, 47.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', (int) character1);
      assertEquals((-1), int0);
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertArrayEquals(new char[] {'w', ';', '/'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      ArrayUtils.shift(charArray0, (-779));
      assertArrayEquals(new char[] {'\u0000', '\'', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\'', '\u0000', '\''}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '\'';
      floatArray0[1] = (float) '\'';
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-779);
      floatArray1[1] = (float) '\'';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {39.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-779.0F), 39.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {39.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-489.611F);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-3631), (-3631), (-3976));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1950, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1950, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 53;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(53, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, (-1578));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Long";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1357L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1961L);
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1135);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1357L, (-1L), (-1L), (-1961L), 1L, 1L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1135;
      intArray0[1] = 1135;
      intArray0[2] = 1135;
      intArray0[3] = 1135;
      intArray0[4] = 1135;
      intArray0[5] = 1135;
      intArray0[6] = 1135;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {1135, 1135, 1135, 1135, 1135, 1135, 1135}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 1135;
      longArray1[1] = (-1961L);
      longArray1[2] = (-1L);
      ArrayUtils.swap(longArray1, (-1647), (-531), (-345));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1135L, (-1961L), (-1L)}, longArray1);
      assertEquals(3, longArray1.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bXz=~5$$1v-) ?";
      stringArray0[1] = " b";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)588;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)588;
      doubleArray0[1] = (double) (short) (-533);
      doubleArray0[2] = 2833.73888426615;
      doubleArray0[3] = 79.8792;
      doubleArray0[4] = (double) (short) (-533);
      doubleArray0[5] = (double) (short) (-533);
      doubleArray0[6] = (double) (short)588;
      doubleArray0[7] = (double) 91;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {(-533.0), 588.0, 91.0, 588.0, (-533.0), 2833.73888426615, 79.8792, (-533.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-533.0), 588.0, 91.0, 588.0, (-533.0), 2833.73888426615, 79.8792, (-533.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 140);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4517;
      intArray0[1] = (int) (short)1313;
      intArray0[2] = (-1073741823);
      intArray0[3] = (int) (short)588;
      intArray0[4] = (int) (short)588;
      intArray0[5] = (int) (short)588;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {4517, 1313, (-1073741823), 588, 588, 588}, intArray0);
      assertEquals(6, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 554.89F;
      floatArray0[2] = 1962.5662F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 102.5675F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 554.89F, 1962.5662F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = 2091;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 554.89F, 2091);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 554.89F, 1962.5662F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int int2 = 2693;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 32, 2693);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '\\';
      double[] doubleArray0 = null;
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) 1);
      assertNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 32, 'p');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '#';
      charArray0[2] = 'B';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'T', '#', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = (-518.0);
      doubleArray0[3] = (double) 'B';
      doubleArray0[4] = (double) 'T';
      doubleArray0[5] = (double) 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 9, (-1980.82615161483));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {84.0, 66.0, (-518.0), 66.0, 84.0, 84.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer(1860);
      assertEquals(1860, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1922;
      intArray0[1] = (-168);
      intArray0[2] = (-2216);
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotNull(objectArray0);
      assertSame(longArray1, objectArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2045);
      shortArray0[3] = (short) (-2045);
      shortArray0[4] = (short) (-2045);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2045), (short) (-2045), (short) (-2045), (short)1, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, (int) (short) (-2045), (int) (short)1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(0, intArray0.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '+', 456);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) (short) (-2045);
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) '+';
      longArray0[4] = 215L;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)1;
      longArray0[7] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {43L, (-2045L), 1L, 43L, 215L, 1L, 1L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 2026;
      doubleArray0[2] = (double) 91;
      ArrayUtils.shift(doubleArray0, 2026);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 91.0, 2026.0, 91.0, 91.0, 2026.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1306L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1L, 1306L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (byte)65;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 91;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L, 91L, 65L, 0L, 91L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '#';
      charArray0[2] = 'B';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'T', '#', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift(charArray0, 2336, 3038, 8);
      assertArrayEquals(new char[] {'T', '#', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 3038, 91);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)90;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-106), (-1826));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)76, (byte)90, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 'T';
      doubleArray0[5] = (double) 'B';
      doubleArray0[6] = (double) (-1826);
      doubleArray0[7] = (double) (byte)90;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1275.432265));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {35.0, 66.0, 84.0, 8.0, 84.0, 66.0, (-1826.0), 90.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2427.4321F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      floatArray0[5] = 151.9191F;
      Integer integer0 = Integer.getInteger("", (-1613));
      assertEquals((-1613), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-1613), object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2375.7998F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2427.4321F, (-1.0F), (-2375.7998F), (-988.6708F), (-2472.5918F), 151.9191F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2375.7998F), 2427.4321F, (-1.0F), (-2375.7998F), (-988.6708F), (-2472.5918F), 151.9191F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) ' ';
      ArrayUtils.shift(intArray0, 0, 54, 54);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)13;
      floatArray0[3] = (float) (short)13;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1175.9868F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1175.9868F, 32.0F, 0.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((-74), integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Integer integer0 = new Integer((-2242));
      assertEquals((-2242), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1805);
      assertEquals(1805, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(59);
      assertEquals(59, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 4273, (int) 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.swap((long[]) null, 2026, 2026);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-104), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      int int1 = 101;
      Integer integer0 = new Integer(101);
      assertEquals(101, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int1);
      assertEquals(101, (int)integer1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(101);
      assertEquals(101, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertEquals(101, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2138, 101);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(4, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 101;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.swap(longArray0, 2086, (-1283));
      assertArrayEquals(new long[] {101L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), 3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-941L));
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)39;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte) (-83), (byte)80, (byte)104, (byte) (-14), (byte)39}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1617L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = ';';
      charArray0[7] = 'l';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\'');
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'B', 'B', 'q', 'Q', '\'', '\'', ';', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-941L));
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)80;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)102, (byte)39, (byte) (-83), (byte) (-14), (byte)80}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 59.0, (-988.6707763671875));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, 2750, (int) (short)1, 346);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      char[] charArray0 = new char[9];
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', (int) (byte) (-15));
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '`';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6', '`'}, charArray0);
      assertArrayEquals(new char[] {'6', '`'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      MutableInt mutableInt0 = new MutableInt(3435);
      assertEquals(3435, (int)mutableInt0.toInteger());
      assertEquals(3435, (int)mutableInt0.getValue());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals((short)3435, mutableInt0.shortValue());
      assertEquals(3435, mutableInt0.intValue());
      assertEquals(3435L, mutableInt0.longValue());
      assertEquals(3435.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3435.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("3435", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(3435, (int)integer0);
      assertEquals(3435, (int)mutableInt0.toInteger());
      assertEquals(3435, (int)mutableInt0.getValue());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals((short)3435, mutableInt0.shortValue());
      assertEquals(3435, mutableInt0.intValue());
      assertEquals(3435L, mutableInt0.longValue());
      assertEquals(3435.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3435.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("3435", mutableInt0.toString());
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-40);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-40), 4825);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-76), (byte) (-76), (byte) (-40)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2427.4321F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      floatArray0[5] = 151.9191F;
      floatArray0[6] = (-83.05F);
      floatArray0[7] = (-59.844078F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2427.4321F, (-1.0F), (-2375.7998F), (-988.6708F), (-2472.5918F), 151.9191F, (-83.05F), (-59.844078F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Integer[] integerArray0 = null;
      MutableInt mutableInt0 = new MutableInt((-3089));
      assertEquals((-3089), (int)mutableInt0.toInteger());
      assertEquals((-3089.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3089), (int)mutableInt0.getValue());
      assertEquals((byte) (-17), mutableInt0.byteValue());
      assertEquals((-3089.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-3089", mutableInt0.toString());
      assertEquals((-3089L), mutableInt0.longValue());
      assertEquals((short) (-3089), mutableInt0.shortValue());
      assertEquals((-3089), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-3089), (int)integer0);
      assertEquals((-3089), (int)mutableInt0.toInteger());
      assertEquals((-3089.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3089), (int)mutableInt0.getValue());
      assertEquals((byte) (-17), mutableInt0.byteValue());
      assertEquals((-3089.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-3089", mutableInt0.toString());
      assertEquals((-3089L), mutableInt0.longValue());
      assertEquals((short) (-3089), mutableInt0.shortValue());
      assertEquals((-3089), mutableInt0.intValue());
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byte byte0 = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byte byte1 = (byte) (-40);
      int int0 = 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-40), 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-76)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[2] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 32);
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer(49);
      assertEquals(49, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 49);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Character character0 = new Character('\u0000');
      assertEquals('\u0000', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '3';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 51.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 51.0F, 51.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray1));
      assertEquals(0, intArray0.length);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Integer integer0 = new Integer(byte0);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) integer0, (int) (byte)2);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)2);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) integer0, 14);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      Integer integer0 = new Integer(3732);
      assertEquals(3732, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.add((boolean[]) null, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray2.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) integer0;
      Integer integer1 = new Integer((short)588);
      assertEquals(588, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1);
      assertEquals((-1), int0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(9, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-1805));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, (-1805)}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY, (Object) integer0, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[7] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1425));
      assertEquals((-1425), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1425), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)118;
      intArray0[2] = (int) (byte)118;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {118, 118}, intArray1);
      assertArrayEquals(new int[] {0, 118, 118}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(4, integerArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray0, 53);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {0, 118, 118, 53}, intArray2);
      assertArrayEquals(new int[] {0, 118, 118}, intArray0);
      assertEquals(4, intArray2.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 3450, 2104);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f', '}'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'f';
      objectArray0[1] = (Object) 'f';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(7, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = ArrayUtils.get(integerArray0, 10, integer3);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1537.0F);
      floatArray0[4] = (-3180.0F);
      floatArray0[5] = 2948.4348F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 554.89F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 554.89F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2948.4348F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = false;
      ArrayUtils.shift(booleanArray2, 40, 324, 324);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'U', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1318;
      doubleArray0[1] = (double) '\u0085';
      doubleArray0[3] = (double) 1318;
      doubleArray0[5] = 93.43;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1318.0, 133.0, 0.0, 1318.0, 0.0, 93.43}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1318.0, 133.0, 0.0, 1318.0, 0.0, 93.43}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character character0 = new Character('\u0085');
      assertEquals('\u0085', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\u0085');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      char[] charArray0 = new char[13];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(13, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-13), (int) (byte) (-13));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 1977, 56, 1977);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = 'l';
      char char1 = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      int int0 = (-1471);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-1471);
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) byte0;
      ArrayUtils.shift(intArray0, (-1471), (-1471), 45);
      assertArrayEquals(new int[] {2, (-1471), 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)104);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-4712), 849, (-4712));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)104, (-4712));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1751));
      assertEquals((-1751), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(849);
      assertEquals(849, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (int) 104, integerArray0[1]);
      assertEquals(849, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) integer2, "w4C-ymb&3ukyl!");
      assertEquals("849", string0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(string0);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift((byte[]) null, 47, (-649), (-1751));
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 268;
      intArray0[1] = 268;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 689;
      ArrayUtils.shift(intArray0, 268, (-645), 2);
      assertArrayEquals(new int[] {268, 268, 2, 2, 689}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (-645));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-645.0F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1613));
      assertEquals((-1613), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-1613), object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      Integer integer0 = new Integer(256);
      assertEquals(256, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(256, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2312), Integer.MIN_VALUE, (-1758));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.swap(charArray0, (-1763), 550, (-1758));
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      int[] intArray0 = new int[9];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) 'l';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1193);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 108, 108, 108}, intArray1);
      assertArrayEquals(new int[] {0, 108, 108, 108}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.shift((char[]) null, 2184, (-3160), 1114111);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.shift((char[]) null, 8, 3038, 3038);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1711), 8);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)90;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-76));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)0, (byte) (-65), (byte)65, (byte)65, (byte)90}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, (int) (byte)65);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 226L;
      floatArray0[2] = (float) 226L;
      floatArray0[3] = (float) 1L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 226.0F, 226.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 226.0F, 226.0F, 1.0F, 1.0F, 226.0F, 226.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1425));
      assertEquals((-1425), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1425), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)118;
      intArray0[2] = (int) (byte)118;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {118, 118}, intArray1);
      assertArrayEquals(new int[] {0, 118, 118}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2239);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2239), (-2395));
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2239)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-988.6708F);
      floatArray0[1] = (-988.6708F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-392.66193F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1185.0F;
      floatArray0[7] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-988.6708F), (-988.6708F), 0.0F, (-1.0F), (-392.66193F), 0.0F, 1185.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), (int) (byte) (-6));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-6));
      assertEquals((-6), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1582));
      assertEquals((-1582), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(42);
      assertEquals(42, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (-1781));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 659.06F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(1, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)294;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-65);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)294}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte)32;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)39, 1339);
      assertEquals((-1), int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)39, (byte)120, (byte) (-102), (byte)32}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = 'G';
      charArray0[6] = '#';
      ArrayUtils.shift(charArray0, (-2143821591), (-1173), 16);
      assertArrayEquals(new char[] {'G', '#', '#', '#', '#', 'G', '#'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-83);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) '-';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-83.0), 2.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-83.0), 2.0, 45.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-467);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2126221440);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'V', '$'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '#';
      charArray0[2] = 'B';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'T', '#', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift(charArray0, 2336, 3038, 8);
      assertArrayEquals(new char[] {'T', '#', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 3038, 91);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-76);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)65);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)76, (byte)90, (byte)0, (byte)32, (byte) (-51), (byte) (-65), (byte) (-76)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-120.723F);
      floatArray0[1] = 621.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-120.723F), 621.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-9);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte)15, (byte) (-9), (byte) (-9)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 0.0, 2.147483647E9}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1274));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((short) (-1274));
      assertEquals((-1274.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3054.9, 1064.56504943);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Double double1 = new Double(5370.5);
      assertEquals(5370.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1274.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = new BitSet(2798);
      assertEquals(2816, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2798, 2798, 4322.142);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(doubleArray0, 14);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(85);
      assertEquals(85, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {85, 122, 85, 122}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 992.2527982);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-156.54306), 122);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object1);
      assertTrue(integer1.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNull(object2);
      assertEquals(8, objectArray0.length);
      
      objectArray0[2] = (Object) null;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.7);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'J';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2740), (-2430), (-2430));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "@shCaEJEEl";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "@shCaEJEEl");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-1085);
      intArray0[2] = (-2145521203);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {7, (-1085), (-2145521203)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-2145521203));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "6T2AN@BCPJ6");
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char char0 = '-';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) '&';
      doubleArray0[2] = 2446.09;
      doubleArray0[3] = (double) '-';
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {38.0, 2446.09, 45.0, 91.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "{index}");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (-1), 'Z');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(1135L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)294;
      shortArray0[1] = (short) (-503);
      shortArray0[2] = (short)294;
      shortArray0[3] = (short)294;
      shortArray0[4] = (short)294;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-503), (short)294, (short)294, (short)294, (short)294}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.swap((Object[]) null, (-29), (-48), 2);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-489.611F);
      ArrayUtils.reverse(floatArray0, 155, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1547.032F), (-1.0F), 1386.845F, 1.0F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 755L;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) 155;
      longArray0[6] = (long) 155;
      longArray0[7] = (long) 155;
      longArray0[8] = 755L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1306L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 755L, 2147483647L, 155L, 155L, 155L, 755L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 755L, 2147483647L, 155L, 155L, 155L, 755L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) (-1148));
      assertEquals((-1148), object0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1532));
      assertEquals((-1532), (int)integer0);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1532), (int)integer2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals((-1532), object2);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(object2.equals((Object)integer1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(intArray0, 54, (-1148), (-629));
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1238.249F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1238.249F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1238.249F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-393);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-519));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393), (short) (-519)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-393));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1238.249F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1238.249F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      int int0 = new Short((short) (-393));
      assertEquals((short) (-393), int0);
      
      ArrayUtils.reverse(shortArray0, (short) (-393), (int) (short) (-519));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Integer integer0 = new Integer((short) (-519));
      assertEquals((-519), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "03?3 GT6;Y#S");
      assertEquals("-519", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-387);
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)588;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)588, (short) (-387)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = ' ';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      ArrayUtils.swap(charArray0, (int) (short)588, (int) (short) (-533), 11);
      assertArrayEquals(new char[] {'-', 'j', '$', '', ' ', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', 'j', '$', '', ' ', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (short)588);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {588L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2077;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 2077;
      integerArray0[1] = (Integer) 2077;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2077, 2077}, intArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2077, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byte byte1 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      int int0 = 3;
      int int1 = 59;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)54;
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) (byte)54;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2'}, charArray0);
      assertArrayEquals(new char[] {'F', '@', '2', 'F', '@', '2'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      int int0 = 51;
      Integer[] integerArray0 = new Integer[7];
      MutableInt mutableInt0 = new MutableInt(51);
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(51, (int)integer0);
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-585));
      assertEquals((-585), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-585));
      assertEquals((-585), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = mutableInt0.getValue();
      assertEquals(51, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, mutableInt0.intValue());
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(199);
      assertEquals(199, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      mutableInt0.add(int0);
      assertEquals(102.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(102L, mutableInt0.longValue());
      assertEquals(102, (int)mutableInt0.getValue());
      assertEquals(102, (int)mutableInt0.toInteger());
      assertEquals((byte)102, mutableInt0.byteValue());
      assertEquals(102, mutableInt0.intValue());
      assertEquals("102", mutableInt0.toString());
      assertEquals((short)102, mutableInt0.shortValue());
      assertEquals(102.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer5 = new Integer(2528);
      assertEquals(2528, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2202);
      assertEquals(2202, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      mutableInt0.increment();
      assertEquals(103L, mutableInt0.longValue());
      assertEquals(103, (int)mutableInt0.getValue());
      assertEquals(103.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(103.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(103, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(103, mutableInt0.intValue());
      assertEquals("103", mutableInt0.toString());
      assertEquals((short)103, mutableInt0.shortValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-666), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -666, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(68);
      assertEquals(68, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      assertEquals(3, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-215));
      assertEquals((-215), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2203));
      assertEquals((-2203), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2522));
      assertEquals((-2522), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.insert(3, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(12, integerArray1.length);
      
      Integer integer6 = new Integer((-61));
      assertEquals((-61), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer(3);
      assertEquals(3, (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      Integer[] integerArray2 = ArrayUtils.removeAllOccurences(integerArray1, integer7);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray2.length);
      assertEquals(6, integerArray0.length);
      assertEquals(12, integerArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertFalse(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(12, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      Integer[] integerArray0 = new Integer[11];
      int int0 = 2146096055;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146096055, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146096055, Length: 11
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)59;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-96);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)59;
      byte[] byteArray3 = ArrayUtils.addAll(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte) (-96), (byte)0, (byte)59}, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(13, byteArray3.length);
      assertEquals(5, byteArray2.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(275, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 275, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, (-1578));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1578), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1578, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1589.0F);
      floatArray0[1] = 4206.6187F;
      floatArray0[2] = 326.12854F;
      int int0 = ArrayUtils.indexOf(floatArray0, 326.12854F, 358);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1589.0F), 4206.6187F, 326.12854F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      Byte byte0 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert(358, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      byte byte1 = (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2145103856), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145103856, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1161, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1161, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2595;
      intArray0[3] = (-1566);
      intArray0[4] = 2451;
      intArray0[6] = 0;
      intArray0[7] = (-2220);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(1422, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-82));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)104);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2427.4321F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1537.0F);
      floatArray0[4] = (-3180.0F);
      floatArray0[5] = 2948.4348F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 554.89F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2427.4321F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2427.4321F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2948.4348F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-33));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(613, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 613, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1657));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 2147068699);
      assertEquals(19, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (int) (byte)59);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(booleanArray1, (-1573));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2581, (-76));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2427.4321F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.3882F);
      ArrayUtils.shift((boolean[]) null, 653);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1233, 2);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2427.4321F;
      doubleArray0[1] = (double) 653;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1233;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 653.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2427.43212890625, 653.0, 2.0, 1233.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2427.43212890625, 2.0, 1233.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-1214), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 653);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-798), 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[7] = (byte)27;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      ArrayUtils.shift(booleanArray0, (int) (byte)27);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3638, 2659);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'B';
      charArray0[7] = 'l';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 49);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 46, (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, (-1677));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte)57);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-328L), (-3025));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'J';
      charArray0[7] = 'l';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\'');
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'B', 'B', 'q', 'Q', '\'', '\'', 'J', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-941L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 215L);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[6] = '\'';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '{');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'l', 'l', 'J', 'J', 'J', '\u0000', '\''}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)956;
      shortArray0[1] = (short)20;
      shortArray0[2] = (short) (-517);
      shortArray0[3] = (short)956;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)956, (short)20, (short) (-517), (short)956}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-462), (-462));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-82));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-1112));
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short) (-2050);
      shortArray0[2] = (short)3650;
      shortArray0[3] = (short) (-3537);
      shortArray0[4] = (short)3768;
      shortArray0[5] = (short)60;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)1072;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)34, (short) (-2050), (short)3650, (short) (-3537), (short)3768, (short)60, (short)0, (short)1072}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = 1248.0F;
      ArrayUtils.reverse(floatArray0, (-3051), 1427);
      assertArrayEquals(new float[] {1248.0F, 0.0F, 4.0F, 14.0F, 0.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 4;
      longArray2[1] = (long) 14;
      longArray2[2] = 38L;
      longArray2[3] = (long) (-3051);
      long[] longArray3 = ArrayUtils.removeAllOccurences(longArray2, (long) 14);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {4L, 38L, (-3051L)}, longArray3);
      assertArrayEquals(new long[] {4L, 14L, 38L, (-3051L)}, longArray2);
      assertEquals(3, longArray3.length);
      assertEquals(4, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0, 2307, 1135);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-1961L));
      assertNull(longArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1547.032F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1386.845F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-489.611F);
      ArrayUtils.reverse(floatArray0, 155, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1547.032F), (-1.0F), 1386.845F, 1.0F, (-489.611F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'z';
      charArray0[2] = '4';
      charArray0[3] = '.';
      charArray0[4] = '\'';
      charArray0[5] = 'r';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6', 'z', '4', '.', '\'', 'r'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 821.0F;
      floatArray0[1] = (-2200.05F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1547.032F);
      floatArray0[4] = (-1416.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1646.4375F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {821.0F, (-2200.05F), 1.0F, (-1547.032F), (-1416.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_CHAR_ARRAY, 'r');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '<');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3210));
      assertEquals((-3210), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3210)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)1075;
      Integer integer0 = new Integer(18688);
      assertEquals(18688, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)1075);
      assertEquals(1075, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, (-2147082885), integer0);
      assertEquals(18688, (int)integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("o:w+N#T|y");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean3);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)1075);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 584.41469;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2511.78489178;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 584.41469, 0.0, 0.0, 2511.78489178}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(724);
      assertEquals(724, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(724);
      assertEquals(724, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("\"`U)X,l&duCVV<RP", 724);
      assertEquals(724, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-396));
      assertEquals((-396), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {724, 0, 724, 724, (-396), 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)37}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2842.321004669965);
      doubleArray0[1] = (-3565.83321030853);
      doubleArray0[2] = (-2373.0);
      doubleArray0[3] = (-2227.0);
      doubleArray0[4] = 104.0;
      doubleArray0[5] = 58.1846;
      doubleArray0[6] = (-589.8);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2373.0), (-2373.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2842.321004669965), (-3565.83321030853), (-2373.0), (-2227.0), 104.0, 58.1846, (-589.8)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, 20);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-518);
      intArray0[1] = (-840);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-840));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -840, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2427.4321F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1537.0F);
      floatArray0[4] = (-3180.0F);
      floatArray0[5] = 2948.4348F;
      floatArray0[6] = 1.0F;
      floatArray0[8] = 554.89F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2427.4321F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2427.4321F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2948.4348F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-454.0), 3);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf(185);
      assertEquals(185, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      int int0 = 102;
      Integer integer0 = new Integer(102);
      assertEquals(102, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      float float0 = 1962.5662F;
      floatArray0[2] = 1962.5662F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 102.5675F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1962.5662F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 2091);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1962.5662F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int int1 = 32;
      int int2 = (-2146053215);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 32, (-2146053215));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '\\';
      charArray0[2] = 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 14, '=');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '&');
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 3081, 3081);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221450);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-393), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -393, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1, arrayUtils0.EMPTY_INT_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1443L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1443L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 673;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(673, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 673, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((-168));
      assertEquals((-168), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(346, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-2071);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short) (-2071);
      intArray0[3] = (int) (short) (-2071);
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      int[] intArray1 = ArrayUtils.add(intArray0, (-783));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2071), 1, (-2071), (-2071), 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {(-2071), 1, (-2071), (-2071), 1, 1, 1, (-783)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (-2071);
      doubleArray0[3] = (double) 1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), (-2071.0), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2071);
      longArray0[1] = 5369L;
      longArray0[2] = (long) (-2071);
      longArray0[3] = 2449L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2071L), 5369L, (-2071L), 2449L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3589, intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3589, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2319;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-1));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      floatArray0[1] = (float) 2319;
      longArray1[3] = (long) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, (-1L)}, longArray1);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[15];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 233, 46);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertArrayEquals(new char[] {'&', '&'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, 970);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 970, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)588;
      shortArray0[1] = (short)19418;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short)588;
      shortArray0[4] = (short) (-2008);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)19418, (short)53, (short)588, (short) (-2008), (short)588}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((char[]) null, 128, (int) (short)588, (-1));
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-83);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 729.305325847;
      doubleArray0[1] = 729.305325847;
      doubleArray0[2] = (-1500.282593);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2176.155320931), 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {729.305325847, 729.305325847, (-1500.282593)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[11];
      floatArray0[0] = 554.89F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 554.89F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {554.89F, 1.0F, 554.89F}, floatArray1, 0.01F);
      assertEquals(11, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new char[] {'C', 'C', 'C'}, charArray0);
      assertArrayEquals(new char[] {'C', 'C'}, charArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 554.89F, 2026);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 2452);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, 1922, 2452, 1);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)708, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3463);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 1255.17;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (short)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3463.0), 1.0, 1255.17, 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3463.0), 0.0, 1.0, 1255.17, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) (short)0;
      doubleArray2[2] = 729.305325847;
      doubleArray2[3] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, (-1500.282593), (int) (short)0);
      assertEquals((-1), int0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 729.305325847, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 584.41469;
      doubleArray0[4] = 0.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '|';
      ArrayUtils.swap(charArray0, 11, (-498), (-2087));
      assertArrayEquals(new char[] {'|', '|'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'|', '|'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (-498));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-498L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-397);
      shortArray0[1] = (short)1313;
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)588;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1313, (short)1075, (short) (-533), (short)588, (short) (-397)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'j';
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = ' ';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      ArrayUtils.swap(charArray0, (int) (short)588, (int) (short) (-533), 11);
      assertArrayEquals(new char[] {'-', 'j', '$', '', ' ', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', 'j', '$', '', ' ', '|', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-17), (byte)0, (byte) (-118), (byte) (-1), (byte)0, (byte)118, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      int int1 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int1);
      assertEquals(0, (int)integer1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5259.50348045055;
      doubleArray0[3] = 2833.73888426615;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-535.44716993);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 136.3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 5259.50348045055, 2833.73888426615, 1.0, (-535.44716993)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5259.50348045055, 2833.73888426615, 1.0, (-535.44716993)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 5259.50348045055;
      doubleArray2[2] = (-535.44716993);
      doubleArray2[3] = 5259.50348045055;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2407.0813257525897);
      int int0 = ArrayUtils.indexOf(doubleArray2, (-282.64120338), 1875, 136.3);
      assertEquals((-1), int0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, 5259.50348045055, (-535.44716993), 5259.50348045055, 0.0, (-2407.0813257525897)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '~';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', '~'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1123.409983921401;
      doubleArray0[1] = (-212.7184149657996);
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (-783));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-783)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-2801), (-2801));
      assertArrayEquals(new double[] {1123.409983921401, (-212.7184149657996), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1658L);
      longArray0[1] = 5369L;
      longArray0[2] = (long) (-2801);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1658L), 5369L, (-2801L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-783);
      intArray2[1] = (-783);
      intArray2[2] = (-723);
      intArray2[3] = (-783);
      intArray2[4] = 2886;
      intArray2[5] = 64;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray1, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-1763), integer0);
      assertEquals((-1763), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      ArrayUtils.reverse((double[]) null, (-2787), (-2787));
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1500.282593), (double) (-1763));
      assertEquals((-1), int0);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) doubleArray0[0];
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) double0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 721);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), 721}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 102.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1535);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      ArrayUtils.reverse(doubleArray0, (-1), 1096);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1535.0), (-1.0), 102.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      Long long0 = new Long((-291L));
      assertEquals((-291L), (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[2] = false;
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2071);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2071), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-2071);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short) (-2071);
      intArray0[3] = (int) (short) (-2071);
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      int[] intArray1 = ArrayUtils.add(intArray0, (-783));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2071), 1, (-2071), (-2071), 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {(-2071), 1, (-2071), (-2071), 1, 1, 1, (-783)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short) (-2071);
      doubleArray0[2] = (double) (-2071);
      doubleArray0[3] = (double) 1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      assertArrayEquals(new double[] {1.0, (-2071.0), (-2071.0), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'M';
      charArray0[2] = 'R';
      charArray0[3] = '%';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', 'M', 'R', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2126221433, 6);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1), 1454, 828);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1873.47), 1454);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 948;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)1, (int) (byte)1);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), 948}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), 233);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      Float float0 = new Float((double) 'e');
      assertEquals(101.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) 'e';
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) 'e';
      longArray0[8] = (long) 'e';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'e';
      intArray0[1] = (int) 'e';
      intArray0[2] = (int) 'e';
      intArray0[3] = (int) 'e';
      intArray0[4] = (int) 'e';
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {101, 101, 101, 101, 101}, intArray1);
      assertArrayEquals(new int[] {101, 101, 101, 101, 101}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = new int[8];
      intArray1[0] = (-1313);
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = (-1313);
      intArray1[3] = 959;
      int int0 = ArrayUtils.indexOf((double[]) null, 2511.78489178);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 3450, 2104);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f', '('}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = new int[8];
      intArray1[0] = (-1313);
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = 53;
      intArray1[3] = 959;
      intArray1[4] = Integer.MAX_VALUE;
      intArray1[5] = 1477;
      intArray1[6] = 2104;
      intArray1[7] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2227, 2104);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1313), Integer.MAX_VALUE, 53, 959, Integer.MAX_VALUE, 1477, 2104, 1}, intArray1);
      assertEquals(8, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'e';
      charArray0[2] = '%';
      charArray0[3] = '(';
      charArray0[4] = '1';
      charArray0[5] = '<';
      charArray0[6] = 'f';
      charArray0[7] = 'Y';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1477, 'f');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1477, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 0, 1801, (-253));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      ArrayUtils.shift(charArray0, (-2143821591), 251, 10);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3253L;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 251;
      longArray0[3] = (long) 251;
      longArray0[4] = (long) 251;
      longArray0[5] = (long) '#';
      longArray0[6] = (-1035L);
      longArray0[7] = (long) 10;
      longArray0[8] = (long) 251;
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '#', '#', '\u0000', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '#'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1995), (-2143821591));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)50;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)50);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)50, (short)50}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)50);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = ':';
      charArray0[2] = 'Z';
      charArray0[3] = ',';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 1890);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'j', ':', 'Z', ','}, charArray0);
      assertArrayEquals(new char[] {'Z', ','}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1513));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)258;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)258, (-190));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)258}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)708, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1947), 3114);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-1), (-391));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)59, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-391);
      longArray0[1] = (long) (-391);
      longArray0[2] = (long) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-2849L));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {(-391L), (-391L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 215L;
      doubleArray0[3] = (double) (-2849L);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (byte)0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 215.0, (-2849.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 215.0, (-2849.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 66.0, (-3568));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 215.0, (-2849.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)108, (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)8);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)13;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)36, (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)36, (short)13}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)13;
      doubleArray0[3] = (double) (short)13;
      doubleArray0[4] = (double) (short)36;
      doubleArray0[5] = (double) (short)36;
      doubleArray0[6] = (double) (short)13;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {36.0, 0.0, 13.0, 13.0, 36.0, 36.0, 13.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)13;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)36;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)13;
      intArray0[5] = (int) (short)13;
      intArray0[6] = 1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {13, 0, 36, 0, 13, 13, 1}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1842);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)128, (-791));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)250, (short)0, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 215L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-99);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-25), (byte)2, (byte) (-99)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-25), (byte) (-99)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)60, 256);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)13;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '+';
      charArray0[1] = 'j';
      charArray0[3] = '';
      charArray0[4] = '$';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 11);
      assertArrayEquals(new char[] {' ', 'j', '\u0000', '', '$'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-14233.0));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-14233.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      ArrayUtils.swap(charArray0, (-34), (-34), (-34));
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object0));
      assertNotNull(integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(0, object1);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object1.equals((Object)integer2));
      assertTrue(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object1));
      assertNotNull(integer3);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer3);
      assertEquals(0, object2);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object1));
      assertTrue(object2.equals((Object)integer1));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)integer2));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)integer0));
      assertNotNull(object2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)object1));
      assertTrue(integer4.equals((Object)object2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)object0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(879);
      assertEquals(879, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)object1));
      assertFalse(integer5.equals((Object)object2));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      integerArray0[3] = integer1;
      integerArray0[4] = integer3;
      integerArray0[5] = integer3;
      integerArray0[6] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 879, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'W';
      ArrayUtils.swap(charArray0, 1125, 1125);
      assertArrayEquals(new char[] {'v', 'W'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Double double0 = new Double(552.4186181510948);
      assertEquals(552.4186181510948, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.7);
      assertEquals(0.7, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 1125);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {552.4186181510948, 552.4186181510948, 0.7, 552.4186181510948}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 879.40047569479;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {879.40047569479}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {879.40047569479}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'G';
      charArray0[2] = 't';
      charArray0[3] = '?';
      ArrayUtils.swap(charArray0, (-1461), (-1461));
      assertArrayEquals(new char[] {'$', 'G', 't', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2595;
      intArray0[1] = (int) '?';
      intArray0[2] = (-2227);
      intArray0[3] = (-1566);
      intArray0[4] = 2451;
      intArray0[5] = (int) '$';
      intArray0[6] = 0;
      intArray0[7] = (-2220);
      ArrayUtils.swap(intArray0, 57, 55);
      assertArrayEquals(new int[] {2595, 63, (-2227), (-1566), 2451, 36, 0, (-2220)}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2451;
      longArray0[1] = (long) 't';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) (-1461);
      longArray0[4] = (long) 2595;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2451L, 116L, 63L, (-1461L), 2595L}, longArray0);
      assertArrayEquals(new long[] {2451L, 116L, 63L, (-1461L), 2595L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 59.0, (-988.6707763671875));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, 1404L, (int) (short)128);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, 59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 1950L);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift(byteArray0, (-296), (int) (byte)0, 59);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)7, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      int[] intArray0 = new int[10];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(10, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[23];
      doubleArray0[17] = (double) (-1148);
      doubleArray0[3] = (double) (-1148);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(23, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '2');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean2 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0.0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2098.4082034319667), (-3378.280517578125));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1238.249F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1238.249F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1238.249F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-393);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-519));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-519), (short) (-393), (short) (-519)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-393));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1238.249F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1238.249F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-519), (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1238.2490234375, 0.0, 1.0, 1238.2490234375, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, (-1), (int) (short) (-519));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-393), (short) (-519)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 2026;
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1148);
      doubleArray0[1] = (double) (-1148);
      doubleArray0[2] = (double) (-1148);
      doubleArray0[3] = (double) (-1148);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1148.0), (-1148.0), (-1148.0), (-1148.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 664, (double) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1148.0), (-1148.0), (-1148.0), (-1148.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, 664);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 664, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      intArray0[1] = (-1148);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) (-1148));
      assertEquals((-1148), object0);
      assertNotNull(object0);
      
      int int0 = (-1532);
      Integer integer0 = new Integer((-1532));
      assertEquals((-1532), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2026);
      assertEquals(2026, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertEquals(2026, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)int0));
      assertNotNull(object1);
      
      int int1 = (-1214);
      Integer integer2 = ArrayUtils.get(integerArray0, (-1214), integer0);
      assertEquals((-1532), (int)integer2);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertArrayEquals(new int[] {2026, (-1148)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      ArrayUtils.swap(charArray0, (-1214), 2026, 2026);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = '`';
      charArray0[2] = '9';
      charArray0[3] = '+';
      charArray0[4] = '-';
      ArrayUtils.swap(charArray0, 1784, 2290, (-2138));
      assertArrayEquals(new char[] {'C', '`', '9', '+', '-'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)597;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-533), (short)597, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-719), (-1117));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.shift(charArray0, (-785));
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2289.68F;
      floatArray0[1] = (-1566.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) (-1), arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-3740.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 683.4310195362832;
      doubleArray0[6] = 501.1149880008022;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 673.62082202;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 1.0, (-3740.0), 0.0, 683.4310195362832, 501.1149880008022, (-1.0), 673.62082202}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      Integer integer0 = new Integer(1854);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2278.275907529405;
      doubleArray0[5] = 2424.6225;
      doubleArray0[6] = (-1513.036);
      doubleArray0[7] = 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'A');
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-3039.6F), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (-2375.7998F);
      floatArray0[3] = (-988.6708F);
      floatArray0[4] = (-2472.5918F);
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      ArrayUtils.lastIndexOf(charArray0, '#', 3);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)59;
      ArrayUtils.shuffle(shortArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      ArrayUtils.lastIndexOf(charArray0, '>', (int) (short)59);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.indexOf(booleanArray0, false, 91);
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      ArrayUtils.lastIndexOf(charArray1, '&');
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-2539));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2969.3F;
      floatArray0[1] = 0.0F;
      Double double0 = new Double(2969.3F);
      Double double1 = new Double(0.0F);
      Double double2 = new Double((-1368.1045F));
      Double double3 = new Double(0.0);
      Double double4 = new Double(1531.284269);
      Double double5 = new Double(2969.3F);
      Double double6 = new Double(0.0F);
      Double double7 = new Double(779.922239625549);
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[0];
      ArrayUtils.isNotEmpty(floatArray0);
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      Integer integer0 = new Integer(0);
      ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0, 0);
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-22));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(4062.12025870372);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(short0);
      doubleArray0[3] = double3;
      Double double4 = new Double((-160.0));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[1]);
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0, 4062.12025870372, 0.0, (-1.0), (-160.0), (-1.0), (-1.0), 4062.12025870372, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)59);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Integer.getInteger("");
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      objectArray0[0] = object0;
      Integer integer1 = new Integer(0);
      ArrayUtils.toPrimitive((Object) integer1);
      ArrayUtils.toPrimitive(objectArray0[1]);
      objectArray0[2] = (Object) null;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      objectArray0[0] = object0;
      Integer integer1 = new Integer(0);
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(objectArray0[1]);
      objectArray0[2] = object2;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)294;
      MockRandom mockRandom0 = new MockRandom(1L);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)294}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1711.82, 1711.82);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2098.4082034319667);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2098.4082034319667), 0.0);
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1512.897;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1512.897, (-2856), 579.605);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1), (double) (-1));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2098.4082034319667), (-2098.4082034319667));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.get(objectArray0, 0);
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = 0;
      ArrayUtils.get(objectArray0, 0);
      objectArray0[0] = null;
      int int1 = (-2430);
      Integer integer0 = new Integer((-2430));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-2430), 0.0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.toArray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-2279);
      Integer integer0 = new Integer((-2279));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2279));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2279));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      ArrayUtils.toArray(integerArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 219);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 219, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 985, 985);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 2126221414);
      ArrayUtils.swap(intArray0, 2126221414, 2126221414, 2126221414);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-3112);
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1639;
      intArray0[6] = (-373);
      intArray0[7] = 0;
      intArray0[8] = (-1598);
      ArrayUtils.swap(intArray0, 985, 3841);
      assertArrayEquals(new int[] {0, (-3112), 8, 0, 0, 1639, (-373), 0, (-1598)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = new boolean[15];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 46;
      intArray0[2] = 46;
      intArray0[3] = 46;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      ArrayUtils.swap(intArray0, (-2917), (-2640), 46);
      assertArrayEquals(new int[] {0, 46, 46, 46}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-3976);
      ArrayUtils.indexesOf(longArray0, 1L, (-4052));
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2884.0F;
      floatArray1[1] = (float) 1;
      floatArray1[2] = (-1597.98F);
      floatArray1[3] = (float) (-3631);
      floatArray1[4] = (float) (-3631);
      ArrayUtils.reverse(floatArray1, (-4052), (-11));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1.0);
      ArrayUtils.reverse(objectArray0);
      ArrayUtils.removeAllOccurences(longArray0, 3732L);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-4052), 16);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      ArrayUtils.removeElements(charArray0, charArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'f';
      ArrayUtils.swap(longArray0, (-1266), (-1266), (-1266));
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      int[] intArray0 = new int[2];
      MockRandom mockRandom0 = new MockRandom((-143L));
      MockRandom mockRandom1 = new MockRandom();
      ArrayUtils.shuffle(intArray0, (Random) mockRandom1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1386.845F;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = 1386.845F;
      floatArray0[4] = 1386.845F;
      floatArray0[5] = (float) 155;
      floatArray0[6] = (-988.6708F);
      floatArray0[7] = (-652.8766F);
      ArrayUtils.reverse((Object[]) characterArray0);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1238L);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)2);
      Byte byte1 = new Byte((byte)73);
      Byte byte2 = new Byte((byte)95);
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\u0000');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, '-', (-1));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(objectArray0);
      ArrayUtils.swap(objectArray0, 2, 948, 948);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 14);
      assertArrayEquals(new int[] {14, (-1), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 2, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (Integer) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_CHAR_ARRAY, '6');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = '`';
      charArray0[4] = '/';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'j', '6', '`', '/', 'L', '`'}, charArray1);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) null);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      
      ArrayUtils.reverse((Object[]) integerArray0, 1, 0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)80);
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)80);
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)80, (byte)80}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      Byte[] byteArray0 = new Byte[10];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)85);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)85, (byte)85, (byte)85, (byte)85, (byte)85, (byte)85, (byte)85, (byte)85}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      ArrayUtils.shift((Object[]) integerArray0, (-2220));
      Integer integer0 = new Integer(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 118;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-2220);
      doubleArray0[6] = (double) 'P';
      doubleArray0[7] = (double) (-2);
      ArrayUtils.shift(doubleArray0, (-2), 2, 235);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-44);
      shortArray0[2] = (short)1075;
      ArrayUtils.isSorted(shortArray0);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.insert(5, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(16, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)1075;
      shortArray0[3] = (short) (-533);
      shortArray0[4] = (short)565;
      ArrayUtils.shuffle(shortArray0);
      char[] charArray0 = new char[5];
      charArray0[2] = '$';
      charArray0[3] = '';
      charArray0[4] = 'j';
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1073741823), (int) (short)1075, 11);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      ArrayUtils.add(longArray0, 0L);
      ArrayUtils.shift(doubleArray0, 14);
      ArrayUtils.addFirst(doubleArray0, 0.0);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      ArrayUtils.shift((double[]) null, 1207);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte)3);
      assertEquals("{3, 4}", bitSet0.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'q';
      charArray0[2] = 'A';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 984.26249355, (double) 226L);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (byte)3;
      shortArray0[4] = (short)2693;
      shortArray0[5] = (short) (byte)3;
      ArrayUtils.clone(shortArray0);
      ArrayUtils.reverse((Object[]) byteArray1, (-1943), 15);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1646.4375F);
      ArrayUtils.shift((double[]) null, 2451);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1214.426);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1214.426}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = ':';
      charArray0[2] = '_';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 226L;
      longArray0[2] = (-4153L);
      longArray0[3] = 1L;
      longArray0[4] = (-428L);
      longArray0[5] = 0L;
      longArray0[6] = 228L;
      longArray0[7] = 0L;
      ArrayUtils.add(longArray0, 226L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 226L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (-428L);
      doubleArray0[6] = (double) 1L;
      ArrayUtils.shift(doubleArray0, 0);
      ArrayUtils.addFirst(doubleArray0, (-1.0));
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ']';
      charArray0[2] = '\'';
      charArray0[3] = '*';
      charArray0[4] = 'j';
      charArray0[5] = '(';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-1093.2906F);
      floatArray0[4] = (-791.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1093.2906F), 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1751.0F);
      floatArray0[2] = (-1751.0F);
      ArrayUtils.indexesOf(floatArray0, 0.0F);
      int int0 = (-130);
      ArrayUtils.lastIndexOf(floatArray0, 44.0F, (-130));
      ArrayUtils.subarray((long[]) null, 2693, (-1));
      double[] doubleArray0 = null;
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'F';
      charArray0[5] = 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), ',');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 1963);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)43);
      assertNotNull(shortArray0);
      
      ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, 4, 4);
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 14, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-770.4F), (-2145265172));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (int) '>', '>');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      ArrayUtils.subarray(byteArray0, (int) (byte)45, (int) (byte)45);
      ArrayUtils.addAll(byteArray0, byteArray0);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 2617, 2617, 2617);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(false);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean0);
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf("BC1]+@2|?pf|");
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 91);
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)62, (-1935));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2427.4321F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1537.0F);
      floatArray0[4] = (-3180.0F);
      floatArray0[5] = 2948.4348F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 554.89F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2427.4321F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1537.0F), (-3180.0F), 2948.4348F, 1.0F, 0.0F, 554.89F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3180.0F);
      doubleArray0[1] = (double) (-1537.0F);
      doubleArray0[2] = (double) 2948.4348F;
      doubleArray0[3] = (double) 0.0F;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {(-3180.0), (-1537.0), 2948.434814453125, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)95);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      characterArray0[0] = character0;
      Character character1 = new Character(';');
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character1);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) ';';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-120.723F);
      floatArray0[1] = 621.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-9);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-9));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2969.3F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1368.1045F);
      floatArray0[3] = (-88.4F);
      floatArray0[4] = (-2014.1891F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2038.66F);
      floatArray0[7] = 2040.3F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'j';
      charArray0[2] = '!';
      charArray0[3] = 'L';
      charArray0[4] = 'M';
      charArray0[5] = 'e';
      charArray0[6] = '\\';
      charArray0[7] = 'K';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'j');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1));
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      doubleArray0[1] = (double) (-3976);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      ArrayUtils.insert(1, floatArray0, floatArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.add(booleanArray0, true);
      ArrayUtils.indexOf(doubleArray0, (-8966.0), 1.0);
      ArrayUtils.reverse((short[]) null, 1087, (-1210));
      int[] intArray0 = new int[0];
      ArrayUtils.toObject(intArray0);
      ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1464));
      ArrayUtils.swap(floatArray0, (-3976), (-1535));
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-3976.0), 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-458L));
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-458L), 0);
      assertEquals(1, longArray1.length);
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      ArrayUtils.lastIndexOf((int[]) null, 3450, 2104);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 2104;
      longArray0[4] = (long) 1135;
      longArray0[5] = (long) 'f';
      longArray0[6] = (long) 1135;
      longArray0[7] = 184L;
      ArrayUtils.indexesOf(longArray0, 1L, (-1));
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextInt(2104);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1), (-1));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer(2026);
      ArrayUtils.toPrimitive((Object) integer0);
      Integer integer1 = new Integer(2026);
      Integer integer2 = new Integer((-1148));
      ArrayUtils.toPrimitive((Object) integer2);
      ArrayUtils.get(integerArray0, 127, integer2);
      ArrayUtils.toPrimitive((Object) null);
      ArrayUtils.shift(intArray0, (int) (byte) (-83), 127, 580);
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      ArrayUtils.indexesOf(intArray0, (-1214), 2026);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-993);
      floatArray0[1] = (float) (-1214);
      floatArray0[2] = (float) 489;
      floatArray0[3] = (float) 54;
      floatArray0[4] = (float) 54;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-993.0F), (-1214.0F), 489.0F, 54.0F, 54.0F, (-993.0F), (-1214.0F), 489.0F, 54.0F, 54.0F}, floatArray1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      float[] floatArray0 = new float[6];
      MockRandom mockRandom0 = new MockRandom((-83));
      MockRandom mockRandom1 = new MockRandom((-83));
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom1);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.shift(floatArray0, (-2223), 562, (-2223));
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3478.2805F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1107.298F);
      floatArray0[3] = 76.78159F;
      floatArray0[4] = 1259.3516F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-417.95F);
      floatArray0[7] = 0.0F;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.shuffle(floatArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = 1306L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      ArrayUtils.add(longArray0, 1306L);
      ArrayUtils.indexesOf(longArray0, 1306L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1306L;
      doubleArray0[1] = (double) (-3478.2805F);
      doubleArray0[2] = (double) 1306L;
      doubleArray0[3] = (double) 76.78159F;
      doubleArray0[4] = 1255.17;
      doubleArray0[5] = (double) (-417.95F);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 1306L;
      doubleArray0[8] = (double) 1306L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-3463));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3463, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-2378), (-1), (-997));
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, 5);
      ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-997), 1073741820);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.shift((boolean[]) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 0, 0, 0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2026;
      long[] longArray0 = new long[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2026;
      floatArray0[1] = (float) 2026;
      floatArray0[2] = (float) 2026;
      floatArray0[3] = (float) 2026;
      ArrayUtils.addFirst(floatArray0, 965.6F);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-2216), 2026, 2026);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 1281, 57, 1281);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 9);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 828, 828, 828);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 828, 0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-1238), (-1150));
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1150);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-371);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-371.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3428.44787466));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1463.53);
      doubleArray0[3] = 584.41469;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2511.78489178;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'l');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 91);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.shift(shortArray0, 2219);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, 2219);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-280);
      shortArray0[2] = (short)1764;
      ArrayUtils.shift(shortArray0, (int) (short)1764);
      assertArrayEquals(new short[] {(short)1, (short) (-280), (short)1764}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147483648, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte)2);
      Byte byte1 = new Byte((byte)2);
      ArrayUtils.nullToEmpty((double[]) null);
      float[] floatArray0 = new float[0];
      ArrayUtils.nullToEmpty(floatArray0);
      Character character0 = new Character('b');
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'p');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('d');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'd');
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      char[] charArray0 = new char[2];
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      characterArray0[0] = character0;
      Character character1 = new Character(';');
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      characterArray0[2] = character2;
      ArrayUtils.toPrimitive(characterArray0, (char) character1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) ';';
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) char0;
      intArray0[2] = (int) (char)character2;
      intArray0[3] = (int) ';';
      intArray0[4] = (int) (char)character2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2142969114);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2142969114, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (-4173));
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 508.60123F;
      floatArray0[1] = 2014.839F;
      floatArray0[2] = (-2579.83F);
      floatArray0[3] = (-2976.0F);
      floatArray0[4] = 2.0F;
      floatArray0[5] = (-1213.7148F);
      floatArray0[6] = (-1093.2906F);
      floatArray0[7] = (-2039.44F);
      floatArray0[8] = 1703.3104F;
      ArrayUtils.indexOf(floatArray0, 2948.4348F, (-1294));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1294);
      intArray0[2] = (-1294);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1294);
      ArrayUtils.shift(intArray0, 6, (-1294), 1885);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1294);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      Integer integer0 = ArrayUtils.get(integerArray0, (-2146053215));
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2045);
      ArrayUtils.reverse(shortArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-2045);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short) (-2045);
      intArray0[3] = (int) (short) (-2045);
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short) (-2045);
      doubleArray0[2] = (double) (-2045);
      doubleArray0[3] = (double) 1;
      ArrayUtils.reverse(doubleArray0, (-2801), (-783));
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2045, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)104);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-988.6708F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-392.66193F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1185.0F;
      floatArray0[7] = (-1.0F);
      ArrayUtils.indexesOf(floatArray0, 0.0F);
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.toPrimitive(byteArray0, (byte) (-10));
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-10);
      intArray0[1] = 1;
      intArray0[2] = (int) (byte) (-10);
      intArray0[3] = (int) (byte) (-10);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = (int) (byte) (-10);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      Integer integer0 = new Integer((-1833));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = '%';
      ArrayUtils.isEmpty(charArray0);
      ArrayUtils.nullToEmpty((float[]) null);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 50);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1762));
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      int int0 = (-1532);
      Integer integer0 = new Integer((-1532));
      Object object1 = ArrayUtils.get(objectArray1, (-1532), (Object) integer0);
      objectArray0[1] = object1;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1532));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      ArrayUtils.shift((boolean[]) null, 91, 0, 1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3631);
      floatArray0[1] = (float) (-3976);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3631.0F), (-3631.0F), (-3976.0F), 0.0F, 0.0F, 91.0F, (-3976.0F), 0.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2754.285F));
      assertArrayEquals(new float[] {(-2754.285F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (int) (byte)104);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-707));
      assertArrayEquals(new short[] {(short) (-707)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1238.249F;
      ArrayUtils.addFirst(floatArray0, 0.0F);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-519);
      shortArray0[1] = (short) (-393);
      ArrayUtils.add(shortArray0, (short) (-519));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 848);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 848, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      ArrayUtils.removeElements(byteArray0, byteArray0);
      ArrayUtils.toObject((double[]) null);
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.swap((long[]) null, (int) (byte)0, (-1), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      ArrayUtils.toStringArray((Object[]) floatArray0, "ke_hFOpap");
      long[] longArray0 = new long[1];
      longArray0[0] = (-176L);
      ArrayUtils.swap(longArray0, 2871, 2871, 2871);
      assertArrayEquals(new long[] {(-176L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      ArrayUtils.toPrimitive(shortArray0, (short)10);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(4062.12025870372);
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double1;
      Integer integer0 = new Integer((short) (-1));
      Integer integer1 = new Integer(short0);
      Integer integer2 = new Integer((short)10);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      ArrayUtils.subarray(integerArray0, 1436, (int) short0);
      ArrayUtils.swap((long[]) null, (-325), 2026);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-1));
      ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 1, (-1));
      Integer integer1 = new Integer(1);
      ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) integer1, 1606);
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, 1606, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-172));
      Integer integer1 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt(34);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      
      Integer integer2 = new Integer((byte)0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.toObject((double[]) null);
      ArrayUtils.swap((Object[]) null, 0, (-1105));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      integerArray0[2] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-3662), 34);
      assertEquals(3, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      long[] longArray0 = new long[6];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-758), (-1));
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      ArrayUtils.removeElements((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 584.41469;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)50);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 57);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)50, (byte) (-1), (byte)0, (byte) (-6), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-12), (-1));
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, 1987, 1987, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-6);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), (-1));
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      ArrayUtils.subarray(integerArray0, 2138, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.swap(longArray0, 2086, (-1283));
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      float float0 = 1962.5662F;
      floatArray0[2] = 1962.5662F;
      ArrayUtils.indexesOf(floatArray0, 102.5675F);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 2091);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int int0 = 32;
      int int1 = 2693;
      ArrayUtils.subarray(longArray0, 32, 2693);
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '\\';
      charArray0[2] = 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 14, '=');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-977);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-894);
      intArray0[5] = 865;
      intArray0[6] = 2382;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-3111), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3111, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2427.4321F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1537.0F);
      floatArray0[4] = (-3180.0F);
      floatArray0[5] = 2948.4348F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 554.89F;
      ArrayUtils.removeAllOccurences(floatArray0, 2427.4321F);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2948.4348F;
      ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1573));
      ArrayUtils.indexOf((double[]) null, (-454.0), 3);
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.valueOf("<:_rj}+nQ/!'[J");
      Boolean boolean1 = Boolean.TRUE;
      ArrayUtils.toPrimitive((Boolean[]) null);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.toObject((boolean[]) null);
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-1306L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (Integer) (-1));
      boolean boolean0 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((-1751));
      Integer integer1 = new Integer((-297));
      ArrayUtils.get((Integer[]) null, (-1751), integer1);
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer1);
      Boolean boolean0 = new Boolean(true);
      Boolean.valueOf((String) null);
      Boolean boolean1 = Boolean.TRUE;
      ArrayUtils.toPrimitive((Boolean[]) null);
      ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.lastIndexOf((boolean[]) null, false, 46);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 6);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, (Object) (-1), (-1));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("", 1);
      ArrayUtils.removeElement(integerArray0, (Object) integer0);
      Integer integer1 = new Integer((-1751));
      Integer integer2 = ArrayUtils.get(integerArray0, (-1751), integer1);
      ArrayUtils.addFirst(integerArray0, integer2);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<:_rj}+nQ/!'[J");
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      booleanArray0[2] = boolean2;
      ArrayUtils.toPrimitive(booleanArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1751);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1751);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-1751);
      longArray0[5] = (long) 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        mockRandom0.ints((-398L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }
}
