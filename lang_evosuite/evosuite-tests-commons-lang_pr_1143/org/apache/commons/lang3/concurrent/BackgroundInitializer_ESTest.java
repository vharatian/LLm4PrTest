/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:09:33 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask.getPool();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable1);
      callableBackgroundInitializer0.start();
      Delayed delayed0 = callableBackgroundInitializer0.get();
      assertNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable1);
      Callable<Object> callable2 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable2);
      callableBackgroundInitializer1.isStarted();
      Callable<Integer> callable3 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Integer>(callable3, forkJoinPool0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer2.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread.reset();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 40);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(40);
      Object object0 = new Object();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.schedule(callable0, 0L, timeUnit1);
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      scheduledThreadPoolExecutor0.setKeepAliveTime(0L, timeUnit2);
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(40, 40, 40, timeUnit0, priorityBlockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
      multiBackgroundInitializer0.setExternalExecutor(threadPoolExecutor0);
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.initialize();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable1);
      Callable<Delayed> callable2 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Delayed>(callable2);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.start();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, (ExecutorService) null);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("v", callableBackgroundInitializer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(21);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();
      assertSame(executorService0, forkJoinPool0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      multiBackgroundInitializer0.addInitializer("kN,rB9", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread.reset();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 40);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(40);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.schedule(callable0, 0L, timeUnit1);
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      scheduledThreadPoolExecutor0.setKeepAliveTime(0L, timeUnit2);
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(40, 40, 40, timeUnit0, priorityBlockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
      multiBackgroundInitializer0.setExternalExecutor(threadPoolExecutor0);
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.initialize();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable1);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      callableBackgroundInitializer0.start();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable1);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.start();
      Callable<Integer> callable2 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable2, forkJoinPool0);
      callableBackgroundInitializer1.getTaskCount();
      Integer integer0 = callableBackgroundInitializer1.initialize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Callable<ForkJoinTask<Object>> callable0 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable0);
      callableBackgroundInitializer0.start();
      Future<ForkJoinTask<Object>> future0 = callableBackgroundInitializer0.getFuture();
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getExternalExecutor();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool.commonPool();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null);
      ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }
}
