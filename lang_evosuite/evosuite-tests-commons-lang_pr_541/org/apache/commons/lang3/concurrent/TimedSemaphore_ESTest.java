/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 11:07:27 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.TimedSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimedSemaphore_ESTest extends TimedSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1242L, timeUnit0, 603);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getUnit();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getLimit();
      timedSemaphore0.getAcquireCount();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(603, threadFactory0, threadPoolExecutor_AbortPolicy0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(scheduledThreadPoolExecutor0, 9223372036854775807L, timeUnit1, (-2084));
      timedSemaphore1.tryAcquire();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-619));
      timedSemaphore0.getLimit();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.setLimit(659);
      timedSemaphore0.getUnit();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.endOfPeriod();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(953L, timeUnit0, 0);
      timedSemaphore0.shutdown();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getLimit();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.getLimit();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@652206b9 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@6d2fa7dc[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1091L, timeUnit0, 2330);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.shutdown();
      timedSemaphore0.isShutdown();
      timedSemaphore0.endOfPeriod();
      int int0 = 0;
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1242L, timeUnit0, 603);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.isShutdown();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(601);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@4cc4bd0e rejected from java.util.concurrent.ScheduledThreadPoolExecutor@148f3d65[Shutting down, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 1662L, timeUnit0, (-3086));
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getUnit();
      timedSemaphore0.startTimer();
      timedSemaphore0.getUnit();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.shutdown();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1489, threadPoolExecutor_AbortPolicy0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1489, timeUnit0, (-2084));
      timedSemaphore0.getLastAcquiresPerPeriod();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1274, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.isShutdown();
      MockThread mockThread0 = new MockThread((Runnable) null, "io");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      MockThread.dumpStack();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 0L, 1274, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1274, timeUnit1, 1274);
      timedSemaphore0.shutdown();
      timedSemaphore0.getAverageCallsPerPeriod();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-619));
      timedSemaphore0.acquire();
      assertEquals(1, timedSemaphore0.getAcquireCount());
      
      int int0 = TimedSemaphore.NO_LIMIT;
      timedSemaphore0.getAverageCallsPerPeriod();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1091L, timeUnit0, 2299);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.tryAcquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1091L, timeUnit0, 2299);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.tryAcquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(16, threadPoolExecutor_DiscardPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 16, timeUnit0, 1540);
      timedSemaphore0.startTimer();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "HQKw#|)");
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "", 1540);
      scheduledThreadPoolExecutor0.submit((Runnable) mockThread3, (Object) mockThread0);
      timedSemaphore0.getUnit();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getLimit();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.tryAcquire();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2292L, timeUnit0, 1);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getUnit();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      int int0 = 0;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 0);
      timedSemaphore0.startTimer();
      int int1 = (-382);
      timedSemaphore0.setLimit((-382));
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@4053b63c rejected from java.util.concurrent.ScheduledThreadPoolExecutor@fed6945[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 1656);
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit((-2681));
      timedSemaphore0.setLimit(1214);
      timedSemaphore0.shutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.shutdown();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      int int0 = 1289;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 47L, timeUnit0, 1289);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, 1);
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(953L, timeUnit0, 24);
      timedSemaphore0.startTimer();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getUnit();
      timedSemaphore0.setLimit(24);
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.shutdown();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-619));
      timedSemaphore0.getAvailablePermits();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-619));
      timedSemaphore0.acquire();
      timedSemaphore0.getAvailablePermits();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-619));
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      int int0 = TimedSemaphore.NO_LIMIT;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(9223372036854775807L, timeUnit0, (-650));
      timedSemaphore0.startTimer();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getUnit();
      timedSemaphore0.setLimit((-650));
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.shutdown();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 3);
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(99L, timeUnit0, 0);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      int int0 = 215;
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(949L, timeUnit0, 0);
      timedSemaphore0.shutdown();
      timedSemaphore0.getPeriod();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(100L, timeUnit0, 0);
      timedSemaphore0.shutdown();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.getExecutorService();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@74f54c4c rejected from java.util.concurrent.ScheduledThreadPoolExecutor@6014ed94[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, (-1156L), timeUnit0, 722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((-1809L), timeUnit0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(949L, timeUnit0, 0);
      long long0 = timedSemaphore0.getPeriod();
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(949L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 559);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
