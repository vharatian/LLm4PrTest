/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 11:17:56 GMT 2025
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wKu4EM", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition((-1580));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1580), (-1580), (-1580));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("wKu4EM", parsePosition0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("wKu4EM", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(687);
      fastDateParser0.parse(".}\"T#^&:f,", parsePosition0);
      assertEquals("java.text.ParsePosition[index=687,errorIndex=687]", parsePosition0.toString());
      assertEquals(687, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser(" =]'U@T2Z='", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parseObject("vT#", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=3]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("HAQx&w1~n*", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'A' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("[+-]d{4}", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      fastDateParser0.parseObject("tD`OgNG&", parsePosition0);
      assertEquals(5, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=5]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0[`H1<;", 0, 0, 0, 0, 0, 0, 4277, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(842);
      Object object0 = fastDateParser0.parseObject("xeq!2d'(Jbsq", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4277, "");
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0[`H1<;", 0, 0, 0, 0, 0, 0, 4277, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("0[`H1<;", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("4Y", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(58);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("4Y", timeZone0, locale0, mockDate0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}))", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(2339);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}))", parsePosition0, (Calendar) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}))", timeZone0, locale0, mockDate0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}))", (ParsePosition) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("[+-a]d4}", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition((-1855));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("[+-a]d4}", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser(" =]'U@T2Z='", timeZone0, locale0, mockDate0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("ExceptionWasThrown", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" m8'U@T2Z='", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}))", timeZone0, locale0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0, mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("'1h7\"fWj{jZ", (TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "04|_|?", 0, 0, 0, 0, 0, 0, 4277, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1);
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("rrpwZkf!goC*7!", simpleTimeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'r' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0[`H1<;", 0, 0, 0, 0, 0, 0, 4277, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(842);
      boolean boolean0 = fastDateParser0.parse("vst", parsePosition0, (Calendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(1, 0, 1, 0, 0, 1);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("'_b'6ux(:pQfR L<|v", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser(" =]'U@T2Z='", timeZone0, locale0, mockDate0);
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$2");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"org.apache.commons.lang3.time.FastDateParser$2
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1565, 0);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "");
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wKu4EM", timeZone0, locale0, mockDate0);
      try { 
        fastDateParser0.parseObject("wKu4EM");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: wKu4EM
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("u", timeZone0, locale0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      fastDateParser0.parse("u", parsePosition0);
      assertEquals(10, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=10,errorIndex=10]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("B", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'B' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("$ z1V$r@", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Expected exception %s was not thrown.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'x' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(")%_1kv,^r\"H#!5gB'", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'v' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("<H!XGt*z=A", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("!%9(\r>R3N$U", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'R' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("G1q*@|y|V49,\"\"*C", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("|upk::xNMQ<R{", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'p' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone("us/mountain");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("us/mountain", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'o' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("universal", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\nUnparseable date: \"", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'l' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("k%", timeZone0, locale0, mockDate0);
      try { 
        fastDateParser0.parseObject(" =]'U@T2Z='");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date:  =]'U@T2Z='
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("1jq^!4v", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'j' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$StrategyParser");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Kg'V}8+u", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'g' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("wet", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'e' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("&cA5D", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'c' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("b]Fy\"V", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'b' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("K>1su$^V8Ay3]=", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'V' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("@]^U\"6_VuAw%m<P@pP", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'U' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("-yRPO!=SfP]?", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'R' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("&QDF-%=O&", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'Q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("!SO0,N", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'O' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("&wNK]`:Ul2Ll", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'N' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("%JeG(MgB.M", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'J' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Illegal range. Equal from and to will produce an empty range.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'I' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("*1F3hWs0w/Ps6", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'P' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("^D$M7]L#n(F!M*WV", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'L' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("[+-a]d4}", timeZone0, locale0, mockDate0);
      try { 
        fastDateParser0.parseObject("[+-a]d4}");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: [+-a]d4}
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0[`H1<;", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      Date date0 = fastDateParser0.parse("0[`H1<;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 0);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("", simpleTimeZone0, locale1, mockDate0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.FRENCH;
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("", timeZone0, locale0, mockDate0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0[`H1<;", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag("");
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0, mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("0[`H1<;", timeZone0, locale0, mockDate0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" m8'U@T2Z='", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(" m8'U@T2Z='");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("[+-]d{4}", timeZone0, locale0, mockDate0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("'&Q%=O&,", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("*{wEE=i)OxQpDc1i.V", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'i' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("_f(@*f/kb;fyw1XL[Rg", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'f' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("wKu4EM", timeZone0, locale0, mockDate0);
      try { 
        fastDateParser0.parseObject("o");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("X8h", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("it", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" m8'U@T2Z='", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(45);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(" m8'U@T2Z='", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockDate mockDate0 = new MockDate();
      FastDateParser fastDateParser0 = new FastDateParser("[-]d{4}", timeZone0, locale0, mockDate0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("  G", timeZone0, locale0);
      try { 
        fastDateParser0.parse("  G");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date:   G
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("s9-a]d4}", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("s9-a]d4}", timeZone0, locale1, (Date) null);
      fastDateParser1.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      fastDateParser1.parse("8P(j!9X~m$(Dgb", parsePosition0, (Calendar) mockGregorianCalendar0);
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale1);
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "R)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", e);
      }
  }
}
